
HDC1080.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800520c  0800520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b4  080052b4  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080052b4  080052b4  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080052b4  080052b4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b4  080052b4  000062b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080052bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08005318  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08005318  00007238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007042  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fb  00000000  00000000  0000e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d5  00000000  00000000  0000ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013695  00000000  00000000  0001054d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a607  00000000  00000000  00023be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074eca  00000000  00000000  0002e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a30b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002170  00000000  00000000  000a30f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000a5268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051f4 	.word	0x080051f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080051f4 	.word	0x080051f4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_d2uiz>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	2200      	movs	r2, #0
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <__aeabi_d2uiz+0x38>)
 800023a:	0004      	movs	r4, r0
 800023c:	000d      	movs	r5, r1
 800023e:	f001 fb87 	bl	8001950 <__aeabi_dcmpge>
 8000242:	2800      	cmp	r0, #0
 8000244:	d104      	bne.n	8000250 <__aeabi_d2uiz+0x1c>
 8000246:	0020      	movs	r0, r4
 8000248:	0029      	movs	r1, r5
 800024a:	f001 fa19 	bl	8001680 <__aeabi_d2iz>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <__aeabi_d2uiz+0x38>)
 8000252:	2200      	movs	r2, #0
 8000254:	0020      	movs	r0, r4
 8000256:	0029      	movs	r1, r5
 8000258:	f000 fe08 	bl	8000e6c <__aeabi_dsub>
 800025c:	f001 fa10 	bl	8001680 <__aeabi_d2iz>
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	061b      	lsls	r3, r3, #24
 8000264:	469c      	mov	ip, r3
 8000266:	4460      	add	r0, ip
 8000268:	e7f1      	b.n	800024e <__aeabi_d2uiz+0x1a>
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	41e00000 	.word	0x41e00000

08000270 <__aeabi_ddiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46de      	mov	lr, fp
 8000274:	4645      	mov	r5, r8
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	b087      	sub	sp, #28
 800027e:	9200      	str	r2, [sp, #0]
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	030b      	lsls	r3, r1, #12
 8000284:	0b1b      	lsrs	r3, r3, #12
 8000286:	469b      	mov	fp, r3
 8000288:	0fca      	lsrs	r2, r1, #31
 800028a:	004b      	lsls	r3, r1, #1
 800028c:	0004      	movs	r4, r0
 800028e:	4680      	mov	r8, r0
 8000290:	0d5b      	lsrs	r3, r3, #21
 8000292:	9202      	str	r2, [sp, #8]
 8000294:	d100      	bne.n	8000298 <__aeabi_ddiv+0x28>
 8000296:	e098      	b.n	80003ca <__aeabi_ddiv+0x15a>
 8000298:	4a7c      	ldr	r2, [pc, #496]	@ (800048c <__aeabi_ddiv+0x21c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d037      	beq.n	800030e <__aeabi_ddiv+0x9e>
 800029e:	4659      	mov	r1, fp
 80002a0:	0f42      	lsrs	r2, r0, #29
 80002a2:	00c9      	lsls	r1, r1, #3
 80002a4:	430a      	orrs	r2, r1
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	4311      	orrs	r1, r2
 80002ac:	00c2      	lsls	r2, r0, #3
 80002ae:	4690      	mov	r8, r2
 80002b0:	4a77      	ldr	r2, [pc, #476]	@ (8000490 <__aeabi_ddiv+0x220>)
 80002b2:	4689      	mov	r9, r1
 80002b4:	4692      	mov	sl, r2
 80002b6:	449a      	add	sl, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	2400      	movs	r4, #0
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	9e00      	ldr	r6, [sp, #0]
 80002c0:	9f01      	ldr	r7, [sp, #4]
 80002c2:	033b      	lsls	r3, r7, #12
 80002c4:	0b1b      	lsrs	r3, r3, #12
 80002c6:	469b      	mov	fp, r3
 80002c8:	007b      	lsls	r3, r7, #1
 80002ca:	0030      	movs	r0, r6
 80002cc:	0d5b      	lsrs	r3, r3, #21
 80002ce:	0ffd      	lsrs	r5, r7, #31
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d059      	beq.n	8000388 <__aeabi_ddiv+0x118>
 80002d4:	4a6d      	ldr	r2, [pc, #436]	@ (800048c <__aeabi_ddiv+0x21c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d048      	beq.n	800036c <__aeabi_ddiv+0xfc>
 80002da:	4659      	mov	r1, fp
 80002dc:	0f72      	lsrs	r2, r6, #29
 80002de:	00c9      	lsls	r1, r1, #3
 80002e0:	430a      	orrs	r2, r1
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	0409      	lsls	r1, r1, #16
 80002e6:	4311      	orrs	r1, r2
 80002e8:	468b      	mov	fp, r1
 80002ea:	4969      	ldr	r1, [pc, #420]	@ (8000490 <__aeabi_ddiv+0x220>)
 80002ec:	00f2      	lsls	r2, r6, #3
 80002ee:	468c      	mov	ip, r1
 80002f0:	4651      	mov	r1, sl
 80002f2:	4463      	add	r3, ip
 80002f4:	1acb      	subs	r3, r1, r3
 80002f6:	469a      	mov	sl, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	9e02      	ldr	r6, [sp, #8]
 80002fc:	406e      	eors	r6, r5
 80002fe:	b2f6      	uxtb	r6, r6
 8000300:	2c0f      	cmp	r4, #15
 8000302:	d900      	bls.n	8000306 <__aeabi_ddiv+0x96>
 8000304:	e0ce      	b.n	80004a4 <__aeabi_ddiv+0x234>
 8000306:	4b63      	ldr	r3, [pc, #396]	@ (8000494 <__aeabi_ddiv+0x224>)
 8000308:	00a4      	lsls	r4, r4, #2
 800030a:	591b      	ldr	r3, [r3, r4]
 800030c:	469f      	mov	pc, r3
 800030e:	465a      	mov	r2, fp
 8000310:	4302      	orrs	r2, r0
 8000312:	4691      	mov	r9, r2
 8000314:	d000      	beq.n	8000318 <__aeabi_ddiv+0xa8>
 8000316:	e090      	b.n	800043a <__aeabi_ddiv+0x1ca>
 8000318:	469a      	mov	sl, r3
 800031a:	2302      	movs	r3, #2
 800031c:	4690      	mov	r8, r2
 800031e:	2408      	movs	r4, #8
 8000320:	9303      	str	r3, [sp, #12]
 8000322:	e7cc      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000324:	46cb      	mov	fp, r9
 8000326:	4642      	mov	r2, r8
 8000328:	9d02      	ldr	r5, [sp, #8]
 800032a:	9903      	ldr	r1, [sp, #12]
 800032c:	2902      	cmp	r1, #2
 800032e:	d100      	bne.n	8000332 <__aeabi_ddiv+0xc2>
 8000330:	e1de      	b.n	80006f0 <__aeabi_ddiv+0x480>
 8000332:	2903      	cmp	r1, #3
 8000334:	d100      	bne.n	8000338 <__aeabi_ddiv+0xc8>
 8000336:	e08d      	b.n	8000454 <__aeabi_ddiv+0x1e4>
 8000338:	2901      	cmp	r1, #1
 800033a:	d000      	beq.n	800033e <__aeabi_ddiv+0xce>
 800033c:	e179      	b.n	8000632 <__aeabi_ddiv+0x3c2>
 800033e:	002e      	movs	r6, r5
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	2400      	movs	r4, #0
 8000346:	4690      	mov	r8, r2
 8000348:	051b      	lsls	r3, r3, #20
 800034a:	4323      	orrs	r3, r4
 800034c:	07f6      	lsls	r6, r6, #31
 800034e:	4333      	orrs	r3, r6
 8000350:	4640      	mov	r0, r8
 8000352:	0019      	movs	r1, r3
 8000354:	b007      	add	sp, #28
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	46bb      	mov	fp, r7
 800035a:	46b2      	mov	sl, r6
 800035c:	46a9      	mov	r9, r5
 800035e:	46a0      	mov	r8, r4
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000362:	2200      	movs	r2, #0
 8000364:	2400      	movs	r4, #0
 8000366:	4690      	mov	r8, r2
 8000368:	4b48      	ldr	r3, [pc, #288]	@ (800048c <__aeabi_ddiv+0x21c>)
 800036a:	e7ed      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800036c:	465a      	mov	r2, fp
 800036e:	9b00      	ldr	r3, [sp, #0]
 8000370:	431a      	orrs	r2, r3
 8000372:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <__aeabi_ddiv+0x228>)
 8000374:	469c      	mov	ip, r3
 8000376:	44e2      	add	sl, ip
 8000378:	2a00      	cmp	r2, #0
 800037a:	d159      	bne.n	8000430 <__aeabi_ddiv+0x1c0>
 800037c:	2302      	movs	r3, #2
 800037e:	431c      	orrs	r4, r3
 8000380:	2300      	movs	r3, #0
 8000382:	2102      	movs	r1, #2
 8000384:	469b      	mov	fp, r3
 8000386:	e7b8      	b.n	80002fa <__aeabi_ddiv+0x8a>
 8000388:	465a      	mov	r2, fp
 800038a:	9b00      	ldr	r3, [sp, #0]
 800038c:	431a      	orrs	r2, r3
 800038e:	d049      	beq.n	8000424 <__aeabi_ddiv+0x1b4>
 8000390:	465b      	mov	r3, fp
 8000392:	2b00      	cmp	r3, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_ddiv+0x128>
 8000396:	e19c      	b.n	80006d2 <__aeabi_ddiv+0x462>
 8000398:	4658      	mov	r0, fp
 800039a:	f001 fae3 	bl	8001964 <__clzsi2>
 800039e:	0002      	movs	r2, r0
 80003a0:	0003      	movs	r3, r0
 80003a2:	3a0b      	subs	r2, #11
 80003a4:	271d      	movs	r7, #29
 80003a6:	9e00      	ldr	r6, [sp, #0]
 80003a8:	1aba      	subs	r2, r7, r2
 80003aa:	0019      	movs	r1, r3
 80003ac:	4658      	mov	r0, fp
 80003ae:	40d6      	lsrs	r6, r2
 80003b0:	3908      	subs	r1, #8
 80003b2:	4088      	lsls	r0, r1
 80003b4:	0032      	movs	r2, r6
 80003b6:	4302      	orrs	r2, r0
 80003b8:	4693      	mov	fp, r2
 80003ba:	9a00      	ldr	r2, [sp, #0]
 80003bc:	408a      	lsls	r2, r1
 80003be:	4937      	ldr	r1, [pc, #220]	@ (800049c <__aeabi_ddiv+0x22c>)
 80003c0:	4453      	add	r3, sl
 80003c2:	468a      	mov	sl, r1
 80003c4:	2100      	movs	r1, #0
 80003c6:	449a      	add	sl, r3
 80003c8:	e797      	b.n	80002fa <__aeabi_ddiv+0x8a>
 80003ca:	465b      	mov	r3, fp
 80003cc:	4303      	orrs	r3, r0
 80003ce:	4699      	mov	r9, r3
 80003d0:	d021      	beq.n	8000416 <__aeabi_ddiv+0x1a6>
 80003d2:	465b      	mov	r3, fp
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d100      	bne.n	80003da <__aeabi_ddiv+0x16a>
 80003d8:	e169      	b.n	80006ae <__aeabi_ddiv+0x43e>
 80003da:	4658      	mov	r0, fp
 80003dc:	f001 fac2 	bl	8001964 <__clzsi2>
 80003e0:	230b      	movs	r3, #11
 80003e2:	425b      	negs	r3, r3
 80003e4:	469c      	mov	ip, r3
 80003e6:	0002      	movs	r2, r0
 80003e8:	4484      	add	ip, r0
 80003ea:	4666      	mov	r6, ip
 80003ec:	231d      	movs	r3, #29
 80003ee:	1b9b      	subs	r3, r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	0011      	movs	r1, r2
 80003f4:	4658      	mov	r0, fp
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	3908      	subs	r1, #8
 80003fa:	4088      	lsls	r0, r1
 80003fc:	0033      	movs	r3, r6
 80003fe:	4303      	orrs	r3, r0
 8000400:	4699      	mov	r9, r3
 8000402:	0023      	movs	r3, r4
 8000404:	408b      	lsls	r3, r1
 8000406:	4698      	mov	r8, r3
 8000408:	4b25      	ldr	r3, [pc, #148]	@ (80004a0 <__aeabi_ddiv+0x230>)
 800040a:	2400      	movs	r4, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	469a      	mov	sl, r3
 8000410:	2300      	movs	r3, #0
 8000412:	9303      	str	r3, [sp, #12]
 8000414:	e753      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000416:	2300      	movs	r3, #0
 8000418:	4698      	mov	r8, r3
 800041a:	469a      	mov	sl, r3
 800041c:	3301      	adds	r3, #1
 800041e:	2404      	movs	r4, #4
 8000420:	9303      	str	r3, [sp, #12]
 8000422:	e74c      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000424:	2301      	movs	r3, #1
 8000426:	431c      	orrs	r4, r3
 8000428:	2300      	movs	r3, #0
 800042a:	2101      	movs	r1, #1
 800042c:	469b      	mov	fp, r3
 800042e:	e764      	b.n	80002fa <__aeabi_ddiv+0x8a>
 8000430:	2303      	movs	r3, #3
 8000432:	0032      	movs	r2, r6
 8000434:	2103      	movs	r1, #3
 8000436:	431c      	orrs	r4, r3
 8000438:	e75f      	b.n	80002fa <__aeabi_ddiv+0x8a>
 800043a:	469a      	mov	sl, r3
 800043c:	2303      	movs	r3, #3
 800043e:	46d9      	mov	r9, fp
 8000440:	240c      	movs	r4, #12
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	e73b      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000446:	2300      	movs	r3, #0
 8000448:	2480      	movs	r4, #128	@ 0x80
 800044a:	4698      	mov	r8, r3
 800044c:	2600      	movs	r6, #0
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000450:	0324      	lsls	r4, r4, #12
 8000452:	e779      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000454:	2480      	movs	r4, #128	@ 0x80
 8000456:	465b      	mov	r3, fp
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	431c      	orrs	r4, r3
 800045c:	0324      	lsls	r4, r4, #12
 800045e:	002e      	movs	r6, r5
 8000460:	4690      	mov	r8, r2
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000464:	0b24      	lsrs	r4, r4, #12
 8000466:	e76f      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000468:	2480      	movs	r4, #128	@ 0x80
 800046a:	464b      	mov	r3, r9
 800046c:	0324      	lsls	r4, r4, #12
 800046e:	4223      	tst	r3, r4
 8000470:	d002      	beq.n	8000478 <__aeabi_ddiv+0x208>
 8000472:	465b      	mov	r3, fp
 8000474:	4223      	tst	r3, r4
 8000476:	d0f0      	beq.n	800045a <__aeabi_ddiv+0x1ea>
 8000478:	2480      	movs	r4, #128	@ 0x80
 800047a:	464b      	mov	r3, r9
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	431c      	orrs	r4, r3
 8000480:	0324      	lsls	r4, r4, #12
 8000482:	9e02      	ldr	r6, [sp, #8]
 8000484:	4b01      	ldr	r3, [pc, #4]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000486:	0b24      	lsrs	r4, r4, #12
 8000488:	e75e      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	000007ff 	.word	0x000007ff
 8000490:	fffffc01 	.word	0xfffffc01
 8000494:	08005228 	.word	0x08005228
 8000498:	fffff801 	.word	0xfffff801
 800049c:	000003f3 	.word	0x000003f3
 80004a0:	fffffc0d 	.word	0xfffffc0d
 80004a4:	45cb      	cmp	fp, r9
 80004a6:	d200      	bcs.n	80004aa <__aeabi_ddiv+0x23a>
 80004a8:	e0f8      	b.n	800069c <__aeabi_ddiv+0x42c>
 80004aa:	d100      	bne.n	80004ae <__aeabi_ddiv+0x23e>
 80004ac:	e0f3      	b.n	8000696 <__aeabi_ddiv+0x426>
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	469c      	mov	ip, r3
 80004b4:	4644      	mov	r4, r8
 80004b6:	4648      	mov	r0, r9
 80004b8:	2500      	movs	r5, #0
 80004ba:	44e2      	add	sl, ip
 80004bc:	465b      	mov	r3, fp
 80004be:	0e17      	lsrs	r7, r2, #24
 80004c0:	021b      	lsls	r3, r3, #8
 80004c2:	431f      	orrs	r7, r3
 80004c4:	0c19      	lsrs	r1, r3, #16
 80004c6:	043b      	lsls	r3, r7, #16
 80004c8:	0212      	lsls	r2, r2, #8
 80004ca:	9700      	str	r7, [sp, #0]
 80004cc:	0c1f      	lsrs	r7, r3, #16
 80004ce:	4691      	mov	r9, r2
 80004d0:	9102      	str	r1, [sp, #8]
 80004d2:	9703      	str	r7, [sp, #12]
 80004d4:	f7ff fea8 	bl	8000228 <__aeabi_uidivmod>
 80004d8:	0002      	movs	r2, r0
 80004da:	437a      	muls	r2, r7
 80004dc:	040b      	lsls	r3, r1, #16
 80004de:	0c21      	lsrs	r1, r4, #16
 80004e0:	4680      	mov	r8, r0
 80004e2:	4319      	orrs	r1, r3
 80004e4:	428a      	cmp	r2, r1
 80004e6:	d909      	bls.n	80004fc <__aeabi_ddiv+0x28c>
 80004e8:	9f00      	ldr	r7, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	46bc      	mov	ip, r7
 80004ee:	425b      	negs	r3, r3
 80004f0:	4461      	add	r1, ip
 80004f2:	469c      	mov	ip, r3
 80004f4:	44e0      	add	r8, ip
 80004f6:	428f      	cmp	r7, r1
 80004f8:	d800      	bhi.n	80004fc <__aeabi_ddiv+0x28c>
 80004fa:	e15c      	b.n	80007b6 <__aeabi_ddiv+0x546>
 80004fc:	1a88      	subs	r0, r1, r2
 80004fe:	9902      	ldr	r1, [sp, #8]
 8000500:	f7ff fe92 	bl	8000228 <__aeabi_uidivmod>
 8000504:	9a03      	ldr	r2, [sp, #12]
 8000506:	0424      	lsls	r4, r4, #16
 8000508:	4342      	muls	r2, r0
 800050a:	0409      	lsls	r1, r1, #16
 800050c:	0c24      	lsrs	r4, r4, #16
 800050e:	0003      	movs	r3, r0
 8000510:	430c      	orrs	r4, r1
 8000512:	42a2      	cmp	r2, r4
 8000514:	d906      	bls.n	8000524 <__aeabi_ddiv+0x2b4>
 8000516:	9900      	ldr	r1, [sp, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	468c      	mov	ip, r1
 800051c:	4464      	add	r4, ip
 800051e:	42a1      	cmp	r1, r4
 8000520:	d800      	bhi.n	8000524 <__aeabi_ddiv+0x2b4>
 8000522:	e142      	b.n	80007aa <__aeabi_ddiv+0x53a>
 8000524:	1aa0      	subs	r0, r4, r2
 8000526:	4642      	mov	r2, r8
 8000528:	0412      	lsls	r2, r2, #16
 800052a:	431a      	orrs	r2, r3
 800052c:	4693      	mov	fp, r2
 800052e:	464b      	mov	r3, r9
 8000530:	4659      	mov	r1, fp
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	001f      	movs	r7, r3
 8000536:	9304      	str	r3, [sp, #16]
 8000538:	040b      	lsls	r3, r1, #16
 800053a:	4649      	mov	r1, r9
 800053c:	0409      	lsls	r1, r1, #16
 800053e:	0c09      	lsrs	r1, r1, #16
 8000540:	000c      	movs	r4, r1
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	435c      	muls	r4, r3
 8000546:	0c12      	lsrs	r2, r2, #16
 8000548:	437b      	muls	r3, r7
 800054a:	4688      	mov	r8, r1
 800054c:	4351      	muls	r1, r2
 800054e:	437a      	muls	r2, r7
 8000550:	0c27      	lsrs	r7, r4, #16
 8000552:	46bc      	mov	ip, r7
 8000554:	185b      	adds	r3, r3, r1
 8000556:	4463      	add	r3, ip
 8000558:	4299      	cmp	r1, r3
 800055a:	d903      	bls.n	8000564 <__aeabi_ddiv+0x2f4>
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0249      	lsls	r1, r1, #9
 8000560:	468c      	mov	ip, r1
 8000562:	4462      	add	r2, ip
 8000564:	0c19      	lsrs	r1, r3, #16
 8000566:	0424      	lsls	r4, r4, #16
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c24      	lsrs	r4, r4, #16
 800056c:	188a      	adds	r2, r1, r2
 800056e:	191c      	adds	r4, r3, r4
 8000570:	4290      	cmp	r0, r2
 8000572:	d302      	bcc.n	800057a <__aeabi_ddiv+0x30a>
 8000574:	d116      	bne.n	80005a4 <__aeabi_ddiv+0x334>
 8000576:	42a5      	cmp	r5, r4
 8000578:	d214      	bcs.n	80005a4 <__aeabi_ddiv+0x334>
 800057a:	465b      	mov	r3, fp
 800057c:	9f00      	ldr	r7, [sp, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	444d      	add	r5, r9
 8000582:	9305      	str	r3, [sp, #20]
 8000584:	454d      	cmp	r5, r9
 8000586:	419b      	sbcs	r3, r3
 8000588:	46bc      	mov	ip, r7
 800058a:	425b      	negs	r3, r3
 800058c:	4463      	add	r3, ip
 800058e:	18c0      	adds	r0, r0, r3
 8000590:	4287      	cmp	r7, r0
 8000592:	d300      	bcc.n	8000596 <__aeabi_ddiv+0x326>
 8000594:	e102      	b.n	800079c <__aeabi_ddiv+0x52c>
 8000596:	4282      	cmp	r2, r0
 8000598:	d900      	bls.n	800059c <__aeabi_ddiv+0x32c>
 800059a:	e129      	b.n	80007f0 <__aeabi_ddiv+0x580>
 800059c:	d100      	bne.n	80005a0 <__aeabi_ddiv+0x330>
 800059e:	e124      	b.n	80007ea <__aeabi_ddiv+0x57a>
 80005a0:	9b05      	ldr	r3, [sp, #20]
 80005a2:	469b      	mov	fp, r3
 80005a4:	1b2c      	subs	r4, r5, r4
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	41ad      	sbcs	r5, r5
 80005aa:	9b00      	ldr	r3, [sp, #0]
 80005ac:	1a80      	subs	r0, r0, r2
 80005ae:	426d      	negs	r5, r5
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	4283      	cmp	r3, r0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_ddiv+0x348>
 80005b6:	e10f      	b.n	80007d8 <__aeabi_ddiv+0x568>
 80005b8:	9902      	ldr	r1, [sp, #8]
 80005ba:	f7ff fe35 	bl	8000228 <__aeabi_uidivmod>
 80005be:	9a03      	ldr	r2, [sp, #12]
 80005c0:	040b      	lsls	r3, r1, #16
 80005c2:	4342      	muls	r2, r0
 80005c4:	0c21      	lsrs	r1, r4, #16
 80005c6:	0005      	movs	r5, r0
 80005c8:	4319      	orrs	r1, r3
 80005ca:	428a      	cmp	r2, r1
 80005cc:	d900      	bls.n	80005d0 <__aeabi_ddiv+0x360>
 80005ce:	e0cb      	b.n	8000768 <__aeabi_ddiv+0x4f8>
 80005d0:	1a88      	subs	r0, r1, r2
 80005d2:	9902      	ldr	r1, [sp, #8]
 80005d4:	f7ff fe28 	bl	8000228 <__aeabi_uidivmod>
 80005d8:	9a03      	ldr	r2, [sp, #12]
 80005da:	0424      	lsls	r4, r4, #16
 80005dc:	4342      	muls	r2, r0
 80005de:	0409      	lsls	r1, r1, #16
 80005e0:	0c24      	lsrs	r4, r4, #16
 80005e2:	0003      	movs	r3, r0
 80005e4:	430c      	orrs	r4, r1
 80005e6:	42a2      	cmp	r2, r4
 80005e8:	d900      	bls.n	80005ec <__aeabi_ddiv+0x37c>
 80005ea:	e0ca      	b.n	8000782 <__aeabi_ddiv+0x512>
 80005ec:	4641      	mov	r1, r8
 80005ee:	1aa4      	subs	r4, r4, r2
 80005f0:	042a      	lsls	r2, r5, #16
 80005f2:	431a      	orrs	r2, r3
 80005f4:	9f04      	ldr	r7, [sp, #16]
 80005f6:	0413      	lsls	r3, r2, #16
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	4359      	muls	r1, r3
 80005fc:	4640      	mov	r0, r8
 80005fe:	437b      	muls	r3, r7
 8000600:	469c      	mov	ip, r3
 8000602:	0c15      	lsrs	r5, r2, #16
 8000604:	4368      	muls	r0, r5
 8000606:	0c0b      	lsrs	r3, r1, #16
 8000608:	4484      	add	ip, r0
 800060a:	4463      	add	r3, ip
 800060c:	437d      	muls	r5, r7
 800060e:	4298      	cmp	r0, r3
 8000610:	d903      	bls.n	800061a <__aeabi_ddiv+0x3aa>
 8000612:	2080      	movs	r0, #128	@ 0x80
 8000614:	0240      	lsls	r0, r0, #9
 8000616:	4684      	mov	ip, r0
 8000618:	4465      	add	r5, ip
 800061a:	0c18      	lsrs	r0, r3, #16
 800061c:	0409      	lsls	r1, r1, #16
 800061e:	041b      	lsls	r3, r3, #16
 8000620:	0c09      	lsrs	r1, r1, #16
 8000622:	1940      	adds	r0, r0, r5
 8000624:	185b      	adds	r3, r3, r1
 8000626:	4284      	cmp	r4, r0
 8000628:	d327      	bcc.n	800067a <__aeabi_ddiv+0x40a>
 800062a:	d023      	beq.n	8000674 <__aeabi_ddiv+0x404>
 800062c:	2301      	movs	r3, #1
 800062e:	0035      	movs	r5, r6
 8000630:	431a      	orrs	r2, r3
 8000632:	4b94      	ldr	r3, [pc, #592]	@ (8000884 <__aeabi_ddiv+0x614>)
 8000634:	4453      	add	r3, sl
 8000636:	2b00      	cmp	r3, #0
 8000638:	dd60      	ble.n	80006fc <__aeabi_ddiv+0x48c>
 800063a:	0751      	lsls	r1, r2, #29
 800063c:	d000      	beq.n	8000640 <__aeabi_ddiv+0x3d0>
 800063e:	e086      	b.n	800074e <__aeabi_ddiv+0x4de>
 8000640:	002e      	movs	r6, r5
 8000642:	08d1      	lsrs	r1, r2, #3
 8000644:	465a      	mov	r2, fp
 8000646:	01d2      	lsls	r2, r2, #7
 8000648:	d506      	bpl.n	8000658 <__aeabi_ddiv+0x3e8>
 800064a:	465a      	mov	r2, fp
 800064c:	4b8e      	ldr	r3, [pc, #568]	@ (8000888 <__aeabi_ddiv+0x618>)
 800064e:	401a      	ands	r2, r3
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	4693      	mov	fp, r2
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4453      	add	r3, sl
 8000658:	4a8c      	ldr	r2, [pc, #560]	@ (800088c <__aeabi_ddiv+0x61c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	dd00      	ble.n	8000660 <__aeabi_ddiv+0x3f0>
 800065e:	e680      	b.n	8000362 <__aeabi_ddiv+0xf2>
 8000660:	465a      	mov	r2, fp
 8000662:	0752      	lsls	r2, r2, #29
 8000664:	430a      	orrs	r2, r1
 8000666:	4690      	mov	r8, r2
 8000668:	465a      	mov	r2, fp
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	0254      	lsls	r4, r2, #9
 800066e:	0b24      	lsrs	r4, r4, #12
 8000670:	0d5b      	lsrs	r3, r3, #21
 8000672:	e669      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000674:	0035      	movs	r5, r6
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0db      	beq.n	8000632 <__aeabi_ddiv+0x3c2>
 800067a:	9d00      	ldr	r5, [sp, #0]
 800067c:	1e51      	subs	r1, r2, #1
 800067e:	46ac      	mov	ip, r5
 8000680:	4464      	add	r4, ip
 8000682:	42ac      	cmp	r4, r5
 8000684:	d200      	bcs.n	8000688 <__aeabi_ddiv+0x418>
 8000686:	e09e      	b.n	80007c6 <__aeabi_ddiv+0x556>
 8000688:	4284      	cmp	r4, r0
 800068a:	d200      	bcs.n	800068e <__aeabi_ddiv+0x41e>
 800068c:	e0e1      	b.n	8000852 <__aeabi_ddiv+0x5e2>
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x422>
 8000690:	e0ee      	b.n	8000870 <__aeabi_ddiv+0x600>
 8000692:	000a      	movs	r2, r1
 8000694:	e7ca      	b.n	800062c <__aeabi_ddiv+0x3bc>
 8000696:	4542      	cmp	r2, r8
 8000698:	d900      	bls.n	800069c <__aeabi_ddiv+0x42c>
 800069a:	e708      	b.n	80004ae <__aeabi_ddiv+0x23e>
 800069c:	464b      	mov	r3, r9
 800069e:	07dc      	lsls	r4, r3, #31
 80006a0:	0858      	lsrs	r0, r3, #1
 80006a2:	4643      	mov	r3, r8
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	431c      	orrs	r4, r3
 80006a8:	4643      	mov	r3, r8
 80006aa:	07dd      	lsls	r5, r3, #31
 80006ac:	e706      	b.n	80004bc <__aeabi_ddiv+0x24c>
 80006ae:	f001 f959 	bl	8001964 <__clzsi2>
 80006b2:	2315      	movs	r3, #21
 80006b4:	469c      	mov	ip, r3
 80006b6:	4484      	add	ip, r0
 80006b8:	0002      	movs	r2, r0
 80006ba:	4663      	mov	r3, ip
 80006bc:	3220      	adds	r2, #32
 80006be:	2b1c      	cmp	r3, #28
 80006c0:	dc00      	bgt.n	80006c4 <__aeabi_ddiv+0x454>
 80006c2:	e692      	b.n	80003ea <__aeabi_ddiv+0x17a>
 80006c4:	0023      	movs	r3, r4
 80006c6:	3808      	subs	r0, #8
 80006c8:	4083      	lsls	r3, r0
 80006ca:	4699      	mov	r9, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4698      	mov	r8, r3
 80006d0:	e69a      	b.n	8000408 <__aeabi_ddiv+0x198>
 80006d2:	f001 f947 	bl	8001964 <__clzsi2>
 80006d6:	0002      	movs	r2, r0
 80006d8:	0003      	movs	r3, r0
 80006da:	3215      	adds	r2, #21
 80006dc:	3320      	adds	r3, #32
 80006de:	2a1c      	cmp	r2, #28
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_ddiv+0x474>
 80006e2:	e65f      	b.n	80003a4 <__aeabi_ddiv+0x134>
 80006e4:	9900      	ldr	r1, [sp, #0]
 80006e6:	3808      	subs	r0, #8
 80006e8:	4081      	lsls	r1, r0
 80006ea:	2200      	movs	r2, #0
 80006ec:	468b      	mov	fp, r1
 80006ee:	e666      	b.n	80003be <__aeabi_ddiv+0x14e>
 80006f0:	2200      	movs	r2, #0
 80006f2:	002e      	movs	r6, r5
 80006f4:	2400      	movs	r4, #0
 80006f6:	4690      	mov	r8, r2
 80006f8:	4b65      	ldr	r3, [pc, #404]	@ (8000890 <__aeabi_ddiv+0x620>)
 80006fa:	e625      	b.n	8000348 <__aeabi_ddiv+0xd8>
 80006fc:	002e      	movs	r6, r5
 80006fe:	2101      	movs	r1, #1
 8000700:	1ac9      	subs	r1, r1, r3
 8000702:	2938      	cmp	r1, #56	@ 0x38
 8000704:	dd00      	ble.n	8000708 <__aeabi_ddiv+0x498>
 8000706:	e61b      	b.n	8000340 <__aeabi_ddiv+0xd0>
 8000708:	291f      	cmp	r1, #31
 800070a:	dc7e      	bgt.n	800080a <__aeabi_ddiv+0x59a>
 800070c:	4861      	ldr	r0, [pc, #388]	@ (8000894 <__aeabi_ddiv+0x624>)
 800070e:	0014      	movs	r4, r2
 8000710:	4450      	add	r0, sl
 8000712:	465b      	mov	r3, fp
 8000714:	4082      	lsls	r2, r0
 8000716:	4083      	lsls	r3, r0
 8000718:	40cc      	lsrs	r4, r1
 800071a:	1e50      	subs	r0, r2, #1
 800071c:	4182      	sbcs	r2, r0
 800071e:	4323      	orrs	r3, r4
 8000720:	431a      	orrs	r2, r3
 8000722:	465b      	mov	r3, fp
 8000724:	40cb      	lsrs	r3, r1
 8000726:	0751      	lsls	r1, r2, #29
 8000728:	d009      	beq.n	800073e <__aeabi_ddiv+0x4ce>
 800072a:	210f      	movs	r1, #15
 800072c:	4011      	ands	r1, r2
 800072e:	2904      	cmp	r1, #4
 8000730:	d005      	beq.n	800073e <__aeabi_ddiv+0x4ce>
 8000732:	1d11      	adds	r1, r2, #4
 8000734:	4291      	cmp	r1, r2
 8000736:	4192      	sbcs	r2, r2
 8000738:	4252      	negs	r2, r2
 800073a:	189b      	adds	r3, r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	0219      	lsls	r1, r3, #8
 8000740:	d400      	bmi.n	8000744 <__aeabi_ddiv+0x4d4>
 8000742:	e09b      	b.n	800087c <__aeabi_ddiv+0x60c>
 8000744:	2200      	movs	r2, #0
 8000746:	2301      	movs	r3, #1
 8000748:	2400      	movs	r4, #0
 800074a:	4690      	mov	r8, r2
 800074c:	e5fc      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800074e:	210f      	movs	r1, #15
 8000750:	4011      	ands	r1, r2
 8000752:	2904      	cmp	r1, #4
 8000754:	d100      	bne.n	8000758 <__aeabi_ddiv+0x4e8>
 8000756:	e773      	b.n	8000640 <__aeabi_ddiv+0x3d0>
 8000758:	1d11      	adds	r1, r2, #4
 800075a:	4291      	cmp	r1, r2
 800075c:	4192      	sbcs	r2, r2
 800075e:	4252      	negs	r2, r2
 8000760:	002e      	movs	r6, r5
 8000762:	08c9      	lsrs	r1, r1, #3
 8000764:	4493      	add	fp, r2
 8000766:	e76d      	b.n	8000644 <__aeabi_ddiv+0x3d4>
 8000768:	9b00      	ldr	r3, [sp, #0]
 800076a:	3d01      	subs	r5, #1
 800076c:	469c      	mov	ip, r3
 800076e:	4461      	add	r1, ip
 8000770:	428b      	cmp	r3, r1
 8000772:	d900      	bls.n	8000776 <__aeabi_ddiv+0x506>
 8000774:	e72c      	b.n	80005d0 <__aeabi_ddiv+0x360>
 8000776:	428a      	cmp	r2, r1
 8000778:	d800      	bhi.n	800077c <__aeabi_ddiv+0x50c>
 800077a:	e729      	b.n	80005d0 <__aeabi_ddiv+0x360>
 800077c:	1e85      	subs	r5, r0, #2
 800077e:	4461      	add	r1, ip
 8000780:	e726      	b.n	80005d0 <__aeabi_ddiv+0x360>
 8000782:	9900      	ldr	r1, [sp, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	468c      	mov	ip, r1
 8000788:	4464      	add	r4, ip
 800078a:	42a1      	cmp	r1, r4
 800078c:	d900      	bls.n	8000790 <__aeabi_ddiv+0x520>
 800078e:	e72d      	b.n	80005ec <__aeabi_ddiv+0x37c>
 8000790:	42a2      	cmp	r2, r4
 8000792:	d800      	bhi.n	8000796 <__aeabi_ddiv+0x526>
 8000794:	e72a      	b.n	80005ec <__aeabi_ddiv+0x37c>
 8000796:	1e83      	subs	r3, r0, #2
 8000798:	4464      	add	r4, ip
 800079a:	e727      	b.n	80005ec <__aeabi_ddiv+0x37c>
 800079c:	4287      	cmp	r7, r0
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x532>
 80007a0:	e6fe      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007a2:	45a9      	cmp	r9, r5
 80007a4:	d900      	bls.n	80007a8 <__aeabi_ddiv+0x538>
 80007a6:	e6fb      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007a8:	e6f5      	b.n	8000596 <__aeabi_ddiv+0x326>
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d800      	bhi.n	80007b0 <__aeabi_ddiv+0x540>
 80007ae:	e6b9      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 80007b0:	1e83      	subs	r3, r0, #2
 80007b2:	4464      	add	r4, ip
 80007b4:	e6b6      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d800      	bhi.n	80007bc <__aeabi_ddiv+0x54c>
 80007ba:	e69f      	b.n	80004fc <__aeabi_ddiv+0x28c>
 80007bc:	46bc      	mov	ip, r7
 80007be:	1e83      	subs	r3, r0, #2
 80007c0:	4698      	mov	r8, r3
 80007c2:	4461      	add	r1, ip
 80007c4:	e69a      	b.n	80004fc <__aeabi_ddiv+0x28c>
 80007c6:	000a      	movs	r2, r1
 80007c8:	4284      	cmp	r4, r0
 80007ca:	d000      	beq.n	80007ce <__aeabi_ddiv+0x55e>
 80007cc:	e72e      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80007ce:	454b      	cmp	r3, r9
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x564>
 80007d2:	e72b      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80007d4:	0035      	movs	r5, r6
 80007d6:	e72c      	b.n	8000632 <__aeabi_ddiv+0x3c2>
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <__aeabi_ddiv+0x614>)
 80007da:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <__aeabi_ddiv+0x628>)
 80007dc:	4453      	add	r3, sl
 80007de:	4592      	cmp	sl, r2
 80007e0:	db43      	blt.n	800086a <__aeabi_ddiv+0x5fa>
 80007e2:	2201      	movs	r2, #1
 80007e4:	2100      	movs	r1, #0
 80007e6:	4493      	add	fp, r2
 80007e8:	e72c      	b.n	8000644 <__aeabi_ddiv+0x3d4>
 80007ea:	42ac      	cmp	r4, r5
 80007ec:	d800      	bhi.n	80007f0 <__aeabi_ddiv+0x580>
 80007ee:	e6d7      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007f0:	2302      	movs	r3, #2
 80007f2:	425b      	negs	r3, r3
 80007f4:	469c      	mov	ip, r3
 80007f6:	9900      	ldr	r1, [sp, #0]
 80007f8:	444d      	add	r5, r9
 80007fa:	454d      	cmp	r5, r9
 80007fc:	419b      	sbcs	r3, r3
 80007fe:	44e3      	add	fp, ip
 8000800:	468c      	mov	ip, r1
 8000802:	425b      	negs	r3, r3
 8000804:	4463      	add	r3, ip
 8000806:	18c0      	adds	r0, r0, r3
 8000808:	e6cc      	b.n	80005a4 <__aeabi_ddiv+0x334>
 800080a:	201f      	movs	r0, #31
 800080c:	4240      	negs	r0, r0
 800080e:	1ac3      	subs	r3, r0, r3
 8000810:	4658      	mov	r0, fp
 8000812:	40d8      	lsrs	r0, r3
 8000814:	2920      	cmp	r1, #32
 8000816:	d004      	beq.n	8000822 <__aeabi_ddiv+0x5b2>
 8000818:	4659      	mov	r1, fp
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <__aeabi_ddiv+0x62c>)
 800081c:	4453      	add	r3, sl
 800081e:	4099      	lsls	r1, r3
 8000820:	430a      	orrs	r2, r1
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	419a      	sbcs	r2, r3
 8000826:	2307      	movs	r3, #7
 8000828:	0019      	movs	r1, r3
 800082a:	4302      	orrs	r2, r0
 800082c:	2400      	movs	r4, #0
 800082e:	4011      	ands	r1, r2
 8000830:	4213      	tst	r3, r2
 8000832:	d009      	beq.n	8000848 <__aeabi_ddiv+0x5d8>
 8000834:	3308      	adds	r3, #8
 8000836:	4013      	ands	r3, r2
 8000838:	2b04      	cmp	r3, #4
 800083a:	d01d      	beq.n	8000878 <__aeabi_ddiv+0x608>
 800083c:	1d13      	adds	r3, r2, #4
 800083e:	4293      	cmp	r3, r2
 8000840:	4189      	sbcs	r1, r1
 8000842:	001a      	movs	r2, r3
 8000844:	4249      	negs	r1, r1
 8000846:	0749      	lsls	r1, r1, #29
 8000848:	08d2      	lsrs	r2, r2, #3
 800084a:	430a      	orrs	r2, r1
 800084c:	4690      	mov	r8, r2
 800084e:	2300      	movs	r3, #0
 8000850:	e57a      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000852:	4649      	mov	r1, r9
 8000854:	9f00      	ldr	r7, [sp, #0]
 8000856:	004d      	lsls	r5, r1, #1
 8000858:	454d      	cmp	r5, r9
 800085a:	4189      	sbcs	r1, r1
 800085c:	46bc      	mov	ip, r7
 800085e:	4249      	negs	r1, r1
 8000860:	4461      	add	r1, ip
 8000862:	46a9      	mov	r9, r5
 8000864:	3a02      	subs	r2, #2
 8000866:	1864      	adds	r4, r4, r1
 8000868:	e7ae      	b.n	80007c8 <__aeabi_ddiv+0x558>
 800086a:	2201      	movs	r2, #1
 800086c:	4252      	negs	r2, r2
 800086e:	e746      	b.n	80006fe <__aeabi_ddiv+0x48e>
 8000870:	4599      	cmp	r9, r3
 8000872:	d3ee      	bcc.n	8000852 <__aeabi_ddiv+0x5e2>
 8000874:	000a      	movs	r2, r1
 8000876:	e7aa      	b.n	80007ce <__aeabi_ddiv+0x55e>
 8000878:	2100      	movs	r1, #0
 800087a:	e7e5      	b.n	8000848 <__aeabi_ddiv+0x5d8>
 800087c:	0759      	lsls	r1, r3, #29
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	0b1c      	lsrs	r4, r3, #12
 8000882:	e7e1      	b.n	8000848 <__aeabi_ddiv+0x5d8>
 8000884:	000003ff 	.word	0x000003ff
 8000888:	feffffff 	.word	0xfeffffff
 800088c:	000007fe 	.word	0x000007fe
 8000890:	000007ff 	.word	0x000007ff
 8000894:	0000041e 	.word	0x0000041e
 8000898:	fffffc02 	.word	0xfffffc02
 800089c:	0000043e 	.word	0x0000043e

080008a0 <__aeabi_dmul>:
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	4657      	mov	r7, sl
 80008a4:	464e      	mov	r6, r9
 80008a6:	46de      	mov	lr, fp
 80008a8:	4645      	mov	r5, r8
 80008aa:	b5e0      	push	{r5, r6, r7, lr}
 80008ac:	001f      	movs	r7, r3
 80008ae:	030b      	lsls	r3, r1, #12
 80008b0:	0b1b      	lsrs	r3, r3, #12
 80008b2:	0016      	movs	r6, r2
 80008b4:	469a      	mov	sl, r3
 80008b6:	0fca      	lsrs	r2, r1, #31
 80008b8:	004b      	lsls	r3, r1, #1
 80008ba:	0004      	movs	r4, r0
 80008bc:	4691      	mov	r9, r2
 80008be:	b085      	sub	sp, #20
 80008c0:	0d5b      	lsrs	r3, r3, #21
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dmul+0x26>
 80008c4:	e1cf      	b.n	8000c66 <__aeabi_dmul+0x3c6>
 80008c6:	4acd      	ldr	r2, [pc, #820]	@ (8000bfc <__aeabi_dmul+0x35c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d055      	beq.n	8000978 <__aeabi_dmul+0xd8>
 80008cc:	4651      	mov	r1, sl
 80008ce:	0f42      	lsrs	r2, r0, #29
 80008d0:	00c9      	lsls	r1, r1, #3
 80008d2:	430a      	orrs	r2, r1
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0409      	lsls	r1, r1, #16
 80008d8:	4311      	orrs	r1, r2
 80008da:	00c2      	lsls	r2, r0, #3
 80008dc:	4690      	mov	r8, r2
 80008de:	4ac8      	ldr	r2, [pc, #800]	@ (8000c00 <__aeabi_dmul+0x360>)
 80008e0:	468a      	mov	sl, r1
 80008e2:	4693      	mov	fp, r2
 80008e4:	449b      	add	fp, r3
 80008e6:	2300      	movs	r3, #0
 80008e8:	2500      	movs	r5, #0
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	033c      	lsls	r4, r7, #12
 80008ee:	007b      	lsls	r3, r7, #1
 80008f0:	0ffa      	lsrs	r2, r7, #31
 80008f2:	9601      	str	r6, [sp, #4]
 80008f4:	0b24      	lsrs	r4, r4, #12
 80008f6:	0d5b      	lsrs	r3, r3, #21
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	d100      	bne.n	80008fe <__aeabi_dmul+0x5e>
 80008fc:	e188      	b.n	8000c10 <__aeabi_dmul+0x370>
 80008fe:	4abf      	ldr	r2, [pc, #764]	@ (8000bfc <__aeabi_dmul+0x35c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d100      	bne.n	8000906 <__aeabi_dmul+0x66>
 8000904:	e092      	b.n	8000a2c <__aeabi_dmul+0x18c>
 8000906:	4abe      	ldr	r2, [pc, #760]	@ (8000c00 <__aeabi_dmul+0x360>)
 8000908:	4694      	mov	ip, r2
 800090a:	4463      	add	r3, ip
 800090c:	449b      	add	fp, r3
 800090e:	2d0a      	cmp	r5, #10
 8000910:	dc42      	bgt.n	8000998 <__aeabi_dmul+0xf8>
 8000912:	00e4      	lsls	r4, r4, #3
 8000914:	0f73      	lsrs	r3, r6, #29
 8000916:	4323      	orrs	r3, r4
 8000918:	2480      	movs	r4, #128	@ 0x80
 800091a:	4649      	mov	r1, r9
 800091c:	0424      	lsls	r4, r4, #16
 800091e:	431c      	orrs	r4, r3
 8000920:	00f3      	lsls	r3, r6, #3
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b00      	ldr	r3, [sp, #0]
 8000926:	2000      	movs	r0, #0
 8000928:	4059      	eors	r1, r3
 800092a:	b2cb      	uxtb	r3, r1
 800092c:	9303      	str	r3, [sp, #12]
 800092e:	2d02      	cmp	r5, #2
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dmul+0x94>
 8000932:	e094      	b.n	8000a5e <__aeabi_dmul+0x1be>
 8000934:	2301      	movs	r3, #1
 8000936:	40ab      	lsls	r3, r5
 8000938:	001d      	movs	r5, r3
 800093a:	23a6      	movs	r3, #166	@ 0xa6
 800093c:	002a      	movs	r2, r5
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	401a      	ands	r2, r3
 8000942:	421d      	tst	r5, r3
 8000944:	d000      	beq.n	8000948 <__aeabi_dmul+0xa8>
 8000946:	e229      	b.n	8000d9c <__aeabi_dmul+0x4fc>
 8000948:	2390      	movs	r3, #144	@ 0x90
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	421d      	tst	r5, r3
 800094e:	d100      	bne.n	8000952 <__aeabi_dmul+0xb2>
 8000950:	e24d      	b.n	8000dee <__aeabi_dmul+0x54e>
 8000952:	2300      	movs	r3, #0
 8000954:	2480      	movs	r4, #128	@ 0x80
 8000956:	4699      	mov	r9, r3
 8000958:	0324      	lsls	r4, r4, #12
 800095a:	4ba8      	ldr	r3, [pc, #672]	@ (8000bfc <__aeabi_dmul+0x35c>)
 800095c:	0010      	movs	r0, r2
 800095e:	464a      	mov	r2, r9
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	4323      	orrs	r3, r4
 8000964:	07d2      	lsls	r2, r2, #31
 8000966:	4313      	orrs	r3, r2
 8000968:	0019      	movs	r1, r3
 800096a:	b005      	add	sp, #20
 800096c:	bcf0      	pop	{r4, r5, r6, r7}
 800096e:	46bb      	mov	fp, r7
 8000970:	46b2      	mov	sl, r6
 8000972:	46a9      	mov	r9, r5
 8000974:	46a0      	mov	r8, r4
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	4652      	mov	r2, sl
 800097a:	4302      	orrs	r2, r0
 800097c:	4690      	mov	r8, r2
 800097e:	d000      	beq.n	8000982 <__aeabi_dmul+0xe2>
 8000980:	e1ac      	b.n	8000cdc <__aeabi_dmul+0x43c>
 8000982:	469b      	mov	fp, r3
 8000984:	2302      	movs	r3, #2
 8000986:	4692      	mov	sl, r2
 8000988:	2508      	movs	r5, #8
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	e7ae      	b.n	80008ec <__aeabi_dmul+0x4c>
 800098e:	9b00      	ldr	r3, [sp, #0]
 8000990:	46a2      	mov	sl, r4
 8000992:	4699      	mov	r9, r3
 8000994:	9b01      	ldr	r3, [sp, #4]
 8000996:	4698      	mov	r8, r3
 8000998:	9b02      	ldr	r3, [sp, #8]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d100      	bne.n	80009a0 <__aeabi_dmul+0x100>
 800099e:	e1ca      	b.n	8000d36 <__aeabi_dmul+0x496>
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dmul+0x106>
 80009a4:	e192      	b.n	8000ccc <__aeabi_dmul+0x42c>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d110      	bne.n	80009cc <__aeabi_dmul+0x12c>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2400      	movs	r4, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7d4      	b.n	800095c <__aeabi_dmul+0xbc>
 80009b2:	2201      	movs	r2, #1
 80009b4:	087b      	lsrs	r3, r7, #1
 80009b6:	403a      	ands	r2, r7
 80009b8:	4313      	orrs	r3, r2
 80009ba:	4652      	mov	r2, sl
 80009bc:	07d2      	lsls	r2, r2, #31
 80009be:	4313      	orrs	r3, r2
 80009c0:	4698      	mov	r8, r3
 80009c2:	4653      	mov	r3, sl
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	469a      	mov	sl, r3
 80009c8:	9b03      	ldr	r3, [sp, #12]
 80009ca:	4699      	mov	r9, r3
 80009cc:	465b      	mov	r3, fp
 80009ce:	1c58      	adds	r0, r3, #1
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	445b      	add	r3, fp
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dc00      	bgt.n	80009dc <__aeabi_dmul+0x13c>
 80009da:	e1b1      	b.n	8000d40 <__aeabi_dmul+0x4a0>
 80009dc:	4642      	mov	r2, r8
 80009de:	0752      	lsls	r2, r2, #29
 80009e0:	d00b      	beq.n	80009fa <__aeabi_dmul+0x15a>
 80009e2:	220f      	movs	r2, #15
 80009e4:	4641      	mov	r1, r8
 80009e6:	400a      	ands	r2, r1
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d006      	beq.n	80009fa <__aeabi_dmul+0x15a>
 80009ec:	4642      	mov	r2, r8
 80009ee:	1d11      	adds	r1, r2, #4
 80009f0:	4541      	cmp	r1, r8
 80009f2:	4192      	sbcs	r2, r2
 80009f4:	4688      	mov	r8, r1
 80009f6:	4252      	negs	r2, r2
 80009f8:	4492      	add	sl, r2
 80009fa:	4652      	mov	r2, sl
 80009fc:	01d2      	lsls	r2, r2, #7
 80009fe:	d506      	bpl.n	8000a0e <__aeabi_dmul+0x16e>
 8000a00:	4652      	mov	r2, sl
 8000a02:	4b80      	ldr	r3, [pc, #512]	@ (8000c04 <__aeabi_dmul+0x364>)
 8000a04:	401a      	ands	r2, r3
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	4692      	mov	sl, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	18c3      	adds	r3, r0, r3
 8000a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8000c08 <__aeabi_dmul+0x368>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dmul+0x176>
 8000a14:	e18f      	b.n	8000d36 <__aeabi_dmul+0x496>
 8000a16:	4642      	mov	r2, r8
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	4651      	mov	r1, sl
 8000a22:	055b      	lsls	r3, r3, #21
 8000a24:	024c      	lsls	r4, r1, #9
 8000a26:	0b24      	lsrs	r4, r4, #12
 8000a28:	0d5b      	lsrs	r3, r3, #21
 8000a2a:	e797      	b.n	800095c <__aeabi_dmul+0xbc>
 8000a2c:	4b73      	ldr	r3, [pc, #460]	@ (8000bfc <__aeabi_dmul+0x35c>)
 8000a2e:	4326      	orrs	r6, r4
 8000a30:	469c      	mov	ip, r3
 8000a32:	44e3      	add	fp, ip
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dmul+0x19a>
 8000a38:	e16f      	b.n	8000d1a <__aeabi_dmul+0x47a>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	431d      	orrs	r5, r3
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	4059      	eors	r1, r3
 8000a44:	b2cb      	uxtb	r3, r1
 8000a46:	9303      	str	r3, [sp, #12]
 8000a48:	2d0a      	cmp	r5, #10
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_dmul+0x1ae>
 8000a4c:	e133      	b.n	8000cb6 <__aeabi_dmul+0x416>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	40ab      	lsls	r3, r5
 8000a52:	001d      	movs	r5, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	2288      	movs	r2, #136	@ 0x88
 8000a5a:	422a      	tst	r2, r5
 8000a5c:	d197      	bne.n	800098e <__aeabi_dmul+0xee>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	4643      	mov	r3, r8
 8000a62:	0412      	lsls	r2, r2, #16
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	0016      	movs	r6, r2
 8000a68:	9801      	ldr	r0, [sp, #4]
 8000a6a:	0c1d      	lsrs	r5, r3, #16
 8000a6c:	0c03      	lsrs	r3, r0, #16
 8000a6e:	0400      	lsls	r0, r0, #16
 8000a70:	0c00      	lsrs	r0, r0, #16
 8000a72:	4346      	muls	r6, r0
 8000a74:	46b4      	mov	ip, r6
 8000a76:	001e      	movs	r6, r3
 8000a78:	436e      	muls	r6, r5
 8000a7a:	9600      	str	r6, [sp, #0]
 8000a7c:	0016      	movs	r6, r2
 8000a7e:	0007      	movs	r7, r0
 8000a80:	435e      	muls	r6, r3
 8000a82:	4661      	mov	r1, ip
 8000a84:	46b0      	mov	r8, r6
 8000a86:	436f      	muls	r7, r5
 8000a88:	0c0e      	lsrs	r6, r1, #16
 8000a8a:	44b8      	add	r8, r7
 8000a8c:	4446      	add	r6, r8
 8000a8e:	42b7      	cmp	r7, r6
 8000a90:	d905      	bls.n	8000a9e <__aeabi_dmul+0x1fe>
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	0249      	lsls	r1, r1, #9
 8000a96:	4688      	mov	r8, r1
 8000a98:	9f00      	ldr	r7, [sp, #0]
 8000a9a:	4447      	add	r7, r8
 8000a9c:	9700      	str	r7, [sp, #0]
 8000a9e:	4661      	mov	r1, ip
 8000aa0:	0409      	lsls	r1, r1, #16
 8000aa2:	0c09      	lsrs	r1, r1, #16
 8000aa4:	0c37      	lsrs	r7, r6, #16
 8000aa6:	0436      	lsls	r6, r6, #16
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	0031      	movs	r1, r6
 8000aac:	4461      	add	r1, ip
 8000aae:	9101      	str	r1, [sp, #4]
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0c26      	lsrs	r6, r4, #16
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	0c24      	lsrs	r4, r4, #16
 8000ab8:	4361      	muls	r1, r4
 8000aba:	468c      	mov	ip, r1
 8000abc:	0021      	movs	r1, r4
 8000abe:	4369      	muls	r1, r5
 8000ac0:	4689      	mov	r9, r1
 8000ac2:	4661      	mov	r1, ip
 8000ac4:	0c09      	lsrs	r1, r1, #16
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	4372      	muls	r2, r6
 8000aca:	444a      	add	r2, r9
 8000acc:	4442      	add	r2, r8
 8000ace:	4375      	muls	r5, r6
 8000ad0:	4591      	cmp	r9, r2
 8000ad2:	d903      	bls.n	8000adc <__aeabi_dmul+0x23c>
 8000ad4:	2180      	movs	r1, #128	@ 0x80
 8000ad6:	0249      	lsls	r1, r1, #9
 8000ad8:	4688      	mov	r8, r1
 8000ada:	4445      	add	r5, r8
 8000adc:	0c11      	lsrs	r1, r2, #16
 8000ade:	4688      	mov	r8, r1
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	0409      	lsls	r1, r1, #16
 8000ae4:	0c09      	lsrs	r1, r1, #16
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	0412      	lsls	r2, r2, #16
 8000aea:	4462      	add	r2, ip
 8000aec:	18b9      	adds	r1, r7, r2
 8000aee:	9102      	str	r1, [sp, #8]
 8000af0:	4651      	mov	r1, sl
 8000af2:	0c09      	lsrs	r1, r1, #16
 8000af4:	468c      	mov	ip, r1
 8000af6:	4651      	mov	r1, sl
 8000af8:	040f      	lsls	r7, r1, #16
 8000afa:	0c3f      	lsrs	r7, r7, #16
 8000afc:	0039      	movs	r1, r7
 8000afe:	4341      	muls	r1, r0
 8000b00:	4445      	add	r5, r8
 8000b02:	4688      	mov	r8, r1
 8000b04:	4661      	mov	r1, ip
 8000b06:	4341      	muls	r1, r0
 8000b08:	468a      	mov	sl, r1
 8000b0a:	4641      	mov	r1, r8
 8000b0c:	4660      	mov	r0, ip
 8000b0e:	0c09      	lsrs	r1, r1, #16
 8000b10:	4689      	mov	r9, r1
 8000b12:	4358      	muls	r0, r3
 8000b14:	437b      	muls	r3, r7
 8000b16:	4453      	add	r3, sl
 8000b18:	444b      	add	r3, r9
 8000b1a:	459a      	cmp	sl, r3
 8000b1c:	d903      	bls.n	8000b26 <__aeabi_dmul+0x286>
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	4689      	mov	r9, r1
 8000b24:	4448      	add	r0, r9
 8000b26:	0c19      	lsrs	r1, r3, #16
 8000b28:	4689      	mov	r9, r1
 8000b2a:	4641      	mov	r1, r8
 8000b2c:	0409      	lsls	r1, r1, #16
 8000b2e:	0c09      	lsrs	r1, r1, #16
 8000b30:	4688      	mov	r8, r1
 8000b32:	0039      	movs	r1, r7
 8000b34:	4361      	muls	r1, r4
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	4443      	add	r3, r8
 8000b3a:	4688      	mov	r8, r1
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	434c      	muls	r4, r1
 8000b40:	4371      	muls	r1, r6
 8000b42:	468c      	mov	ip, r1
 8000b44:	4641      	mov	r1, r8
 8000b46:	4377      	muls	r7, r6
 8000b48:	0c0e      	lsrs	r6, r1, #16
 8000b4a:	193f      	adds	r7, r7, r4
 8000b4c:	19f6      	adds	r6, r6, r7
 8000b4e:	4448      	add	r0, r9
 8000b50:	42b4      	cmp	r4, r6
 8000b52:	d903      	bls.n	8000b5c <__aeabi_dmul+0x2bc>
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0249      	lsls	r1, r1, #9
 8000b58:	4689      	mov	r9, r1
 8000b5a:	44cc      	add	ip, r9
 8000b5c:	9902      	ldr	r1, [sp, #8]
 8000b5e:	9f00      	ldr	r7, [sp, #0]
 8000b60:	4689      	mov	r9, r1
 8000b62:	0431      	lsls	r1, r6, #16
 8000b64:	444f      	add	r7, r9
 8000b66:	4689      	mov	r9, r1
 8000b68:	4641      	mov	r1, r8
 8000b6a:	4297      	cmp	r7, r2
 8000b6c:	4192      	sbcs	r2, r2
 8000b6e:	040c      	lsls	r4, r1, #16
 8000b70:	0c24      	lsrs	r4, r4, #16
 8000b72:	444c      	add	r4, r9
 8000b74:	18ff      	adds	r7, r7, r3
 8000b76:	4252      	negs	r2, r2
 8000b78:	1964      	adds	r4, r4, r5
 8000b7a:	18a1      	adds	r1, r4, r2
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	419b      	sbcs	r3, r3
 8000b80:	4688      	mov	r8, r1
 8000b82:	4682      	mov	sl, r0
 8000b84:	425b      	negs	r3, r3
 8000b86:	4699      	mov	r9, r3
 8000b88:	4590      	cmp	r8, r2
 8000b8a:	4192      	sbcs	r2, r2
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	41a4      	sbcs	r4, r4
 8000b90:	44c2      	add	sl, r8
 8000b92:	44d1      	add	r9, sl
 8000b94:	4252      	negs	r2, r2
 8000b96:	4264      	negs	r4, r4
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	4599      	cmp	r9, r3
 8000b9c:	419b      	sbcs	r3, r3
 8000b9e:	4582      	cmp	sl, r0
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	464a      	mov	r2, r9
 8000baa:	0c36      	lsrs	r6, r6, #16
 8000bac:	19a4      	adds	r4, r4, r6
 8000bae:	18e3      	adds	r3, r4, r3
 8000bb0:	4463      	add	r3, ip
 8000bb2:	025b      	lsls	r3, r3, #9
 8000bb4:	0dd2      	lsrs	r2, r2, #23
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	9901      	ldr	r1, [sp, #4]
 8000bba:	4692      	mov	sl, r2
 8000bbc:	027a      	lsls	r2, r7, #9
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	1e50      	subs	r0, r2, #1
 8000bc2:	4182      	sbcs	r2, r0
 8000bc4:	0dff      	lsrs	r7, r7, #23
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	464a      	mov	r2, r9
 8000bca:	0252      	lsls	r2, r2, #9
 8000bcc:	4317      	orrs	r7, r2
 8000bce:	46b8      	mov	r8, r7
 8000bd0:	01db      	lsls	r3, r3, #7
 8000bd2:	d500      	bpl.n	8000bd6 <__aeabi_dmul+0x336>
 8000bd4:	e6ed      	b.n	80009b2 <__aeabi_dmul+0x112>
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <__aeabi_dmul+0x36c>)
 8000bd8:	9a03      	ldr	r2, [sp, #12]
 8000bda:	445b      	add	r3, fp
 8000bdc:	4691      	mov	r9, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dc00      	bgt.n	8000be4 <__aeabi_dmul+0x344>
 8000be2:	e0ac      	b.n	8000d3e <__aeabi_dmul+0x49e>
 8000be4:	003a      	movs	r2, r7
 8000be6:	0752      	lsls	r2, r2, #29
 8000be8:	d100      	bne.n	8000bec <__aeabi_dmul+0x34c>
 8000bea:	e710      	b.n	8000a0e <__aeabi_dmul+0x16e>
 8000bec:	220f      	movs	r2, #15
 8000bee:	4658      	mov	r0, fp
 8000bf0:	403a      	ands	r2, r7
 8000bf2:	2a04      	cmp	r2, #4
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_dmul+0x358>
 8000bf6:	e6f9      	b.n	80009ec <__aeabi_dmul+0x14c>
 8000bf8:	e709      	b.n	8000a0e <__aeabi_dmul+0x16e>
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	000007ff 	.word	0x000007ff
 8000c00:	fffffc01 	.word	0xfffffc01
 8000c04:	feffffff 	.word	0xfeffffff
 8000c08:	000007fe 	.word	0x000007fe
 8000c0c:	000003ff 	.word	0x000003ff
 8000c10:	0022      	movs	r2, r4
 8000c12:	4332      	orrs	r2, r6
 8000c14:	d06f      	beq.n	8000cf6 <__aeabi_dmul+0x456>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dmul+0x37c>
 8000c1a:	e0c2      	b.n	8000da2 <__aeabi_dmul+0x502>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f000 fea1 	bl	8001964 <__clzsi2>
 8000c22:	0002      	movs	r2, r0
 8000c24:	0003      	movs	r3, r0
 8000c26:	3a0b      	subs	r2, #11
 8000c28:	201d      	movs	r0, #29
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	0030      	movs	r0, r6
 8000c2e:	0019      	movs	r1, r3
 8000c30:	40d0      	lsrs	r0, r2
 8000c32:	3908      	subs	r1, #8
 8000c34:	408c      	lsls	r4, r1
 8000c36:	0002      	movs	r2, r0
 8000c38:	4322      	orrs	r2, r4
 8000c3a:	0034      	movs	r4, r6
 8000c3c:	408c      	lsls	r4, r1
 8000c3e:	4659      	mov	r1, fp
 8000c40:	1acb      	subs	r3, r1, r3
 8000c42:	4986      	ldr	r1, [pc, #536]	@ (8000e5c <__aeabi_dmul+0x5bc>)
 8000c44:	468b      	mov	fp, r1
 8000c46:	449b      	add	fp, r3
 8000c48:	2d0a      	cmp	r5, #10
 8000c4a:	dd00      	ble.n	8000c4e <__aeabi_dmul+0x3ae>
 8000c4c:	e6a4      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000c4e:	4649      	mov	r1, r9
 8000c50:	9b00      	ldr	r3, [sp, #0]
 8000c52:	9401      	str	r4, [sp, #4]
 8000c54:	4059      	eors	r1, r3
 8000c56:	b2cb      	uxtb	r3, r1
 8000c58:	0014      	movs	r4, r2
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	9303      	str	r3, [sp, #12]
 8000c5e:	2d02      	cmp	r5, #2
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_dmul+0x3c4>
 8000c62:	e667      	b.n	8000934 <__aeabi_dmul+0x94>
 8000c64:	e6fb      	b.n	8000a5e <__aeabi_dmul+0x1be>
 8000c66:	4653      	mov	r3, sl
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	d03c      	beq.n	8000ce8 <__aeabi_dmul+0x448>
 8000c6e:	4653      	mov	r3, sl
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dmul+0x3d6>
 8000c74:	e0a3      	b.n	8000dbe <__aeabi_dmul+0x51e>
 8000c76:	4650      	mov	r0, sl
 8000c78:	f000 fe74 	bl	8001964 <__clzsi2>
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	425b      	negs	r3, r3
 8000c80:	469c      	mov	ip, r3
 8000c82:	0002      	movs	r2, r0
 8000c84:	4484      	add	ip, r0
 8000c86:	0011      	movs	r1, r2
 8000c88:	4650      	mov	r0, sl
 8000c8a:	3908      	subs	r1, #8
 8000c8c:	4088      	lsls	r0, r1
 8000c8e:	231d      	movs	r3, #29
 8000c90:	4680      	mov	r8, r0
 8000c92:	4660      	mov	r0, ip
 8000c94:	1a1b      	subs	r3, r3, r0
 8000c96:	0020      	movs	r0, r4
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	0023      	movs	r3, r4
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8000e5c <__aeabi_dmul+0x5bc>)
 8000caa:	2500      	movs	r5, #0
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	469b      	mov	fp, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	e61a      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000cb6:	2d0f      	cmp	r5, #15
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_dmul+0x41c>
 8000cba:	e0c9      	b.n	8000e50 <__aeabi_dmul+0x5b0>
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	4652      	mov	r2, sl
 8000cc0:	031b      	lsls	r3, r3, #12
 8000cc2:	421a      	tst	r2, r3
 8000cc4:	d002      	beq.n	8000ccc <__aeabi_dmul+0x42c>
 8000cc6:	421c      	tst	r4, r3
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dmul+0x42c>
 8000cca:	e092      	b.n	8000df2 <__aeabi_dmul+0x552>
 8000ccc:	2480      	movs	r4, #128	@ 0x80
 8000cce:	4653      	mov	r3, sl
 8000cd0:	0324      	lsls	r4, r4, #12
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	0324      	lsls	r4, r4, #12
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	0b24      	lsrs	r4, r4, #12
 8000cda:	e63e      	b.n	800095a <__aeabi_dmul+0xba>
 8000cdc:	469b      	mov	fp, r3
 8000cde:	2303      	movs	r3, #3
 8000ce0:	4680      	mov	r8, r0
 8000ce2:	250c      	movs	r5, #12
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	e601      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	469a      	mov	sl, r3
 8000cec:	469b      	mov	fp, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2504      	movs	r5, #4
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	e5fa      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430d      	orrs	r5, r1
 8000cfa:	2d0a      	cmp	r5, #10
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_dmul+0x460>
 8000cfe:	e64b      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000d00:	4649      	mov	r1, r9
 8000d02:	9800      	ldr	r0, [sp, #0]
 8000d04:	4041      	eors	r1, r0
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	9103      	str	r1, [sp, #12]
 8000d0a:	2d02      	cmp	r5, #2
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dmul+0x470>
 8000d0e:	e096      	b.n	8000e3e <__aeabi_dmul+0x59e>
 8000d10:	2300      	movs	r3, #0
 8000d12:	2400      	movs	r4, #0
 8000d14:	2001      	movs	r0, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	e60c      	b.n	8000934 <__aeabi_dmul+0x94>
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	9a00      	ldr	r2, [sp, #0]
 8000d20:	432b      	orrs	r3, r5
 8000d22:	4051      	eors	r1, r2
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	9203      	str	r2, [sp, #12]
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	dd00      	ble.n	8000d2e <__aeabi_dmul+0x48e>
 8000d2c:	e634      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d157      	bne.n	8000de2 <__aeabi_dmul+0x542>
 8000d32:	9b03      	ldr	r3, [sp, #12]
 8000d34:	4699      	mov	r9, r3
 8000d36:	2400      	movs	r4, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <__aeabi_dmul+0x5c0>)
 8000d3c:	e60e      	b.n	800095c <__aeabi_dmul+0xbc>
 8000d3e:	4658      	mov	r0, fp
 8000d40:	2101      	movs	r1, #1
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	2938      	cmp	r1, #56	@ 0x38
 8000d46:	dd00      	ble.n	8000d4a <__aeabi_dmul+0x4aa>
 8000d48:	e62f      	b.n	80009aa <__aeabi_dmul+0x10a>
 8000d4a:	291f      	cmp	r1, #31
 8000d4c:	dd56      	ble.n	8000dfc <__aeabi_dmul+0x55c>
 8000d4e:	221f      	movs	r2, #31
 8000d50:	4654      	mov	r4, sl
 8000d52:	4252      	negs	r2, r2
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2920      	cmp	r1, #32
 8000d5a:	d007      	beq.n	8000d6c <__aeabi_dmul+0x4cc>
 8000d5c:	4b41      	ldr	r3, [pc, #260]	@ (8000e64 <__aeabi_dmul+0x5c4>)
 8000d5e:	4642      	mov	r2, r8
 8000d60:	469c      	mov	ip, r3
 8000d62:	4653      	mov	r3, sl
 8000d64:	4460      	add	r0, ip
 8000d66:	4083      	lsls	r3, r0
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	4690      	mov	r8, r2
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	2107      	movs	r1, #7
 8000d70:	1e53      	subs	r3, r2, #1
 8000d72:	419a      	sbcs	r2, r3
 8000d74:	000b      	movs	r3, r1
 8000d76:	4322      	orrs	r2, r4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	4211      	tst	r1, r2
 8000d7e:	d009      	beq.n	8000d94 <__aeabi_dmul+0x4f4>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d05d      	beq.n	8000e44 <__aeabi_dmul+0x5a4>
 8000d88:	1d11      	adds	r1, r2, #4
 8000d8a:	4291      	cmp	r1, r2
 8000d8c:	419b      	sbcs	r3, r3
 8000d8e:	000a      	movs	r2, r1
 8000d90:	425b      	negs	r3, r3
 8000d92:	075b      	lsls	r3, r3, #29
 8000d94:	08d2      	lsrs	r2, r2, #3
 8000d96:	431a      	orrs	r2, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e5df      	b.n	800095c <__aeabi_dmul+0xbc>
 8000d9c:	9b03      	ldr	r3, [sp, #12]
 8000d9e:	4699      	mov	r9, r3
 8000da0:	e5fa      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000da2:	9801      	ldr	r0, [sp, #4]
 8000da4:	f000 fdde 	bl	8001964 <__clzsi2>
 8000da8:	0002      	movs	r2, r0
 8000daa:	0003      	movs	r3, r0
 8000dac:	3215      	adds	r2, #21
 8000dae:	3320      	adds	r3, #32
 8000db0:	2a1c      	cmp	r2, #28
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dmul+0x516>
 8000db4:	e738      	b.n	8000c28 <__aeabi_dmul+0x388>
 8000db6:	9a01      	ldr	r2, [sp, #4]
 8000db8:	3808      	subs	r0, #8
 8000dba:	4082      	lsls	r2, r0
 8000dbc:	e73f      	b.n	8000c3e <__aeabi_dmul+0x39e>
 8000dbe:	f000 fdd1 	bl	8001964 <__clzsi2>
 8000dc2:	2315      	movs	r3, #21
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	4484      	add	ip, r0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	4663      	mov	r3, ip
 8000dcc:	3220      	adds	r2, #32
 8000dce:	2b1c      	cmp	r3, #28
 8000dd0:	dc00      	bgt.n	8000dd4 <__aeabi_dmul+0x534>
 8000dd2:	e758      	b.n	8000c86 <__aeabi_dmul+0x3e6>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	0023      	movs	r3, r4
 8000dda:	3808      	subs	r0, #8
 8000ddc:	4083      	lsls	r3, r0
 8000dde:	469a      	mov	sl, r3
 8000de0:	e762      	b.n	8000ca8 <__aeabi_dmul+0x408>
 8000de2:	001d      	movs	r5, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	2400      	movs	r4, #0
 8000de8:	2002      	movs	r0, #2
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	e5a2      	b.n	8000934 <__aeabi_dmul+0x94>
 8000dee:	9002      	str	r0, [sp, #8]
 8000df0:	e632      	b.n	8000a58 <__aeabi_dmul+0x1b8>
 8000df2:	431c      	orrs	r4, r3
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	4699      	mov	r9, r3
 8000dfa:	e5ae      	b.n	800095a <__aeabi_dmul+0xba>
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <__aeabi_dmul+0x5c8>)
 8000dfe:	4652      	mov	r2, sl
 8000e00:	18c3      	adds	r3, r0, r3
 8000e02:	4640      	mov	r0, r8
 8000e04:	409a      	lsls	r2, r3
 8000e06:	40c8      	lsrs	r0, r1
 8000e08:	4302      	orrs	r2, r0
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	4098      	lsls	r0, r3
 8000e0e:	0003      	movs	r3, r0
 8000e10:	1e58      	subs	r0, r3, #1
 8000e12:	4183      	sbcs	r3, r0
 8000e14:	4654      	mov	r4, sl
 8000e16:	431a      	orrs	r2, r3
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	0753      	lsls	r3, r2, #29
 8000e1c:	d009      	beq.n	8000e32 <__aeabi_dmul+0x592>
 8000e1e:	230f      	movs	r3, #15
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d005      	beq.n	8000e32 <__aeabi_dmul+0x592>
 8000e26:	1d13      	adds	r3, r2, #4
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	18a4      	adds	r4, r4, r2
 8000e30:	001a      	movs	r2, r3
 8000e32:	0223      	lsls	r3, r4, #8
 8000e34:	d508      	bpl.n	8000e48 <__aeabi_dmul+0x5a8>
 8000e36:	2301      	movs	r3, #1
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	e58e      	b.n	800095c <__aeabi_dmul+0xbc>
 8000e3e:	4689      	mov	r9, r1
 8000e40:	2400      	movs	r4, #0
 8000e42:	e58b      	b.n	800095c <__aeabi_dmul+0xbc>
 8000e44:	2300      	movs	r3, #0
 8000e46:	e7a5      	b.n	8000d94 <__aeabi_dmul+0x4f4>
 8000e48:	0763      	lsls	r3, r4, #29
 8000e4a:	0264      	lsls	r4, r4, #9
 8000e4c:	0b24      	lsrs	r4, r4, #12
 8000e4e:	e7a1      	b.n	8000d94 <__aeabi_dmul+0x4f4>
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	46a2      	mov	sl, r4
 8000e54:	4699      	mov	r9, r3
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	4698      	mov	r8, r3
 8000e5a:	e737      	b.n	8000ccc <__aeabi_dmul+0x42c>
 8000e5c:	fffffc0d 	.word	0xfffffc0d
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	0000043e 	.word	0x0000043e
 8000e68:	0000041e 	.word	0x0000041e

08000e6c <__aeabi_dsub>:
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6e:	4657      	mov	r7, sl
 8000e70:	464e      	mov	r6, r9
 8000e72:	4645      	mov	r5, r8
 8000e74:	46de      	mov	lr, fp
 8000e76:	b5e0      	push	{r5, r6, r7, lr}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	9101      	str	r1, [sp, #4]
 8000e7e:	030c      	lsls	r4, r1, #12
 8000e80:	004d      	lsls	r5, r1, #1
 8000e82:	0fce      	lsrs	r6, r1, #31
 8000e84:	0a61      	lsrs	r1, r4, #9
 8000e86:	9c00      	ldr	r4, [sp, #0]
 8000e88:	005f      	lsls	r7, r3, #1
 8000e8a:	0f64      	lsrs	r4, r4, #29
 8000e8c:	430c      	orrs	r4, r1
 8000e8e:	9900      	ldr	r1, [sp, #0]
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	00c8      	lsls	r0, r1, #3
 8000e96:	0319      	lsls	r1, r3, #12
 8000e98:	0d7b      	lsrs	r3, r7, #21
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	4fcc      	ldr	r7, [pc, #816]	@ (80011d0 <__aeabi_dsub+0x364>)
 8000ea0:	0fdb      	lsrs	r3, r3, #31
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	0a4b      	lsrs	r3, r1, #9
 8000ea6:	9900      	ldr	r1, [sp, #0]
 8000ea8:	4680      	mov	r8, r0
 8000eaa:	0f49      	lsrs	r1, r1, #29
 8000eac:	4319      	orrs	r1, r3
 8000eae:	9b00      	ldr	r3, [sp, #0]
 8000eb0:	468b      	mov	fp, r1
 8000eb2:	00da      	lsls	r2, r3, #3
 8000eb4:	4692      	mov	sl, r2
 8000eb6:	0d6d      	lsrs	r5, r5, #21
 8000eb8:	45b9      	cmp	r9, r7
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dsub+0x52>
 8000ebc:	e0bf      	b.n	800103e <__aeabi_dsub+0x1d2>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	4059      	eors	r1, r3
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	1aeb      	subs	r3, r5, r3
 8000eca:	428e      	cmp	r6, r1
 8000ecc:	d075      	beq.n	8000fba <__aeabi_dsub+0x14e>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dc00      	bgt.n	8000ed4 <__aeabi_dsub+0x68>
 8000ed2:	e2a3      	b.n	800141c <__aeabi_dsub+0x5b0>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dsub+0x70>
 8000eda:	e0ce      	b.n	800107a <__aeabi_dsub+0x20e>
 8000edc:	42bd      	cmp	r5, r7
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dsub+0x76>
 8000ee0:	e200      	b.n	80012e4 <__aeabi_dsub+0x478>
 8000ee2:	2701      	movs	r7, #1
 8000ee4:	2b38      	cmp	r3, #56	@ 0x38
 8000ee6:	dc19      	bgt.n	8000f1c <__aeabi_dsub+0xb0>
 8000ee8:	2780      	movs	r7, #128	@ 0x80
 8000eea:	4659      	mov	r1, fp
 8000eec:	043f      	lsls	r7, r7, #16
 8000eee:	4339      	orrs	r1, r7
 8000ef0:	468b      	mov	fp, r1
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	dd00      	ble.n	8000ef8 <__aeabi_dsub+0x8c>
 8000ef6:	e1fa      	b.n	80012ee <__aeabi_dsub+0x482>
 8000ef8:	2720      	movs	r7, #32
 8000efa:	1af9      	subs	r1, r7, r3
 8000efc:	468c      	mov	ip, r1
 8000efe:	4659      	mov	r1, fp
 8000f00:	4667      	mov	r7, ip
 8000f02:	40b9      	lsls	r1, r7
 8000f04:	000f      	movs	r7, r1
 8000f06:	0011      	movs	r1, r2
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	430f      	orrs	r7, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	408a      	lsls	r2, r1
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	418a      	sbcs	r2, r1
 8000f14:	4659      	mov	r1, fp
 8000f16:	40d9      	lsrs	r1, r3
 8000f18:	4317      	orrs	r7, r2
 8000f1a:	1a64      	subs	r4, r4, r1
 8000f1c:	1bc7      	subs	r7, r0, r7
 8000f1e:	42b8      	cmp	r0, r7
 8000f20:	4180      	sbcs	r0, r0
 8000f22:	4240      	negs	r0, r0
 8000f24:	1a24      	subs	r4, r4, r0
 8000f26:	0223      	lsls	r3, r4, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_dsub+0xc0>
 8000f2a:	e140      	b.n	80011ae <__aeabi_dsub+0x342>
 8000f2c:	0264      	lsls	r4, r4, #9
 8000f2e:	0a64      	lsrs	r4, r4, #9
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dsub+0xca>
 8000f34:	e154      	b.n	80011e0 <__aeabi_dsub+0x374>
 8000f36:	0020      	movs	r0, r4
 8000f38:	f000 fd14 	bl	8001964 <__clzsi2>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	3b08      	subs	r3, #8
 8000f40:	2120      	movs	r1, #32
 8000f42:	0038      	movs	r0, r7
 8000f44:	1aca      	subs	r2, r1, r3
 8000f46:	40d0      	lsrs	r0, r2
 8000f48:	409c      	lsls	r4, r3
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	409f      	lsls	r7, r3
 8000f4e:	4322      	orrs	r2, r4
 8000f50:	429d      	cmp	r5, r3
 8000f52:	dd00      	ble.n	8000f56 <__aeabi_dsub+0xea>
 8000f54:	e1a6      	b.n	80012a4 <__aeabi_dsub+0x438>
 8000f56:	1b58      	subs	r0, r3, r5
 8000f58:	3001      	adds	r0, #1
 8000f5a:	1a09      	subs	r1, r1, r0
 8000f5c:	003c      	movs	r4, r7
 8000f5e:	408f      	lsls	r7, r1
 8000f60:	40c4      	lsrs	r4, r0
 8000f62:	1e7b      	subs	r3, r7, #1
 8000f64:	419f      	sbcs	r7, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	408b      	lsls	r3, r1
 8000f6a:	4327      	orrs	r7, r4
 8000f6c:	431f      	orrs	r7, r3
 8000f6e:	40c2      	lsrs	r2, r0
 8000f70:	003b      	movs	r3, r7
 8000f72:	0014      	movs	r4, r2
 8000f74:	2500      	movs	r5, #0
 8000f76:	4313      	orrs	r3, r2
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dsub+0x110>
 8000f7a:	e1f7      	b.n	800136c <__aeabi_dsub+0x500>
 8000f7c:	077b      	lsls	r3, r7, #29
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dsub+0x116>
 8000f80:	e377      	b.n	8001672 <__aeabi_dsub+0x806>
 8000f82:	230f      	movs	r3, #15
 8000f84:	0038      	movs	r0, r7
 8000f86:	403b      	ands	r3, r7
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d004      	beq.n	8000f96 <__aeabi_dsub+0x12a>
 8000f8c:	1d38      	adds	r0, r7, #4
 8000f8e:	42b8      	cmp	r0, r7
 8000f90:	41bf      	sbcs	r7, r7
 8000f92:	427f      	negs	r7, r7
 8000f94:	19e4      	adds	r4, r4, r7
 8000f96:	0223      	lsls	r3, r4, #8
 8000f98:	d400      	bmi.n	8000f9c <__aeabi_dsub+0x130>
 8000f9a:	e368      	b.n	800166e <__aeabi_dsub+0x802>
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80011d0 <__aeabi_dsub+0x364>)
 8000f9e:	3501      	adds	r5, #1
 8000fa0:	429d      	cmp	r5, r3
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0x13a>
 8000fa4:	e0f4      	b.n	8001190 <__aeabi_dsub+0x324>
 8000fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80011d4 <__aeabi_dsub+0x368>)
 8000fa8:	056d      	lsls	r5, r5, #21
 8000faa:	401c      	ands	r4, r3
 8000fac:	0d6d      	lsrs	r5, r5, #21
 8000fae:	0767      	lsls	r7, r4, #29
 8000fb0:	08c0      	lsrs	r0, r0, #3
 8000fb2:	0264      	lsls	r4, r4, #9
 8000fb4:	4307      	orrs	r7, r0
 8000fb6:	0b24      	lsrs	r4, r4, #12
 8000fb8:	e0ec      	b.n	8001194 <__aeabi_dsub+0x328>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dc00      	bgt.n	8000fc0 <__aeabi_dsub+0x154>
 8000fbe:	e329      	b.n	8001614 <__aeabi_dsub+0x7a8>
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	2900      	cmp	r1, #0
 8000fc4:	d000      	beq.n	8000fc8 <__aeabi_dsub+0x15c>
 8000fc6:	e0d6      	b.n	8001176 <__aeabi_dsub+0x30a>
 8000fc8:	4659      	mov	r1, fp
 8000fca:	4311      	orrs	r1, r2
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dsub+0x164>
 8000fce:	e12e      	b.n	800122e <__aeabi_dsub+0x3c2>
 8000fd0:	1e59      	subs	r1, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dsub+0x16c>
 8000fd6:	e1e6      	b.n	80013a6 <__aeabi_dsub+0x53a>
 8000fd8:	42bb      	cmp	r3, r7
 8000fda:	d100      	bne.n	8000fde <__aeabi_dsub+0x172>
 8000fdc:	e182      	b.n	80012e4 <__aeabi_dsub+0x478>
 8000fde:	2701      	movs	r7, #1
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	2938      	cmp	r1, #56	@ 0x38
 8000fe4:	dc14      	bgt.n	8001010 <__aeabi_dsub+0x1a4>
 8000fe6:	2b1f      	cmp	r3, #31
 8000fe8:	dd00      	ble.n	8000fec <__aeabi_dsub+0x180>
 8000fea:	e23c      	b.n	8001466 <__aeabi_dsub+0x5fa>
 8000fec:	2720      	movs	r7, #32
 8000fee:	1af9      	subs	r1, r7, r3
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	4659      	mov	r1, fp
 8000ff4:	4667      	mov	r7, ip
 8000ff6:	40b9      	lsls	r1, r7
 8000ff8:	000f      	movs	r7, r1
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	430f      	orrs	r7, r1
 8001000:	4661      	mov	r1, ip
 8001002:	408a      	lsls	r2, r1
 8001004:	1e51      	subs	r1, r2, #1
 8001006:	418a      	sbcs	r2, r1
 8001008:	4659      	mov	r1, fp
 800100a:	40d9      	lsrs	r1, r3
 800100c:	4317      	orrs	r7, r2
 800100e:	1864      	adds	r4, r4, r1
 8001010:	183f      	adds	r7, r7, r0
 8001012:	4287      	cmp	r7, r0
 8001014:	4180      	sbcs	r0, r0
 8001016:	4240      	negs	r0, r0
 8001018:	1824      	adds	r4, r4, r0
 800101a:	0223      	lsls	r3, r4, #8
 800101c:	d400      	bmi.n	8001020 <__aeabi_dsub+0x1b4>
 800101e:	e0c6      	b.n	80011ae <__aeabi_dsub+0x342>
 8001020:	4b6b      	ldr	r3, [pc, #428]	@ (80011d0 <__aeabi_dsub+0x364>)
 8001022:	3501      	adds	r5, #1
 8001024:	429d      	cmp	r5, r3
 8001026:	d100      	bne.n	800102a <__aeabi_dsub+0x1be>
 8001028:	e0b2      	b.n	8001190 <__aeabi_dsub+0x324>
 800102a:	2101      	movs	r1, #1
 800102c:	4b69      	ldr	r3, [pc, #420]	@ (80011d4 <__aeabi_dsub+0x368>)
 800102e:	087a      	lsrs	r2, r7, #1
 8001030:	401c      	ands	r4, r3
 8001032:	4039      	ands	r1, r7
 8001034:	430a      	orrs	r2, r1
 8001036:	07e7      	lsls	r7, r4, #31
 8001038:	4317      	orrs	r7, r2
 800103a:	0864      	lsrs	r4, r4, #1
 800103c:	e79e      	b.n	8000f7c <__aeabi_dsub+0x110>
 800103e:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <__aeabi_dsub+0x36c>)
 8001040:	4311      	orrs	r1, r2
 8001042:	468a      	mov	sl, r1
 8001044:	18eb      	adds	r3, r5, r3
 8001046:	2900      	cmp	r1, #0
 8001048:	d028      	beq.n	800109c <__aeabi_dsub+0x230>
 800104a:	4566      	cmp	r6, ip
 800104c:	d02c      	beq.n	80010a8 <__aeabi_dsub+0x23c>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d05b      	beq.n	800110a <__aeabi_dsub+0x29e>
 8001052:	2d00      	cmp	r5, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dsub+0x1ec>
 8001056:	e12c      	b.n	80012b2 <__aeabi_dsub+0x446>
 8001058:	465b      	mov	r3, fp
 800105a:	4666      	mov	r6, ip
 800105c:	075f      	lsls	r7, r3, #29
 800105e:	08d2      	lsrs	r2, r2, #3
 8001060:	4317      	orrs	r7, r2
 8001062:	08dd      	lsrs	r5, r3, #3
 8001064:	003b      	movs	r3, r7
 8001066:	432b      	orrs	r3, r5
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x200>
 800106a:	e0e2      	b.n	8001232 <__aeabi_dsub+0x3c6>
 800106c:	2480      	movs	r4, #128	@ 0x80
 800106e:	0324      	lsls	r4, r4, #12
 8001070:	432c      	orrs	r4, r5
 8001072:	0324      	lsls	r4, r4, #12
 8001074:	4d56      	ldr	r5, [pc, #344]	@ (80011d0 <__aeabi_dsub+0x364>)
 8001076:	0b24      	lsrs	r4, r4, #12
 8001078:	e08c      	b.n	8001194 <__aeabi_dsub+0x328>
 800107a:	4659      	mov	r1, fp
 800107c:	4311      	orrs	r1, r2
 800107e:	d100      	bne.n	8001082 <__aeabi_dsub+0x216>
 8001080:	e0d5      	b.n	800122e <__aeabi_dsub+0x3c2>
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d100      	bne.n	800108a <__aeabi_dsub+0x21e>
 8001088:	e1b9      	b.n	80013fe <__aeabi_dsub+0x592>
 800108a:	42bb      	cmp	r3, r7
 800108c:	d100      	bne.n	8001090 <__aeabi_dsub+0x224>
 800108e:	e1b1      	b.n	80013f4 <__aeabi_dsub+0x588>
 8001090:	2701      	movs	r7, #1
 8001092:	000b      	movs	r3, r1
 8001094:	2938      	cmp	r1, #56	@ 0x38
 8001096:	dd00      	ble.n	800109a <__aeabi_dsub+0x22e>
 8001098:	e740      	b.n	8000f1c <__aeabi_dsub+0xb0>
 800109a:	e72a      	b.n	8000ef2 <__aeabi_dsub+0x86>
 800109c:	4661      	mov	r1, ip
 800109e:	2701      	movs	r7, #1
 80010a0:	4079      	eors	r1, r7
 80010a2:	468c      	mov	ip, r1
 80010a4:	4566      	cmp	r6, ip
 80010a6:	d1d2      	bne.n	800104e <__aeabi_dsub+0x1e2>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dsub+0x242>
 80010ac:	e0c5      	b.n	800123a <__aeabi_dsub+0x3ce>
 80010ae:	2d00      	cmp	r5, #0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_dsub+0x248>
 80010b2:	e155      	b.n	8001360 <__aeabi_dsub+0x4f4>
 80010b4:	464b      	mov	r3, r9
 80010b6:	0025      	movs	r5, r4
 80010b8:	4305      	orrs	r5, r0
 80010ba:	d100      	bne.n	80010be <__aeabi_dsub+0x252>
 80010bc:	e212      	b.n	80014e4 <__aeabi_dsub+0x678>
 80010be:	1e59      	subs	r1, r3, #1
 80010c0:	468c      	mov	ip, r1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x25c>
 80010c6:	e249      	b.n	800155c <__aeabi_dsub+0x6f0>
 80010c8:	4d41      	ldr	r5, [pc, #260]	@ (80011d0 <__aeabi_dsub+0x364>)
 80010ca:	42ab      	cmp	r3, r5
 80010cc:	d100      	bne.n	80010d0 <__aeabi_dsub+0x264>
 80010ce:	e28f      	b.n	80015f0 <__aeabi_dsub+0x784>
 80010d0:	2701      	movs	r7, #1
 80010d2:	2938      	cmp	r1, #56	@ 0x38
 80010d4:	dc11      	bgt.n	80010fa <__aeabi_dsub+0x28e>
 80010d6:	4663      	mov	r3, ip
 80010d8:	2b1f      	cmp	r3, #31
 80010da:	dd00      	ble.n	80010de <__aeabi_dsub+0x272>
 80010dc:	e25b      	b.n	8001596 <__aeabi_dsub+0x72a>
 80010de:	4661      	mov	r1, ip
 80010e0:	2320      	movs	r3, #32
 80010e2:	0027      	movs	r7, r4
 80010e4:	1a5b      	subs	r3, r3, r1
 80010e6:	0005      	movs	r5, r0
 80010e8:	4098      	lsls	r0, r3
 80010ea:	409f      	lsls	r7, r3
 80010ec:	40cd      	lsrs	r5, r1
 80010ee:	1e43      	subs	r3, r0, #1
 80010f0:	4198      	sbcs	r0, r3
 80010f2:	40cc      	lsrs	r4, r1
 80010f4:	432f      	orrs	r7, r5
 80010f6:	4307      	orrs	r7, r0
 80010f8:	44a3      	add	fp, r4
 80010fa:	18bf      	adds	r7, r7, r2
 80010fc:	4297      	cmp	r7, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	445a      	add	r2, fp
 8001104:	0014      	movs	r4, r2
 8001106:	464d      	mov	r5, r9
 8001108:	e787      	b.n	800101a <__aeabi_dsub+0x1ae>
 800110a:	4f34      	ldr	r7, [pc, #208]	@ (80011dc <__aeabi_dsub+0x370>)
 800110c:	1c6b      	adds	r3, r5, #1
 800110e:	423b      	tst	r3, r7
 8001110:	d000      	beq.n	8001114 <__aeabi_dsub+0x2a8>
 8001112:	e0b6      	b.n	8001282 <__aeabi_dsub+0x416>
 8001114:	4659      	mov	r1, fp
 8001116:	0023      	movs	r3, r4
 8001118:	4311      	orrs	r1, r2
 800111a:	000f      	movs	r7, r1
 800111c:	4303      	orrs	r3, r0
 800111e:	2d00      	cmp	r5, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_dsub+0x2b8>
 8001122:	e126      	b.n	8001372 <__aeabi_dsub+0x506>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d100      	bne.n	800112a <__aeabi_dsub+0x2be>
 8001128:	e1c0      	b.n	80014ac <__aeabi_dsub+0x640>
 800112a:	2900      	cmp	r1, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_dsub+0x2c4>
 800112e:	e0a1      	b.n	8001274 <__aeabi_dsub+0x408>
 8001130:	1a83      	subs	r3, r0, r2
 8001132:	4698      	mov	r8, r3
 8001134:	465b      	mov	r3, fp
 8001136:	4540      	cmp	r0, r8
 8001138:	41ad      	sbcs	r5, r5
 800113a:	1ae3      	subs	r3, r4, r3
 800113c:	426d      	negs	r5, r5
 800113e:	1b5b      	subs	r3, r3, r5
 8001140:	2580      	movs	r5, #128	@ 0x80
 8001142:	042d      	lsls	r5, r5, #16
 8001144:	422b      	tst	r3, r5
 8001146:	d100      	bne.n	800114a <__aeabi_dsub+0x2de>
 8001148:	e14b      	b.n	80013e2 <__aeabi_dsub+0x576>
 800114a:	465b      	mov	r3, fp
 800114c:	1a10      	subs	r0, r2, r0
 800114e:	4282      	cmp	r2, r0
 8001150:	4192      	sbcs	r2, r2
 8001152:	1b1c      	subs	r4, r3, r4
 8001154:	0007      	movs	r7, r0
 8001156:	2601      	movs	r6, #1
 8001158:	4663      	mov	r3, ip
 800115a:	4252      	negs	r2, r2
 800115c:	1aa4      	subs	r4, r4, r2
 800115e:	4327      	orrs	r7, r4
 8001160:	401e      	ands	r6, r3
 8001162:	2f00      	cmp	r7, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dsub+0x2fc>
 8001166:	e142      	b.n	80013ee <__aeabi_dsub+0x582>
 8001168:	422c      	tst	r4, r5
 800116a:	d100      	bne.n	800116e <__aeabi_dsub+0x302>
 800116c:	e26d      	b.n	800164a <__aeabi_dsub+0x7de>
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <__aeabi_dsub+0x368>)
 8001170:	2501      	movs	r5, #1
 8001172:	401c      	ands	r4, r3
 8001174:	e71b      	b.n	8000fae <__aeabi_dsub+0x142>
 8001176:	42bd      	cmp	r5, r7
 8001178:	d100      	bne.n	800117c <__aeabi_dsub+0x310>
 800117a:	e13b      	b.n	80013f4 <__aeabi_dsub+0x588>
 800117c:	2701      	movs	r7, #1
 800117e:	2b38      	cmp	r3, #56	@ 0x38
 8001180:	dd00      	ble.n	8001184 <__aeabi_dsub+0x318>
 8001182:	e745      	b.n	8001010 <__aeabi_dsub+0x1a4>
 8001184:	2780      	movs	r7, #128	@ 0x80
 8001186:	4659      	mov	r1, fp
 8001188:	043f      	lsls	r7, r7, #16
 800118a:	4339      	orrs	r1, r7
 800118c:	468b      	mov	fp, r1
 800118e:	e72a      	b.n	8000fe6 <__aeabi_dsub+0x17a>
 8001190:	2400      	movs	r4, #0
 8001192:	2700      	movs	r7, #0
 8001194:	052d      	lsls	r5, r5, #20
 8001196:	4325      	orrs	r5, r4
 8001198:	07f6      	lsls	r6, r6, #31
 800119a:	4335      	orrs	r5, r6
 800119c:	0038      	movs	r0, r7
 800119e:	0029      	movs	r1, r5
 80011a0:	b003      	add	sp, #12
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	46bb      	mov	fp, r7
 80011a6:	46b2      	mov	sl, r6
 80011a8:	46a9      	mov	r9, r5
 80011aa:	46a0      	mov	r8, r4
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	077b      	lsls	r3, r7, #29
 80011b0:	d004      	beq.n	80011bc <__aeabi_dsub+0x350>
 80011b2:	230f      	movs	r3, #15
 80011b4:	403b      	ands	r3, r7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d000      	beq.n	80011bc <__aeabi_dsub+0x350>
 80011ba:	e6e7      	b.n	8000f8c <__aeabi_dsub+0x120>
 80011bc:	002b      	movs	r3, r5
 80011be:	08f8      	lsrs	r0, r7, #3
 80011c0:	4a03      	ldr	r2, [pc, #12]	@ (80011d0 <__aeabi_dsub+0x364>)
 80011c2:	0767      	lsls	r7, r4, #29
 80011c4:	4307      	orrs	r7, r0
 80011c6:	08e5      	lsrs	r5, r4, #3
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_dsub+0x362>
 80011cc:	e74a      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80011ce:	e0a5      	b.n	800131c <__aeabi_dsub+0x4b0>
 80011d0:	000007ff 	.word	0x000007ff
 80011d4:	ff7fffff 	.word	0xff7fffff
 80011d8:	fffff801 	.word	0xfffff801
 80011dc:	000007fe 	.word	0x000007fe
 80011e0:	0038      	movs	r0, r7
 80011e2:	f000 fbbf 	bl	8001964 <__clzsi2>
 80011e6:	0003      	movs	r3, r0
 80011e8:	3318      	adds	r3, #24
 80011ea:	2b1f      	cmp	r3, #31
 80011ec:	dc00      	bgt.n	80011f0 <__aeabi_dsub+0x384>
 80011ee:	e6a7      	b.n	8000f40 <__aeabi_dsub+0xd4>
 80011f0:	003a      	movs	r2, r7
 80011f2:	3808      	subs	r0, #8
 80011f4:	4082      	lsls	r2, r0
 80011f6:	429d      	cmp	r5, r3
 80011f8:	dd00      	ble.n	80011fc <__aeabi_dsub+0x390>
 80011fa:	e08a      	b.n	8001312 <__aeabi_dsub+0x4a6>
 80011fc:	1b5b      	subs	r3, r3, r5
 80011fe:	1c58      	adds	r0, r3, #1
 8001200:	281f      	cmp	r0, #31
 8001202:	dc00      	bgt.n	8001206 <__aeabi_dsub+0x39a>
 8001204:	e1d8      	b.n	80015b8 <__aeabi_dsub+0x74c>
 8001206:	0017      	movs	r7, r2
 8001208:	3b1f      	subs	r3, #31
 800120a:	40df      	lsrs	r7, r3
 800120c:	2820      	cmp	r0, #32
 800120e:	d005      	beq.n	800121c <__aeabi_dsub+0x3b0>
 8001210:	2340      	movs	r3, #64	@ 0x40
 8001212:	1a1b      	subs	r3, r3, r0
 8001214:	409a      	lsls	r2, r3
 8001216:	1e53      	subs	r3, r2, #1
 8001218:	419a      	sbcs	r2, r3
 800121a:	4317      	orrs	r7, r2
 800121c:	2500      	movs	r5, #0
 800121e:	2f00      	cmp	r7, #0
 8001220:	d100      	bne.n	8001224 <__aeabi_dsub+0x3b8>
 8001222:	e0e5      	b.n	80013f0 <__aeabi_dsub+0x584>
 8001224:	077b      	lsls	r3, r7, #29
 8001226:	d000      	beq.n	800122a <__aeabi_dsub+0x3be>
 8001228:	e6ab      	b.n	8000f82 <__aeabi_dsub+0x116>
 800122a:	002c      	movs	r4, r5
 800122c:	e7c6      	b.n	80011bc <__aeabi_dsub+0x350>
 800122e:	08c0      	lsrs	r0, r0, #3
 8001230:	e7c6      	b.n	80011c0 <__aeabi_dsub+0x354>
 8001232:	2700      	movs	r7, #0
 8001234:	2400      	movs	r4, #0
 8001236:	4dd1      	ldr	r5, [pc, #836]	@ (800157c <__aeabi_dsub+0x710>)
 8001238:	e7ac      	b.n	8001194 <__aeabi_dsub+0x328>
 800123a:	4fd1      	ldr	r7, [pc, #836]	@ (8001580 <__aeabi_dsub+0x714>)
 800123c:	1c6b      	adds	r3, r5, #1
 800123e:	423b      	tst	r3, r7
 8001240:	d171      	bne.n	8001326 <__aeabi_dsub+0x4ba>
 8001242:	0023      	movs	r3, r4
 8001244:	4303      	orrs	r3, r0
 8001246:	2d00      	cmp	r5, #0
 8001248:	d000      	beq.n	800124c <__aeabi_dsub+0x3e0>
 800124a:	e14e      	b.n	80014ea <__aeabi_dsub+0x67e>
 800124c:	4657      	mov	r7, sl
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x3e8>
 8001252:	e1b5      	b.n	80015c0 <__aeabi_dsub+0x754>
 8001254:	2f00      	cmp	r7, #0
 8001256:	d00d      	beq.n	8001274 <__aeabi_dsub+0x408>
 8001258:	1883      	adds	r3, r0, r2
 800125a:	4283      	cmp	r3, r0
 800125c:	4180      	sbcs	r0, r0
 800125e:	445c      	add	r4, fp
 8001260:	4240      	negs	r0, r0
 8001262:	1824      	adds	r4, r4, r0
 8001264:	0222      	lsls	r2, r4, #8
 8001266:	d500      	bpl.n	800126a <__aeabi_dsub+0x3fe>
 8001268:	e1c8      	b.n	80015fc <__aeabi_dsub+0x790>
 800126a:	001f      	movs	r7, r3
 800126c:	4698      	mov	r8, r3
 800126e:	4327      	orrs	r7, r4
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x408>
 8001272:	e0bc      	b.n	80013ee <__aeabi_dsub+0x582>
 8001274:	4643      	mov	r3, r8
 8001276:	0767      	lsls	r7, r4, #29
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	431f      	orrs	r7, r3
 800127c:	08e5      	lsrs	r5, r4, #3
 800127e:	2300      	movs	r3, #0
 8001280:	e04c      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001282:	1a83      	subs	r3, r0, r2
 8001284:	4698      	mov	r8, r3
 8001286:	465b      	mov	r3, fp
 8001288:	4540      	cmp	r0, r8
 800128a:	41bf      	sbcs	r7, r7
 800128c:	1ae3      	subs	r3, r4, r3
 800128e:	427f      	negs	r7, r7
 8001290:	1bdb      	subs	r3, r3, r7
 8001292:	021f      	lsls	r7, r3, #8
 8001294:	d47c      	bmi.n	8001390 <__aeabi_dsub+0x524>
 8001296:	4647      	mov	r7, r8
 8001298:	431f      	orrs	r7, r3
 800129a:	d100      	bne.n	800129e <__aeabi_dsub+0x432>
 800129c:	e0a6      	b.n	80013ec <__aeabi_dsub+0x580>
 800129e:	001c      	movs	r4, r3
 80012a0:	4647      	mov	r7, r8
 80012a2:	e645      	b.n	8000f30 <__aeabi_dsub+0xc4>
 80012a4:	4cb7      	ldr	r4, [pc, #732]	@ (8001584 <__aeabi_dsub+0x718>)
 80012a6:	1aed      	subs	r5, r5, r3
 80012a8:	4014      	ands	r4, r2
 80012aa:	077b      	lsls	r3, r7, #29
 80012ac:	d000      	beq.n	80012b0 <__aeabi_dsub+0x444>
 80012ae:	e780      	b.n	80011b2 <__aeabi_dsub+0x346>
 80012b0:	e784      	b.n	80011bc <__aeabi_dsub+0x350>
 80012b2:	464b      	mov	r3, r9
 80012b4:	0025      	movs	r5, r4
 80012b6:	4305      	orrs	r5, r0
 80012b8:	d066      	beq.n	8001388 <__aeabi_dsub+0x51c>
 80012ba:	1e5f      	subs	r7, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d100      	bne.n	80012c2 <__aeabi_dsub+0x456>
 80012c0:	e0fc      	b.n	80014bc <__aeabi_dsub+0x650>
 80012c2:	4dae      	ldr	r5, [pc, #696]	@ (800157c <__aeabi_dsub+0x710>)
 80012c4:	42ab      	cmp	r3, r5
 80012c6:	d100      	bne.n	80012ca <__aeabi_dsub+0x45e>
 80012c8:	e15e      	b.n	8001588 <__aeabi_dsub+0x71c>
 80012ca:	4666      	mov	r6, ip
 80012cc:	2f38      	cmp	r7, #56	@ 0x38
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_dsub+0x466>
 80012d0:	e0b4      	b.n	800143c <__aeabi_dsub+0x5d0>
 80012d2:	2001      	movs	r0, #1
 80012d4:	1a17      	subs	r7, r2, r0
 80012d6:	42ba      	cmp	r2, r7
 80012d8:	4192      	sbcs	r2, r2
 80012da:	465b      	mov	r3, fp
 80012dc:	4252      	negs	r2, r2
 80012de:	464d      	mov	r5, r9
 80012e0:	1a9c      	subs	r4, r3, r2
 80012e2:	e620      	b.n	8000f26 <__aeabi_dsub+0xba>
 80012e4:	0767      	lsls	r7, r4, #29
 80012e6:	08c0      	lsrs	r0, r0, #3
 80012e8:	4307      	orrs	r7, r0
 80012ea:	08e5      	lsrs	r5, r4, #3
 80012ec:	e6ba      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80012ee:	001f      	movs	r7, r3
 80012f0:	4659      	mov	r1, fp
 80012f2:	3f20      	subs	r7, #32
 80012f4:	40f9      	lsrs	r1, r7
 80012f6:	000f      	movs	r7, r1
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d005      	beq.n	8001308 <__aeabi_dsub+0x49c>
 80012fc:	2140      	movs	r1, #64	@ 0x40
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	4659      	mov	r1, fp
 8001302:	4099      	lsls	r1, r3
 8001304:	430a      	orrs	r2, r1
 8001306:	4692      	mov	sl, r2
 8001308:	4653      	mov	r3, sl
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	4193      	sbcs	r3, r2
 800130e:	431f      	orrs	r7, r3
 8001310:	e604      	b.n	8000f1c <__aeabi_dsub+0xb0>
 8001312:	1aeb      	subs	r3, r5, r3
 8001314:	4d9b      	ldr	r5, [pc, #620]	@ (8001584 <__aeabi_dsub+0x718>)
 8001316:	4015      	ands	r5, r2
 8001318:	076f      	lsls	r7, r5, #29
 800131a:	08ed      	lsrs	r5, r5, #3
 800131c:	032c      	lsls	r4, r5, #12
 800131e:	055d      	lsls	r5, r3, #21
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	0d6d      	lsrs	r5, r5, #21
 8001324:	e736      	b.n	8001194 <__aeabi_dsub+0x328>
 8001326:	4d95      	ldr	r5, [pc, #596]	@ (800157c <__aeabi_dsub+0x710>)
 8001328:	42ab      	cmp	r3, r5
 800132a:	d100      	bne.n	800132e <__aeabi_dsub+0x4c2>
 800132c:	e0d6      	b.n	80014dc <__aeabi_dsub+0x670>
 800132e:	1882      	adds	r2, r0, r2
 8001330:	0021      	movs	r1, r4
 8001332:	4282      	cmp	r2, r0
 8001334:	4180      	sbcs	r0, r0
 8001336:	4459      	add	r1, fp
 8001338:	4240      	negs	r0, r0
 800133a:	1808      	adds	r0, r1, r0
 800133c:	07c7      	lsls	r7, r0, #31
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	4317      	orrs	r7, r2
 8001342:	0844      	lsrs	r4, r0, #1
 8001344:	0752      	lsls	r2, r2, #29
 8001346:	d400      	bmi.n	800134a <__aeabi_dsub+0x4de>
 8001348:	e185      	b.n	8001656 <__aeabi_dsub+0x7ea>
 800134a:	220f      	movs	r2, #15
 800134c:	001d      	movs	r5, r3
 800134e:	403a      	ands	r2, r7
 8001350:	2a04      	cmp	r2, #4
 8001352:	d000      	beq.n	8001356 <__aeabi_dsub+0x4ea>
 8001354:	e61a      	b.n	8000f8c <__aeabi_dsub+0x120>
 8001356:	08ff      	lsrs	r7, r7, #3
 8001358:	0764      	lsls	r4, r4, #29
 800135a:	4327      	orrs	r7, r4
 800135c:	0905      	lsrs	r5, r0, #4
 800135e:	e7dd      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001360:	465b      	mov	r3, fp
 8001362:	08d2      	lsrs	r2, r2, #3
 8001364:	075f      	lsls	r7, r3, #29
 8001366:	4317      	orrs	r7, r2
 8001368:	08dd      	lsrs	r5, r3, #3
 800136a:	e67b      	b.n	8001064 <__aeabi_dsub+0x1f8>
 800136c:	2700      	movs	r7, #0
 800136e:	2400      	movs	r4, #0
 8001370:	e710      	b.n	8001194 <__aeabi_dsub+0x328>
 8001372:	2b00      	cmp	r3, #0
 8001374:	d000      	beq.n	8001378 <__aeabi_dsub+0x50c>
 8001376:	e0d6      	b.n	8001526 <__aeabi_dsub+0x6ba>
 8001378:	2900      	cmp	r1, #0
 800137a:	d000      	beq.n	800137e <__aeabi_dsub+0x512>
 800137c:	e12f      	b.n	80015de <__aeabi_dsub+0x772>
 800137e:	2480      	movs	r4, #128	@ 0x80
 8001380:	2600      	movs	r6, #0
 8001382:	4d7e      	ldr	r5, [pc, #504]	@ (800157c <__aeabi_dsub+0x710>)
 8001384:	0324      	lsls	r4, r4, #12
 8001386:	e705      	b.n	8001194 <__aeabi_dsub+0x328>
 8001388:	4666      	mov	r6, ip
 800138a:	465c      	mov	r4, fp
 800138c:	08d0      	lsrs	r0, r2, #3
 800138e:	e717      	b.n	80011c0 <__aeabi_dsub+0x354>
 8001390:	465b      	mov	r3, fp
 8001392:	1a17      	subs	r7, r2, r0
 8001394:	42ba      	cmp	r2, r7
 8001396:	4192      	sbcs	r2, r2
 8001398:	1b1c      	subs	r4, r3, r4
 800139a:	2601      	movs	r6, #1
 800139c:	4663      	mov	r3, ip
 800139e:	4252      	negs	r2, r2
 80013a0:	1aa4      	subs	r4, r4, r2
 80013a2:	401e      	ands	r6, r3
 80013a4:	e5c4      	b.n	8000f30 <__aeabi_dsub+0xc4>
 80013a6:	1883      	adds	r3, r0, r2
 80013a8:	4283      	cmp	r3, r0
 80013aa:	4180      	sbcs	r0, r0
 80013ac:	445c      	add	r4, fp
 80013ae:	4240      	negs	r0, r0
 80013b0:	1825      	adds	r5, r4, r0
 80013b2:	022a      	lsls	r2, r5, #8
 80013b4:	d400      	bmi.n	80013b8 <__aeabi_dsub+0x54c>
 80013b6:	e0da      	b.n	800156e <__aeabi_dsub+0x702>
 80013b8:	4a72      	ldr	r2, [pc, #456]	@ (8001584 <__aeabi_dsub+0x718>)
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	4015      	ands	r5, r2
 80013be:	07ea      	lsls	r2, r5, #31
 80013c0:	431a      	orrs	r2, r3
 80013c2:	0869      	lsrs	r1, r5, #1
 80013c4:	075b      	lsls	r3, r3, #29
 80013c6:	d400      	bmi.n	80013ca <__aeabi_dsub+0x55e>
 80013c8:	e14a      	b.n	8001660 <__aeabi_dsub+0x7f4>
 80013ca:	230f      	movs	r3, #15
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dsub+0x568>
 80013d2:	e0fc      	b.n	80015ce <__aeabi_dsub+0x762>
 80013d4:	1d17      	adds	r7, r2, #4
 80013d6:	4297      	cmp	r7, r2
 80013d8:	41a4      	sbcs	r4, r4
 80013da:	4264      	negs	r4, r4
 80013dc:	2502      	movs	r5, #2
 80013de:	1864      	adds	r4, r4, r1
 80013e0:	e6ec      	b.n	80011bc <__aeabi_dsub+0x350>
 80013e2:	4647      	mov	r7, r8
 80013e4:	001c      	movs	r4, r3
 80013e6:	431f      	orrs	r7, r3
 80013e8:	d000      	beq.n	80013ec <__aeabi_dsub+0x580>
 80013ea:	e743      	b.n	8001274 <__aeabi_dsub+0x408>
 80013ec:	2600      	movs	r6, #0
 80013ee:	2500      	movs	r5, #0
 80013f0:	2400      	movs	r4, #0
 80013f2:	e6cf      	b.n	8001194 <__aeabi_dsub+0x328>
 80013f4:	08c0      	lsrs	r0, r0, #3
 80013f6:	0767      	lsls	r7, r4, #29
 80013f8:	4307      	orrs	r7, r0
 80013fa:	08e5      	lsrs	r5, r4, #3
 80013fc:	e632      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80013fe:	1a87      	subs	r7, r0, r2
 8001400:	465b      	mov	r3, fp
 8001402:	42b8      	cmp	r0, r7
 8001404:	4180      	sbcs	r0, r0
 8001406:	1ae4      	subs	r4, r4, r3
 8001408:	4240      	negs	r0, r0
 800140a:	1a24      	subs	r4, r4, r0
 800140c:	0223      	lsls	r3, r4, #8
 800140e:	d428      	bmi.n	8001462 <__aeabi_dsub+0x5f6>
 8001410:	0763      	lsls	r3, r4, #29
 8001412:	08ff      	lsrs	r7, r7, #3
 8001414:	431f      	orrs	r7, r3
 8001416:	08e5      	lsrs	r5, r4, #3
 8001418:	2301      	movs	r3, #1
 800141a:	e77f      	b.n	800131c <__aeabi_dsub+0x4b0>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x5b6>
 8001420:	e673      	b.n	800110a <__aeabi_dsub+0x29e>
 8001422:	464b      	mov	r3, r9
 8001424:	1b5f      	subs	r7, r3, r5
 8001426:	003b      	movs	r3, r7
 8001428:	2d00      	cmp	r5, #0
 800142a:	d100      	bne.n	800142e <__aeabi_dsub+0x5c2>
 800142c:	e742      	b.n	80012b4 <__aeabi_dsub+0x448>
 800142e:	2f38      	cmp	r7, #56	@ 0x38
 8001430:	dd00      	ble.n	8001434 <__aeabi_dsub+0x5c8>
 8001432:	e0ec      	b.n	800160e <__aeabi_dsub+0x7a2>
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	000e      	movs	r6, r1
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	431c      	orrs	r4, r3
 800143c:	2f1f      	cmp	r7, #31
 800143e:	dc25      	bgt.n	800148c <__aeabi_dsub+0x620>
 8001440:	2520      	movs	r5, #32
 8001442:	0023      	movs	r3, r4
 8001444:	1bed      	subs	r5, r5, r7
 8001446:	0001      	movs	r1, r0
 8001448:	40a8      	lsls	r0, r5
 800144a:	40ab      	lsls	r3, r5
 800144c:	40f9      	lsrs	r1, r7
 800144e:	1e45      	subs	r5, r0, #1
 8001450:	41a8      	sbcs	r0, r5
 8001452:	430b      	orrs	r3, r1
 8001454:	40fc      	lsrs	r4, r7
 8001456:	4318      	orrs	r0, r3
 8001458:	465b      	mov	r3, fp
 800145a:	1b1b      	subs	r3, r3, r4
 800145c:	469b      	mov	fp, r3
 800145e:	e739      	b.n	80012d4 <__aeabi_dsub+0x468>
 8001460:	4666      	mov	r6, ip
 8001462:	2501      	movs	r5, #1
 8001464:	e562      	b.n	8000f2c <__aeabi_dsub+0xc0>
 8001466:	001f      	movs	r7, r3
 8001468:	4659      	mov	r1, fp
 800146a:	3f20      	subs	r7, #32
 800146c:	40f9      	lsrs	r1, r7
 800146e:	468c      	mov	ip, r1
 8001470:	2b20      	cmp	r3, #32
 8001472:	d005      	beq.n	8001480 <__aeabi_dsub+0x614>
 8001474:	2740      	movs	r7, #64	@ 0x40
 8001476:	4659      	mov	r1, fp
 8001478:	1afb      	subs	r3, r7, r3
 800147a:	4099      	lsls	r1, r3
 800147c:	430a      	orrs	r2, r1
 800147e:	4692      	mov	sl, r2
 8001480:	4657      	mov	r7, sl
 8001482:	1e7b      	subs	r3, r7, #1
 8001484:	419f      	sbcs	r7, r3
 8001486:	4663      	mov	r3, ip
 8001488:	431f      	orrs	r7, r3
 800148a:	e5c1      	b.n	8001010 <__aeabi_dsub+0x1a4>
 800148c:	003b      	movs	r3, r7
 800148e:	0025      	movs	r5, r4
 8001490:	3b20      	subs	r3, #32
 8001492:	40dd      	lsrs	r5, r3
 8001494:	2f20      	cmp	r7, #32
 8001496:	d004      	beq.n	80014a2 <__aeabi_dsub+0x636>
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	1bdb      	subs	r3, r3, r7
 800149c:	409c      	lsls	r4, r3
 800149e:	4320      	orrs	r0, r4
 80014a0:	4680      	mov	r8, r0
 80014a2:	4640      	mov	r0, r8
 80014a4:	1e43      	subs	r3, r0, #1
 80014a6:	4198      	sbcs	r0, r3
 80014a8:	4328      	orrs	r0, r5
 80014aa:	e713      	b.n	80012d4 <__aeabi_dsub+0x468>
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d09d      	beq.n	80013ec <__aeabi_dsub+0x580>
 80014b0:	2601      	movs	r6, #1
 80014b2:	4663      	mov	r3, ip
 80014b4:	465c      	mov	r4, fp
 80014b6:	4690      	mov	r8, r2
 80014b8:	401e      	ands	r6, r3
 80014ba:	e6db      	b.n	8001274 <__aeabi_dsub+0x408>
 80014bc:	1a17      	subs	r7, r2, r0
 80014be:	465b      	mov	r3, fp
 80014c0:	42ba      	cmp	r2, r7
 80014c2:	4192      	sbcs	r2, r2
 80014c4:	1b1c      	subs	r4, r3, r4
 80014c6:	4252      	negs	r2, r2
 80014c8:	1aa4      	subs	r4, r4, r2
 80014ca:	0223      	lsls	r3, r4, #8
 80014cc:	d4c8      	bmi.n	8001460 <__aeabi_dsub+0x5f4>
 80014ce:	0763      	lsls	r3, r4, #29
 80014d0:	08ff      	lsrs	r7, r7, #3
 80014d2:	431f      	orrs	r7, r3
 80014d4:	4666      	mov	r6, ip
 80014d6:	2301      	movs	r3, #1
 80014d8:	08e5      	lsrs	r5, r4, #3
 80014da:	e71f      	b.n	800131c <__aeabi_dsub+0x4b0>
 80014dc:	001d      	movs	r5, r3
 80014de:	2400      	movs	r4, #0
 80014e0:	2700      	movs	r7, #0
 80014e2:	e657      	b.n	8001194 <__aeabi_dsub+0x328>
 80014e4:	465c      	mov	r4, fp
 80014e6:	08d0      	lsrs	r0, r2, #3
 80014e8:	e66a      	b.n	80011c0 <__aeabi_dsub+0x354>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x684>
 80014ee:	e737      	b.n	8001360 <__aeabi_dsub+0x4f4>
 80014f0:	4653      	mov	r3, sl
 80014f2:	08c0      	lsrs	r0, r0, #3
 80014f4:	0767      	lsls	r7, r4, #29
 80014f6:	4307      	orrs	r7, r0
 80014f8:	08e5      	lsrs	r5, r4, #3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x694>
 80014fe:	e5b1      	b.n	8001064 <__aeabi_dsub+0x1f8>
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	031b      	lsls	r3, r3, #12
 8001504:	421d      	tst	r5, r3
 8001506:	d008      	beq.n	800151a <__aeabi_dsub+0x6ae>
 8001508:	4659      	mov	r1, fp
 800150a:	08c8      	lsrs	r0, r1, #3
 800150c:	4218      	tst	r0, r3
 800150e:	d104      	bne.n	800151a <__aeabi_dsub+0x6ae>
 8001510:	08d2      	lsrs	r2, r2, #3
 8001512:	0749      	lsls	r1, r1, #29
 8001514:	430a      	orrs	r2, r1
 8001516:	0017      	movs	r7, r2
 8001518:	0005      	movs	r5, r0
 800151a:	0f7b      	lsrs	r3, r7, #29
 800151c:	00ff      	lsls	r7, r7, #3
 800151e:	08ff      	lsrs	r7, r7, #3
 8001520:	075b      	lsls	r3, r3, #29
 8001522:	431f      	orrs	r7, r3
 8001524:	e59e      	b.n	8001064 <__aeabi_dsub+0x1f8>
 8001526:	08c0      	lsrs	r0, r0, #3
 8001528:	0763      	lsls	r3, r4, #29
 800152a:	4318      	orrs	r0, r3
 800152c:	08e5      	lsrs	r5, r4, #3
 800152e:	2900      	cmp	r1, #0
 8001530:	d053      	beq.n	80015da <__aeabi_dsub+0x76e>
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	031b      	lsls	r3, r3, #12
 8001536:	421d      	tst	r5, r3
 8001538:	d00a      	beq.n	8001550 <__aeabi_dsub+0x6e4>
 800153a:	4659      	mov	r1, fp
 800153c:	08cc      	lsrs	r4, r1, #3
 800153e:	421c      	tst	r4, r3
 8001540:	d106      	bne.n	8001550 <__aeabi_dsub+0x6e4>
 8001542:	2601      	movs	r6, #1
 8001544:	4663      	mov	r3, ip
 8001546:	0025      	movs	r5, r4
 8001548:	08d0      	lsrs	r0, r2, #3
 800154a:	0749      	lsls	r1, r1, #29
 800154c:	4308      	orrs	r0, r1
 800154e:	401e      	ands	r6, r3
 8001550:	0f47      	lsrs	r7, r0, #29
 8001552:	00c0      	lsls	r0, r0, #3
 8001554:	08c0      	lsrs	r0, r0, #3
 8001556:	077f      	lsls	r7, r7, #29
 8001558:	4307      	orrs	r7, r0
 800155a:	e583      	b.n	8001064 <__aeabi_dsub+0x1f8>
 800155c:	1883      	adds	r3, r0, r2
 800155e:	4293      	cmp	r3, r2
 8001560:	4192      	sbcs	r2, r2
 8001562:	445c      	add	r4, fp
 8001564:	4252      	negs	r2, r2
 8001566:	18a5      	adds	r5, r4, r2
 8001568:	022a      	lsls	r2, r5, #8
 800156a:	d500      	bpl.n	800156e <__aeabi_dsub+0x702>
 800156c:	e724      	b.n	80013b8 <__aeabi_dsub+0x54c>
 800156e:	076f      	lsls	r7, r5, #29
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	431f      	orrs	r7, r3
 8001574:	08ed      	lsrs	r5, r5, #3
 8001576:	2301      	movs	r3, #1
 8001578:	e6d0      	b.n	800131c <__aeabi_dsub+0x4b0>
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	000007ff 	.word	0x000007ff
 8001580:	000007fe 	.word	0x000007fe
 8001584:	ff7fffff 	.word	0xff7fffff
 8001588:	465b      	mov	r3, fp
 800158a:	08d2      	lsrs	r2, r2, #3
 800158c:	075f      	lsls	r7, r3, #29
 800158e:	4666      	mov	r6, ip
 8001590:	4317      	orrs	r7, r2
 8001592:	08dd      	lsrs	r5, r3, #3
 8001594:	e566      	b.n	8001064 <__aeabi_dsub+0x1f8>
 8001596:	0025      	movs	r5, r4
 8001598:	3b20      	subs	r3, #32
 800159a:	40dd      	lsrs	r5, r3
 800159c:	4663      	mov	r3, ip
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d005      	beq.n	80015ae <__aeabi_dsub+0x742>
 80015a2:	2340      	movs	r3, #64	@ 0x40
 80015a4:	4661      	mov	r1, ip
 80015a6:	1a5b      	subs	r3, r3, r1
 80015a8:	409c      	lsls	r4, r3
 80015aa:	4320      	orrs	r0, r4
 80015ac:	4680      	mov	r8, r0
 80015ae:	4647      	mov	r7, r8
 80015b0:	1e7b      	subs	r3, r7, #1
 80015b2:	419f      	sbcs	r7, r3
 80015b4:	432f      	orrs	r7, r5
 80015b6:	e5a0      	b.n	80010fa <__aeabi_dsub+0x28e>
 80015b8:	2120      	movs	r1, #32
 80015ba:	2700      	movs	r7, #0
 80015bc:	1a09      	subs	r1, r1, r0
 80015be:	e4d2      	b.n	8000f66 <__aeabi_dsub+0xfa>
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dsub+0x75a>
 80015c4:	e713      	b.n	80013ee <__aeabi_dsub+0x582>
 80015c6:	465c      	mov	r4, fp
 80015c8:	0017      	movs	r7, r2
 80015ca:	2500      	movs	r5, #0
 80015cc:	e5f6      	b.n	80011bc <__aeabi_dsub+0x350>
 80015ce:	08d7      	lsrs	r7, r2, #3
 80015d0:	0749      	lsls	r1, r1, #29
 80015d2:	2302      	movs	r3, #2
 80015d4:	430f      	orrs	r7, r1
 80015d6:	092d      	lsrs	r5, r5, #4
 80015d8:	e6a0      	b.n	800131c <__aeabi_dsub+0x4b0>
 80015da:	0007      	movs	r7, r0
 80015dc:	e542      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80015de:	465b      	mov	r3, fp
 80015e0:	2601      	movs	r6, #1
 80015e2:	075f      	lsls	r7, r3, #29
 80015e4:	08dd      	lsrs	r5, r3, #3
 80015e6:	4663      	mov	r3, ip
 80015e8:	08d2      	lsrs	r2, r2, #3
 80015ea:	4317      	orrs	r7, r2
 80015ec:	401e      	ands	r6, r3
 80015ee:	e539      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80015f0:	465b      	mov	r3, fp
 80015f2:	08d2      	lsrs	r2, r2, #3
 80015f4:	075f      	lsls	r7, r3, #29
 80015f6:	4317      	orrs	r7, r2
 80015f8:	08dd      	lsrs	r5, r3, #3
 80015fa:	e533      	b.n	8001064 <__aeabi_dsub+0x1f8>
 80015fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <__aeabi_dsub+0x80c>)
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	4022      	ands	r2, r4
 8001602:	0757      	lsls	r7, r2, #29
 8001604:	0252      	lsls	r2, r2, #9
 8001606:	2501      	movs	r5, #1
 8001608:	431f      	orrs	r7, r3
 800160a:	0b14      	lsrs	r4, r2, #12
 800160c:	e5c2      	b.n	8001194 <__aeabi_dsub+0x328>
 800160e:	000e      	movs	r6, r1
 8001610:	2001      	movs	r0, #1
 8001612:	e65f      	b.n	80012d4 <__aeabi_dsub+0x468>
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <__aeabi_dsub+0x7c8>
 8001618:	464b      	mov	r3, r9
 800161a:	1b5b      	subs	r3, r3, r5
 800161c:	469c      	mov	ip, r3
 800161e:	2d00      	cmp	r5, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_dsub+0x7b8>
 8001622:	e548      	b.n	80010b6 <__aeabi_dsub+0x24a>
 8001624:	2701      	movs	r7, #1
 8001626:	2b38      	cmp	r3, #56	@ 0x38
 8001628:	dd00      	ble.n	800162c <__aeabi_dsub+0x7c0>
 800162a:	e566      	b.n	80010fa <__aeabi_dsub+0x28e>
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	431c      	orrs	r4, r3
 8001632:	e550      	b.n	80010d6 <__aeabi_dsub+0x26a>
 8001634:	1c6b      	adds	r3, r5, #1
 8001636:	4d11      	ldr	r5, [pc, #68]	@ (800167c <__aeabi_dsub+0x810>)
 8001638:	422b      	tst	r3, r5
 800163a:	d000      	beq.n	800163e <__aeabi_dsub+0x7d2>
 800163c:	e673      	b.n	8001326 <__aeabi_dsub+0x4ba>
 800163e:	4659      	mov	r1, fp
 8001640:	0023      	movs	r3, r4
 8001642:	4311      	orrs	r1, r2
 8001644:	468a      	mov	sl, r1
 8001646:	4303      	orrs	r3, r0
 8001648:	e600      	b.n	800124c <__aeabi_dsub+0x3e0>
 800164a:	0767      	lsls	r7, r4, #29
 800164c:	08c0      	lsrs	r0, r0, #3
 800164e:	2300      	movs	r3, #0
 8001650:	4307      	orrs	r7, r0
 8001652:	08e5      	lsrs	r5, r4, #3
 8001654:	e662      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001656:	0764      	lsls	r4, r4, #29
 8001658:	08ff      	lsrs	r7, r7, #3
 800165a:	4327      	orrs	r7, r4
 800165c:	0905      	lsrs	r5, r0, #4
 800165e:	e65d      	b.n	800131c <__aeabi_dsub+0x4b0>
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	0749      	lsls	r1, r1, #29
 8001664:	4311      	orrs	r1, r2
 8001666:	000f      	movs	r7, r1
 8001668:	2302      	movs	r3, #2
 800166a:	092d      	lsrs	r5, r5, #4
 800166c:	e656      	b.n	800131c <__aeabi_dsub+0x4b0>
 800166e:	0007      	movs	r7, r0
 8001670:	e5a4      	b.n	80011bc <__aeabi_dsub+0x350>
 8001672:	0038      	movs	r0, r7
 8001674:	e48f      	b.n	8000f96 <__aeabi_dsub+0x12a>
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	ff7fffff 	.word	0xff7fffff
 800167c:	000007fe 	.word	0x000007fe

08001680 <__aeabi_d2iz>:
 8001680:	000b      	movs	r3, r1
 8001682:	0002      	movs	r2, r0
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	4d16      	ldr	r5, [pc, #88]	@ (80016e0 <__aeabi_d2iz+0x60>)
 8001688:	030c      	lsls	r4, r1, #12
 800168a:	b082      	sub	sp, #8
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	2000      	movs	r0, #0
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d49      	lsrs	r1, r1, #21
 8001698:	0fde      	lsrs	r6, r3, #31
 800169a:	42a9      	cmp	r1, r5
 800169c:	dd04      	ble.n	80016a8 <__aeabi_d2iz+0x28>
 800169e:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <__aeabi_d2iz+0x64>)
 80016a0:	4281      	cmp	r1, r0
 80016a2:	dd03      	ble.n	80016ac <__aeabi_d2iz+0x2c>
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <__aeabi_d2iz+0x68>)
 80016a6:	18f0      	adds	r0, r6, r3
 80016a8:	b002      	add	sp, #8
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	2080      	movs	r0, #128	@ 0x80
 80016ae:	0340      	lsls	r0, r0, #13
 80016b0:	4320      	orrs	r0, r4
 80016b2:	4c0e      	ldr	r4, [pc, #56]	@ (80016ec <__aeabi_d2iz+0x6c>)
 80016b4:	1a64      	subs	r4, r4, r1
 80016b6:	2c1f      	cmp	r4, #31
 80016b8:	dd08      	ble.n	80016cc <__aeabi_d2iz+0x4c>
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <__aeabi_d2iz+0x70>)
 80016bc:	1a5b      	subs	r3, r3, r1
 80016be:	40d8      	lsrs	r0, r3
 80016c0:	0003      	movs	r3, r0
 80016c2:	4258      	negs	r0, r3
 80016c4:	2e00      	cmp	r6, #0
 80016c6:	d1ef      	bne.n	80016a8 <__aeabi_d2iz+0x28>
 80016c8:	0018      	movs	r0, r3
 80016ca:	e7ed      	b.n	80016a8 <__aeabi_d2iz+0x28>
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <__aeabi_d2iz+0x74>)
 80016ce:	9a00      	ldr	r2, [sp, #0]
 80016d0:	469c      	mov	ip, r3
 80016d2:	0003      	movs	r3, r0
 80016d4:	4461      	add	r1, ip
 80016d6:	408b      	lsls	r3, r1
 80016d8:	40e2      	lsrs	r2, r4
 80016da:	4313      	orrs	r3, r2
 80016dc:	e7f1      	b.n	80016c2 <__aeabi_d2iz+0x42>
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	000003fe 	.word	0x000003fe
 80016e4:	0000041d 	.word	0x0000041d
 80016e8:	7fffffff 	.word	0x7fffffff
 80016ec:	00000433 	.word	0x00000433
 80016f0:	00000413 	.word	0x00000413
 80016f4:	fffffbed 	.word	0xfffffbed

080016f8 <__aeabi_i2d>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d016      	beq.n	800172c <__aeabi_i2d+0x34>
 80016fe:	17c3      	asrs	r3, r0, #31
 8001700:	18c5      	adds	r5, r0, r3
 8001702:	405d      	eors	r5, r3
 8001704:	0fc4      	lsrs	r4, r0, #31
 8001706:	0028      	movs	r0, r5
 8001708:	f000 f92c 	bl	8001964 <__clzsi2>
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <__aeabi_i2d+0x58>)
 800170e:	1a1b      	subs	r3, r3, r0
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	280a      	cmp	r0, #10
 8001716:	dc14      	bgt.n	8001742 <__aeabi_i2d+0x4a>
 8001718:	0002      	movs	r2, r0
 800171a:	002e      	movs	r6, r5
 800171c:	3215      	adds	r2, #21
 800171e:	4096      	lsls	r6, r2
 8001720:	220b      	movs	r2, #11
 8001722:	1a12      	subs	r2, r2, r0
 8001724:	40d5      	lsrs	r5, r2
 8001726:	032d      	lsls	r5, r5, #12
 8001728:	0b2d      	lsrs	r5, r5, #12
 800172a:	e003      	b.n	8001734 <__aeabi_i2d+0x3c>
 800172c:	2400      	movs	r4, #0
 800172e:	2300      	movs	r3, #0
 8001730:	2500      	movs	r5, #0
 8001732:	2600      	movs	r6, #0
 8001734:	051b      	lsls	r3, r3, #20
 8001736:	432b      	orrs	r3, r5
 8001738:	07e4      	lsls	r4, r4, #31
 800173a:	4323      	orrs	r3, r4
 800173c:	0030      	movs	r0, r6
 800173e:	0019      	movs	r1, r3
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	380b      	subs	r0, #11
 8001744:	4085      	lsls	r5, r0
 8001746:	032d      	lsls	r5, r5, #12
 8001748:	2600      	movs	r6, #0
 800174a:	0b2d      	lsrs	r5, r5, #12
 800174c:	e7f2      	b.n	8001734 <__aeabi_i2d+0x3c>
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	0000041e 	.word	0x0000041e

08001754 <__aeabi_f2d>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	0242      	lsls	r2, r0, #9
 8001758:	0043      	lsls	r3, r0, #1
 800175a:	0fc4      	lsrs	r4, r0, #31
 800175c:	20fe      	movs	r0, #254	@ 0xfe
 800175e:	0e1b      	lsrs	r3, r3, #24
 8001760:	1c59      	adds	r1, r3, #1
 8001762:	0a55      	lsrs	r5, r2, #9
 8001764:	4208      	tst	r0, r1
 8001766:	d00c      	beq.n	8001782 <__aeabi_f2d+0x2e>
 8001768:	21e0      	movs	r1, #224	@ 0xe0
 800176a:	0089      	lsls	r1, r1, #2
 800176c:	468c      	mov	ip, r1
 800176e:	076d      	lsls	r5, r5, #29
 8001770:	0b12      	lsrs	r2, r2, #12
 8001772:	4463      	add	r3, ip
 8001774:	051b      	lsls	r3, r3, #20
 8001776:	4313      	orrs	r3, r2
 8001778:	07e4      	lsls	r4, r4, #31
 800177a:	4323      	orrs	r3, r4
 800177c:	0028      	movs	r0, r5
 800177e:	0019      	movs	r1, r3
 8001780:	bd70      	pop	{r4, r5, r6, pc}
 8001782:	2b00      	cmp	r3, #0
 8001784:	d114      	bne.n	80017b0 <__aeabi_f2d+0x5c>
 8001786:	2d00      	cmp	r5, #0
 8001788:	d01b      	beq.n	80017c2 <__aeabi_f2d+0x6e>
 800178a:	0028      	movs	r0, r5
 800178c:	f000 f8ea 	bl	8001964 <__clzsi2>
 8001790:	280a      	cmp	r0, #10
 8001792:	dc1c      	bgt.n	80017ce <__aeabi_f2d+0x7a>
 8001794:	230b      	movs	r3, #11
 8001796:	002a      	movs	r2, r5
 8001798:	1a1b      	subs	r3, r3, r0
 800179a:	40da      	lsrs	r2, r3
 800179c:	0003      	movs	r3, r0
 800179e:	3315      	adds	r3, #21
 80017a0:	409d      	lsls	r5, r3
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <__aeabi_f2d+0x88>)
 80017a4:	0312      	lsls	r2, r2, #12
 80017a6:	1a1b      	subs	r3, r3, r0
 80017a8:	055b      	lsls	r3, r3, #21
 80017aa:	0b12      	lsrs	r2, r2, #12
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	e7e1      	b.n	8001774 <__aeabi_f2d+0x20>
 80017b0:	2d00      	cmp	r5, #0
 80017b2:	d009      	beq.n	80017c8 <__aeabi_f2d+0x74>
 80017b4:	0b13      	lsrs	r3, r2, #12
 80017b6:	2280      	movs	r2, #128	@ 0x80
 80017b8:	0312      	lsls	r2, r2, #12
 80017ba:	431a      	orrs	r2, r3
 80017bc:	076d      	lsls	r5, r5, #29
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <__aeabi_f2d+0x8c>)
 80017c0:	e7d8      	b.n	8001774 <__aeabi_f2d+0x20>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2200      	movs	r2, #0
 80017c6:	e7d5      	b.n	8001774 <__aeabi_f2d+0x20>
 80017c8:	2200      	movs	r2, #0
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <__aeabi_f2d+0x8c>)
 80017cc:	e7d2      	b.n	8001774 <__aeabi_f2d+0x20>
 80017ce:	0003      	movs	r3, r0
 80017d0:	002a      	movs	r2, r5
 80017d2:	3b0b      	subs	r3, #11
 80017d4:	409a      	lsls	r2, r3
 80017d6:	2500      	movs	r5, #0
 80017d8:	e7e3      	b.n	80017a2 <__aeabi_f2d+0x4e>
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	00000389 	.word	0x00000389
 80017e0:	000007ff 	.word	0x000007ff

080017e4 <__aeabi_d2f>:
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	004b      	lsls	r3, r1, #1
 80017e8:	030f      	lsls	r7, r1, #12
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	4c3a      	ldr	r4, [pc, #232]	@ (80018d8 <__aeabi_d2f+0xf4>)
 80017ee:	0f45      	lsrs	r5, r0, #29
 80017f0:	b083      	sub	sp, #12
 80017f2:	0a7f      	lsrs	r7, r7, #9
 80017f4:	1c5e      	adds	r6, r3, #1
 80017f6:	432f      	orrs	r7, r5
 80017f8:	9000      	str	r0, [sp, #0]
 80017fa:	9101      	str	r1, [sp, #4]
 80017fc:	0fca      	lsrs	r2, r1, #31
 80017fe:	00c5      	lsls	r5, r0, #3
 8001800:	4226      	tst	r6, r4
 8001802:	d00b      	beq.n	800181c <__aeabi_d2f+0x38>
 8001804:	4935      	ldr	r1, [pc, #212]	@ (80018dc <__aeabi_d2f+0xf8>)
 8001806:	185c      	adds	r4, r3, r1
 8001808:	2cfe      	cmp	r4, #254	@ 0xfe
 800180a:	dd13      	ble.n	8001834 <__aeabi_d2f+0x50>
 800180c:	20ff      	movs	r0, #255	@ 0xff
 800180e:	2300      	movs	r3, #0
 8001810:	05c0      	lsls	r0, r0, #23
 8001812:	4318      	orrs	r0, r3
 8001814:	07d2      	lsls	r2, r2, #31
 8001816:	4310      	orrs	r0, r2
 8001818:	b003      	add	sp, #12
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	433d      	orrs	r5, r7
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <__aeabi_d2f+0x42>
 8001822:	2000      	movs	r0, #0
 8001824:	e7f4      	b.n	8001810 <__aeabi_d2f+0x2c>
 8001826:	2d00      	cmp	r5, #0
 8001828:	d0f0      	beq.n	800180c <__aeabi_d2f+0x28>
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	03db      	lsls	r3, r3, #15
 800182e:	20ff      	movs	r0, #255	@ 0xff
 8001830:	433b      	orrs	r3, r7
 8001832:	e7ed      	b.n	8001810 <__aeabi_d2f+0x2c>
 8001834:	2c00      	cmp	r4, #0
 8001836:	dd0c      	ble.n	8001852 <__aeabi_d2f+0x6e>
 8001838:	9b00      	ldr	r3, [sp, #0]
 800183a:	00ff      	lsls	r7, r7, #3
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	4183      	sbcs	r3, r0
 8001842:	0f69      	lsrs	r1, r5, #29
 8001844:	433b      	orrs	r3, r7
 8001846:	430b      	orrs	r3, r1
 8001848:	0759      	lsls	r1, r3, #29
 800184a:	d127      	bne.n	800189c <__aeabi_d2f+0xb8>
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	b2e0      	uxtb	r0, r4
 8001850:	e7de      	b.n	8001810 <__aeabi_d2f+0x2c>
 8001852:	0021      	movs	r1, r4
 8001854:	3117      	adds	r1, #23
 8001856:	db31      	blt.n	80018bc <__aeabi_d2f+0xd8>
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	201e      	movs	r0, #30
 800185c:	0409      	lsls	r1, r1, #16
 800185e:	4339      	orrs	r1, r7
 8001860:	1b00      	subs	r0, r0, r4
 8001862:	281f      	cmp	r0, #31
 8001864:	dd2d      	ble.n	80018c2 <__aeabi_d2f+0xde>
 8001866:	2602      	movs	r6, #2
 8001868:	4276      	negs	r6, r6
 800186a:	1b34      	subs	r4, r6, r4
 800186c:	000e      	movs	r6, r1
 800186e:	40e6      	lsrs	r6, r4
 8001870:	0034      	movs	r4, r6
 8001872:	2820      	cmp	r0, #32
 8001874:	d004      	beq.n	8001880 <__aeabi_d2f+0x9c>
 8001876:	481a      	ldr	r0, [pc, #104]	@ (80018e0 <__aeabi_d2f+0xfc>)
 8001878:	4684      	mov	ip, r0
 800187a:	4463      	add	r3, ip
 800187c:	4099      	lsls	r1, r3
 800187e:	430d      	orrs	r5, r1
 8001880:	002b      	movs	r3, r5
 8001882:	1e59      	subs	r1, r3, #1
 8001884:	418b      	sbcs	r3, r1
 8001886:	4323      	orrs	r3, r4
 8001888:	0759      	lsls	r1, r3, #29
 800188a:	d003      	beq.n	8001894 <__aeabi_d2f+0xb0>
 800188c:	210f      	movs	r1, #15
 800188e:	4019      	ands	r1, r3
 8001890:	2904      	cmp	r1, #4
 8001892:	d10b      	bne.n	80018ac <__aeabi_d2f+0xc8>
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	2000      	movs	r0, #0
 8001898:	0a5b      	lsrs	r3, r3, #9
 800189a:	e7b9      	b.n	8001810 <__aeabi_d2f+0x2c>
 800189c:	210f      	movs	r1, #15
 800189e:	4019      	ands	r1, r3
 80018a0:	2904      	cmp	r1, #4
 80018a2:	d104      	bne.n	80018ae <__aeabi_d2f+0xca>
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	b2e0      	uxtb	r0, r4
 80018aa:	e7b1      	b.n	8001810 <__aeabi_d2f+0x2c>
 80018ac:	2400      	movs	r4, #0
 80018ae:	3304      	adds	r3, #4
 80018b0:	0159      	lsls	r1, r3, #5
 80018b2:	d5f7      	bpl.n	80018a4 <__aeabi_d2f+0xc0>
 80018b4:	3401      	adds	r4, #1
 80018b6:	2300      	movs	r3, #0
 80018b8:	b2e0      	uxtb	r0, r4
 80018ba:	e7a9      	b.n	8001810 <__aeabi_d2f+0x2c>
 80018bc:	2000      	movs	r0, #0
 80018be:	2300      	movs	r3, #0
 80018c0:	e7a6      	b.n	8001810 <__aeabi_d2f+0x2c>
 80018c2:	4c08      	ldr	r4, [pc, #32]	@ (80018e4 <__aeabi_d2f+0x100>)
 80018c4:	191c      	adds	r4, r3, r4
 80018c6:	002b      	movs	r3, r5
 80018c8:	40a5      	lsls	r5, r4
 80018ca:	40c3      	lsrs	r3, r0
 80018cc:	40a1      	lsls	r1, r4
 80018ce:	1e68      	subs	r0, r5, #1
 80018d0:	4185      	sbcs	r5, r0
 80018d2:	4329      	orrs	r1, r5
 80018d4:	430b      	orrs	r3, r1
 80018d6:	e7d7      	b.n	8001888 <__aeabi_d2f+0xa4>
 80018d8:	000007fe 	.word	0x000007fe
 80018dc:	fffffc80 	.word	0xfffffc80
 80018e0:	fffffca2 	.word	0xfffffca2
 80018e4:	fffffc82 	.word	0xfffffc82

080018e8 <__aeabi_cdrcmple>:
 80018e8:	4684      	mov	ip, r0
 80018ea:	0010      	movs	r0, r2
 80018ec:	4662      	mov	r2, ip
 80018ee:	468c      	mov	ip, r1
 80018f0:	0019      	movs	r1, r3
 80018f2:	4663      	mov	r3, ip
 80018f4:	e000      	b.n	80018f8 <__aeabi_cdcmpeq>
 80018f6:	46c0      	nop			@ (mov r8, r8)

080018f8 <__aeabi_cdcmpeq>:
 80018f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80018fa:	f000 f905 	bl	8001b08 <__ledf2>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d401      	bmi.n	8001906 <__aeabi_cdcmpeq+0xe>
 8001902:	2100      	movs	r1, #0
 8001904:	42c8      	cmn	r0, r1
 8001906:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001908 <__aeabi_dcmpeq>:
 8001908:	b510      	push	{r4, lr}
 800190a:	f000 f849 	bl	80019a0 <__eqdf2>
 800190e:	4240      	negs	r0, r0
 8001910:	3001      	adds	r0, #1
 8001912:	bd10      	pop	{r4, pc}

08001914 <__aeabi_dcmplt>:
 8001914:	b510      	push	{r4, lr}
 8001916:	f000 f8f7 	bl	8001b08 <__ledf2>
 800191a:	2800      	cmp	r0, #0
 800191c:	db01      	blt.n	8001922 <__aeabi_dcmplt+0xe>
 800191e:	2000      	movs	r0, #0
 8001920:	bd10      	pop	{r4, pc}
 8001922:	2001      	movs	r0, #1
 8001924:	bd10      	pop	{r4, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)

08001928 <__aeabi_dcmple>:
 8001928:	b510      	push	{r4, lr}
 800192a:	f000 f8ed 	bl	8001b08 <__ledf2>
 800192e:	2800      	cmp	r0, #0
 8001930:	dd01      	ble.n	8001936 <__aeabi_dcmple+0xe>
 8001932:	2000      	movs	r0, #0
 8001934:	bd10      	pop	{r4, pc}
 8001936:	2001      	movs	r0, #1
 8001938:	bd10      	pop	{r4, pc}
 800193a:	46c0      	nop			@ (mov r8, r8)

0800193c <__aeabi_dcmpgt>:
 800193c:	b510      	push	{r4, lr}
 800193e:	f000 f873 	bl	8001a28 <__gedf2>
 8001942:	2800      	cmp	r0, #0
 8001944:	dc01      	bgt.n	800194a <__aeabi_dcmpgt+0xe>
 8001946:	2000      	movs	r0, #0
 8001948:	bd10      	pop	{r4, pc}
 800194a:	2001      	movs	r0, #1
 800194c:	bd10      	pop	{r4, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)

08001950 <__aeabi_dcmpge>:
 8001950:	b510      	push	{r4, lr}
 8001952:	f000 f869 	bl	8001a28 <__gedf2>
 8001956:	2800      	cmp	r0, #0
 8001958:	da01      	bge.n	800195e <__aeabi_dcmpge+0xe>
 800195a:	2000      	movs	r0, #0
 800195c:	bd10      	pop	{r4, pc}
 800195e:	2001      	movs	r0, #1
 8001960:	bd10      	pop	{r4, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)

08001964 <__clzsi2>:
 8001964:	211c      	movs	r1, #28
 8001966:	2301      	movs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	4298      	cmp	r0, r3
 800196c:	d301      	bcc.n	8001972 <__clzsi2+0xe>
 800196e:	0c00      	lsrs	r0, r0, #16
 8001970:	3910      	subs	r1, #16
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	4298      	cmp	r0, r3
 8001976:	d301      	bcc.n	800197c <__clzsi2+0x18>
 8001978:	0a00      	lsrs	r0, r0, #8
 800197a:	3908      	subs	r1, #8
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	4298      	cmp	r0, r3
 8001980:	d301      	bcc.n	8001986 <__clzsi2+0x22>
 8001982:	0900      	lsrs	r0, r0, #4
 8001984:	3904      	subs	r1, #4
 8001986:	a202      	add	r2, pc, #8	@ (adr r2, 8001990 <__clzsi2+0x2c>)
 8001988:	5c10      	ldrb	r0, [r2, r0]
 800198a:	1840      	adds	r0, r0, r1
 800198c:	4770      	bx	lr
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	02020304 	.word	0x02020304
 8001994:	01010101 	.word	0x01010101
	...

080019a0 <__eqdf2>:
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	4657      	mov	r7, sl
 80019a4:	46de      	mov	lr, fp
 80019a6:	464e      	mov	r6, r9
 80019a8:	4645      	mov	r5, r8
 80019aa:	b5e0      	push	{r5, r6, r7, lr}
 80019ac:	000d      	movs	r5, r1
 80019ae:	0004      	movs	r4, r0
 80019b0:	0fe8      	lsrs	r0, r5, #31
 80019b2:	4683      	mov	fp, r0
 80019b4:	0309      	lsls	r1, r1, #12
 80019b6:	0fd8      	lsrs	r0, r3, #31
 80019b8:	0b09      	lsrs	r1, r1, #12
 80019ba:	4682      	mov	sl, r0
 80019bc:	4819      	ldr	r0, [pc, #100]	@ (8001a24 <__eqdf2+0x84>)
 80019be:	468c      	mov	ip, r1
 80019c0:	031f      	lsls	r7, r3, #12
 80019c2:	0069      	lsls	r1, r5, #1
 80019c4:	005e      	lsls	r6, r3, #1
 80019c6:	0d49      	lsrs	r1, r1, #21
 80019c8:	0b3f      	lsrs	r7, r7, #12
 80019ca:	0d76      	lsrs	r6, r6, #21
 80019cc:	4281      	cmp	r1, r0
 80019ce:	d018      	beq.n	8001a02 <__eqdf2+0x62>
 80019d0:	4286      	cmp	r6, r0
 80019d2:	d00f      	beq.n	80019f4 <__eqdf2+0x54>
 80019d4:	2001      	movs	r0, #1
 80019d6:	42b1      	cmp	r1, r6
 80019d8:	d10d      	bne.n	80019f6 <__eqdf2+0x56>
 80019da:	45bc      	cmp	ip, r7
 80019dc:	d10b      	bne.n	80019f6 <__eqdf2+0x56>
 80019de:	4294      	cmp	r4, r2
 80019e0:	d109      	bne.n	80019f6 <__eqdf2+0x56>
 80019e2:	45d3      	cmp	fp, sl
 80019e4:	d01c      	beq.n	8001a20 <__eqdf2+0x80>
 80019e6:	2900      	cmp	r1, #0
 80019e8:	d105      	bne.n	80019f6 <__eqdf2+0x56>
 80019ea:	4660      	mov	r0, ip
 80019ec:	4320      	orrs	r0, r4
 80019ee:	1e43      	subs	r3, r0, #1
 80019f0:	4198      	sbcs	r0, r3
 80019f2:	e000      	b.n	80019f6 <__eqdf2+0x56>
 80019f4:	2001      	movs	r0, #1
 80019f6:	bcf0      	pop	{r4, r5, r6, r7}
 80019f8:	46bb      	mov	fp, r7
 80019fa:	46b2      	mov	sl, r6
 80019fc:	46a9      	mov	r9, r5
 80019fe:	46a0      	mov	r8, r4
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a02:	2001      	movs	r0, #1
 8001a04:	428e      	cmp	r6, r1
 8001a06:	d1f6      	bne.n	80019f6 <__eqdf2+0x56>
 8001a08:	4661      	mov	r1, ip
 8001a0a:	4339      	orrs	r1, r7
 8001a0c:	000f      	movs	r7, r1
 8001a0e:	4317      	orrs	r7, r2
 8001a10:	4327      	orrs	r7, r4
 8001a12:	d1f0      	bne.n	80019f6 <__eqdf2+0x56>
 8001a14:	465b      	mov	r3, fp
 8001a16:	4652      	mov	r2, sl
 8001a18:	1a98      	subs	r0, r3, r2
 8001a1a:	1e43      	subs	r3, r0, #1
 8001a1c:	4198      	sbcs	r0, r3
 8001a1e:	e7ea      	b.n	80019f6 <__eqdf2+0x56>
 8001a20:	2000      	movs	r0, #0
 8001a22:	e7e8      	b.n	80019f6 <__eqdf2+0x56>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__gedf2>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4657      	mov	r7, sl
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	4645      	mov	r5, r8
 8001a30:	46de      	mov	lr, fp
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	000d      	movs	r5, r1
 8001a36:	030e      	lsls	r6, r1, #12
 8001a38:	0049      	lsls	r1, r1, #1
 8001a3a:	0d49      	lsrs	r1, r1, #21
 8001a3c:	468a      	mov	sl, r1
 8001a3e:	0fdf      	lsrs	r7, r3, #31
 8001a40:	0fe9      	lsrs	r1, r5, #31
 8001a42:	46bc      	mov	ip, r7
 8001a44:	b083      	sub	sp, #12
 8001a46:	4f2f      	ldr	r7, [pc, #188]	@ (8001b04 <__gedf2+0xdc>)
 8001a48:	0004      	movs	r4, r0
 8001a4a:	4680      	mov	r8, r0
 8001a4c:	9101      	str	r1, [sp, #4]
 8001a4e:	0058      	lsls	r0, r3, #1
 8001a50:	0319      	lsls	r1, r3, #12
 8001a52:	4691      	mov	r9, r2
 8001a54:	0b36      	lsrs	r6, r6, #12
 8001a56:	0b09      	lsrs	r1, r1, #12
 8001a58:	0d40      	lsrs	r0, r0, #21
 8001a5a:	45ba      	cmp	sl, r7
 8001a5c:	d01d      	beq.n	8001a9a <__gedf2+0x72>
 8001a5e:	42b8      	cmp	r0, r7
 8001a60:	d00d      	beq.n	8001a7e <__gedf2+0x56>
 8001a62:	4657      	mov	r7, sl
 8001a64:	2f00      	cmp	r7, #0
 8001a66:	d12a      	bne.n	8001abe <__gedf2+0x96>
 8001a68:	4334      	orrs	r4, r6
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d124      	bne.n	8001ab8 <__gedf2+0x90>
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	d036      	beq.n	8001ae0 <__gedf2+0xb8>
 8001a72:	2c00      	cmp	r4, #0
 8001a74:	d141      	bne.n	8001afa <__gedf2+0xd2>
 8001a76:	4663      	mov	r3, ip
 8001a78:	0058      	lsls	r0, r3, #1
 8001a7a:	3801      	subs	r0, #1
 8001a7c:	e015      	b.n	8001aaa <__gedf2+0x82>
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	d138      	bne.n	8001af4 <__gedf2+0xcc>
 8001a82:	4653      	mov	r3, sl
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <__gedf2+0x64>
 8001a88:	4326      	orrs	r6, r4
 8001a8a:	d0f4      	beq.n	8001a76 <__gedf2+0x4e>
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	4563      	cmp	r3, ip
 8001a90:	d107      	bne.n	8001aa2 <__gedf2+0x7a>
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	0058      	lsls	r0, r3, #1
 8001a96:	3801      	subs	r0, #1
 8001a98:	e007      	b.n	8001aaa <__gedf2+0x82>
 8001a9a:	4326      	orrs	r6, r4
 8001a9c:	d12a      	bne.n	8001af4 <__gedf2+0xcc>
 8001a9e:	4550      	cmp	r0, sl
 8001aa0:	d021      	beq.n	8001ae6 <__gedf2+0xbe>
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	425f      	negs	r7, r3
 8001aa8:	4338      	orrs	r0, r7
 8001aaa:	b003      	add	sp, #12
 8001aac:	bcf0      	pop	{r4, r5, r6, r7}
 8001aae:	46bb      	mov	fp, r7
 8001ab0:	46b2      	mov	sl, r6
 8001ab2:	46a9      	mov	r9, r5
 8001ab4:	46a0      	mov	r8, r4
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d0dc      	beq.n	8001a76 <__gedf2+0x4e>
 8001abc:	e7e6      	b.n	8001a8c <__gedf2+0x64>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d0ef      	beq.n	8001aa2 <__gedf2+0x7a>
 8001ac2:	9b01      	ldr	r3, [sp, #4]
 8001ac4:	4563      	cmp	r3, ip
 8001ac6:	d1ec      	bne.n	8001aa2 <__gedf2+0x7a>
 8001ac8:	4582      	cmp	sl, r0
 8001aca:	dcea      	bgt.n	8001aa2 <__gedf2+0x7a>
 8001acc:	dbe1      	blt.n	8001a92 <__gedf2+0x6a>
 8001ace:	428e      	cmp	r6, r1
 8001ad0:	d8e7      	bhi.n	8001aa2 <__gedf2+0x7a>
 8001ad2:	d1de      	bne.n	8001a92 <__gedf2+0x6a>
 8001ad4:	45c8      	cmp	r8, r9
 8001ad6:	d8e4      	bhi.n	8001aa2 <__gedf2+0x7a>
 8001ad8:	2000      	movs	r0, #0
 8001ada:	45c8      	cmp	r8, r9
 8001adc:	d2e5      	bcs.n	8001aaa <__gedf2+0x82>
 8001ade:	e7d8      	b.n	8001a92 <__gedf2+0x6a>
 8001ae0:	2c00      	cmp	r4, #0
 8001ae2:	d0e2      	beq.n	8001aaa <__gedf2+0x82>
 8001ae4:	e7dd      	b.n	8001aa2 <__gedf2+0x7a>
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	d104      	bne.n	8001af4 <__gedf2+0xcc>
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	4563      	cmp	r3, ip
 8001aee:	d1d8      	bne.n	8001aa2 <__gedf2+0x7a>
 8001af0:	2000      	movs	r0, #0
 8001af2:	e7da      	b.n	8001aaa <__gedf2+0x82>
 8001af4:	2002      	movs	r0, #2
 8001af6:	4240      	negs	r0, r0
 8001af8:	e7d7      	b.n	8001aaa <__gedf2+0x82>
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	4563      	cmp	r3, ip
 8001afe:	d0e6      	beq.n	8001ace <__gedf2+0xa6>
 8001b00:	e7cf      	b.n	8001aa2 <__gedf2+0x7a>
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	000007ff 	.word	0x000007ff

08001b08 <__ledf2>:
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	4657      	mov	r7, sl
 8001b0c:	464e      	mov	r6, r9
 8001b0e:	4645      	mov	r5, r8
 8001b10:	46de      	mov	lr, fp
 8001b12:	b5e0      	push	{r5, r6, r7, lr}
 8001b14:	000d      	movs	r5, r1
 8001b16:	030e      	lsls	r6, r1, #12
 8001b18:	0049      	lsls	r1, r1, #1
 8001b1a:	0d49      	lsrs	r1, r1, #21
 8001b1c:	468a      	mov	sl, r1
 8001b1e:	0fdf      	lsrs	r7, r3, #31
 8001b20:	0fe9      	lsrs	r1, r5, #31
 8001b22:	46bc      	mov	ip, r7
 8001b24:	b083      	sub	sp, #12
 8001b26:	4f2e      	ldr	r7, [pc, #184]	@ (8001be0 <__ledf2+0xd8>)
 8001b28:	0004      	movs	r4, r0
 8001b2a:	4680      	mov	r8, r0
 8001b2c:	9101      	str	r1, [sp, #4]
 8001b2e:	0058      	lsls	r0, r3, #1
 8001b30:	0319      	lsls	r1, r3, #12
 8001b32:	4691      	mov	r9, r2
 8001b34:	0b36      	lsrs	r6, r6, #12
 8001b36:	0b09      	lsrs	r1, r1, #12
 8001b38:	0d40      	lsrs	r0, r0, #21
 8001b3a:	45ba      	cmp	sl, r7
 8001b3c:	d01e      	beq.n	8001b7c <__ledf2+0x74>
 8001b3e:	42b8      	cmp	r0, r7
 8001b40:	d00d      	beq.n	8001b5e <__ledf2+0x56>
 8001b42:	4657      	mov	r7, sl
 8001b44:	2f00      	cmp	r7, #0
 8001b46:	d127      	bne.n	8001b98 <__ledf2+0x90>
 8001b48:	4334      	orrs	r4, r6
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d133      	bne.n	8001bb6 <__ledf2+0xae>
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	d034      	beq.n	8001bbc <__ledf2+0xb4>
 8001b52:	2c00      	cmp	r4, #0
 8001b54:	d140      	bne.n	8001bd8 <__ledf2+0xd0>
 8001b56:	4663      	mov	r3, ip
 8001b58:	0058      	lsls	r0, r3, #1
 8001b5a:	3801      	subs	r0, #1
 8001b5c:	e015      	b.n	8001b8a <__ledf2+0x82>
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	d112      	bne.n	8001b88 <__ledf2+0x80>
 8001b62:	4653      	mov	r3, sl
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <__ledf2+0x64>
 8001b68:	4326      	orrs	r6, r4
 8001b6a:	d0f4      	beq.n	8001b56 <__ledf2+0x4e>
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	4563      	cmp	r3, ip
 8001b70:	d01d      	beq.n	8001bae <__ledf2+0xa6>
 8001b72:	2001      	movs	r0, #1
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	425f      	negs	r7, r3
 8001b78:	4338      	orrs	r0, r7
 8001b7a:	e006      	b.n	8001b8a <__ledf2+0x82>
 8001b7c:	4326      	orrs	r6, r4
 8001b7e:	d103      	bne.n	8001b88 <__ledf2+0x80>
 8001b80:	4550      	cmp	r0, sl
 8001b82:	d1f6      	bne.n	8001b72 <__ledf2+0x6a>
 8001b84:	4311      	orrs	r1, r2
 8001b86:	d01c      	beq.n	8001bc2 <__ledf2+0xba>
 8001b88:	2002      	movs	r0, #2
 8001b8a:	b003      	add	sp, #12
 8001b8c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b8e:	46bb      	mov	fp, r7
 8001b90:	46b2      	mov	sl, r6
 8001b92:	46a9      	mov	r9, r5
 8001b94:	46a0      	mov	r8, r4
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d0ea      	beq.n	8001b72 <__ledf2+0x6a>
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	4563      	cmp	r3, ip
 8001ba0:	d1e7      	bne.n	8001b72 <__ledf2+0x6a>
 8001ba2:	4582      	cmp	sl, r0
 8001ba4:	dce5      	bgt.n	8001b72 <__ledf2+0x6a>
 8001ba6:	db02      	blt.n	8001bae <__ledf2+0xa6>
 8001ba8:	428e      	cmp	r6, r1
 8001baa:	d8e2      	bhi.n	8001b72 <__ledf2+0x6a>
 8001bac:	d00e      	beq.n	8001bcc <__ledf2+0xc4>
 8001bae:	9b01      	ldr	r3, [sp, #4]
 8001bb0:	0058      	lsls	r0, r3, #1
 8001bb2:	3801      	subs	r0, #1
 8001bb4:	e7e9      	b.n	8001b8a <__ledf2+0x82>
 8001bb6:	2c00      	cmp	r4, #0
 8001bb8:	d0cd      	beq.n	8001b56 <__ledf2+0x4e>
 8001bba:	e7d7      	b.n	8001b6c <__ledf2+0x64>
 8001bbc:	2c00      	cmp	r4, #0
 8001bbe:	d0e4      	beq.n	8001b8a <__ledf2+0x82>
 8001bc0:	e7d7      	b.n	8001b72 <__ledf2+0x6a>
 8001bc2:	9b01      	ldr	r3, [sp, #4]
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	4563      	cmp	r3, ip
 8001bc8:	d0df      	beq.n	8001b8a <__ledf2+0x82>
 8001bca:	e7d2      	b.n	8001b72 <__ledf2+0x6a>
 8001bcc:	45c8      	cmp	r8, r9
 8001bce:	d8d0      	bhi.n	8001b72 <__ledf2+0x6a>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	45c8      	cmp	r8, r9
 8001bd4:	d2d9      	bcs.n	8001b8a <__ledf2+0x82>
 8001bd6:	e7ea      	b.n	8001bae <__ledf2+0xa6>
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	4563      	cmp	r3, ip
 8001bdc:	d0e4      	beq.n	8001ba8 <__ledf2+0xa0>
 8001bde:	e7c8      	b.n	8001b72 <__ledf2+0x6a>
 8001be0:	000007ff 	.word	0x000007ff

08001be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be8:	f000 fc7c 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bec:	f000 f846 	bl	8001c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf0:	f000 f8ec 	bl	8001dcc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bf4:	f000 f8aa 	bl	8001d4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HDC1080_Init(&hi2c1, temp_res_14_bit, humid_res_14_bit);
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <main+0x80>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 f946 	bl	8001e90 <HDC1080_Init>
  LCD_StartUP();
 8001c04:	f000 fa1e 	bl	8002044 <LCD_StartUP>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HDC1080_Start_Read(&hi2c1, (float *) &temp, (uint8_t *) &humi);
 8001c08:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <main+0x84>)
 8001c0a:	4918      	ldr	r1, [pc, #96]	@ (8001c6c <main+0x88>)
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <main+0x80>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f994 	bl	8001f3c <HDC1080_Start_Read>

	  LCD_DATA_Manager(0x80, INSTRUCTION);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2080      	movs	r0, #128	@ 0x80
 8001c18:	f000 fa4e 	bl	80020b8 <LCD_DATA_Manager>
	  sprintf(buffer, "TEMP: %.2f C", temp); // @suppress("Float formatting support")
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <main+0x88>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1c18      	adds	r0, r3, #0
 8001c22:	f7ff fd97 	bl	8001754 <__aeabi_f2d>
 8001c26:	0002      	movs	r2, r0
 8001c28:	000b      	movs	r3, r1
 8001c2a:	4911      	ldr	r1, [pc, #68]	@ (8001c70 <main+0x8c>)
 8001c2c:	4811      	ldr	r0, [pc, #68]	@ (8001c74 <main+0x90>)
 8001c2e:	f002 fe45 	bl	80048bc <siprintf>
	  LCD_Message(buffer);
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <main+0x90>)
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 fa22 	bl	800207e <LCD_Message>

	  LCD_DATA_Manager(0xC0, INSTRUCTION);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	20c0      	movs	r0, #192	@ 0xc0
 8001c3e:	f000 fa3b 	bl	80020b8 <LCD_DATA_Manager>
	  sprintf(buffer, "HUMID: %d%%", humi);
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <main+0x84>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	001a      	movs	r2, r3
 8001c48:	490b      	ldr	r1, [pc, #44]	@ (8001c78 <main+0x94>)
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <main+0x90>)
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f002 fe35 	bl	80048bc <siprintf>
	  LCD_Message(buffer);
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <main+0x90>)
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 fa12 	bl	800207e <LCD_Message>
	  HAL_Delay(100);
 8001c5a:	2064      	movs	r0, #100	@ 0x64
 8001c5c:	f000 fcb2 	bl	80025c4 <HAL_Delay>
	  HDC1080_Start_Read(&hi2c1, (float *) &temp, (uint8_t *) &humi);
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	e7d1      	b.n	8001c08 <main+0x24>
 8001c64:	20000078 	.word	0x20000078
 8001c68:	200000d0 	.word	0x200000d0
 8001c6c:	200000cc 	.word	0x200000cc
 8001c70:	0800520c 	.word	0x0800520c
 8001c74:	200000d4 	.word	0x200000d4
 8001c78:	0800521c 	.word	0x0800521c

08001c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b09d      	sub	sp, #116	@ 0x74
 8001c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c82:	2438      	movs	r4, #56	@ 0x38
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	0018      	movs	r0, r3
 8001c88:	2338      	movs	r3, #56	@ 0x38
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f002 fe37 	bl	8004900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c92:	2324      	movs	r3, #36	@ 0x24
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	0018      	movs	r0, r3
 8001c98:	2314      	movs	r3, #20
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f002 fe2f 	bl	8004900 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca2:	003b      	movs	r3, r7
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	2324      	movs	r3, #36	@ 0x24
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2100      	movs	r1, #0
 8001cac:	f002 fe28 	bl	8004900 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <SystemClock_Config+0xc8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a24      	ldr	r2, [pc, #144]	@ (8001d48 <SystemClock_Config+0xcc>)
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <SystemClock_Config+0xc8>)
 8001cba:	2180      	movs	r1, #128	@ 0x80
 8001cbc:	0109      	lsls	r1, r1, #4
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc2:	0021      	movs	r1, r4
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2201      	movs	r2, #1
 8001cce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f001 fecc 	bl	8003a7c <HAL_RCC_OscConfig>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001ce8:	f000 fb1c 	bl	8002324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cec:	2124      	movs	r1, #36	@ 0x24
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2100      	movs	r1, #0
 8001d10:	0018      	movs	r0, r3
 8001d12:	f002 fa77 	bl	8004204 <HAL_RCC_ClockConfig>
 8001d16:	1e03      	subs	r3, r0, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001d1a:	f000 fb03 	bl	8002324 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d1e:	003b      	movs	r3, r7
 8001d20:	2208      	movs	r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d24:	003b      	movs	r3, r7
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2a:	003b      	movs	r3, r7
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f002 fc37 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001d36:	f000 faf5 	bl	8002324 <Error_Handler>
  }
}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b01d      	add	sp, #116	@ 0x74
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	40007000 	.word	0x40007000
 8001d48:	ffffe7ff 	.word	0xffffe7ff

08001d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d52:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc4 <MX_I2C1_Init+0x78>)
 8001d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d58:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc8 <MX_I2C1_Init+0x7c>)
 8001d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d62:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d68:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fea1 	bl	8002ad0 <HAL_I2C_Init>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d92:	f000 fac7 	bl	8002324 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001d98:	2100      	movs	r1, #0
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f001 fdd6 	bl	800394c <HAL_I2CEx_ConfigAnalogFilter>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d001      	beq.n	8001da8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001da4:	f000 fabe 	bl	8002324 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <MX_I2C1_Init+0x74>)
 8001daa:	2100      	movs	r1, #0
 8001dac:	0018      	movs	r0, r3
 8001dae:	f001 fe19 	bl	80039e4 <HAL_I2CEx_ConfigDigitalFilter>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d001      	beq.n	8001dba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001db6:	f000 fab5 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000078 	.word	0x20000078
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	2000090e 	.word	0x2000090e

08001dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	240c      	movs	r4, #12
 8001dd4:	193b      	adds	r3, r7, r4
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2314      	movs	r3, #20
 8001dda:	001a      	movs	r2, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	f002 fd8f 	bl	8004900 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de6:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dee:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001e00:	2102      	movs	r1, #2
 8001e02:	430a      	orrs	r2, r1
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin, GPIO_PIN_RESET);
 8001e12:	23f0      	movs	r3, #240	@ 0xf0
 8001e14:	0059      	lsls	r1, r3, #1
 8001e16:	23a0      	movs	r3, #160	@ 0xa0
 8001e18:	05db      	lsls	r3, r3, #23
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fe1f 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8001e22:	2386      	movs	r3, #134	@ 0x86
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4819      	ldr	r0, [pc, #100]	@ (8001e8c <MX_GPIO_Init+0xc0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	f000 fe18 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D4_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin;
 8001e30:	193b      	adds	r3, r7, r4
 8001e32:	22f0      	movs	r2, #240	@ 0xf0
 8001e34:	0052      	lsls	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	193a      	adds	r2, r7, r4
 8001e4c:	23a0      	movs	r3, #160	@ 0xa0
 8001e4e:	05db      	lsls	r3, r3, #23
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 fc8e 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin;
 8001e58:	0021      	movs	r1, r4
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2286      	movs	r2, #134	@ 0x86
 8001e5e:	00d2      	lsls	r2, r2, #3
 8001e60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2201      	movs	r2, #1
 8001e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <MX_GPIO_Init+0xc0>)
 8001e78:	0019      	movs	r1, r3
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	f000 fc7a 	bl	8002774 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b009      	add	sp, #36	@ 0x24
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	50000400 	.word	0x50000400

08001e90 <HDC1080_Init>:

/* USER CODE BEGIN 4 */
void HDC1080_Init(I2C_HandleTypeDef *HI2C_X, TR temp_resolution, HR humid_resolution){
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af04      	add	r7, sp, #16
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	0008      	movs	r0, r1
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	1cfb      	adds	r3, r7, #3
 8001e9e:	1c02      	adds	r2, r0, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	1cbb      	adds	r3, r7, #2
 8001ea4:	1c0a      	adds	r2, r1, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
	uint16_t config_reg_value = 0x1000;
 8001ea8:	210e      	movs	r1, #14
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2280      	movs	r2, #128	@ 0x80
 8001eae:	0152      	lsls	r2, r2, #5
 8001eb0:	801a      	strh	r2, [r3, #0]
	uint8_t data_send[2];

	if (temp_resolution == temp_res_11_bit) config_reg_value |= (1 << 10);
 8001eb2:	1cfb      	adds	r3, r7, #3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d106      	bne.n	8001ec8 <HDC1080_Init+0x38>
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	187a      	adds	r2, r7, r1
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	00c9      	lsls	r1, r1, #3
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	801a      	strh	r2, [r3, #0]

	if (humid_resolution == humid_res_11_bit) config_reg_value |= ( 1 << 8);
 8001ec8:	1cbb      	adds	r3, r7, #2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HDC1080_Init+0x52>
 8001ed0:	220e      	movs	r2, #14
 8001ed2:	18bb      	adds	r3, r7, r2
 8001ed4:	18ba      	adds	r2, r7, r2
 8001ed6:	8812      	ldrh	r2, [r2, #0]
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	0049      	lsls	r1, r1, #1
 8001edc:	430a      	orrs	r2, r1
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	e00b      	b.n	8001efa <HDC1080_Init+0x6a>
	else if (humid_resolution == humid_res_8_bit) config_reg_value |= (1 << 9);
 8001ee2:	1cbb      	adds	r3, r7, #2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HDC1080_Init+0x6a>
 8001eea:	220e      	movs	r2, #14
 8001eec:	18bb      	adds	r3, r7, r2
 8001eee:	18ba      	adds	r2, r7, r2
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	2180      	movs	r1, #128	@ 0x80
 8001ef4:	0089      	lsls	r1, r1, #2
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	801a      	strh	r2, [r3, #0]

	data_send[0] = (config_reg_value >> 8);
 8001efa:	210e      	movs	r1, #14
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	240c      	movs	r4, #12
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	701a      	strb	r2, [r3, #0]
	data_send[1] = (config_reg_value & 0x00FF);
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Mem_Write(HI2C_X, HDC_1080_ADRS << 1, config_reg_value, I2C_MEMADD_SIZE_8BIT, data_send, 2, 1000);
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	881a      	ldrh	r2, [r3, #0]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	23fa      	movs	r3, #250	@ 0xfa
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	2302      	movs	r3, #2
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	f001 f8a7 	bl	8003080 <HAL_I2C_Mem_Write>

}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b005      	add	sp, #20
 8001f38:	bd90      	pop	{r4, r7, pc}
	...

08001f3c <HDC1080_Start_Read>:
void HDC1080_Start_Read(I2C_HandleTypeDef *HI2C_X, float *temperature, uint8_t *humidy){
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	@ 0x2c
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
	uint8_t receive_data[4];
	uint16_t temp_x, humd_x;
	uint8_t send_data = HDC_TEMP_REG_ADD;
 8001f48:	2117      	movs	r1, #23
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(HI2C_X, HDC_1080_ADRS << 1, &send_data, 1, 1000);
 8001f50:	187a      	adds	r2, r7, r1
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	23fa      	movs	r3, #250	@ 0xfa
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2180      	movs	r1, #128	@ 0x80
 8001f5e:	f000 fe5d 	bl	8002c1c <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 fb2e 	bl	80025c4 <HAL_Delay>

	HAL_I2C_Master_Receive(HI2C_X, HDC_1080_ADRS << 1, receive_data, 4, 1000);
 8001f68:	2418      	movs	r4, #24
 8001f6a:	193a      	adds	r2, r7, r4
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	23fa      	movs	r3, #250	@ 0xfa
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2304      	movs	r3, #4
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	f000 ff7a 	bl	8002e70 <HAL_I2C_Master_Receive>

	temp_x = ((receive_data[0] << 8) | receive_data[1]);
 8001f7c:	0021      	movs	r1, r4
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	785b      	ldrb	r3, [r3, #1]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	201e      	movs	r0, #30
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	801a      	strh	r2, [r3, #0]
	humd_x = ((receive_data[2] << 8) | receive_data[3]);
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	789b      	ldrb	r3, [r3, #2]
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	241c      	movs	r4, #28
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	801a      	strh	r2, [r3, #0]

	*temperature = ((temp_x / 65536.0) * 165.0) - 40.0;
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff fb9e 	bl	80016f8 <__aeabi_i2d>
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HDC1080_Start_Read+0xf8>)
 8001fc0:	f7fe f956 	bl	8000270 <__aeabi_ddiv>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	000b      	movs	r3, r1
 8001fc8:	0010      	movs	r0, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HDC1080_Start_Read+0xfc>)
 8001fd0:	f7fe fc66 	bl	80008a0 <__aeabi_dmul>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	000b      	movs	r3, r1
 8001fd8:	0010      	movs	r0, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HDC1080_Start_Read+0x100>)
 8001fe0:	f7fe ff44 	bl	8000e6c <__aeabi_dsub>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	000b      	movs	r3, r1
 8001fe8:	0010      	movs	r0, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	f7ff fbfa 	bl	80017e4 <__aeabi_d2f>
 8001ff0:	1c02      	adds	r2, r0, #0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	601a      	str	r2, [r3, #0]
	*humidy      = (uint8_t) ((humd_x / 65536.0) * 100.0);
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fb7c 	bl	80016f8 <__aeabi_i2d>
 8002000:	2200      	movs	r2, #0
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <HDC1080_Start_Read+0xf8>)
 8002004:	f7fe f934 	bl	8000270 <__aeabi_ddiv>
 8002008:	0002      	movs	r2, r0
 800200a:	000b      	movs	r3, r1
 800200c:	0010      	movs	r0, r2
 800200e:	0019      	movs	r1, r3
 8002010:	2200      	movs	r2, #0
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HDC1080_Start_Read+0x104>)
 8002014:	f7fe fc44 	bl	80008a0 <__aeabi_dmul>
 8002018:	0002      	movs	r2, r0
 800201a:	000b      	movs	r3, r1
 800201c:	0010      	movs	r0, r2
 800201e:	0019      	movs	r1, r3
 8002020:	f7fe f908 	bl	8000234 <__aeabi_d2uiz>
 8002024:	0003      	movs	r3, r0
 8002026:	b2da      	uxtb	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	701a      	strb	r2, [r3, #0]
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b009      	add	sp, #36	@ 0x24
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	40f00000 	.word	0x40f00000
 8002038:	4064a000 	.word	0x4064a000
 800203c:	40440000 	.word	0x40440000
 8002040:	40590000 	.word	0x40590000

08002044 <LCD_StartUP>:

void LCD_StartUP(void){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	LCD_DATA_Manager(0x33, INSTRUCTION);
 8002048:	2100      	movs	r1, #0
 800204a:	2033      	movs	r0, #51	@ 0x33
 800204c:	f000 f834 	bl	80020b8 <LCD_DATA_Manager>
	LCD_DATA_Manager(0x32, INSTRUCTION);
 8002050:	2100      	movs	r1, #0
 8002052:	2032      	movs	r0, #50	@ 0x32
 8002054:	f000 f830 	bl	80020b8 <LCD_DATA_Manager>

	LCD_DATA_Manager(0x28, INSTRUCTION);
 8002058:	2100      	movs	r1, #0
 800205a:	2028      	movs	r0, #40	@ 0x28
 800205c:	f000 f82c 	bl	80020b8 <LCD_DATA_Manager>

	LCD_DATA_Manager(0x0C, INSTRUCTION);
 8002060:	2100      	movs	r1, #0
 8002062:	200c      	movs	r0, #12
 8002064:	f000 f828 	bl	80020b8 <LCD_DATA_Manager>
	LCD_DATA_Manager(0x06, INSTRUCTION);
 8002068:	2100      	movs	r1, #0
 800206a:	2006      	movs	r0, #6
 800206c:	f000 f824 	bl	80020b8 <LCD_DATA_Manager>
	LCD_DATA_Manager(0x01, INSTRUCTION);
 8002070:	2100      	movs	r1, #0
 8002072:	2001      	movs	r0, #1
 8002074:	f000 f820 	bl	80020b8 <LCD_DATA_Manager>
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <LCD_Message>:

void LCD_Message(char *message){
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
	for (int i = 0; message[i] != '\0'; ++i){
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e00a      	b.n	80020a2 <LCD_Message+0x24>
		LCD_DATA_Manager(message[i], DATA);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f80e 	bl	80020b8 <LCD_DATA_Manager>
	for (int i = 0; message[i] != '\0'; ++i){
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3301      	adds	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	18d3      	adds	r3, r2, r3
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ee      	bne.n	800208c <LCD_Message+0xe>
	}
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b004      	add	sp, #16
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <LCD_DATA_Manager>:

void LCD_DATA_Manager(uint8_t data, uint8_t state){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	0002      	movs	r2, r0
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	1c0a      	adds	r2, r1, #0
 80020c8:	701a      	strb	r2, [r3, #0]
	PORT.P0 = (data >> 0) & 1;
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b91      	ldr	r3, [pc, #580]	@ (800231c <LCD_DATA_Manager+0x264>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	400a      	ands	r2, r1
 80020da:	0010      	movs	r0, r2
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	438a      	bics	r2, r1
 80020e2:	1c11      	adds	r1, r2, #0
 80020e4:	1c02      	adds	r2, r0, #0
 80020e6:	430a      	orrs	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	1c1a      	adds	r2, r3, #0
 80020f4:	2301      	movs	r3, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b88      	ldr	r3, [pc, #544]	@ (800231c <LCD_DATA_Manager+0x264>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	400a      	ands	r2, r1
 8002100:	1890      	adds	r0, r2, r2
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	438a      	bics	r2, r1
 8002108:	1c11      	adds	r1, r2, #0
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	430a      	orrs	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	b2db      	uxtb	r3, r3
 8002118:	1c1a      	adds	r2, r3, #0
 800211a:	2301      	movs	r3, #1
 800211c:	4013      	ands	r3, r2
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b7e      	ldr	r3, [pc, #504]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002122:	2101      	movs	r1, #1
 8002124:	400a      	ands	r2, r1
 8002126:	0090      	lsls	r0, r2, #2
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	2104      	movs	r1, #4
 800212c:	438a      	bics	r2, r1
 800212e:	1c11      	adds	r1, r2, #0
 8002130:	1c02      	adds	r2, r0, #0
 8002132:	430a      	orrs	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	1c1a      	adds	r2, r3, #0
 8002140:	2301      	movs	r3, #1
 8002142:	4013      	ands	r3, r2
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b75      	ldr	r3, [pc, #468]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002148:	2101      	movs	r1, #1
 800214a:	400a      	ands	r2, r1
 800214c:	00d0      	lsls	r0, r2, #3
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	2108      	movs	r1, #8
 8002152:	438a      	bics	r2, r1
 8002154:	1c11      	adds	r1, r2, #0
 8002156:	1c02      	adds	r2, r0, #0
 8002158:	430a      	orrs	r2, r1
 800215a:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	b2db      	uxtb	r3, r3
 8002164:	1c1a      	adds	r2, r3, #0
 8002166:	2301      	movs	r3, #1
 8002168:	4013      	ands	r3, r2
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b6b      	ldr	r3, [pc, #428]	@ (800231c <LCD_DATA_Manager+0x264>)
 800216e:	2101      	movs	r1, #1
 8002170:	400a      	ands	r2, r1
 8002172:	0110      	lsls	r0, r2, #4
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	2110      	movs	r1, #16
 8002178:	438a      	bics	r2, r1
 800217a:	1c11      	adds	r1, r2, #0
 800217c:	1c02      	adds	r2, r0, #0
 800217e:	430a      	orrs	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b2db      	uxtb	r3, r3
 800218a:	1c1a      	adds	r2, r3, #0
 800218c:	2301      	movs	r3, #1
 800218e:	4013      	ands	r3, r2
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b62      	ldr	r3, [pc, #392]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002194:	2101      	movs	r1, #1
 8002196:	400a      	ands	r2, r1
 8002198:	0150      	lsls	r0, r2, #5
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	2120      	movs	r1, #32
 800219e:	438a      	bics	r2, r1
 80021a0:	1c11      	adds	r1, r2, #0
 80021a2:	1c02      	adds	r2, r0, #0
 80021a4:	430a      	orrs	r2, r1
 80021a6:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	1c1a      	adds	r2, r3, #0
 80021b2:	2301      	movs	r3, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b58      	ldr	r3, [pc, #352]	@ (800231c <LCD_DATA_Manager+0x264>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	400a      	ands	r2, r1
 80021be:	0190      	lsls	r0, r2, #6
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	2140      	movs	r1, #64	@ 0x40
 80021c4:	438a      	bics	r2, r1
 80021c6:	1c11      	adds	r1, r2, #0
 80021c8:	1c02      	adds	r2, r0, #0
 80021ca:	430a      	orrs	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	09db      	lsrs	r3, r3, #7
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	1c1a      	adds	r2, r3, #0
 80021d8:	2301      	movs	r3, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b4f      	ldr	r3, [pc, #316]	@ (800231c <LCD_DATA_Manager+0x264>)
 80021e0:	01d0      	lsls	r0, r2, #7
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	217f      	movs	r1, #127	@ 0x7f
 80021e6:	400a      	ands	r2, r1
 80021e8:	1c11      	adds	r1, r2, #0
 80021ea:	1c02      	adds	r2, r0, #0
 80021ec:	430a      	orrs	r2, r1
 80021ee:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, state);
 80021f0:	1dbb      	adds	r3, r7, #6
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	23a0      	movs	r3, #160	@ 0xa0
 80021f6:	05db      	lsls	r3, r3, #23
 80021f8:	2140      	movs	r1, #64	@ 0x40
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 fc30 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8002200:	23a0      	movs	r3, #160	@ 0xa0
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	2200      	movs	r2, #0
 8002206:	2120      	movs	r1, #32
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fc29 	bl	8002a60 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 800220e:	4b43      	ldr	r3, [pc, #268]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	06db      	lsls	r3, r3, #27
 8002214:	0fdb      	lsrs	r3, r3, #31
 8002216:	b2db      	uxtb	r3, r3
 8002218:	001a      	movs	r2, r3
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	0059      	lsls	r1, r3, #1
 800221e:	23a0      	movs	r3, #160	@ 0xa0
 8002220:	05db      	lsls	r3, r3, #23
 8002222:	0018      	movs	r0, r3
 8002224:	f000 fc1c 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 8002228:	4b3c      	ldr	r3, [pc, #240]	@ (800231c <LCD_DATA_Manager+0x264>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	0fdb      	lsrs	r3, r3, #31
 8002230:	b2db      	uxtb	r3, r3
 8002232:	001a      	movs	r2, r3
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4839      	ldr	r0, [pc, #228]	@ (8002320 <LCD_DATA_Manager+0x268>)
 800223a:	0019      	movs	r1, r3
 800223c:	f000 fc10 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	065b      	lsls	r3, r3, #25
 8002246:	0fdb      	lsrs	r3, r3, #31
 8002248:	b2db      	uxtb	r3, r3
 800224a:	001a      	movs	r2, r3
 800224c:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <LCD_DATA_Manager+0x268>)
 800224e:	2110      	movs	r1, #16
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fc05 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 8002256:	4b31      	ldr	r3, [pc, #196]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	0fdb      	lsrs	r3, r3, #31
 800225e:	b2db      	uxtb	r3, r3
 8002260:	001a      	movs	r2, r3
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <LCD_DATA_Manager+0x268>)
 8002264:	2120      	movs	r1, #32
 8002266:	0018      	movs	r0, r3
 8002268:	f000 fbfa 	bl	8002a60 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800226c:	23a0      	movs	r3, #160	@ 0xa0
 800226e:	05db      	lsls	r3, r3, #23
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	0018      	movs	r0, r3
 8002274:	f000 fc11 	bl	8002a9a <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8002278:	2001      	movs	r0, #1
 800227a:	f000 f9a3 	bl	80025c4 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800227e:	23a0      	movs	r3, #160	@ 0xa0
 8002280:	05db      	lsls	r3, r3, #23
 8002282:	2180      	movs	r1, #128	@ 0x80
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fc08 	bl	8002a9a <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 f99a 	bl	80025c4 <HAL_Delay>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
 8002290:	4b22      	ldr	r3, [pc, #136]	@ (800231c <LCD_DATA_Manager+0x264>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	07db      	lsls	r3, r3, #31
 8002296:	0fdb      	lsrs	r3, r3, #31
 8002298:	b2db      	uxtb	r3, r3
 800229a:	001a      	movs	r2, r3
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	0059      	lsls	r1, r3, #1
 80022a0:	23a0      	movs	r3, #160	@ 0xa0
 80022a2:	05db      	lsls	r3, r3, #23
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 fbdb 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <LCD_DATA_Manager+0x264>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	079b      	lsls	r3, r3, #30
 80022b0:	0fdb      	lsrs	r3, r3, #31
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	001a      	movs	r2, r3
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4819      	ldr	r0, [pc, #100]	@ (8002320 <LCD_DATA_Manager+0x268>)
 80022bc:	0019      	movs	r1, r3
 80022be:	f000 fbcf 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <LCD_DATA_Manager+0x264>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	075b      	lsls	r3, r3, #29
 80022c8:	0fdb      	lsrs	r3, r3, #31
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	001a      	movs	r2, r3
 80022ce:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <LCD_DATA_Manager+0x268>)
 80022d0:	2110      	movs	r1, #16
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 fbc4 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);
 80022d8:	4b10      	ldr	r3, [pc, #64]	@ (800231c <LCD_DATA_Manager+0x264>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	0fdb      	lsrs	r3, r3, #31
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	001a      	movs	r2, r3
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <LCD_DATA_Manager+0x268>)
 80022e6:	2120      	movs	r1, #32
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 fbb9 	bl	8002a60 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 80022ee:	23a0      	movs	r3, #160	@ 0xa0
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	2180      	movs	r1, #128	@ 0x80
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fbd0 	bl	8002a9a <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 f962 	bl	80025c4 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8002300:	23a0      	movs	r3, #160	@ 0xa0
 8002302:	05db      	lsls	r3, r3, #23
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fbc7 	bl	8002a9a <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f000 f959 	bl	80025c4 <HAL_Delay>
}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	200000e4 	.word	0x200000e4
 8002320:	50000400 	.word	0x50000400

08002324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	e7fd      	b.n	800232c <Error_Handler+0x8>

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <HAL_MspInit+0x24>)
 8002336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_MspInit+0x24>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <HAL_MspInit+0x24>)
 8002342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <HAL_MspInit+0x24>)
 8002346:	2180      	movs	r1, #128	@ 0x80
 8002348:	0549      	lsls	r1, r1, #21
 800234a:	430a      	orrs	r2, r1
 800234c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	240c      	movs	r4, #12
 8002362:	193b      	adds	r3, r7, r4
 8002364:	0018      	movs	r0, r3
 8002366:	2314      	movs	r3, #20
 8002368:	001a      	movs	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	f002 fac8 	bl	8004900 <memset>
  if(hi2c->Instance==I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_I2C_MspInit+0x80>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d129      	bne.n	80023ce <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_I2C_MspInit+0x84>)
 800237c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <HAL_I2C_MspInit+0x84>)
 8002380:	2102      	movs	r1, #2
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_I2C_MspInit+0x84>)
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002392:	193b      	adds	r3, r7, r4
 8002394:	22c0      	movs	r2, #192	@ 0xc0
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239a:	0021      	movs	r1, r4
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2212      	movs	r2, #18
 80023a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2201      	movs	r2, #1
 80023a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2203      	movs	r2, #3
 80023ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	2204      	movs	r2, #4
 80023b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <HAL_I2C_MspInit+0x88>)
 80023b8:	0019      	movs	r1, r3
 80023ba:	0010      	movs	r0, r2
 80023bc:	f000 f9da 	bl	8002774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_I2C_MspInit+0x84>)
 80023c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_I2C_MspInit+0x84>)
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	0389      	lsls	r1, r1, #14
 80023ca:	430a      	orrs	r2, r1
 80023cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b009      	add	sp, #36	@ 0x24
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	40005400 	.word	0x40005400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	50000400 	.word	0x50000400

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e8:	46c0      	nop			@ (mov r8, r8)
 80023ea:	e7fd      	b.n	80023e8 <NMI_Handler+0x4>

080023ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f0:	46c0      	nop			@ (mov r8, r8)
 80023f2:	e7fd      	b.n	80023f0 <HardFault_Handler+0x4>

080023f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240c:	f000 f8be 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	@ (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f002 fa62 	bl	8004910 <__errno>
 800244c:	0003      	movs	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	2301      	movs	r3, #1
 8002454:	425b      	negs	r3, r3
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	@ (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	18d2      	adds	r2, r2, r3
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <_sbrk+0x64>)
 8002468:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b006      	add	sp, #24
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20002000 	.word	0x20002000
 8002478:	00000400 	.word	0x00000400
 800247c:	200000e8 	.word	0x200000e8
 8002480:	20000238 	.word	0x20000238

08002484 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	46c0      	nop			@ (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002490:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002492:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002494:	f7ff fff6 	bl	8002484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002498:	480c      	ldr	r0, [pc, #48]	@ (80024cc <LoopForever+0x6>)
  ldr r1, =_edata
 800249a:	490d      	ldr	r1, [pc, #52]	@ (80024d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800249c:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <LoopForever+0xe>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b0:	4c0a      	ldr	r4, [pc, #40]	@ (80024dc <LoopForever+0x16>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024be:	f002 fa2d 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c2:	f7ff fb8f 	bl	8001be4 <main>

080024c6 <LoopForever>:

LoopForever:
    b LoopForever
 80024c6:	e7fe      	b.n	80024c6 <LoopForever>
  ldr   r0, =_estack
 80024c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80024d4:	080052bc 	.word	0x080052bc
  ldr r2, =_sbss
 80024d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80024dc:	20000238 	.word	0x20000238

080024e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC1_COMP_IRQHandler>
	...

080024e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_Init+0x3c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_Init+0x3c>)
 80024f6:	2140      	movs	r1, #64	@ 0x40
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fc:	2000      	movs	r0, #0
 80024fe:	f000 f811 	bl	8002524 <HAL_InitTick>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d003      	beq.n	800250e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e001      	b.n	8002512 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800250e:	f7ff ff0f 	bl	8002330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	40022000 	.word	0x40022000

08002524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_InitTick+0x5c>)
 800252e:	681c      	ldr	r4, [r3, #0]
 8002530:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <HAL_InitTick+0x60>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	0019      	movs	r1, r3
 8002536:	23fa      	movs	r3, #250	@ 0xfa
 8002538:	0098      	lsls	r0, r3, #2
 800253a:	f7fd fdef 	bl	800011c <__udivsi3>
 800253e:	0003      	movs	r3, r0
 8002540:	0019      	movs	r1, r3
 8002542:	0020      	movs	r0, r4
 8002544:	f7fd fdea 	bl	800011c <__udivsi3>
 8002548:	0003      	movs	r3, r0
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f905 	bl	800275a <HAL_SYSTICK_Config>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d001      	beq.n	8002558 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e00f      	b.n	8002578 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d80b      	bhi.n	8002576 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	2200      	movs	r2, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f000 f8e2 	bl	8002730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_InitTick+0x64>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b003      	add	sp, #12
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	20000000 	.word	0x20000000
 8002584:	20000008 	.word	0x20000008
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_IncTick+0x1c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	001a      	movs	r2, r3
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_IncTick+0x20>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	18d2      	adds	r2, r2, r3
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_IncTick+0x20>)
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	20000008 	.word	0x20000008
 80025ac:	200000ec 	.word	0x200000ec

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b02      	ldr	r3, [pc, #8]	@ (80025c0 <HAL_GetTick+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	200000ec 	.word	0x200000ec

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3301      	adds	r3, #1
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_Delay+0x44>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	001a      	movs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	f7ff ffe0 	bl	80025b0 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b004      	add	sp, #16
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	20000008 	.word	0x20000008

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	0002      	movs	r2, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800261a:	1dfb      	adds	r3, r7, #7
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002620:	d828      	bhi.n	8002674 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002622:	4a2f      	ldr	r2, [pc, #188]	@ (80026e0 <__NVIC_SetPriority+0xd4>)
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b25b      	sxtb	r3, r3
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	33c0      	adds	r3, #192	@ 0xc0
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	589b      	ldr	r3, [r3, r2]
 8002632:	1dfa      	adds	r2, r7, #7
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	0011      	movs	r1, r2
 8002638:	2203      	movs	r2, #3
 800263a:	400a      	ands	r2, r1
 800263c:	00d2      	lsls	r2, r2, #3
 800263e:	21ff      	movs	r1, #255	@ 0xff
 8002640:	4091      	lsls	r1, r2
 8002642:	000a      	movs	r2, r1
 8002644:	43d2      	mvns	r2, r2
 8002646:	401a      	ands	r2, r3
 8002648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	22ff      	movs	r2, #255	@ 0xff
 8002650:	401a      	ands	r2, r3
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	0018      	movs	r0, r3
 8002658:	2303      	movs	r3, #3
 800265a:	4003      	ands	r3, r0
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002660:	481f      	ldr	r0, [pc, #124]	@ (80026e0 <__NVIC_SetPriority+0xd4>)
 8002662:	1dfb      	adds	r3, r7, #7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b25b      	sxtb	r3, r3
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	430a      	orrs	r2, r1
 800266c:	33c0      	adds	r3, #192	@ 0xc0
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002672:	e031      	b.n	80026d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002674:	4a1b      	ldr	r2, [pc, #108]	@ (80026e4 <__NVIC_SetPriority+0xd8>)
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	0019      	movs	r1, r3
 800267c:	230f      	movs	r3, #15
 800267e:	400b      	ands	r3, r1
 8002680:	3b08      	subs	r3, #8
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3306      	adds	r3, #6
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	18d3      	adds	r3, r2, r3
 800268a:	3304      	adds	r3, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1dfa      	adds	r2, r7, #7
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	0011      	movs	r1, r2
 8002694:	2203      	movs	r2, #3
 8002696:	400a      	ands	r2, r1
 8002698:	00d2      	lsls	r2, r2, #3
 800269a:	21ff      	movs	r1, #255	@ 0xff
 800269c:	4091      	lsls	r1, r2
 800269e:	000a      	movs	r2, r1
 80026a0:	43d2      	mvns	r2, r2
 80026a2:	401a      	ands	r2, r3
 80026a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	22ff      	movs	r2, #255	@ 0xff
 80026ac:	401a      	ands	r2, r3
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	0018      	movs	r0, r3
 80026b4:	2303      	movs	r3, #3
 80026b6:	4003      	ands	r3, r0
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026bc:	4809      	ldr	r0, [pc, #36]	@ (80026e4 <__NVIC_SetPriority+0xd8>)
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	001c      	movs	r4, r3
 80026c4:	230f      	movs	r3, #15
 80026c6:	4023      	ands	r3, r4
 80026c8:	3b08      	subs	r3, #8
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	430a      	orrs	r2, r1
 80026ce:	3306      	adds	r3, #6
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	18c3      	adds	r3, r0, r3
 80026d4:	3304      	adds	r3, #4
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b003      	add	sp, #12
 80026de:	bd90      	pop	{r4, r7, pc}
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	1e5a      	subs	r2, r3, #1
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	045b      	lsls	r3, r3, #17
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d301      	bcc.n	8002700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fc:	2301      	movs	r3, #1
 80026fe:	e010      	b.n	8002722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <SysTick_Config+0x44>)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	3a01      	subs	r2, #1
 8002706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002708:	2301      	movs	r3, #1
 800270a:	425b      	negs	r3, r3
 800270c:	2103      	movs	r1, #3
 800270e:	0018      	movs	r0, r3
 8002710:	f7ff ff7c 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <SysTick_Config+0x44>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <SysTick_Config+0x44>)
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	e000e010 	.word	0xe000e010

08002730 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	210f      	movs	r1, #15
 800273c:	187b      	adds	r3, r7, r1
 800273e:	1c02      	adds	r2, r0, #0
 8002740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	187b      	adds	r3, r7, r1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b25b      	sxtb	r3, r3
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ffbf 	bl	80026e8 <SysTick_Config>
 800276a:	0003      	movs	r3, r0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800278a:	e14f      	b.n	8002a2c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4091      	lsls	r1, r2
 8002796:	000a      	movs	r2, r1
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d100      	bne.n	80027a4 <HAL_GPIO_Init+0x30>
 80027a2:	e140      	b.n	8002a26 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d130      	bne.n	800281e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	409a      	lsls	r2, r3
 80027de:	0013      	movs	r3, r2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	43da      	mvns	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	2201      	movs	r2, #1
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	2b03      	cmp	r3, #3
 8002828:	d017      	beq.n	800285a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	409a      	lsls	r2, r3
 8002838:	0013      	movs	r3, r2
 800283a:	43da      	mvns	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2203      	movs	r2, #3
 8002860:	4013      	ands	r3, r2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d123      	bne.n	80028ae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	58d3      	ldr	r3, [r2, r3]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2207      	movs	r2, #7
 8002878:	4013      	ands	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	409a      	lsls	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2107      	movs	r1, #7
 8002892:	400b      	ands	r3, r1
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	6939      	ldr	r1, [r7, #16]
 80028ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2203      	movs	r2, #3
 80028cc:	401a      	ands	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	23c0      	movs	r3, #192	@ 0xc0
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	4013      	ands	r3, r2
 80028ec:	d100      	bne.n	80028f0 <HAL_GPIO_Init+0x17c>
 80028ee:	e09a      	b.n	8002a26 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f0:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <HAL_GPIO_Init+0x2d0>)
 80028f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f4:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_GPIO_Init+0x2d0>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fc:	4a52      	ldr	r2, [pc, #328]	@ (8002a48 <HAL_GPIO_Init+0x2d4>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	589b      	ldr	r3, [r3, r2]
 8002908:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2203      	movs	r2, #3
 800290e:	4013      	ands	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	409a      	lsls	r2, r3
 8002916:	0013      	movs	r3, r2
 8002918:	43da      	mvns	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	23a0      	movs	r3, #160	@ 0xa0
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	429a      	cmp	r2, r3
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x1ea>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a47      	ldr	r2, [pc, #284]	@ (8002a4c <HAL_GPIO_Init+0x2d8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x1e6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a46      	ldr	r2, [pc, #280]	@ (8002a50 <HAL_GPIO_Init+0x2dc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x1e2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_GPIO_Init+0x2e0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x1de>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a44      	ldr	r2, [pc, #272]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x1da>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x1ec>
 800294e:	2306      	movs	r3, #6
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x1ec>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x1ec>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x1ec>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x1ec>
 800295e:	2300      	movs	r3, #0
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	2103      	movs	r1, #3
 8002964:	400a      	ands	r2, r1
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	@ (8002a48 <HAL_GPIO_Init+0x2d4>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43da      	mvns	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	035b      	lsls	r3, r3, #13
 8002996:	4013      	ands	r3, r2
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029a8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	039b      	lsls	r3, r3, #14
 80029c0:	4013      	ands	r3, r2
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029cc:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43da      	mvns	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	029b      	lsls	r3, r3, #10
 80029ea:	4013      	ands	r3, r2
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fc:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	4013      	ands	r3, r2
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	40da      	lsrs	r2, r3
 8002a34:	1e13      	subs	r3, r2, #0
 8002a36:	d000      	beq.n	8002a3a <HAL_GPIO_Init+0x2c6>
 8002a38:	e6a8      	b.n	800278c <HAL_GPIO_Init+0x18>
  }
}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b006      	add	sp, #24
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	50000400 	.word	0x50000400
 8002a50:	50000800 	.word	0x50000800
 8002a54:	50000c00 	.word	0x50000c00
 8002a58:	50001c00 	.word	0x50001c00
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	0008      	movs	r0, r1
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	1cbb      	adds	r3, r7, #2
 8002a6e:	1c02      	adds	r2, r0, #0
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	1c7b      	adds	r3, r7, #1
 8002a74:	1c0a      	adds	r2, r1, #0
 8002a76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a78:	1c7b      	adds	r3, r7, #1
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a80:	1cbb      	adds	r3, r7, #2
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	881a      	ldrh	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	000a      	movs	r2, r1
 8002aa4:	1cbb      	adds	r3, r7, #2
 8002aa6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aae:	1cbb      	adds	r3, r7, #2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	041a      	lsls	r2, r3, #16
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	1cb9      	adds	r1, r7, #2
 8002abe:	8809      	ldrh	r1, [r1, #0]
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
}
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e08f      	b.n	8002c02 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2241      	movs	r2, #65	@ 0x41
 8002ae6:	5c9b      	ldrb	r3, [r3, r2]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2240      	movs	r2, #64	@ 0x40
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fc2d 	bl	8002358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2241      	movs	r2, #65	@ 0x41
 8002b02:	2124      	movs	r1, #36	@ 0x24
 8002b04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	493b      	ldr	r1, [pc, #236]	@ (8002c0c <HAL_I2C_Init+0x13c>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4938      	ldr	r1, [pc, #224]	@ (8002c10 <HAL_I2C_Init+0x140>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d108      	bne.n	8002b4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2180      	movs	r1, #128	@ 0x80
 8002b46:	0209      	lsls	r1, r1, #8
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	e007      	b.n	8002b5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2184      	movs	r1, #132	@ 0x84
 8002b58:	0209      	lsls	r1, r1, #8
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d109      	bne.n	8002b7a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	0109      	lsls	r1, r1, #4
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	e007      	b.n	8002b8a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4923      	ldr	r1, [pc, #140]	@ (8002c14 <HAL_I2C_Init+0x144>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4920      	ldr	r1, [pc, #128]	@ (8002c18 <HAL_I2C_Init+0x148>)
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	491a      	ldr	r1, [pc, #104]	@ (8002c10 <HAL_I2C_Init+0x140>)
 8002ba6:	400a      	ands	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2241      	movs	r2, #65	@ 0x41
 8002bee:	2120      	movs	r1, #32
 8002bf0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2242      	movs	r2, #66	@ 0x42
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	f0ffffff 	.word	0xf0ffffff
 8002c10:	ffff7fff 	.word	0xffff7fff
 8002c14:	fffff7ff 	.word	0xfffff7ff
 8002c18:	02008000 	.word	0x02008000

08002c1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b089      	sub	sp, #36	@ 0x24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	0008      	movs	r0, r1
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	0019      	movs	r1, r3
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	1c02      	adds	r2, r0, #0
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	2308      	movs	r3, #8
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	1c0a      	adds	r2, r1, #0
 8002c38:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2241      	movs	r2, #65	@ 0x41
 8002c3e:	5c9b      	ldrb	r3, [r3, r2]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d000      	beq.n	8002c48 <HAL_I2C_Master_Transmit+0x2c>
 8002c46:	e10a      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	@ 0x40
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0x3a>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e104      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x244>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c5e:	f7ff fca7 	bl	80025b0 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	0219      	lsls	r1, r3, #8
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2319      	movs	r3, #25
 8002c72:	2201      	movs	r2, #1
 8002c74:	f000 fbb8 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0ef      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2241      	movs	r2, #65	@ 0x41
 8002c84:	2121      	movs	r1, #33	@ 0x21
 8002c86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2242      	movs	r2, #66	@ 0x42
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	18ba      	adds	r2, r7, r2
 8002ca2:	8812      	ldrh	r2, [r2, #0]
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2bff      	cmp	r3, #255	@ 0xff
 8002cb4:	d906      	bls.n	8002cc4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22ff      	movs	r2, #255	@ 0xff
 8002cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	045b      	lsls	r3, r3, #17
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e007      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	049b      	lsls	r3, r3, #18
 8002cd2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d027      	beq.n	8002d2c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	697c      	ldr	r4, [r7, #20]
 8002d18:	230a      	movs	r3, #10
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	8819      	ldrh	r1, [r3, #0]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <HAL_I2C_Master_Transmit+0x24c>)
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	0023      	movs	r3, r4
 8002d26:	f000 fdd7 	bl	80038d8 <I2C_TransferConfig>
 8002d2a:	e06f      	b.n	8002e0c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	697c      	ldr	r4, [r7, #20]
 8002d34:	230a      	movs	r3, #10
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	8819      	ldrh	r1, [r3, #0]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_I2C_Master_Transmit+0x24c>)
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	0023      	movs	r3, r4
 8002d42:	f000 fdc9 	bl	80038d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d46:	e061      	b.n	8002e0c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fba2 	bl	8003498 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e081      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03a      	beq.n	8002e0c <HAL_I2C_Master_Transmit+0x1f0>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d136      	bne.n	8002e0c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	0013      	movs	r3, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	@ 0x80
 8002dac:	f000 fb1c 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e053      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d911      	bls.n	8002de6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22ff      	movs	r2, #255	@ 0xff
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	045c      	lsls	r4, r3, #17
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	8819      	ldrh	r1, [r3, #0]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	0023      	movs	r3, r4
 8002de0:	f000 fd7a 	bl	80038d8 <I2C_TransferConfig>
 8002de4:	e012      	b.n	8002e0c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	049c      	lsls	r4, r3, #18
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	8819      	ldrh	r1, [r3, #0]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0023      	movs	r3, r4
 8002e08:	f000 fd66 	bl	80038d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d198      	bne.n	8002d48 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 fb81 	bl	8003524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e01a      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	490b      	ldr	r1, [pc, #44]	@ (8002e6c <HAL_I2C_Master_Transmit+0x250>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2241      	movs	r2, #65	@ 0x41
 8002e46:	2120      	movs	r1, #32
 8002e48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2242      	movs	r2, #66	@ 0x42
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2240      	movs	r2, #64	@ 0x40
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b007      	add	sp, #28
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	80002000 	.word	0x80002000
 8002e6c:	fe00e800 	.word	0xfe00e800

08002e70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b089      	sub	sp, #36	@ 0x24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	0008      	movs	r0, r1
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	230a      	movs	r3, #10
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	1c02      	adds	r2, r0, #0
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	2308      	movs	r3, #8
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2241      	movs	r2, #65	@ 0x41
 8002e92:	5c9b      	ldrb	r3, [r3, r2]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d000      	beq.n	8002e9c <HAL_I2C_Master_Receive+0x2c>
 8002e9a:	e0e8      	b.n	800306e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Master_Receive+0x3a>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e0e2      	b.n	8003070 <HAL_I2C_Master_Receive+0x200>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2240      	movs	r2, #64	@ 0x40
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eb2:	f7ff fb7d 	bl	80025b0 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	0219      	lsls	r1, r3, #8
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2319      	movs	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f000 fa8e 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cd      	b.n	8003070 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2241      	movs	r2, #65	@ 0x41
 8002ed8:	2122      	movs	r1, #34	@ 0x22
 8002eda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2242      	movs	r2, #66	@ 0x42
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	18ba      	adds	r2, r7, r2
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2bff      	cmp	r3, #255	@ 0xff
 8002f08:	d911      	bls.n	8002f2e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	045c      	lsls	r4, r3, #17
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	8819      	ldrh	r1, [r3, #0]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	4b55      	ldr	r3, [pc, #340]	@ (8003078 <HAL_I2C_Master_Receive+0x208>)
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	0023      	movs	r3, r4
 8002f28:	f000 fcd6 	bl	80038d8 <I2C_TransferConfig>
 8002f2c:	e076      	b.n	800301c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	049c      	lsls	r4, r3, #18
 8002f42:	230a      	movs	r3, #10
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	8819      	ldrh	r1, [r3, #0]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003078 <HAL_I2C_Master_Receive+0x208>)
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	0023      	movs	r3, r4
 8002f50:	f000 fcc2 	bl	80038d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f54:	e062      	b.n	800301c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fb25 	bl	80035ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e082      	b.n	8003070 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03a      	beq.n	800301c <HAL_I2C_Master_Receive+0x1ac>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d136      	bne.n	800301c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	0013      	movs	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2180      	movs	r1, #128	@ 0x80
 8002fbc:	f000 fa14 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	1e03      	subs	r3, r0, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e053      	b.n	8003070 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2bff      	cmp	r3, #255	@ 0xff
 8002fd0:	d911      	bls.n	8002ff6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	22ff      	movs	r2, #255	@ 0xff
 8002fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	045c      	lsls	r4, r3, #17
 8002fe2:	230a      	movs	r3, #10
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	8819      	ldrh	r1, [r3, #0]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	0023      	movs	r3, r4
 8002ff0:	f000 fc72 	bl	80038d8 <I2C_TransferConfig>
 8002ff4:	e012      	b.n	800301c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	049c      	lsls	r4, r3, #18
 800300a:	230a      	movs	r3, #10
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	8819      	ldrh	r1, [r3, #0]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	0023      	movs	r3, r4
 8003018:	f000 fc5e 	bl	80038d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d197      	bne.n	8002f56 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fa79 	bl	8003524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e01a      	b.n	8003070 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2220      	movs	r2, #32
 8003040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_I2C_Master_Receive+0x20c>)
 800304e:	400a      	ands	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2241      	movs	r2, #65	@ 0x41
 8003056:	2120      	movs	r1, #32
 8003058:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2242      	movs	r2, #66	@ 0x42
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2240      	movs	r2, #64	@ 0x40
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
  }
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b007      	add	sp, #28
 8003076:	bd90      	pop	{r4, r7, pc}
 8003078:	80002400 	.word	0x80002400
 800307c:	fe00e800 	.word	0xfe00e800

08003080 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	000c      	movs	r4, r1
 800308a:	0010      	movs	r0, r2
 800308c:	0019      	movs	r1, r3
 800308e:	230a      	movs	r3, #10
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	1c22      	adds	r2, r4, #0
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	2308      	movs	r3, #8
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	1c02      	adds	r2, r0, #0
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	1dbb      	adds	r3, r7, #6
 80030a0:	1c0a      	adds	r2, r1, #0
 80030a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2241      	movs	r2, #65	@ 0x41
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d000      	beq.n	80030b2 <HAL_I2C_Mem_Write+0x32>
 80030b0:	e10c      	b.n	80032cc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_I2C_Mem_Write+0x42>
 80030b8:	232c      	movs	r3, #44	@ 0x2c
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0ff      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2C_Mem_Write+0x5c>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0f8      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2240      	movs	r2, #64	@ 0x40
 80030e0:	2101      	movs	r1, #1
 80030e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030e4:	f7ff fa64 	bl	80025b0 <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ec:	2380      	movs	r3, #128	@ 0x80
 80030ee:	0219      	lsls	r1, r3, #8
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2319      	movs	r3, #25
 80030f8:	2201      	movs	r2, #1
 80030fa:	f000 f975 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0e3      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2241      	movs	r2, #65	@ 0x41
 800310a:	2121      	movs	r1, #33	@ 0x21
 800310c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2242      	movs	r2, #66	@ 0x42
 8003112:	2140      	movs	r1, #64	@ 0x40
 8003114:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	222c      	movs	r2, #44	@ 0x2c
 8003126:	18ba      	adds	r2, r7, r2
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003132:	1dbb      	adds	r3, r7, #6
 8003134:	881c      	ldrh	r4, [r3, #0]
 8003136:	2308      	movs	r3, #8
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	230a      	movs	r3, #10
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	8819      	ldrh	r1, [r3, #0]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	0023      	movs	r3, r4
 800314e:	f000 f8c5 	bl	80032dc <I2C_RequestMemoryWrite>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d005      	beq.n	8003162 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2240      	movs	r2, #64	@ 0x40
 800315a:	2100      	movs	r1, #0
 800315c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0b5      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2bff      	cmp	r3, #255	@ 0xff
 800316a:	d911      	bls.n	8003190 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	22ff      	movs	r2, #255	@ 0xff
 8003170:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003176:	b2da      	uxtb	r2, r3
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	045c      	lsls	r4, r3, #17
 800317c:	230a      	movs	r3, #10
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	8819      	ldrh	r1, [r3, #0]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0023      	movs	r3, r4
 800318a:	f000 fba5 	bl	80038d8 <I2C_TransferConfig>
 800318e:	e012      	b.n	80031b6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	049c      	lsls	r4, r3, #18
 80031a4:	230a      	movs	r3, #10
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	8819      	ldrh	r1, [r3, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	0023      	movs	r3, r4
 80031b2:	f000 fb91 	bl	80038d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f96b 	bl	8003498 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e081      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d03a      	beq.n	800327a <HAL_I2C_Mem_Write+0x1fa>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d136      	bne.n	800327a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800320c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	0013      	movs	r3, r2
 8003216:	2200      	movs	r2, #0
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	f000 f8e5 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e053      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2bff      	cmp	r3, #255	@ 0xff
 800322e:	d911      	bls.n	8003254 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	22ff      	movs	r2, #255	@ 0xff
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	b2da      	uxtb	r2, r3
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	045c      	lsls	r4, r3, #17
 8003240:	230a      	movs	r3, #10
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	8819      	ldrh	r1, [r3, #0]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	0023      	movs	r3, r4
 800324e:	f000 fb43 	bl	80038d8 <I2C_TransferConfig>
 8003252:	e012      	b.n	800327a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	049c      	lsls	r4, r3, #18
 8003268:	230a      	movs	r3, #10
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	8819      	ldrh	r1, [r3, #0]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	2300      	movs	r3, #0
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	0023      	movs	r3, r4
 8003276:	f000 fb2f 	bl	80038d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d198      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0018      	movs	r0, r3
 800328c:	f000 f94a 	bl	8003524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01a      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2220      	movs	r2, #32
 800329e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	490b      	ldr	r1, [pc, #44]	@ (80032d8 <HAL_I2C_Mem_Write+0x258>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2241      	movs	r2, #65	@ 0x41
 80032b4:	2120      	movs	r1, #32
 80032b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2242      	movs	r2, #66	@ 0x42
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	@ 0x40
 80032c4:	2100      	movs	r1, #0
 80032c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b007      	add	sp, #28
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	fe00e800 	.word	0xfe00e800

080032dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	000c      	movs	r4, r1
 80032e6:	0010      	movs	r0, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	250a      	movs	r5, #10
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	1c22      	adds	r2, r4, #0
 80032f0:	801a      	strh	r2, [r3, #0]
 80032f2:	2308      	movs	r3, #8
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	1c02      	adds	r2, r0, #0
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	1dbb      	adds	r3, r7, #6
 80032fc:	1c0a      	adds	r2, r1, #0
 80032fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003300:	1dbb      	adds	r3, r7, #6
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	045c      	lsls	r4, r3, #17
 800330a:	197b      	adds	r3, r7, r5
 800330c:	8819      	ldrh	r1, [r3, #0]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <I2C_RequestMemoryWrite+0xc4>)
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	0023      	movs	r3, r4
 8003316:	f000 fadf 	bl	80038d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331c:	6a39      	ldr	r1, [r7, #32]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 f8b9 	bl	8003498 <I2C_WaitOnTXISFlagUntilTimeout>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d001      	beq.n	800332e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e033      	b.n	8003396 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332e:	1dbb      	adds	r3, r7, #6
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003336:	2308      	movs	r3, #8
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28
 8003344:	e019      	b.n	800337a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003346:	2308      	movs	r3, #8
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	b29b      	uxth	r3, r3
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800335a:	6a39      	ldr	r1, [r7, #32]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f89a 	bl	8003498 <I2C_WaitOnTXISFlagUntilTimeout>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d001      	beq.n	800336c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e014      	b.n	8003396 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800336c:	2308      	movs	r3, #8
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800337a:	6a3a      	ldr	r2, [r7, #32]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	0013      	movs	r3, r2
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	f000 f82e 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d001      	beq.n	8003394 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b004      	add	sp, #16
 800339c:	bdb0      	pop	{r4, r5, r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	80002000 	.word	0x80002000

080033a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d103      	bne.n	80033c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d007      	beq.n	80033e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	430a      	orrs	r2, r1
 80033de:	619a      	str	r2, [r3, #24]
  }
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f8:	e03a      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f971 	bl	80036e8 <I2C_IsErrorOccurred>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e040      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	d02d      	beq.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7ff f8cc 	bl	80025b0 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d122      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	425a      	negs	r2, r3
 800343a:	4153      	adcs	r3, r2
 800343c:	b2db      	uxtb	r3, r3
 800343e:	001a      	movs	r2, r3
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d113      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	2220      	movs	r2, #32
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2241      	movs	r2, #65	@ 0x41
 8003458:	2120      	movs	r1, #32
 800345a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2242      	movs	r2, #66	@ 0x42
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2240      	movs	r2, #64	@ 0x40
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e00f      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	425a      	negs	r2, r3
 8003480:	4153      	adcs	r3, r2
 8003482:	b2db      	uxtb	r3, r3
 8003484:	001a      	movs	r2, r3
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d0b5      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b004      	add	sp, #16
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a4:	e032      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 f91b 	bl	80036e8 <I2C_IsErrorOccurred>
 80034b2:	1e03      	subs	r3, r0, #0
 80034b4:	d001      	beq.n	80034ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e030      	b.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	d025      	beq.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c0:	f7ff f876 	bl	80025b0 <HAL_GetTick>
 80034c4:	0002      	movs	r2, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d302      	bcc.n	80034d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11a      	bne.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d013      	beq.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e8:	2220      	movs	r2, #32
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2241      	movs	r2, #65	@ 0x41
 80034f4:	2120      	movs	r1, #32
 80034f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2242      	movs	r2, #66	@ 0x42
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2240      	movs	r2, #64	@ 0x40
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e007      	b.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2202      	movs	r2, #2
 8003514:	4013      	ands	r3, r2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d1c5      	bne.n	80034a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003530:	e02f      	b.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 f8d5 	bl	80036e8 <I2C_IsErrorOccurred>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d001      	beq.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e02d      	b.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7ff f833 	bl	80025b0 <HAL_GetTick>
 800354a:	0002      	movs	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d11a      	bne.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2220      	movs	r2, #32
 8003564:	4013      	ands	r3, r2
 8003566:	2b20      	cmp	r3, #32
 8003568:	d013      	beq.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	2220      	movs	r2, #32
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2241      	movs	r2, #65	@ 0x41
 800357a:	2120      	movs	r1, #32
 800357c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2242      	movs	r2, #66	@ 0x42
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2240      	movs	r2, #64	@ 0x40
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e007      	b.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2220      	movs	r2, #32
 800359a:	4013      	ands	r3, r2
 800359c:	2b20      	cmp	r3, #32
 800359e:	d1c8      	bne.n	8003532 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2317      	movs	r3, #23
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035c0:	e07b      	b.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 f88d 	bl	80036e8 <I2C_IsErrorOccurred>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d003      	beq.n	80035da <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80035d2:	2317      	movs	r3, #23
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2220      	movs	r2, #32
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d140      	bne.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80035e8:	2117      	movs	r1, #23
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d13b      	bne.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2204      	movs	r2, #4
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d106      	bne.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003608:	187b      	adds	r3, r7, r1
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2210      	movs	r2, #16
 8003616:	4013      	ands	r3, r2
 8003618:	2b10      	cmp	r3, #16
 800361a:	d123      	bne.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2204      	movs	r2, #4
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2220      	movs	r2, #32
 8003630:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4929      	ldr	r1, [pc, #164]	@ (80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800363e:	400a      	ands	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2241      	movs	r2, #65	@ 0x41
 8003646:	2120      	movs	r1, #32
 8003648:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2242      	movs	r2, #66	@ 0x42
 800364e:	2100      	movs	r1, #0
 8003650:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	2100      	movs	r1, #0
 8003658:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800365a:	2317      	movs	r3, #23
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e002      	b.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800366a:	f7fe ffa1 	bl	80025b0 <HAL_GetTick>
 800366e:	0002      	movs	r2, r0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11c      	bne.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003680:	2017      	movs	r0, #23
 8003682:	183b      	adds	r3, r7, r0
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d117      	bne.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	2b04      	cmp	r3, #4
 8003696:	d010      	beq.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	2220      	movs	r2, #32
 800369e:	431a      	orrs	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2241      	movs	r2, #65	@ 0x41
 80036a8:	2120      	movs	r1, #32
 80036aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2240      	movs	r2, #64	@ 0x40
 80036b0:	2100      	movs	r1, #0
 80036b2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80036b4:	183b      	adds	r3, r7, r0
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2204      	movs	r2, #4
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d005      	beq.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80036c8:	2317      	movs	r3, #23
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d100      	bne.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80036d2:	e776      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80036d4:	2317      	movs	r3, #23
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	781b      	ldrb	r3, [r3, #0]
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b006      	add	sp, #24
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	fe00e800 	.word	0xfe00e800

080036e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2327      	movs	r3, #39	@ 0x27
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2210      	movs	r2, #16
 8003710:	4013      	ands	r3, r2
 8003712:	d100      	bne.n	8003716 <I2C_IsErrorOccurred+0x2e>
 8003714:	e079      	b.n	800380a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2210      	movs	r2, #16
 800371c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800371e:	e057      	b.n	80037d0 <I2C_IsErrorOccurred+0xe8>
 8003720:	2227      	movs	r2, #39	@ 0x27
 8003722:	18bb      	adds	r3, r7, r2
 8003724:	18ba      	adds	r2, r7, r2
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	d04f      	beq.n	80037d0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003730:	f7fe ff3e 	bl	80025b0 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <I2C_IsErrorOccurred+0x5e>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d144      	bne.n	80037d0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	2380      	movs	r3, #128	@ 0x80
 800374e:	01db      	lsls	r3, r3, #7
 8003750:	4013      	ands	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003754:	2013      	movs	r0, #19
 8003756:	183b      	adds	r3, r7, r0
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	2142      	movs	r1, #66	@ 0x42
 800375c:	5c52      	ldrb	r2, [r2, r1]
 800375e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	401a      	ands	r2, r3
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	429a      	cmp	r2, r3
 8003772:	d126      	bne.n	80037c2 <I2C_IsErrorOccurred+0xda>
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	01db      	lsls	r3, r3, #7
 800377a:	429a      	cmp	r2, r3
 800377c:	d021      	beq.n	80037c2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800377e:	183b      	adds	r3, r7, r0
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b20      	cmp	r3, #32
 8003784:	d01d      	beq.n	80037c2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2180      	movs	r1, #128	@ 0x80
 8003792:	01c9      	lsls	r1, r1, #7
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003798:	f7fe ff0a 	bl	80025b0 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a0:	e00f      	b.n	80037c2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037a2:	f7fe ff05 	bl	80025b0 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b19      	cmp	r3, #25
 80037ae:	d908      	bls.n	80037c2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	2220      	movs	r2, #32
 80037b4:	4313      	orrs	r3, r2
 80037b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037b8:	2327      	movs	r3, #39	@ 0x27
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]

              break;
 80037c0:	e006      	b.n	80037d0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2220      	movs	r2, #32
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d1e8      	bne.n	80037a2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2220      	movs	r2, #32
 80037d8:	4013      	ands	r3, r2
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d004      	beq.n	80037e8 <I2C_IsErrorOccurred+0x100>
 80037de:	2327      	movs	r3, #39	@ 0x27
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d09b      	beq.n	8003720 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037e8:	2327      	movs	r3, #39	@ 0x27
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2220      	movs	r2, #32
 80037f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2204      	movs	r2, #4
 80037fe:	4313      	orrs	r3, r2
 8003800:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003802:	2327      	movs	r3, #39	@ 0x27
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4013      	ands	r3, r2
 800381a:	d00c      	beq.n	8003836 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2201      	movs	r2, #1
 8003820:	4313      	orrs	r3, r2
 8003822:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	0052      	lsls	r2, r2, #1
 800382c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382e:	2327      	movs	r3, #39	@ 0x27
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4013      	ands	r3, r2
 800383e:	d00c      	beq.n	800385a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2208      	movs	r2, #8
 8003844:	4313      	orrs	r3, r2
 8003846:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2280      	movs	r2, #128	@ 0x80
 800384e:	00d2      	lsls	r2, r2, #3
 8003850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003852:	2327      	movs	r3, #39	@ 0x27
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4013      	ands	r3, r2
 8003862:	d00c      	beq.n	800387e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2202      	movs	r2, #2
 8003868:	4313      	orrs	r3, r2
 800386a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2280      	movs	r2, #128	@ 0x80
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003876:	2327      	movs	r3, #39	@ 0x27
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800387e:	2327      	movs	r3, #39	@ 0x27
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01d      	beq.n	80038c4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	0018      	movs	r0, r3
 800388c:	f7ff fd8a 	bl	80033a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	490e      	ldr	r1, [pc, #56]	@ (80038d4 <I2C_IsErrorOccurred+0x1ec>)
 800389c:	400a      	ands	r2, r1
 800389e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2241      	movs	r2, #65	@ 0x41
 80038b0:	2120      	movs	r1, #32
 80038b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2242      	movs	r2, #66	@ 0x42
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80038c4:	2327      	movs	r3, #39	@ 0x27
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00a      	add	sp, #40	@ 0x28
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	fe00e800 	.word	0xfe00e800

080038d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	0008      	movs	r0, r1
 80038e2:	0011      	movs	r1, r2
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	240a      	movs	r4, #10
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	1c02      	adds	r2, r0, #0
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	2009      	movs	r0, #9
 80038f0:	183b      	adds	r3, r7, r0
 80038f2:	1c0a      	adds	r2, r1, #0
 80038f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f6:	193b      	adds	r3, r7, r4
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	059b      	lsls	r3, r3, #22
 80038fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	0419      	lsls	r1, r3, #16
 8003904:	23ff      	movs	r3, #255	@ 0xff
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	4313      	orrs	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003922:	0d51      	lsrs	r1, r2, #21
 8003924:	2280      	movs	r2, #128	@ 0x80
 8003926:	00d2      	lsls	r2, r2, #3
 8003928:	400a      	ands	r2, r1
 800392a:	4907      	ldr	r1, [pc, #28]	@ (8003948 <I2C_TransferConfig+0x70>)
 800392c:	430a      	orrs	r2, r1
 800392e:	43d2      	mvns	r2, r2
 8003930:	401a      	ands	r2, r3
 8003932:	0011      	movs	r1, r2
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b007      	add	sp, #28
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	03ff63ff 	.word	0x03ff63ff

0800394c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2241      	movs	r2, #65	@ 0x41
 800395a:	5c9b      	ldrb	r3, [r3, r2]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	d138      	bne.n	80039d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2240      	movs	r2, #64	@ 0x40
 8003966:	5c9b      	ldrb	r3, [r3, r2]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800396c:	2302      	movs	r3, #2
 800396e:	e032      	b.n	80039d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2240      	movs	r2, #64	@ 0x40
 8003974:	2101      	movs	r1, #1
 8003976:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2241      	movs	r2, #65	@ 0x41
 800397c:	2124      	movs	r1, #36	@ 0x24
 800397e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2101      	movs	r1, #1
 800398c:	438a      	bics	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4911      	ldr	r1, [pc, #68]	@ (80039e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800399c:	400a      	ands	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2101      	movs	r1, #1
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2241      	movs	r2, #65	@ 0x41
 80039c4:	2120      	movs	r1, #32
 80039c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2240      	movs	r2, #64	@ 0x40
 80039cc:	2100      	movs	r1, #0
 80039ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	ffffefff 	.word	0xffffefff

080039e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2241      	movs	r2, #65	@ 0x41
 80039f2:	5c9b      	ldrb	r3, [r3, r2]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d139      	bne.n	8003a6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2240      	movs	r2, #64	@ 0x40
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e033      	b.n	8003a70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2240      	movs	r2, #64	@ 0x40
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2241      	movs	r2, #65	@ 0x41
 8003a14:	2124      	movs	r1, #36	@ 0x24
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	438a      	bics	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a11      	ldr	r2, [pc, #68]	@ (8003a78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2241      	movs	r2, #65	@ 0x41
 8003a5e:	2120      	movs	r1, #32
 8003a60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b004      	add	sp, #16
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fffff0ff 	.word	0xfffff0ff

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b5b0      	push	{r4, r5, r7, lr}
 8003a7e:	b08a      	sub	sp, #40	@ 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f000 fbaf 	bl	80041ee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a90:	4bcf      	ldr	r3, [pc, #828]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	220c      	movs	r2, #12
 8003a96:	4013      	ands	r3, r2
 8003a98:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a9a:	4bcd      	ldr	r3, [pc, #820]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	025b      	lsls	r3, r3, #9
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x36>
 8003ab0:	e07e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x68>
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	4bc1      	ldr	r3, [pc, #772]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5a>
 8003ad4:	e06b      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d167      	bne.n	8003bae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f000 fb85 	bl	80041ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	025b      	lsls	r3, r3, #9
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_OscConfig+0x84>
 8003af0:	4bb7      	ldr	r3, [pc, #732]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4bb6      	ldr	r3, [pc, #728]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003af6:	2180      	movs	r1, #128	@ 0x80
 8003af8:	0249      	lsls	r1, r1, #9
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e027      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	23a0      	movs	r3, #160	@ 0xa0
 8003b06:	02db      	lsls	r3, r3, #11
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d10e      	bne.n	8003b2a <HAL_RCC_OscConfig+0xae>
 8003b0c:	4bb0      	ldr	r3, [pc, #704]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4baf      	ldr	r3, [pc, #700]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b12:	2180      	movs	r1, #128	@ 0x80
 8003b14:	02c9      	lsls	r1, r1, #11
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4bad      	ldr	r3, [pc, #692]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4bac      	ldr	r3, [pc, #688]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	0249      	lsls	r1, r1, #9
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e012      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003b2a:	4ba9      	ldr	r3, [pc, #676]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4ba8      	ldr	r3, [pc, #672]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b30:	49a8      	ldr	r1, [pc, #672]	@ (8003dd4 <HAL_RCC_OscConfig+0x358>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	4ba6      	ldr	r3, [pc, #664]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	025b      	lsls	r3, r3, #9
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4ba2      	ldr	r3, [pc, #648]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4ba1      	ldr	r3, [pc, #644]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b4a:	49a3      	ldr	r1, [pc, #652]	@ (8003dd8 <HAL_RCC_OscConfig+0x35c>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe fd2a 	bl	80025b0 <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b60:	e009      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b62:	f7fe fd25 	bl	80025b0 <HAL_GetTick>
 8003b66:	0002      	movs	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	@ 0x64
 8003b6e:	d902      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f000 fb3c 	bl	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b76:	4b96      	ldr	r3, [pc, #600]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d0ef      	beq.n	8003b62 <HAL_RCC_OscConfig+0xe6>
 8003b82:	e015      	b.n	8003bb0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fd14 	bl	80025b0 <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fd0f 	bl	80025b0 <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	@ 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e326      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ba0:	4b8b      	ldr	r3, [pc, #556]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	029b      	lsls	r3, r3, #10
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x112>
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d100      	bne.n	8003bbc <HAL_RCC_OscConfig+0x140>
 8003bba:	e08b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d13e      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1d0>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d13b      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_RCC_OscConfig+0x16c>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e302      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b79      	ldr	r3, [pc, #484]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a7b      	ldr	r2, [pc, #492]	@ (8003ddc <HAL_RCC_OscConfig+0x360>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	021a      	lsls	r2, r3, #8
 8003bf8:	4b75      	ldr	r3, [pc, #468]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bfe:	4b74      	ldr	r3, [pc, #464]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2209      	movs	r2, #9
 8003c04:	4393      	bics	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	4b71      	ldr	r3, [pc, #452]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c10:	f000 fc40 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8003c14:	0001      	movs	r1, r0
 8003c16:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	4013      	ands	r3, r2
 8003c20:	4a6f      	ldr	r2, [pc, #444]	@ (8003de0 <HAL_RCC_OscConfig+0x364>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	000a      	movs	r2, r1
 8003c26:	40da      	lsrs	r2, r3
 8003c28:	4b6e      	ldr	r3, [pc, #440]	@ (8003de4 <HAL_RCC_OscConfig+0x368>)
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003c2c:	4b6e      	ldr	r3, [pc, #440]	@ (8003de8 <HAL_RCC_OscConfig+0x36c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2513      	movs	r5, #19
 8003c32:	197c      	adds	r4, r7, r5
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fe fc75 	bl	8002524 <HAL_InitTick>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003c3e:	197b      	adds	r3, r7, r5
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d046      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	e2d0      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d027      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c52:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2209      	movs	r2, #9
 8003c58:	4393      	bics	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fca4 	bl	80025b0 <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fe fc9f 	bl	80025b0 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e2b6      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c80:	4b53      	ldr	r3, [pc, #332]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2204      	movs	r2, #4
 8003c86:	4013      	ands	r3, r2
 8003c88:	d0f1      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b51      	ldr	r3, [pc, #324]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a53      	ldr	r2, [pc, #332]	@ (8003ddc <HAL_RCC_OscConfig+0x360>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	021a      	lsls	r2, r3, #8
 8003c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	e018      	b.n	8003cd4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	438a      	bics	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cae:	f7fe fc7f 	bl	80025b0 <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fe fc7a 	bl	80025b0 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e291      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cca:	4b41      	ldr	r3, [pc, #260]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d1f1      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d100      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x264>
 8003cde:	e0a1      	b.n	8003e24 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d140      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x282>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e277      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfe:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a3a      	ldr	r2, [pc, #232]	@ (8003dec <HAL_RCC_OscConfig+0x370>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d0c:	4b30      	ldr	r3, [pc, #192]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	0a19      	lsrs	r1, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	061a      	lsls	r2, r3, #24
 8003d20:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	0b5b      	lsrs	r3, r3, #13
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	0212      	lsls	r2, r2, #8
 8003d32:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d34:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	210f      	movs	r1, #15
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	4928      	ldr	r1, [pc, #160]	@ (8003de0 <HAL_RCC_OscConfig+0x364>)
 8003d40:	5ccb      	ldrb	r3, [r1, r3]
 8003d42:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_RCC_OscConfig+0x368>)
 8003d46:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003d48:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <HAL_RCC_OscConfig+0x36c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2513      	movs	r5, #19
 8003d4e:	197c      	adds	r4, r7, r5
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7fe fbe7 	bl	8002524 <HAL_InitTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003d5a:	197b      	adds	r3, r7, r5
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d060      	beq.n	8003e24 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003d62:	197b      	adds	r3, r7, r5
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	e242      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03f      	beq.n	8003df0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d70:	4b17      	ldr	r3, [pc, #92]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d76:	2180      	movs	r1, #128	@ 0x80
 8003d78:	0049      	lsls	r1, r1, #1
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fc17 	bl	80025b0 <HAL_GetTick>
 8003d82:	0003      	movs	r3, r0
 8003d84:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d88:	f7fe fc12 	bl	80025b0 <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e229      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	2380      	movs	r3, #128	@ 0x80
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4013      	ands	r3, r2
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003da6:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <HAL_RCC_OscConfig+0x370>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dba:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	0a19      	lsrs	r1, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	061a      	lsls	r2, r3, #24
 8003dc8:	4b01      	ldr	r3, [pc, #4]	@ (8003dd0 <HAL_RCC_OscConfig+0x354>)
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	e029      	b.n	8003e24 <HAL_RCC_OscConfig+0x3a8>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	fffeffff 	.word	0xfffeffff
 8003dd8:	fffbffff 	.word	0xfffbffff
 8003ddc:	ffffe0ff 	.word	0xffffe0ff
 8003de0:	08005268 	.word	0x08005268
 8003de4:	20000000 	.word	0x20000000
 8003de8:	20000004 	.word	0x20000004
 8003dec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003df0:	4bbd      	ldr	r3, [pc, #756]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4bbc      	ldr	r3, [pc, #752]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003df6:	49bd      	ldr	r1, [pc, #756]	@ (80040ec <HAL_RCC_OscConfig+0x670>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fbd8 	bl	80025b0 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e06:	f7fe fbd3 	bl	80025b0 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1ea      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e18:	4bb3      	ldr	r3, [pc, #716]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4013      	ands	r3, r2
 8003e22:	d1f0      	bne.n	8003e06 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4bac      	ldr	r3, [pc, #688]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e3a:	4bab      	ldr	r3, [pc, #684]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fe fbb5 	bl	80025b0 <HAL_GetTick>
 8003e46:	0003      	movs	r3, r0
 8003e48:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fbb0 	bl	80025b0 <HAL_GetTick>
 8003e50:	0002      	movs	r2, r0
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1c7      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e62:	2202      	movs	r2, #2
 8003e64:	4013      	ands	r3, r2
 8003e66:	d0f1      	beq.n	8003e4c <HAL_RCC_OscConfig+0x3d0>
 8003e68:	e018      	b.n	8003e9c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6a:	4b9f      	ldr	r3, [pc, #636]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	438a      	bics	r2, r1
 8003e74:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fe fb9b 	bl	80025b0 <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fe fb96 	bl	80025b0 <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1ad      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e92:	4b95      	ldr	r3, [pc, #596]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d1f1      	bne.n	8003e80 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d100      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x42c>
 8003ea6:	e0ae      	b.n	8004006 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea8:	2027      	movs	r0, #39	@ 0x27
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	055b      	lsls	r3, r3, #21
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ec0:	4b89      	ldr	r3, [pc, #548]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	0549      	lsls	r1, r1, #21
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003eca:	183b      	adds	r3, r7, r0
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	4b87      	ldr	r3, [pc, #540]	@ (80040f0 <HAL_RCC_OscConfig+0x674>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d11a      	bne.n	8003f12 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003edc:	4b84      	ldr	r3, [pc, #528]	@ (80040f0 <HAL_RCC_OscConfig+0x674>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b83      	ldr	r3, [pc, #524]	@ (80040f0 <HAL_RCC_OscConfig+0x674>)
 8003ee2:	2180      	movs	r1, #128	@ 0x80
 8003ee4:	0049      	lsls	r1, r1, #1
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fe fb61 	bl	80025b0 <HAL_GetTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fe fb5c 	bl	80025b0 <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e173      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b7a      	ldr	r3, [pc, #488]	@ (80040f0 <HAL_RCC_OscConfig+0x674>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_OscConfig+0x4b2>
 8003f1e:	4b72      	ldr	r3, [pc, #456]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f22:	4b71      	ldr	r3, [pc, #452]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f24:	2180      	movs	r1, #128	@ 0x80
 8003f26:	0049      	lsls	r1, r1, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f2c:	e031      	b.n	8003f92 <HAL_RCC_OscConfig+0x516>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4d4>
 8003f36:	4b6c      	ldr	r3, [pc, #432]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f3c:	496b      	ldr	r1, [pc, #428]	@ (80040ec <HAL_RCC_OscConfig+0x670>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f42:	4b69      	ldr	r3, [pc, #420]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f46:	4b68      	ldr	r3, [pc, #416]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f48:	496a      	ldr	r1, [pc, #424]	@ (80040f4 <HAL_RCC_OscConfig+0x678>)
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f4e:	e020      	b.n	8003f92 <HAL_RCC_OscConfig+0x516>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	23a0      	movs	r3, #160	@ 0xa0
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d10e      	bne.n	8003f7a <HAL_RCC_OscConfig+0x4fe>
 8003f5c:	4b62      	ldr	r3, [pc, #392]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f60:	4b61      	ldr	r3, [pc, #388]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f62:	2180      	movs	r1, #128	@ 0x80
 8003f64:	00c9      	lsls	r1, r1, #3
 8003f66:	430a      	orrs	r2, r1
 8003f68:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f70:	2180      	movs	r1, #128	@ 0x80
 8003f72:	0049      	lsls	r1, r1, #1
 8003f74:	430a      	orrs	r2, r1
 8003f76:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f78:	e00b      	b.n	8003f92 <HAL_RCC_OscConfig+0x516>
 8003f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f80:	495a      	ldr	r1, [pc, #360]	@ (80040ec <HAL_RCC_OscConfig+0x670>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f86:	4b58      	ldr	r3, [pc, #352]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f8a:	4b57      	ldr	r3, [pc, #348]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003f8c:	4959      	ldr	r1, [pc, #356]	@ (80040f4 <HAL_RCC_OscConfig+0x678>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d015      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe fb09 	bl	80025b0 <HAL_GetTick>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fe fb04 	bl	80025b0 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a52      	ldr	r2, [pc, #328]	@ (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e11a      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003fba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fbc:	2380      	movs	r3, #128	@ 0x80
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d0ef      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x528>
 8003fc4:	e014      	b.n	8003ff0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fe faf3 	bl	80025b0 <HAL_GetTick>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fce:	e009      	b.n	8003fe4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd0:	f7fe faee 	bl	80025b0 <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	4a47      	ldr	r2, [pc, #284]	@ (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e104      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fe4:	4b40      	ldr	r3, [pc, #256]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003fe6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d1ef      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff0:	2327      	movs	r3, #39	@ 0x27
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d105      	bne.n	8004006 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8003ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8004000:	493e      	ldr	r1, [pc, #248]	@ (80040fc <HAL_RCC_OscConfig+0x680>)
 8004002:	400a      	ands	r2, r1
 8004004:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2220      	movs	r2, #32
 800400c:	4013      	ands	r3, r2
 800400e:	d049      	beq.n	80040a4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d026      	beq.n	8004066 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004018:	4b33      	ldr	r3, [pc, #204]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	4b32      	ldr	r3, [pc, #200]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 800401e:	2101      	movs	r1, #1
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	4b30      	ldr	r3, [pc, #192]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8004026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004028:	4b2f      	ldr	r3, [pc, #188]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 800402a:	2101      	movs	r1, #1
 800402c:	430a      	orrs	r2, r1
 800402e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004030:	4b33      	ldr	r3, [pc, #204]	@ (8004100 <HAL_RCC_OscConfig+0x684>)
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <HAL_RCC_OscConfig+0x684>)
 8004036:	2180      	movs	r1, #128	@ 0x80
 8004038:	0189      	lsls	r1, r1, #6
 800403a:	430a      	orrs	r2, r1
 800403c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fe fab7 	bl	80025b0 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004048:	f7fe fab2 	bl	80025b0 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0c9      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2202      	movs	r2, #2
 8004060:	4013      	ands	r3, r2
 8004062:	d0f1      	beq.n	8004048 <HAL_RCC_OscConfig+0x5cc>
 8004064:	e01e      	b.n	80040a4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004066:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 800406c:	2101      	movs	r1, #1
 800406e:	438a      	bics	r2, r1
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_RCC_OscConfig+0x684>)
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	4b22      	ldr	r3, [pc, #136]	@ (8004100 <HAL_RCC_OscConfig+0x684>)
 8004078:	4922      	ldr	r1, [pc, #136]	@ (8004104 <HAL_RCC_OscConfig+0x688>)
 800407a:	400a      	ands	r2, r1
 800407c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fe fa97 	bl	80025b0 <HAL_GetTick>
 8004082:	0003      	movs	r3, r0
 8004084:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004088:	f7fe fa92 	bl	80025b0 <HAL_GetTick>
 800408c:	0002      	movs	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0a9      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800409a:	4b13      	ldr	r3, [pc, #76]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2202      	movs	r2, #2
 80040a0:	4013      	ands	r3, r2
 80040a2:	d1f1      	bne.n	8004088 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d100      	bne.n	80040ae <HAL_RCC_OscConfig+0x632>
 80040ac:	e09e      	b.n	80041ec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	d100      	bne.n	80040b6 <HAL_RCC_OscConfig+0x63a>
 80040b4:	e077      	b.n	80041a6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d158      	bne.n	8004170 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_RCC_OscConfig+0x66c>)
 80040c4:	4910      	ldr	r1, [pc, #64]	@ (8004108 <HAL_RCC_OscConfig+0x68c>)
 80040c6:	400a      	ands	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fe fa71 	bl	80025b0 <HAL_GetTick>
 80040ce:	0003      	movs	r3, r0
 80040d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040d2:	e01b      	b.n	800410c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe fa6c 	bl	80025b0 <HAL_GetTick>
 80040d8:	0002      	movs	r2, r0
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d914      	bls.n	800410c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e083      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	40021000 	.word	0x40021000
 80040ec:	fffffeff 	.word	0xfffffeff
 80040f0:	40007000 	.word	0x40007000
 80040f4:	fffffbff 	.word	0xfffffbff
 80040f8:	00001388 	.word	0x00001388
 80040fc:	efffffff 	.word	0xefffffff
 8004100:	40010000 	.word	0x40010000
 8004104:	ffffdfff 	.word	0xffffdfff
 8004108:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800410c:	4b3a      	ldr	r3, [pc, #232]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	049b      	lsls	r3, r3, #18
 8004114:	4013      	ands	r3, r2
 8004116:	d1dd      	bne.n	80040d4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004118:	4b37      	ldr	r3, [pc, #220]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a37      	ldr	r2, [pc, #220]	@ (80041fc <HAL_RCC_OscConfig+0x780>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004130:	431a      	orrs	r2, r3
 8004132:	4b31      	ldr	r3, [pc, #196]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b2f      	ldr	r3, [pc, #188]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b2e      	ldr	r3, [pc, #184]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 800413e:	2180      	movs	r1, #128	@ 0x80
 8004140:	0449      	lsls	r1, r1, #17
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fe fa33 	bl	80025b0 <HAL_GetTick>
 800414a:	0003      	movs	r3, r0
 800414c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004150:	f7fe fa2e 	bl	80025b0 <HAL_GetTick>
 8004154:	0002      	movs	r2, r0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e045      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004162:	4b25      	ldr	r3, [pc, #148]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	049b      	lsls	r3, r3, #18
 800416a:	4013      	ands	r3, r2
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x6d4>
 800416e:	e03d      	b.n	80041ec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b21      	ldr	r3, [pc, #132]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b20      	ldr	r3, [pc, #128]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 8004176:	4922      	ldr	r1, [pc, #136]	@ (8004200 <HAL_RCC_OscConfig+0x784>)
 8004178:	400a      	ands	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fe fa18 	bl	80025b0 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fe fa13 	bl	80025b0 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e02a      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004198:	4b17      	ldr	r3, [pc, #92]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	049b      	lsls	r3, r3, #18
 80041a0:	4013      	ands	r3, r2
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x70a>
 80041a4:	e022      	b.n	80041ec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e01d      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b2:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_RCC_OscConfig+0x77c>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d10f      	bne.n	80041e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	23f0      	movs	r3, #240	@ 0xf0
 80041cc:	039b      	lsls	r3, r3, #14
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	23c0      	movs	r3, #192	@ 0xc0
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	401a      	ands	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b00a      	add	sp, #40	@ 0x28
 80041f4:	bdb0      	pop	{r4, r5, r7, pc}
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	40021000 	.word	0x40021000
 80041fc:	ff02ffff 	.word	0xff02ffff
 8004200:	feffffff 	.word	0xfeffffff

08004204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e128      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004218:	4b96      	ldr	r3, [pc, #600]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d91e      	bls.n	8004264 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b93      	ldr	r3, [pc, #588]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4393      	bics	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	4b90      	ldr	r3, [pc, #576]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004238:	f7fe f9ba 	bl	80025b0 <HAL_GetTick>
 800423c:	0003      	movs	r3, r0
 800423e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004240:	e009      	b.n	8004256 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004242:	f7fe f9b5 	bl	80025b0 <HAL_GetTick>
 8004246:	0002      	movs	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	4a8a      	ldr	r2, [pc, #552]	@ (8004478 <HAL_RCC_ClockConfig+0x274>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e109      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b87      	ldr	r3, [pc, #540]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2201      	movs	r2, #1
 800425c:	4013      	ands	r3, r2
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d1ee      	bne.n	8004242 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2202      	movs	r2, #2
 800426a:	4013      	ands	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426e:	4b83      	ldr	r3, [pc, #524]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	22f0      	movs	r2, #240	@ 0xf0
 8004274:	4393      	bics	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	4b7f      	ldr	r3, [pc, #508]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 800427e:	430a      	orrs	r2, r1
 8004280:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d100      	bne.n	800428e <HAL_RCC_ClockConfig+0x8a>
 800428c:	e089      	b.n	80043a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004296:	4b79      	ldr	r3, [pc, #484]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	4013      	ands	r3, r2
 80042a0:	d120      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0e1      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ae:	4b73      	ldr	r3, [pc, #460]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	@ 0x80
 80042b4:	049b      	lsls	r3, r3, #18
 80042b6:	4013      	ands	r3, r2
 80042b8:	d114      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0d5      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d106      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c6:	4b6d      	ldr	r3, [pc, #436]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2204      	movs	r2, #4
 80042cc:	4013      	ands	r3, r2
 80042ce:	d109      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ca      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042d4:	4b69      	ldr	r3, [pc, #420]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	@ 0x80
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4013      	ands	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0c2      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e4:	4b65      	ldr	r3, [pc, #404]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2203      	movs	r2, #3
 80042ea:	4393      	bics	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4b62      	ldr	r3, [pc, #392]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fe f95a 	bl	80025b0 <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d111      	bne.n	800432c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004308:	e009      	b.n	800431e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7fe f951 	bl	80025b0 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a58      	ldr	r2, [pc, #352]	@ (8004478 <HAL_RCC_ClockConfig+0x274>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0a5      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800431e:	4b57      	ldr	r3, [pc, #348]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	220c      	movs	r2, #12
 8004324:	4013      	ands	r3, r2
 8004326:	2b08      	cmp	r3, #8
 8004328:	d1ef      	bne.n	800430a <HAL_RCC_ClockConfig+0x106>
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d111      	bne.n	8004358 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004334:	e009      	b.n	800434a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004336:	f7fe f93b 	bl	80025b0 <HAL_GetTick>
 800433a:	0002      	movs	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	4a4d      	ldr	r2, [pc, #308]	@ (8004478 <HAL_RCC_ClockConfig+0x274>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e08f      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800434a:	4b4c      	ldr	r3, [pc, #304]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	220c      	movs	r2, #12
 8004350:	4013      	ands	r3, r2
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d1ef      	bne.n	8004336 <HAL_RCC_ClockConfig+0x132>
 8004356:	e024      	b.n	80043a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d11b      	bne.n	8004398 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004360:	e009      	b.n	8004376 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004362:	f7fe f925 	bl	80025b0 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a42      	ldr	r2, [pc, #264]	@ (8004478 <HAL_RCC_ClockConfig+0x274>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e079      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004376:	4b41      	ldr	r3, [pc, #260]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	220c      	movs	r2, #12
 800437c:	4013      	ands	r3, r2
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ef      	bne.n	8004362 <HAL_RCC_ClockConfig+0x15e>
 8004382:	e00e      	b.n	80043a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fe f914 	bl	80025b0 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	4a3a      	ldr	r2, [pc, #232]	@ (8004478 <HAL_RCC_ClockConfig+0x274>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e068      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004398:	4b38      	ldr	r3, [pc, #224]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	220c      	movs	r2, #12
 800439e:	4013      	ands	r3, r2
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a2:	4b34      	ldr	r3, [pc, #208]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	4013      	ands	r3, r2
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d21e      	bcs.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b0:	4b30      	ldr	r3, [pc, #192]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4393      	bics	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043c2:	f7fe f8f5 	bl	80025b0 <HAL_GetTick>
 80043c6:	0003      	movs	r3, r0
 80043c8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	e009      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fe f8f0 	bl	80025b0 <HAL_GetTick>
 80043d0:	0002      	movs	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	4a28      	ldr	r2, [pc, #160]	@ (8004478 <HAL_RCC_ClockConfig+0x274>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e044      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <HAL_RCC_ClockConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2201      	movs	r2, #1
 80043e6:	4013      	ands	r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2204      	movs	r2, #4
 80043f4:	4013      	ands	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a20      	ldr	r2, [pc, #128]	@ (8004480 <HAL_RCC_ClockConfig+0x27c>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004408:	430a      	orrs	r2, r1
 800440a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	4013      	ands	r3, r2
 8004414:	d00a      	beq.n	800442c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004416:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4a1a      	ldr	r2, [pc, #104]	@ (8004484 <HAL_RCC_ClockConfig+0x280>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	00da      	lsls	r2, r3, #3
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004428:	430a      	orrs	r2, r1
 800442a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800442c:	f000 f832 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8004430:	0001      	movs	r1, r0
 8004432:	4b12      	ldr	r3, [pc, #72]	@ (800447c <HAL_RCC_ClockConfig+0x278>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	220f      	movs	r2, #15
 800443a:	4013      	ands	r3, r2
 800443c:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <HAL_RCC_ClockConfig+0x284>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	000a      	movs	r2, r1
 8004442:	40da      	lsrs	r2, r3
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <HAL_RCC_ClockConfig+0x288>)
 8004446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004448:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <HAL_RCC_ClockConfig+0x28c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	250b      	movs	r5, #11
 800444e:	197c      	adds	r4, r7, r5
 8004450:	0018      	movs	r0, r3
 8004452:	f7fe f867 	bl	8002524 <HAL_InitTick>
 8004456:	0003      	movs	r3, r0
 8004458:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800445a:	197b      	adds	r3, r7, r5
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004462:	197b      	adds	r3, r7, r5
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	e000      	b.n	800446a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b004      	add	sp, #16
 8004470:	bdb0      	pop	{r4, r5, r7, pc}
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	40022000 	.word	0x40022000
 8004478:	00001388 	.word	0x00001388
 800447c:	40021000 	.word	0x40021000
 8004480:	fffff8ff 	.word	0xfffff8ff
 8004484:	ffffc7ff 	.word	0xffffc7ff
 8004488:	08005268 	.word	0x08005268
 800448c:	20000000 	.word	0x20000000
 8004490:	20000004 	.word	0x20000004

08004494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800449a:	4b3c      	ldr	r3, [pc, #240]	@ (800458c <HAL_RCC_GetSysClockFreq+0xf8>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	220c      	movs	r2, #12
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d013      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80044aa:	d85c      	bhi.n	8004566 <HAL_RCC_GetSysClockFreq+0xd2>
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d002      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x22>
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d00b      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x38>
 80044b4:	e057      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044b6:	4b35      	ldr	r3, [pc, #212]	@ (800458c <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	4013      	ands	r3, r2
 80044be:	d002      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80044c0:	4b33      	ldr	r3, [pc, #204]	@ (8004590 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044c2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80044c4:	e05d      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80044c6:	4b33      	ldr	r3, [pc, #204]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x100>)
 80044c8:	613b      	str	r3, [r7, #16]
      break;
 80044ca:	e05a      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044cc:	4b32      	ldr	r3, [pc, #200]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x104>)
 80044ce:	613b      	str	r3, [r7, #16]
      break;
 80044d0:	e057      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	0c9b      	lsrs	r3, r3, #18
 80044d6:	220f      	movs	r2, #15
 80044d8:	4013      	ands	r3, r2
 80044da:	4a30      	ldr	r2, [pc, #192]	@ (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0d9b      	lsrs	r3, r3, #22
 80044e4:	2203      	movs	r2, #3
 80044e6:	4013      	ands	r3, r2
 80044e8:	3301      	adds	r3, #1
 80044ea:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ec:	4b27      	ldr	r3, [pc, #156]	@ (800458c <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	025b      	lsls	r3, r3, #9
 80044f4:	4013      	ands	r3, r2
 80044f6:	d00f      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	000a      	movs	r2, r1
 80044fc:	0152      	lsls	r2, r2, #5
 80044fe:	1a52      	subs	r2, r2, r1
 8004500:	0193      	lsls	r3, r2, #6
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	185b      	adds	r3, r3, r1
 8004508:	025b      	lsls	r3, r3, #9
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f7fb fe05 	bl	800011c <__udivsi3>
 8004512:	0003      	movs	r3, r0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e023      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004518:	4b1c      	ldr	r3, [pc, #112]	@ (800458c <HAL_RCC_GetSysClockFreq+0xf8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	4013      	ands	r3, r2
 8004520:	d00f      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	000a      	movs	r2, r1
 8004526:	0152      	lsls	r2, r2, #5
 8004528:	1a52      	subs	r2, r2, r1
 800452a:	0193      	lsls	r3, r2, #6
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	185b      	adds	r3, r3, r1
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	0018      	movs	r0, r3
 8004538:	f7fb fdf0 	bl	800011c <__udivsi3>
 800453c:	0003      	movs	r3, r0
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e00e      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	000a      	movs	r2, r1
 8004546:	0152      	lsls	r2, r2, #5
 8004548:	1a52      	subs	r2, r2, r1
 800454a:	0193      	lsls	r3, r2, #6
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	185b      	adds	r3, r3, r1
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	0018      	movs	r0, r3
 8004558:	f7fb fde0 	bl	800011c <__udivsi3>
 800455c:	0003      	movs	r3, r0
 800455e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]
      break;
 8004564:	e00d      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004566:	4b09      	ldr	r3, [pc, #36]	@ (800458c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	0b5b      	lsrs	r3, r3, #13
 800456c:	2207      	movs	r2, #7
 800456e:	4013      	ands	r3, r2
 8004570:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	2280      	movs	r2, #128	@ 0x80
 8004578:	0212      	lsls	r2, r2, #8
 800457a:	409a      	lsls	r2, r3
 800457c:	0013      	movs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
      break;
 8004580:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004582:	693b      	ldr	r3, [r7, #16]
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b006      	add	sp, #24
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	003d0900 	.word	0x003d0900
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200
 800459c:	08005278 	.word	0x08005278

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80045a8:	2317      	movs	r3, #23
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2220      	movs	r2, #32
 80045b6:	4013      	ands	r3, r2
 80045b8:	d106      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	2380      	movs	r3, #128	@ 0x80
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4013      	ands	r3, r2
 80045c4:	d100      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80045c6:	e104      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c8:	4bb1      	ldr	r3, [pc, #708]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	055b      	lsls	r3, r3, #21
 80045d0:	4013      	ands	r3, r2
 80045d2:	d10a      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4bae      	ldr	r3, [pc, #696]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d8:	4bad      	ldr	r3, [pc, #692]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045da:	2180      	movs	r1, #128	@ 0x80
 80045dc:	0549      	lsls	r1, r1, #21
 80045de:	430a      	orrs	r2, r1
 80045e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80045e2:	2317      	movs	r3, #23
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	2201      	movs	r2, #1
 80045e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4baa      	ldr	r3, [pc, #680]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	2380      	movs	r3, #128	@ 0x80
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4013      	ands	r3, r2
 80045f4:	d11a      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f6:	4ba7      	ldr	r3, [pc, #668]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045fc:	2180      	movs	r1, #128	@ 0x80
 80045fe:	0049      	lsls	r1, r1, #1
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004604:	f7fd ffd4 	bl	80025b0 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd ffcf 	bl	80025b0 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b64      	cmp	r3, #100	@ 0x64
 800461a:	d901      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e133      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b9c      	ldr	r3, [pc, #624]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4013      	ands	r3, r2
 800462a:	d0f0      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800462c:	4b98      	ldr	r3, [pc, #608]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	23c0      	movs	r3, #192	@ 0xc0
 8004632:	039b      	lsls	r3, r3, #14
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	23c0      	movs	r3, #192	@ 0xc0
 800463e:	039b      	lsls	r3, r3, #14
 8004640:	4013      	ands	r3, r2
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	429a      	cmp	r2, r3
 8004646:	d107      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	23c0      	movs	r3, #192	@ 0xc0
 800464e:	039b      	lsls	r3, r3, #14
 8004650:	4013      	ands	r3, r2
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	429a      	cmp	r2, r3
 8004656:	d013      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	23c0      	movs	r3, #192	@ 0xc0
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	401a      	ands	r2, r3
 8004662:	23c0      	movs	r3, #192	@ 0xc0
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	429a      	cmp	r2, r3
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800466a:	4b89      	ldr	r3, [pc, #548]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	2380      	movs	r3, #128	@ 0x80
 8004670:	029b      	lsls	r3, r3, #10
 8004672:	401a      	ands	r2, r3
 8004674:	2380      	movs	r3, #128	@ 0x80
 8004676:	029b      	lsls	r3, r3, #10
 8004678:	429a      	cmp	r2, r3
 800467a:	d101      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e103      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004680:	4b83      	ldr	r3, [pc, #524]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004684:	23c0      	movs	r3, #192	@ 0xc0
 8004686:	029b      	lsls	r3, r3, #10
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d049      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	23c0      	movs	r3, #192	@ 0xc0
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	4013      	ands	r3, r2
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d004      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2220      	movs	r2, #32
 80046a8:	4013      	ands	r3, r2
 80046aa:	d10d      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	23c0      	movs	r3, #192	@ 0xc0
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	4013      	ands	r3, r2
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d034      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	4013      	ands	r3, r2
 80046c6:	d02e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046c8:	4b71      	ldr	r3, [pc, #452]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046cc:	4a72      	ldr	r2, [pc, #456]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046d8:	2180      	movs	r1, #128	@ 0x80
 80046da:	0309      	lsls	r1, r1, #12
 80046dc:	430a      	orrs	r2, r1
 80046de:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046e6:	496d      	ldr	r1, [pc, #436]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80046ec:	4b68      	ldr	r3, [pc, #416]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4013      	ands	r3, r2
 80046fa:	d014      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd ff58 	bl	80025b0 <HAL_GetTick>
 8004700:	0003      	movs	r3, r0
 8004702:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004704:	e009      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd ff53 	bl	80025b0 <HAL_GetTick>
 800470a:	0002      	movs	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	4a63      	ldr	r2, [pc, #396]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0b6      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800471a:	4b5d      	ldr	r3, [pc, #372]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800471c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4013      	ands	r3, r2
 8004724:	d0ef      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	2380      	movs	r3, #128	@ 0x80
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	4013      	ands	r3, r2
 8004730:	d01f      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	23c0      	movs	r3, #192	@ 0xc0
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	401a      	ands	r2, r3
 800473c:	23c0      	movs	r3, #192	@ 0xc0
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	429a      	cmp	r2, r3
 8004742:	d10c      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004744:	4b52      	ldr	r3, [pc, #328]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a56      	ldr	r2, [pc, #344]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800474a:	4013      	ands	r3, r2
 800474c:	0019      	movs	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	23c0      	movs	r3, #192	@ 0xc0
 8004754:	039b      	lsls	r3, r3, #14
 8004756:	401a      	ands	r2, r3
 8004758:	4b4d      	ldr	r3, [pc, #308]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800475a:	430a      	orrs	r2, r1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	4b4c      	ldr	r3, [pc, #304]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004760:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	23c0      	movs	r3, #192	@ 0xc0
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	401a      	ands	r2, r3
 800476c:	4b48      	ldr	r3, [pc, #288]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800476e:	430a      	orrs	r2, r1
 8004770:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2220      	movs	r2, #32
 8004778:	4013      	ands	r3, r2
 800477a:	d01f      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	23c0      	movs	r3, #192	@ 0xc0
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	401a      	ands	r2, r3
 8004786:	23c0      	movs	r3, #192	@ 0xc0
 8004788:	029b      	lsls	r3, r3, #10
 800478a:	429a      	cmp	r2, r3
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800478e:	4b40      	ldr	r3, [pc, #256]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a44      	ldr	r2, [pc, #272]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004794:	4013      	ands	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	23c0      	movs	r3, #192	@ 0xc0
 800479e:	039b      	lsls	r3, r3, #14
 80047a0:	401a      	ands	r2, r3
 80047a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047aa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	23c0      	movs	r3, #192	@ 0xc0
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	401a      	ands	r2, r3
 80047b6:	4b36      	ldr	r3, [pc, #216]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047b8:	430a      	orrs	r2, r1
 80047ba:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047bc:	2317      	movs	r3, #23
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c6:	4b32      	ldr	r3, [pc, #200]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ca:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047cc:	4936      	ldr	r1, [pc, #216]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2201      	movs	r2, #1
 80047d8:	4013      	ands	r3, r2
 80047da:	d009      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e0:	2203      	movs	r2, #3
 80047e2:	4393      	bics	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	4b29      	ldr	r3, [pc, #164]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2202      	movs	r2, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fa:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fe:	220c      	movs	r2, #12
 8004800:	4393      	bics	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	4b21      	ldr	r3, [pc, #132]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800480a:	430a      	orrs	r2, r1
 800480c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2204      	movs	r2, #4
 8004814:	4013      	ands	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800481a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800481c:	4a23      	ldr	r2, [pc, #140]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004828:	430a      	orrs	r2, r1
 800482a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2208      	movs	r2, #8
 8004832:	4013      	ands	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004836:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483a:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800483c:	4013      	ands	r3, r2
 800483e:	0019      	movs	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004846:	430a      	orrs	r2, r1
 8004848:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2240      	movs	r2, #64	@ 0x40
 8004850:	4013      	ands	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004854:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004858:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800485a:	4013      	ands	r3, r2
 800485c:	0019      	movs	r1, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004864:	430a      	orrs	r2, r1
 8004866:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2280      	movs	r2, #128	@ 0x80
 800486e:	4013      	ands	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004872:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004876:	4a10      	ldr	r2, [pc, #64]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004878:	4013      	ands	r3, r2
 800487a:	0019      	movs	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004882:	430a      	orrs	r2, r1
 8004884:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b006      	add	sp, #24
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
 8004898:	fffcffff 	.word	0xfffcffff
 800489c:	fff7ffff 	.word	0xfff7ffff
 80048a0:	00001388 	.word	0x00001388
 80048a4:	ffcfffff 	.word	0xffcfffff
 80048a8:	efffffff 	.word	0xefffffff
 80048ac:	fffff3ff 	.word	0xfffff3ff
 80048b0:	ffffcfff 	.word	0xffffcfff
 80048b4:	fbffffff 	.word	0xfbffffff
 80048b8:	fff3ffff 	.word	0xfff3ffff

080048bc <siprintf>:
 80048bc:	b40e      	push	{r1, r2, r3}
 80048be:	b510      	push	{r4, lr}
 80048c0:	2400      	movs	r4, #0
 80048c2:	490c      	ldr	r1, [pc, #48]	@ (80048f4 <siprintf+0x38>)
 80048c4:	b09d      	sub	sp, #116	@ 0x74
 80048c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80048c8:	9002      	str	r0, [sp, #8]
 80048ca:	9006      	str	r0, [sp, #24]
 80048cc:	9107      	str	r1, [sp, #28]
 80048ce:	9104      	str	r1, [sp, #16]
 80048d0:	4809      	ldr	r0, [pc, #36]	@ (80048f8 <siprintf+0x3c>)
 80048d2:	490a      	ldr	r1, [pc, #40]	@ (80048fc <siprintf+0x40>)
 80048d4:	cb04      	ldmia	r3!, {r2}
 80048d6:	9105      	str	r1, [sp, #20]
 80048d8:	6800      	ldr	r0, [r0, #0]
 80048da:	a902      	add	r1, sp, #8
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048e0:	f000 f99e 	bl	8004c20 <_svfiprintf_r>
 80048e4:	9b02      	ldr	r3, [sp, #8]
 80048e6:	701c      	strb	r4, [r3, #0]
 80048e8:	b01d      	add	sp, #116	@ 0x74
 80048ea:	bc10      	pop	{r4}
 80048ec:	bc08      	pop	{r3}
 80048ee:	b003      	add	sp, #12
 80048f0:	4718      	bx	r3
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	7fffffff 	.word	0x7fffffff
 80048f8:	2000000c 	.word	0x2000000c
 80048fc:	ffff0208 	.word	0xffff0208

08004900 <memset>:
 8004900:	0003      	movs	r3, r0
 8004902:	1882      	adds	r2, r0, r2
 8004904:	4293      	cmp	r3, r2
 8004906:	d100      	bne.n	800490a <memset+0xa>
 8004908:	4770      	bx	lr
 800490a:	7019      	strb	r1, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	e7f9      	b.n	8004904 <memset+0x4>

08004910 <__errno>:
 8004910:	4b01      	ldr	r3, [pc, #4]	@ (8004918 <__errno+0x8>)
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	4770      	bx	lr
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	2000000c 	.word	0x2000000c

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	2600      	movs	r6, #0
 8004920:	4c0c      	ldr	r4, [pc, #48]	@ (8004954 <__libc_init_array+0x38>)
 8004922:	4d0d      	ldr	r5, [pc, #52]	@ (8004958 <__libc_init_array+0x3c>)
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	2600      	movs	r6, #0
 800492e:	f000 fc61 	bl	80051f4 <_init>
 8004932:	4c0a      	ldr	r4, [pc, #40]	@ (800495c <__libc_init_array+0x40>)
 8004934:	4d0a      	ldr	r5, [pc, #40]	@ (8004960 <__libc_init_array+0x44>)
 8004936:	1b64      	subs	r4, r4, r5
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	00b3      	lsls	r3, r6, #2
 8004942:	58eb      	ldr	r3, [r5, r3]
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	00b3      	lsls	r3, r6, #2
 800494c:	58eb      	ldr	r3, [r5, r3]
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	080052b4 	.word	0x080052b4
 8004958:	080052b4 	.word	0x080052b4
 800495c:	080052b8 	.word	0x080052b8
 8004960:	080052b4 	.word	0x080052b4

08004964 <__retarget_lock_acquire_recursive>:
 8004964:	4770      	bx	lr

08004966 <__retarget_lock_release_recursive>:
 8004966:	4770      	bx	lr

08004968 <_free_r>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	0005      	movs	r5, r0
 800496c:	1e0c      	subs	r4, r1, #0
 800496e:	d010      	beq.n	8004992 <_free_r+0x2a>
 8004970:	3c04      	subs	r4, #4
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	da00      	bge.n	800497a <_free_r+0x12>
 8004978:	18e4      	adds	r4, r4, r3
 800497a:	0028      	movs	r0, r5
 800497c:	f000 f8e0 	bl	8004b40 <__malloc_lock>
 8004980:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <_free_r+0x90>)
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <_free_r+0x2c>
 8004988:	6063      	str	r3, [r4, #4]
 800498a:	6014      	str	r4, [r2, #0]
 800498c:	0028      	movs	r0, r5
 800498e:	f000 f8df 	bl	8004b50 <__malloc_unlock>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	42a3      	cmp	r3, r4
 8004996:	d908      	bls.n	80049aa <_free_r+0x42>
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	1821      	adds	r1, r4, r0
 800499c:	428b      	cmp	r3, r1
 800499e:	d1f3      	bne.n	8004988 <_free_r+0x20>
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	1809      	adds	r1, r1, r0
 80049a6:	6021      	str	r1, [r4, #0]
 80049a8:	e7ee      	b.n	8004988 <_free_r+0x20>
 80049aa:	001a      	movs	r2, r3
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <_free_r+0x4e>
 80049b2:	42a3      	cmp	r3, r4
 80049b4:	d9f9      	bls.n	80049aa <_free_r+0x42>
 80049b6:	6811      	ldr	r1, [r2, #0]
 80049b8:	1850      	adds	r0, r2, r1
 80049ba:	42a0      	cmp	r0, r4
 80049bc:	d10b      	bne.n	80049d6 <_free_r+0x6e>
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1809      	adds	r1, r1, r0
 80049c2:	1850      	adds	r0, r2, r1
 80049c4:	6011      	str	r1, [r2, #0]
 80049c6:	4283      	cmp	r3, r0
 80049c8:	d1e0      	bne.n	800498c <_free_r+0x24>
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	1841      	adds	r1, r0, r1
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	6053      	str	r3, [r2, #4]
 80049d4:	e7da      	b.n	800498c <_free_r+0x24>
 80049d6:	42a0      	cmp	r0, r4
 80049d8:	d902      	bls.n	80049e0 <_free_r+0x78>
 80049da:	230c      	movs	r3, #12
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	e7d5      	b.n	800498c <_free_r+0x24>
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	1821      	adds	r1, r4, r0
 80049e4:	428b      	cmp	r3, r1
 80049e6:	d103      	bne.n	80049f0 <_free_r+0x88>
 80049e8:	6819      	ldr	r1, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	1809      	adds	r1, r1, r0
 80049ee:	6021      	str	r1, [r4, #0]
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	6054      	str	r4, [r2, #4]
 80049f4:	e7ca      	b.n	800498c <_free_r+0x24>
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	20000234 	.word	0x20000234

080049fc <sbrk_aligned>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4e0f      	ldr	r6, [pc, #60]	@ (8004a3c <sbrk_aligned+0x40>)
 8004a00:	000d      	movs	r5, r1
 8004a02:	6831      	ldr	r1, [r6, #0]
 8004a04:	0004      	movs	r4, r0
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d102      	bne.n	8004a10 <sbrk_aligned+0x14>
 8004a0a:	f000 fb95 	bl	8005138 <_sbrk_r>
 8004a0e:	6030      	str	r0, [r6, #0]
 8004a10:	0029      	movs	r1, r5
 8004a12:	0020      	movs	r0, r4
 8004a14:	f000 fb90 	bl	8005138 <_sbrk_r>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d103      	bne.n	8004a24 <sbrk_aligned+0x28>
 8004a1c:	2501      	movs	r5, #1
 8004a1e:	426d      	negs	r5, r5
 8004a20:	0028      	movs	r0, r5
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	2303      	movs	r3, #3
 8004a26:	1cc5      	adds	r5, r0, #3
 8004a28:	439d      	bics	r5, r3
 8004a2a:	42a8      	cmp	r0, r5
 8004a2c:	d0f8      	beq.n	8004a20 <sbrk_aligned+0x24>
 8004a2e:	1a29      	subs	r1, r5, r0
 8004a30:	0020      	movs	r0, r4
 8004a32:	f000 fb81 	bl	8005138 <_sbrk_r>
 8004a36:	3001      	adds	r0, #1
 8004a38:	d1f2      	bne.n	8004a20 <sbrk_aligned+0x24>
 8004a3a:	e7ef      	b.n	8004a1c <sbrk_aligned+0x20>
 8004a3c:	20000230 	.word	0x20000230

08004a40 <_malloc_r>:
 8004a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a42:	2203      	movs	r2, #3
 8004a44:	1ccb      	adds	r3, r1, #3
 8004a46:	4393      	bics	r3, r2
 8004a48:	3308      	adds	r3, #8
 8004a4a:	0005      	movs	r5, r0
 8004a4c:	001f      	movs	r7, r3
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d234      	bcs.n	8004abc <_malloc_r+0x7c>
 8004a52:	270c      	movs	r7, #12
 8004a54:	42b9      	cmp	r1, r7
 8004a56:	d833      	bhi.n	8004ac0 <_malloc_r+0x80>
 8004a58:	0028      	movs	r0, r5
 8004a5a:	f000 f871 	bl	8004b40 <__malloc_lock>
 8004a5e:	4e37      	ldr	r6, [pc, #220]	@ (8004b3c <_malloc_r+0xfc>)
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	001c      	movs	r4, r3
 8004a64:	2c00      	cmp	r4, #0
 8004a66:	d12f      	bne.n	8004ac8 <_malloc_r+0x88>
 8004a68:	0039      	movs	r1, r7
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	f7ff ffc6 	bl	80049fc <sbrk_aligned>
 8004a70:	0004      	movs	r4, r0
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	d15f      	bne.n	8004b36 <_malloc_r+0xf6>
 8004a76:	6834      	ldr	r4, [r6, #0]
 8004a78:	9400      	str	r4, [sp, #0]
 8004a7a:	9b00      	ldr	r3, [sp, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d14a      	bne.n	8004b16 <_malloc_r+0xd6>
 8004a80:	2c00      	cmp	r4, #0
 8004a82:	d052      	beq.n	8004b2a <_malloc_r+0xea>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	0028      	movs	r0, r5
 8004a88:	18e3      	adds	r3, r4, r3
 8004a8a:	9900      	ldr	r1, [sp, #0]
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	f000 fb53 	bl	8005138 <_sbrk_r>
 8004a92:	9b01      	ldr	r3, [sp, #4]
 8004a94:	4283      	cmp	r3, r0
 8004a96:	d148      	bne.n	8004b2a <_malloc_r+0xea>
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	0028      	movs	r0, r5
 8004a9c:	1aff      	subs	r7, r7, r3
 8004a9e:	0039      	movs	r1, r7
 8004aa0:	f7ff ffac 	bl	80049fc <sbrk_aligned>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d040      	beq.n	8004b2a <_malloc_r+0xea>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	19db      	adds	r3, r3, r7
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	6833      	ldr	r3, [r6, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	d133      	bne.n	8004b1e <_malloc_r+0xde>
 8004ab6:	9b00      	ldr	r3, [sp, #0]
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	e019      	b.n	8004af0 <_malloc_r+0xb0>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	dac9      	bge.n	8004a54 <_malloc_r+0x14>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ac8:	6821      	ldr	r1, [r4, #0]
 8004aca:	1bc9      	subs	r1, r1, r7
 8004acc:	d420      	bmi.n	8004b10 <_malloc_r+0xd0>
 8004ace:	290b      	cmp	r1, #11
 8004ad0:	d90a      	bls.n	8004ae8 <_malloc_r+0xa8>
 8004ad2:	19e2      	adds	r2, r4, r7
 8004ad4:	6027      	str	r7, [r4, #0]
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	d104      	bne.n	8004ae4 <_malloc_r+0xa4>
 8004ada:	6032      	str	r2, [r6, #0]
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	6011      	str	r1, [r2, #0]
 8004ae0:	6053      	str	r3, [r2, #4]
 8004ae2:	e005      	b.n	8004af0 <_malloc_r+0xb0>
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	e7f9      	b.n	8004adc <_malloc_r+0x9c>
 8004ae8:	6862      	ldr	r2, [r4, #4]
 8004aea:	42a3      	cmp	r3, r4
 8004aec:	d10e      	bne.n	8004b0c <_malloc_r+0xcc>
 8004aee:	6032      	str	r2, [r6, #0]
 8004af0:	0028      	movs	r0, r5
 8004af2:	f000 f82d 	bl	8004b50 <__malloc_unlock>
 8004af6:	0020      	movs	r0, r4
 8004af8:	2207      	movs	r2, #7
 8004afa:	300b      	adds	r0, #11
 8004afc:	1d23      	adds	r3, r4, #4
 8004afe:	4390      	bics	r0, r2
 8004b00:	1ac2      	subs	r2, r0, r3
 8004b02:	4298      	cmp	r0, r3
 8004b04:	d0df      	beq.n	8004ac6 <_malloc_r+0x86>
 8004b06:	1a1b      	subs	r3, r3, r0
 8004b08:	50a3      	str	r3, [r4, r2]
 8004b0a:	e7dc      	b.n	8004ac6 <_malloc_r+0x86>
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	e7ef      	b.n	8004af0 <_malloc_r+0xb0>
 8004b10:	0023      	movs	r3, r4
 8004b12:	6864      	ldr	r4, [r4, #4]
 8004b14:	e7a6      	b.n	8004a64 <_malloc_r+0x24>
 8004b16:	9c00      	ldr	r4, [sp, #0]
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	e7ad      	b.n	8004a7a <_malloc_r+0x3a>
 8004b1e:	001a      	movs	r2, r3
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	d1fb      	bne.n	8004b1e <_malloc_r+0xde>
 8004b26:	2300      	movs	r3, #0
 8004b28:	e7da      	b.n	8004ae0 <_malloc_r+0xa0>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	0028      	movs	r0, r5
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f000 f80e 	bl	8004b50 <__malloc_unlock>
 8004b34:	e7c6      	b.n	8004ac4 <_malloc_r+0x84>
 8004b36:	6007      	str	r7, [r0, #0]
 8004b38:	e7da      	b.n	8004af0 <_malloc_r+0xb0>
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	20000234 	.word	0x20000234

08004b40 <__malloc_lock>:
 8004b40:	b510      	push	{r4, lr}
 8004b42:	4802      	ldr	r0, [pc, #8]	@ (8004b4c <__malloc_lock+0xc>)
 8004b44:	f7ff ff0e 	bl	8004964 <__retarget_lock_acquire_recursive>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	2000022c 	.word	0x2000022c

08004b50 <__malloc_unlock>:
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4802      	ldr	r0, [pc, #8]	@ (8004b5c <__malloc_unlock+0xc>)
 8004b54:	f7ff ff07 	bl	8004966 <__retarget_lock_release_recursive>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	2000022c 	.word	0x2000022c

08004b60 <__ssputs_r>:
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b62:	688e      	ldr	r6, [r1, #8]
 8004b64:	b085      	sub	sp, #20
 8004b66:	001f      	movs	r7, r3
 8004b68:	000c      	movs	r4, r1
 8004b6a:	680b      	ldr	r3, [r1, #0]
 8004b6c:	9002      	str	r0, [sp, #8]
 8004b6e:	9203      	str	r2, [sp, #12]
 8004b70:	42be      	cmp	r6, r7
 8004b72:	d830      	bhi.n	8004bd6 <__ssputs_r+0x76>
 8004b74:	210c      	movs	r1, #12
 8004b76:	5e62      	ldrsh	r2, [r4, r1]
 8004b78:	2190      	movs	r1, #144	@ 0x90
 8004b7a:	00c9      	lsls	r1, r1, #3
 8004b7c:	420a      	tst	r2, r1
 8004b7e:	d028      	beq.n	8004bd2 <__ssputs_r+0x72>
 8004b80:	2003      	movs	r0, #3
 8004b82:	6921      	ldr	r1, [r4, #16]
 8004b84:	1a5b      	subs	r3, r3, r1
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	6963      	ldr	r3, [r4, #20]
 8004b8a:	4343      	muls	r3, r0
 8004b8c:	9801      	ldr	r0, [sp, #4]
 8004b8e:	0fdd      	lsrs	r5, r3, #31
 8004b90:	18ed      	adds	r5, r5, r3
 8004b92:	1c7b      	adds	r3, r7, #1
 8004b94:	181b      	adds	r3, r3, r0
 8004b96:	106d      	asrs	r5, r5, #1
 8004b98:	42ab      	cmp	r3, r5
 8004b9a:	d900      	bls.n	8004b9e <__ssputs_r+0x3e>
 8004b9c:	001d      	movs	r5, r3
 8004b9e:	0552      	lsls	r2, r2, #21
 8004ba0:	d528      	bpl.n	8004bf4 <__ssputs_r+0x94>
 8004ba2:	0029      	movs	r1, r5
 8004ba4:	9802      	ldr	r0, [sp, #8]
 8004ba6:	f7ff ff4b 	bl	8004a40 <_malloc_r>
 8004baa:	1e06      	subs	r6, r0, #0
 8004bac:	d02c      	beq.n	8004c08 <__ssputs_r+0xa8>
 8004bae:	9a01      	ldr	r2, [sp, #4]
 8004bb0:	6921      	ldr	r1, [r4, #16]
 8004bb2:	f000 fade 	bl	8005172 <memcpy>
 8004bb6:	89a2      	ldrh	r2, [r4, #12]
 8004bb8:	4b18      	ldr	r3, [pc, #96]	@ (8004c1c <__ssputs_r+0xbc>)
 8004bba:	401a      	ands	r2, r3
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	6126      	str	r6, [r4, #16]
 8004bc6:	18f6      	adds	r6, r6, r3
 8004bc8:	6026      	str	r6, [r4, #0]
 8004bca:	003e      	movs	r6, r7
 8004bcc:	6165      	str	r5, [r4, #20]
 8004bce:	1aed      	subs	r5, r5, r3
 8004bd0:	60a5      	str	r5, [r4, #8]
 8004bd2:	42be      	cmp	r6, r7
 8004bd4:	d900      	bls.n	8004bd8 <__ssputs_r+0x78>
 8004bd6:	003e      	movs	r6, r7
 8004bd8:	0032      	movs	r2, r6
 8004bda:	9903      	ldr	r1, [sp, #12]
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	f000 fa99 	bl	8005114 <memmove>
 8004be2:	2000      	movs	r0, #0
 8004be4:	68a3      	ldr	r3, [r4, #8]
 8004be6:	1b9b      	subs	r3, r3, r6
 8004be8:	60a3      	str	r3, [r4, #8]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	199b      	adds	r3, r3, r6
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	b005      	add	sp, #20
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf4:	002a      	movs	r2, r5
 8004bf6:	9802      	ldr	r0, [sp, #8]
 8004bf8:	f000 fac4 	bl	8005184 <_realloc_r>
 8004bfc:	1e06      	subs	r6, r0, #0
 8004bfe:	d1e0      	bne.n	8004bc2 <__ssputs_r+0x62>
 8004c00:	6921      	ldr	r1, [r4, #16]
 8004c02:	9802      	ldr	r0, [sp, #8]
 8004c04:	f7ff feb0 	bl	8004968 <_free_r>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	9a02      	ldr	r2, [sp, #8]
 8004c0e:	4240      	negs	r0, r0
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	89a2      	ldrh	r2, [r4, #12]
 8004c14:	3334      	adds	r3, #52	@ 0x34
 8004c16:	4313      	orrs	r3, r2
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	e7e9      	b.n	8004bf0 <__ssputs_r+0x90>
 8004c1c:	fffffb7f 	.word	0xfffffb7f

08004c20 <_svfiprintf_r>:
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	b0a1      	sub	sp, #132	@ 0x84
 8004c24:	9003      	str	r0, [sp, #12]
 8004c26:	001d      	movs	r5, r3
 8004c28:	898b      	ldrh	r3, [r1, #12]
 8004c2a:	000f      	movs	r7, r1
 8004c2c:	0016      	movs	r6, r2
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	d511      	bpl.n	8004c56 <_svfiprintf_r+0x36>
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10e      	bne.n	8004c56 <_svfiprintf_r+0x36>
 8004c38:	2140      	movs	r1, #64	@ 0x40
 8004c3a:	f7ff ff01 	bl	8004a40 <_malloc_r>
 8004c3e:	6038      	str	r0, [r7, #0]
 8004c40:	6138      	str	r0, [r7, #16]
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d105      	bne.n	8004c52 <_svfiprintf_r+0x32>
 8004c46:	230c      	movs	r3, #12
 8004c48:	9a03      	ldr	r2, [sp, #12]
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	4240      	negs	r0, r0
 8004c50:	e0cf      	b.n	8004df2 <_svfiprintf_r+0x1d2>
 8004c52:	2340      	movs	r3, #64	@ 0x40
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	2300      	movs	r3, #0
 8004c58:	ac08      	add	r4, sp, #32
 8004c5a:	6163      	str	r3, [r4, #20]
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	7663      	strb	r3, [r4, #25]
 8004c60:	3310      	adds	r3, #16
 8004c62:	76a3      	strb	r3, [r4, #26]
 8004c64:	9507      	str	r5, [sp, #28]
 8004c66:	0035      	movs	r5, r6
 8004c68:	782b      	ldrb	r3, [r5, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <_svfiprintf_r+0x52>
 8004c6e:	2b25      	cmp	r3, #37	@ 0x25
 8004c70:	d148      	bne.n	8004d04 <_svfiprintf_r+0xe4>
 8004c72:	1bab      	subs	r3, r5, r6
 8004c74:	9305      	str	r3, [sp, #20]
 8004c76:	42b5      	cmp	r5, r6
 8004c78:	d00b      	beq.n	8004c92 <_svfiprintf_r+0x72>
 8004c7a:	0032      	movs	r2, r6
 8004c7c:	0039      	movs	r1, r7
 8004c7e:	9803      	ldr	r0, [sp, #12]
 8004c80:	f7ff ff6e 	bl	8004b60 <__ssputs_r>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d100      	bne.n	8004c8a <_svfiprintf_r+0x6a>
 8004c88:	e0ae      	b.n	8004de8 <_svfiprintf_r+0x1c8>
 8004c8a:	6963      	ldr	r3, [r4, #20]
 8004c8c:	9a05      	ldr	r2, [sp, #20]
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	6163      	str	r3, [r4, #20]
 8004c92:	782b      	ldrb	r3, [r5, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d100      	bne.n	8004c9a <_svfiprintf_r+0x7a>
 8004c98:	e0a6      	b.n	8004de8 <_svfiprintf_r+0x1c8>
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4252      	negs	r2, r2
 8004ca0:	6062      	str	r2, [r4, #4]
 8004ca2:	a904      	add	r1, sp, #16
 8004ca4:	3254      	adds	r2, #84	@ 0x54
 8004ca6:	1852      	adds	r2, r2, r1
 8004ca8:	1c6e      	adds	r6, r5, #1
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	60e3      	str	r3, [r4, #12]
 8004cae:	60a3      	str	r3, [r4, #8]
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004cb4:	4b54      	ldr	r3, [pc, #336]	@ (8004e08 <_svfiprintf_r+0x1e8>)
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	0018      	movs	r0, r3
 8004cba:	7831      	ldrb	r1, [r6, #0]
 8004cbc:	9305      	str	r3, [sp, #20]
 8004cbe:	f000 fa4d 	bl	800515c <memchr>
 8004cc2:	1c75      	adds	r5, r6, #1
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d11f      	bne.n	8004d08 <_svfiprintf_r+0xe8>
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	06d3      	lsls	r3, r2, #27
 8004ccc:	d504      	bpl.n	8004cd8 <_svfiprintf_r+0xb8>
 8004cce:	2353      	movs	r3, #83	@ 0x53
 8004cd0:	a904      	add	r1, sp, #16
 8004cd2:	185b      	adds	r3, r3, r1
 8004cd4:	2120      	movs	r1, #32
 8004cd6:	7019      	strb	r1, [r3, #0]
 8004cd8:	0713      	lsls	r3, r2, #28
 8004cda:	d504      	bpl.n	8004ce6 <_svfiprintf_r+0xc6>
 8004cdc:	2353      	movs	r3, #83	@ 0x53
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	185b      	adds	r3, r3, r1
 8004ce2:	212b      	movs	r1, #43	@ 0x2b
 8004ce4:	7019      	strb	r1, [r3, #0]
 8004ce6:	7833      	ldrb	r3, [r6, #0]
 8004ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cea:	d016      	beq.n	8004d1a <_svfiprintf_r+0xfa>
 8004cec:	0035      	movs	r5, r6
 8004cee:	2100      	movs	r1, #0
 8004cf0:	200a      	movs	r0, #10
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	782a      	ldrb	r2, [r5, #0]
 8004cf6:	1c6e      	adds	r6, r5, #1
 8004cf8:	3a30      	subs	r2, #48	@ 0x30
 8004cfa:	2a09      	cmp	r2, #9
 8004cfc:	d950      	bls.n	8004da0 <_svfiprintf_r+0x180>
 8004cfe:	2900      	cmp	r1, #0
 8004d00:	d111      	bne.n	8004d26 <_svfiprintf_r+0x106>
 8004d02:	e017      	b.n	8004d34 <_svfiprintf_r+0x114>
 8004d04:	3501      	adds	r5, #1
 8004d06:	e7af      	b.n	8004c68 <_svfiprintf_r+0x48>
 8004d08:	9b05      	ldr	r3, [sp, #20]
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	1ac0      	subs	r0, r0, r3
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4083      	lsls	r3, r0
 8004d12:	4313      	orrs	r3, r2
 8004d14:	002e      	movs	r6, r5
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	e7cc      	b.n	8004cb4 <_svfiprintf_r+0x94>
 8004d1a:	9b07      	ldr	r3, [sp, #28]
 8004d1c:	1d19      	adds	r1, r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	9107      	str	r1, [sp, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	db01      	blt.n	8004d2a <_svfiprintf_r+0x10a>
 8004d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d28:	e004      	b.n	8004d34 <_svfiprintf_r+0x114>
 8004d2a:	425b      	negs	r3, r3
 8004d2c:	60e3      	str	r3, [r4, #12]
 8004d2e:	2302      	movs	r3, #2
 8004d30:	4313      	orrs	r3, r2
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	782b      	ldrb	r3, [r5, #0]
 8004d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d38:	d10c      	bne.n	8004d54 <_svfiprintf_r+0x134>
 8004d3a:	786b      	ldrb	r3, [r5, #1]
 8004d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d3e:	d134      	bne.n	8004daa <_svfiprintf_r+0x18a>
 8004d40:	9b07      	ldr	r3, [sp, #28]
 8004d42:	3502      	adds	r5, #2
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	9207      	str	r2, [sp, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da01      	bge.n	8004d52 <_svfiprintf_r+0x132>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	425b      	negs	r3, r3
 8004d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d54:	4e2d      	ldr	r6, [pc, #180]	@ (8004e0c <_svfiprintf_r+0x1ec>)
 8004d56:	2203      	movs	r2, #3
 8004d58:	0030      	movs	r0, r6
 8004d5a:	7829      	ldrb	r1, [r5, #0]
 8004d5c:	f000 f9fe 	bl	800515c <memchr>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d006      	beq.n	8004d72 <_svfiprintf_r+0x152>
 8004d64:	2340      	movs	r3, #64	@ 0x40
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	4083      	lsls	r3, r0
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	7829      	ldrb	r1, [r5, #0]
 8004d74:	2206      	movs	r2, #6
 8004d76:	4826      	ldr	r0, [pc, #152]	@ (8004e10 <_svfiprintf_r+0x1f0>)
 8004d78:	1c6e      	adds	r6, r5, #1
 8004d7a:	7621      	strb	r1, [r4, #24]
 8004d7c:	f000 f9ee 	bl	800515c <memchr>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d038      	beq.n	8004df6 <_svfiprintf_r+0x1d6>
 8004d84:	4b23      	ldr	r3, [pc, #140]	@ (8004e14 <_svfiprintf_r+0x1f4>)
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d122      	bne.n	8004dd0 <_svfiprintf_r+0x1b0>
 8004d8a:	2207      	movs	r2, #7
 8004d8c:	9b07      	ldr	r3, [sp, #28]
 8004d8e:	3307      	adds	r3, #7
 8004d90:	4393      	bics	r3, r2
 8004d92:	3308      	adds	r3, #8
 8004d94:	9307      	str	r3, [sp, #28]
 8004d96:	6963      	ldr	r3, [r4, #20]
 8004d98:	9a04      	ldr	r2, [sp, #16]
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	6163      	str	r3, [r4, #20]
 8004d9e:	e762      	b.n	8004c66 <_svfiprintf_r+0x46>
 8004da0:	4343      	muls	r3, r0
 8004da2:	0035      	movs	r5, r6
 8004da4:	2101      	movs	r1, #1
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	e7a4      	b.n	8004cf4 <_svfiprintf_r+0xd4>
 8004daa:	2300      	movs	r3, #0
 8004dac:	200a      	movs	r0, #10
 8004dae:	0019      	movs	r1, r3
 8004db0:	3501      	adds	r5, #1
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	782a      	ldrb	r2, [r5, #0]
 8004db6:	1c6e      	adds	r6, r5, #1
 8004db8:	3a30      	subs	r2, #48	@ 0x30
 8004dba:	2a09      	cmp	r2, #9
 8004dbc:	d903      	bls.n	8004dc6 <_svfiprintf_r+0x1a6>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0c8      	beq.n	8004d54 <_svfiprintf_r+0x134>
 8004dc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dc4:	e7c6      	b.n	8004d54 <_svfiprintf_r+0x134>
 8004dc6:	4341      	muls	r1, r0
 8004dc8:	0035      	movs	r5, r6
 8004dca:	2301      	movs	r3, #1
 8004dcc:	1889      	adds	r1, r1, r2
 8004dce:	e7f1      	b.n	8004db4 <_svfiprintf_r+0x194>
 8004dd0:	aa07      	add	r2, sp, #28
 8004dd2:	9200      	str	r2, [sp, #0]
 8004dd4:	0021      	movs	r1, r4
 8004dd6:	003a      	movs	r2, r7
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e18 <_svfiprintf_r+0x1f8>)
 8004dda:	9803      	ldr	r0, [sp, #12]
 8004ddc:	e000      	b.n	8004de0 <_svfiprintf_r+0x1c0>
 8004dde:	bf00      	nop
 8004de0:	9004      	str	r0, [sp, #16]
 8004de2:	9b04      	ldr	r3, [sp, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	d1d6      	bne.n	8004d96 <_svfiprintf_r+0x176>
 8004de8:	89bb      	ldrh	r3, [r7, #12]
 8004dea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004dec:	065b      	lsls	r3, r3, #25
 8004dee:	d500      	bpl.n	8004df2 <_svfiprintf_r+0x1d2>
 8004df0:	e72c      	b.n	8004c4c <_svfiprintf_r+0x2c>
 8004df2:	b021      	add	sp, #132	@ 0x84
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df6:	aa07      	add	r2, sp, #28
 8004df8:	9200      	str	r2, [sp, #0]
 8004dfa:	0021      	movs	r1, r4
 8004dfc:	003a      	movs	r2, r7
 8004dfe:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <_svfiprintf_r+0x1f8>)
 8004e00:	9803      	ldr	r0, [sp, #12]
 8004e02:	f000 f87b 	bl	8004efc <_printf_i>
 8004e06:	e7eb      	b.n	8004de0 <_svfiprintf_r+0x1c0>
 8004e08:	08005281 	.word	0x08005281
 8004e0c:	08005287 	.word	0x08005287
 8004e10:	0800528b 	.word	0x0800528b
 8004e14:	00000000 	.word	0x00000000
 8004e18:	08004b61 	.word	0x08004b61

08004e1c <_printf_common>:
 8004e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1e:	0016      	movs	r6, r2
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	688a      	ldr	r2, [r1, #8]
 8004e24:	690b      	ldr	r3, [r1, #16]
 8004e26:	000c      	movs	r4, r1
 8004e28:	9000      	str	r0, [sp, #0]
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	da00      	bge.n	8004e30 <_printf_common+0x14>
 8004e2e:	0013      	movs	r3, r2
 8004e30:	0022      	movs	r2, r4
 8004e32:	6033      	str	r3, [r6, #0]
 8004e34:	3243      	adds	r2, #67	@ 0x43
 8004e36:	7812      	ldrb	r2, [r2, #0]
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d001      	beq.n	8004e40 <_printf_common+0x24>
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	069b      	lsls	r3, r3, #26
 8004e44:	d502      	bpl.n	8004e4c <_printf_common+0x30>
 8004e46:	6833      	ldr	r3, [r6, #0]
 8004e48:	3302      	adds	r3, #2
 8004e4a:	6033      	str	r3, [r6, #0]
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	2306      	movs	r3, #6
 8004e50:	0015      	movs	r5, r2
 8004e52:	401d      	ands	r5, r3
 8004e54:	421a      	tst	r2, r3
 8004e56:	d027      	beq.n	8004ea8 <_printf_common+0x8c>
 8004e58:	0023      	movs	r3, r4
 8004e5a:	3343      	adds	r3, #67	@ 0x43
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	1e5a      	subs	r2, r3, #1
 8004e60:	4193      	sbcs	r3, r2
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	0692      	lsls	r2, r2, #26
 8004e66:	d430      	bmi.n	8004eca <_printf_common+0xae>
 8004e68:	0022      	movs	r2, r4
 8004e6a:	9901      	ldr	r1, [sp, #4]
 8004e6c:	9800      	ldr	r0, [sp, #0]
 8004e6e:	9d08      	ldr	r5, [sp, #32]
 8004e70:	3243      	adds	r2, #67	@ 0x43
 8004e72:	47a8      	blx	r5
 8004e74:	3001      	adds	r0, #1
 8004e76:	d025      	beq.n	8004ec4 <_printf_common+0xa8>
 8004e78:	2206      	movs	r2, #6
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d105      	bne.n	8004e90 <_printf_common+0x74>
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	68e5      	ldr	r5, [r4, #12]
 8004e88:	1aed      	subs	r5, r5, r3
 8004e8a:	43eb      	mvns	r3, r5
 8004e8c:	17db      	asrs	r3, r3, #31
 8004e8e:	401d      	ands	r5, r3
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	6922      	ldr	r2, [r4, #16]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	dd01      	ble.n	8004e9c <_printf_common+0x80>
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	18ed      	adds	r5, r5, r3
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	42b5      	cmp	r5, r6
 8004ea0:	d120      	bne.n	8004ee4 <_printf_common+0xc8>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e010      	b.n	8004ec8 <_printf_common+0xac>
 8004ea6:	3501      	adds	r5, #1
 8004ea8:	68e3      	ldr	r3, [r4, #12]
 8004eaa:	6832      	ldr	r2, [r6, #0]
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	42ab      	cmp	r3, r5
 8004eb0:	ddd2      	ble.n	8004e58 <_printf_common+0x3c>
 8004eb2:	0022      	movs	r2, r4
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	9901      	ldr	r1, [sp, #4]
 8004eb8:	9800      	ldr	r0, [sp, #0]
 8004eba:	9f08      	ldr	r7, [sp, #32]
 8004ebc:	3219      	adds	r2, #25
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1f0      	bne.n	8004ea6 <_printf_common+0x8a>
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	4240      	negs	r0, r0
 8004ec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eca:	2030      	movs	r0, #48	@ 0x30
 8004ecc:	18e1      	adds	r1, r4, r3
 8004ece:	3143      	adds	r1, #67	@ 0x43
 8004ed0:	7008      	strb	r0, [r1, #0]
 8004ed2:	0021      	movs	r1, r4
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	3145      	adds	r1, #69	@ 0x45
 8004ed8:	7809      	ldrb	r1, [r1, #0]
 8004eda:	18a2      	adds	r2, r4, r2
 8004edc:	3243      	adds	r2, #67	@ 0x43
 8004ede:	3302      	adds	r3, #2
 8004ee0:	7011      	strb	r1, [r2, #0]
 8004ee2:	e7c1      	b.n	8004e68 <_printf_common+0x4c>
 8004ee4:	0022      	movs	r2, r4
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	9901      	ldr	r1, [sp, #4]
 8004eea:	9800      	ldr	r0, [sp, #0]
 8004eec:	9f08      	ldr	r7, [sp, #32]
 8004eee:	321a      	adds	r2, #26
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d0e6      	beq.n	8004ec4 <_printf_common+0xa8>
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7d1      	b.n	8004e9e <_printf_common+0x82>
	...

08004efc <_printf_i>:
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	b08b      	sub	sp, #44	@ 0x2c
 8004f00:	9206      	str	r2, [sp, #24]
 8004f02:	000a      	movs	r2, r1
 8004f04:	3243      	adds	r2, #67	@ 0x43
 8004f06:	9307      	str	r3, [sp, #28]
 8004f08:	9005      	str	r0, [sp, #20]
 8004f0a:	9203      	str	r2, [sp, #12]
 8004f0c:	7e0a      	ldrb	r2, [r1, #24]
 8004f0e:	000c      	movs	r4, r1
 8004f10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f12:	2a78      	cmp	r2, #120	@ 0x78
 8004f14:	d809      	bhi.n	8004f2a <_printf_i+0x2e>
 8004f16:	2a62      	cmp	r2, #98	@ 0x62
 8004f18:	d80b      	bhi.n	8004f32 <_printf_i+0x36>
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	d100      	bne.n	8004f20 <_printf_i+0x24>
 8004f1e:	e0ba      	b.n	8005096 <_printf_i+0x19a>
 8004f20:	497a      	ldr	r1, [pc, #488]	@ (800510c <_printf_i+0x210>)
 8004f22:	9104      	str	r1, [sp, #16]
 8004f24:	2a58      	cmp	r2, #88	@ 0x58
 8004f26:	d100      	bne.n	8004f2a <_printf_i+0x2e>
 8004f28:	e08e      	b.n	8005048 <_printf_i+0x14c>
 8004f2a:	0025      	movs	r5, r4
 8004f2c:	3542      	adds	r5, #66	@ 0x42
 8004f2e:	702a      	strb	r2, [r5, #0]
 8004f30:	e022      	b.n	8004f78 <_printf_i+0x7c>
 8004f32:	0010      	movs	r0, r2
 8004f34:	3863      	subs	r0, #99	@ 0x63
 8004f36:	2815      	cmp	r0, #21
 8004f38:	d8f7      	bhi.n	8004f2a <_printf_i+0x2e>
 8004f3a:	f7fb f8e5 	bl	8000108 <__gnu_thumb1_case_shi>
 8004f3e:	0016      	.short	0x0016
 8004f40:	fff6001f 	.word	0xfff6001f
 8004f44:	fff6fff6 	.word	0xfff6fff6
 8004f48:	001ffff6 	.word	0x001ffff6
 8004f4c:	fff6fff6 	.word	0xfff6fff6
 8004f50:	fff6fff6 	.word	0xfff6fff6
 8004f54:	0036009f 	.word	0x0036009f
 8004f58:	fff6007e 	.word	0xfff6007e
 8004f5c:	00b0fff6 	.word	0x00b0fff6
 8004f60:	0036fff6 	.word	0x0036fff6
 8004f64:	fff6fff6 	.word	0xfff6fff6
 8004f68:	0082      	.short	0x0082
 8004f6a:	0025      	movs	r5, r4
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	3542      	adds	r5, #66	@ 0x42
 8004f70:	1d11      	adds	r1, r2, #4
 8004f72:	6019      	str	r1, [r3, #0]
 8004f74:	6813      	ldr	r3, [r2, #0]
 8004f76:	702b      	strb	r3, [r5, #0]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e09e      	b.n	80050ba <_printf_i+0x1be>
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	6809      	ldr	r1, [r1, #0]
 8004f80:	1d02      	adds	r2, r0, #4
 8004f82:	060d      	lsls	r5, r1, #24
 8004f84:	d50b      	bpl.n	8004f9e <_printf_i+0xa2>
 8004f86:	6806      	ldr	r6, [r0, #0]
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	2e00      	cmp	r6, #0
 8004f8c:	da03      	bge.n	8004f96 <_printf_i+0x9a>
 8004f8e:	232d      	movs	r3, #45	@ 0x2d
 8004f90:	9a03      	ldr	r2, [sp, #12]
 8004f92:	4276      	negs	r6, r6
 8004f94:	7013      	strb	r3, [r2, #0]
 8004f96:	4b5d      	ldr	r3, [pc, #372]	@ (800510c <_printf_i+0x210>)
 8004f98:	270a      	movs	r7, #10
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	e018      	b.n	8004fd0 <_printf_i+0xd4>
 8004f9e:	6806      	ldr	r6, [r0, #0]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	0649      	lsls	r1, r1, #25
 8004fa4:	d5f1      	bpl.n	8004f8a <_printf_i+0x8e>
 8004fa6:	b236      	sxth	r6, r6
 8004fa8:	e7ef      	b.n	8004f8a <_printf_i+0x8e>
 8004faa:	6808      	ldr	r0, [r1, #0]
 8004fac:	6819      	ldr	r1, [r3, #0]
 8004fae:	c940      	ldmia	r1!, {r6}
 8004fb0:	0605      	lsls	r5, r0, #24
 8004fb2:	d402      	bmi.n	8004fba <_printf_i+0xbe>
 8004fb4:	0640      	lsls	r0, r0, #25
 8004fb6:	d500      	bpl.n	8004fba <_printf_i+0xbe>
 8004fb8:	b2b6      	uxth	r6, r6
 8004fba:	6019      	str	r1, [r3, #0]
 8004fbc:	4b53      	ldr	r3, [pc, #332]	@ (800510c <_printf_i+0x210>)
 8004fbe:	270a      	movs	r7, #10
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	2a6f      	cmp	r2, #111	@ 0x6f
 8004fc4:	d100      	bne.n	8004fc8 <_printf_i+0xcc>
 8004fc6:	3f02      	subs	r7, #2
 8004fc8:	0023      	movs	r3, r4
 8004fca:	2200      	movs	r2, #0
 8004fcc:	3343      	adds	r3, #67	@ 0x43
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	6863      	ldr	r3, [r4, #4]
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db06      	blt.n	8004fe6 <_printf_i+0xea>
 8004fd8:	2104      	movs	r1, #4
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	9d03      	ldr	r5, [sp, #12]
 8004fde:	438a      	bics	r2, r1
 8004fe0:	6022      	str	r2, [r4, #0]
 8004fe2:	4333      	orrs	r3, r6
 8004fe4:	d00c      	beq.n	8005000 <_printf_i+0x104>
 8004fe6:	9d03      	ldr	r5, [sp, #12]
 8004fe8:	0030      	movs	r0, r6
 8004fea:	0039      	movs	r1, r7
 8004fec:	f7fb f91c 	bl	8000228 <__aeabi_uidivmod>
 8004ff0:	9b04      	ldr	r3, [sp, #16]
 8004ff2:	3d01      	subs	r5, #1
 8004ff4:	5c5b      	ldrb	r3, [r3, r1]
 8004ff6:	702b      	strb	r3, [r5, #0]
 8004ff8:	0033      	movs	r3, r6
 8004ffa:	0006      	movs	r6, r0
 8004ffc:	429f      	cmp	r7, r3
 8004ffe:	d9f3      	bls.n	8004fe8 <_printf_i+0xec>
 8005000:	2f08      	cmp	r7, #8
 8005002:	d109      	bne.n	8005018 <_printf_i+0x11c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07db      	lsls	r3, r3, #31
 8005008:	d506      	bpl.n	8005018 <_printf_i+0x11c>
 800500a:	6862      	ldr	r2, [r4, #4]
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	429a      	cmp	r2, r3
 8005010:	dc02      	bgt.n	8005018 <_printf_i+0x11c>
 8005012:	2330      	movs	r3, #48	@ 0x30
 8005014:	3d01      	subs	r5, #1
 8005016:	702b      	strb	r3, [r5, #0]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	1b5b      	subs	r3, r3, r5
 800501c:	6123      	str	r3, [r4, #16]
 800501e:	9b07      	ldr	r3, [sp, #28]
 8005020:	0021      	movs	r1, r4
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	9805      	ldr	r0, [sp, #20]
 8005026:	9b06      	ldr	r3, [sp, #24]
 8005028:	aa09      	add	r2, sp, #36	@ 0x24
 800502a:	f7ff fef7 	bl	8004e1c <_printf_common>
 800502e:	3001      	adds	r0, #1
 8005030:	d148      	bne.n	80050c4 <_printf_i+0x1c8>
 8005032:	2001      	movs	r0, #1
 8005034:	4240      	negs	r0, r0
 8005036:	b00b      	add	sp, #44	@ 0x2c
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	2220      	movs	r2, #32
 800503c:	6809      	ldr	r1, [r1, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	6022      	str	r2, [r4, #0]
 8005042:	2278      	movs	r2, #120	@ 0x78
 8005044:	4932      	ldr	r1, [pc, #200]	@ (8005110 <_printf_i+0x214>)
 8005046:	9104      	str	r1, [sp, #16]
 8005048:	0021      	movs	r1, r4
 800504a:	3145      	adds	r1, #69	@ 0x45
 800504c:	700a      	strb	r2, [r1, #0]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	c940      	ldmia	r1!, {r6}
 8005054:	0610      	lsls	r0, r2, #24
 8005056:	d402      	bmi.n	800505e <_printf_i+0x162>
 8005058:	0650      	lsls	r0, r2, #25
 800505a:	d500      	bpl.n	800505e <_printf_i+0x162>
 800505c:	b2b6      	uxth	r6, r6
 800505e:	6019      	str	r1, [r3, #0]
 8005060:	07d3      	lsls	r3, r2, #31
 8005062:	d502      	bpl.n	800506a <_printf_i+0x16e>
 8005064:	2320      	movs	r3, #32
 8005066:	4313      	orrs	r3, r2
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	2e00      	cmp	r6, #0
 800506c:	d001      	beq.n	8005072 <_printf_i+0x176>
 800506e:	2710      	movs	r7, #16
 8005070:	e7aa      	b.n	8004fc8 <_printf_i+0xcc>
 8005072:	2220      	movs	r2, #32
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	4393      	bics	r3, r2
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	e7f8      	b.n	800506e <_printf_i+0x172>
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	680d      	ldr	r5, [r1, #0]
 8005080:	1d10      	adds	r0, r2, #4
 8005082:	6949      	ldr	r1, [r1, #20]
 8005084:	6018      	str	r0, [r3, #0]
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	062e      	lsls	r6, r5, #24
 800508a:	d501      	bpl.n	8005090 <_printf_i+0x194>
 800508c:	6019      	str	r1, [r3, #0]
 800508e:	e002      	b.n	8005096 <_printf_i+0x19a>
 8005090:	066d      	lsls	r5, r5, #25
 8005092:	d5fb      	bpl.n	800508c <_printf_i+0x190>
 8005094:	8019      	strh	r1, [r3, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	9d03      	ldr	r5, [sp, #12]
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	e7bf      	b.n	800501e <_printf_i+0x122>
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	1d11      	adds	r1, r2, #4
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	6815      	ldr	r5, [r2, #0]
 80050a6:	2100      	movs	r1, #0
 80050a8:	0028      	movs	r0, r5
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	f000 f856 	bl	800515c <memchr>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d001      	beq.n	80050b8 <_printf_i+0x1bc>
 80050b4:	1b40      	subs	r0, r0, r5
 80050b6:	6060      	str	r0, [r4, #4]
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	6123      	str	r3, [r4, #16]
 80050bc:	2300      	movs	r3, #0
 80050be:	9a03      	ldr	r2, [sp, #12]
 80050c0:	7013      	strb	r3, [r2, #0]
 80050c2:	e7ac      	b.n	800501e <_printf_i+0x122>
 80050c4:	002a      	movs	r2, r5
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	9906      	ldr	r1, [sp, #24]
 80050ca:	9805      	ldr	r0, [sp, #20]
 80050cc:	9d07      	ldr	r5, [sp, #28]
 80050ce:	47a8      	blx	r5
 80050d0:	3001      	adds	r0, #1
 80050d2:	d0ae      	beq.n	8005032 <_printf_i+0x136>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	079b      	lsls	r3, r3, #30
 80050d8:	d415      	bmi.n	8005106 <_printf_i+0x20a>
 80050da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050dc:	68e0      	ldr	r0, [r4, #12]
 80050de:	4298      	cmp	r0, r3
 80050e0:	daa9      	bge.n	8005036 <_printf_i+0x13a>
 80050e2:	0018      	movs	r0, r3
 80050e4:	e7a7      	b.n	8005036 <_printf_i+0x13a>
 80050e6:	0022      	movs	r2, r4
 80050e8:	2301      	movs	r3, #1
 80050ea:	9906      	ldr	r1, [sp, #24]
 80050ec:	9805      	ldr	r0, [sp, #20]
 80050ee:	9e07      	ldr	r6, [sp, #28]
 80050f0:	3219      	adds	r2, #25
 80050f2:	47b0      	blx	r6
 80050f4:	3001      	adds	r0, #1
 80050f6:	d09c      	beq.n	8005032 <_printf_i+0x136>
 80050f8:	3501      	adds	r5, #1
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ab      	cmp	r3, r5
 8005102:	dcf0      	bgt.n	80050e6 <_printf_i+0x1ea>
 8005104:	e7e9      	b.n	80050da <_printf_i+0x1de>
 8005106:	2500      	movs	r5, #0
 8005108:	e7f7      	b.n	80050fa <_printf_i+0x1fe>
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	08005292 	.word	0x08005292
 8005110:	080052a3 	.word	0x080052a3

08005114 <memmove>:
 8005114:	b510      	push	{r4, lr}
 8005116:	4288      	cmp	r0, r1
 8005118:	d902      	bls.n	8005120 <memmove+0xc>
 800511a:	188b      	adds	r3, r1, r2
 800511c:	4298      	cmp	r0, r3
 800511e:	d308      	bcc.n	8005132 <memmove+0x1e>
 8005120:	2300      	movs	r3, #0
 8005122:	429a      	cmp	r2, r3
 8005124:	d007      	beq.n	8005136 <memmove+0x22>
 8005126:	5ccc      	ldrb	r4, [r1, r3]
 8005128:	54c4      	strb	r4, [r0, r3]
 800512a:	3301      	adds	r3, #1
 800512c:	e7f9      	b.n	8005122 <memmove+0xe>
 800512e:	5c8b      	ldrb	r3, [r1, r2]
 8005130:	5483      	strb	r3, [r0, r2]
 8005132:	3a01      	subs	r2, #1
 8005134:	d2fb      	bcs.n	800512e <memmove+0x1a>
 8005136:	bd10      	pop	{r4, pc}

08005138 <_sbrk_r>:
 8005138:	2300      	movs	r3, #0
 800513a:	b570      	push	{r4, r5, r6, lr}
 800513c:	4d06      	ldr	r5, [pc, #24]	@ (8005158 <_sbrk_r+0x20>)
 800513e:	0004      	movs	r4, r0
 8005140:	0008      	movs	r0, r1
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	f7fd f968 	bl	8002418 <_sbrk>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d103      	bne.n	8005154 <_sbrk_r+0x1c>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d000      	beq.n	8005154 <_sbrk_r+0x1c>
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	bd70      	pop	{r4, r5, r6, pc}
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	20000228 	.word	0x20000228

0800515c <memchr>:
 800515c:	b2c9      	uxtb	r1, r1
 800515e:	1882      	adds	r2, r0, r2
 8005160:	4290      	cmp	r0, r2
 8005162:	d101      	bne.n	8005168 <memchr+0xc>
 8005164:	2000      	movs	r0, #0
 8005166:	4770      	bx	lr
 8005168:	7803      	ldrb	r3, [r0, #0]
 800516a:	428b      	cmp	r3, r1
 800516c:	d0fb      	beq.n	8005166 <memchr+0xa>
 800516e:	3001      	adds	r0, #1
 8005170:	e7f6      	b.n	8005160 <memchr+0x4>

08005172 <memcpy>:
 8005172:	2300      	movs	r3, #0
 8005174:	b510      	push	{r4, lr}
 8005176:	429a      	cmp	r2, r3
 8005178:	d100      	bne.n	800517c <memcpy+0xa>
 800517a:	bd10      	pop	{r4, pc}
 800517c:	5ccc      	ldrb	r4, [r1, r3]
 800517e:	54c4      	strb	r4, [r0, r3]
 8005180:	3301      	adds	r3, #1
 8005182:	e7f8      	b.n	8005176 <memcpy+0x4>

08005184 <_realloc_r>:
 8005184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005186:	0006      	movs	r6, r0
 8005188:	000c      	movs	r4, r1
 800518a:	0015      	movs	r5, r2
 800518c:	2900      	cmp	r1, #0
 800518e:	d105      	bne.n	800519c <_realloc_r+0x18>
 8005190:	0011      	movs	r1, r2
 8005192:	f7ff fc55 	bl	8004a40 <_malloc_r>
 8005196:	0004      	movs	r4, r0
 8005198:	0020      	movs	r0, r4
 800519a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800519c:	2a00      	cmp	r2, #0
 800519e:	d103      	bne.n	80051a8 <_realloc_r+0x24>
 80051a0:	f7ff fbe2 	bl	8004968 <_free_r>
 80051a4:	002c      	movs	r4, r5
 80051a6:	e7f7      	b.n	8005198 <_realloc_r+0x14>
 80051a8:	f000 f81c 	bl	80051e4 <_malloc_usable_size_r>
 80051ac:	0007      	movs	r7, r0
 80051ae:	4285      	cmp	r5, r0
 80051b0:	d802      	bhi.n	80051b8 <_realloc_r+0x34>
 80051b2:	0843      	lsrs	r3, r0, #1
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	d3ef      	bcc.n	8005198 <_realloc_r+0x14>
 80051b8:	0029      	movs	r1, r5
 80051ba:	0030      	movs	r0, r6
 80051bc:	f7ff fc40 	bl	8004a40 <_malloc_r>
 80051c0:	9001      	str	r0, [sp, #4]
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d101      	bne.n	80051ca <_realloc_r+0x46>
 80051c6:	9c01      	ldr	r4, [sp, #4]
 80051c8:	e7e6      	b.n	8005198 <_realloc_r+0x14>
 80051ca:	002a      	movs	r2, r5
 80051cc:	42bd      	cmp	r5, r7
 80051ce:	d900      	bls.n	80051d2 <_realloc_r+0x4e>
 80051d0:	003a      	movs	r2, r7
 80051d2:	0021      	movs	r1, r4
 80051d4:	9801      	ldr	r0, [sp, #4]
 80051d6:	f7ff ffcc 	bl	8005172 <memcpy>
 80051da:	0021      	movs	r1, r4
 80051dc:	0030      	movs	r0, r6
 80051de:	f7ff fbc3 	bl	8004968 <_free_r>
 80051e2:	e7f0      	b.n	80051c6 <_realloc_r+0x42>

080051e4 <_malloc_usable_size_r>:
 80051e4:	1f0b      	subs	r3, r1, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1f18      	subs	r0, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	da01      	bge.n	80051f2 <_malloc_usable_size_r+0xe>
 80051ee:	580b      	ldr	r3, [r1, r0]
 80051f0:	18c0      	adds	r0, r0, r3
 80051f2:	4770      	bx	lr

080051f4 <_init>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr

08005200 <_fini>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

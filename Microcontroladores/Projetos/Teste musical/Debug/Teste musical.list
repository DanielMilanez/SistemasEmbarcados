
Teste musical.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001dfc  08001dfc  00002dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e18  08001e18  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001e18  08001e18  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001e18  08001e18  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e18  08001e18  00002e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e1c  08001e1c  00002e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001e2c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001e2c  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068be  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f2  00000000  00000000  000098f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000605  00000000  00000000  0000b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ac3  00000000  00000000  0000badd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008886  00000000  00000000  0001e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000752d7  00000000  00000000  00026e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c0fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bcc  00000000  00000000  0009c140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0009dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001de4 	.word	0x08001de4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001de4 	.word	0x08001de4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa84 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f866 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f908 	bl	8000440 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f8b2 	bl	8000398 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000234:	4b28      	ldr	r3, [pc, #160]	@ (80002d8 <main+0xb8>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fb44 	bl	80018c4 <HAL_TIM_Base_Start>

  HAL_Delay(1000);
 800023c:	23fa      	movs	r3, #250	@ 0xfa
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fae5 	bl	8000810 <HAL_Delay>

  DHT11_ALTERN_PIN(OUTPUT);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 f9bb 	bl	80005c2 <DHT11_ALTERN_PIN>
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 800024c:	23a0      	movs	r3, #160	@ 0xa0
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	2201      	movs	r2, #1
 8000252:	2120      	movs	r1, #32
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fd46 	bl	8000ce6 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800025a:	2032      	movs	r0, #50	@ 0x32
 800025c:	f000 fad8 	bl	8000810 <HAL_Delay>

  DHT11_START();
 8000260:	f000 f91a 	bl	8000498 <DHT11_START>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0)
 8000264:	23a0      	movs	r3, #160	@ 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2120      	movs	r1, #32
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fd1e 	bl	8000cac <HAL_GPIO_ReadPin>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d105      	bne.n	8000280 <main+0x60>
	  {
		  verify = DHT11_CHECK_RESPONSE();
 8000274:	f000 f986 	bl	8000584 <DHT11_CHECK_RESPONSE>
 8000278:	0003      	movs	r3, r0
 800027a:	001a      	movs	r2, r3
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <main+0xbc>)
 800027e:	701a      	strb	r2, [r3, #0]
	  }

	  if(verify){
 8000280:	4b16      	ldr	r3, [pc, #88]	@ (80002dc <main+0xbc>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d021      	beq.n	80002cc <main+0xac>
		  hum_int  = DHT11_READ_RESPONSE();
 8000288:	f000 f93c 	bl	8000504 <DHT11_READ_RESPONSE>
 800028c:	0003      	movs	r3, r0
 800028e:	001a      	movs	r2, r3
 8000290:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <main+0xc0>)
 8000292:	701a      	strb	r2, [r3, #0]
		  hum_dec  = DHT11_READ_RESPONSE();
 8000294:	f000 f936 	bl	8000504 <DHT11_READ_RESPONSE>
 8000298:	0003      	movs	r3, r0
 800029a:	001a      	movs	r2, r3
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <main+0xc4>)
 800029e:	701a      	strb	r2, [r3, #0]
		  temp_int = DHT11_READ_RESPONSE();
 80002a0:	f000 f930 	bl	8000504 <DHT11_READ_RESPONSE>
 80002a4:	0003      	movs	r3, r0
 80002a6:	001a      	movs	r2, r3
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <main+0xc8>)
 80002aa:	701a      	strb	r2, [r3, #0]
		  temp_dec = DHT11_READ_RESPONSE();
 80002ac:	f000 f92a 	bl	8000504 <DHT11_READ_RESPONSE>
 80002b0:	0003      	movs	r3, r0
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <main+0xcc>)
 80002b6:	701a      	strb	r2, [r3, #0]
		  DHT11_READ_RESPONSE();
 80002b8:	f000 f924 	bl	8000504 <DHT11_READ_RESPONSE>

		  temp = temp_int;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <main+0xc8>)
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <main+0xd0>)
 80002c2:	701a      	strb	r2, [r3, #0]
		  hum  = hum_int;
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <main+0xc0>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <main+0xd4>)
 80002ca:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(2000);
 80002cc:	23fa      	movs	r3, #250	@ 0xfa
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fa9d 	bl	8000810 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0)
 80002d6:	e7c5      	b.n	8000264 <main+0x44>
 80002d8:	20000028 	.word	0x20000028
 80002dc:	2000006e 	.word	0x2000006e
 80002e0:	20000068 	.word	0x20000068
 80002e4:	20000069 	.word	0x20000069
 80002e8:	2000006a 	.word	0x2000006a
 80002ec:	2000006b 	.word	0x2000006b
 80002f0:	2000006d 	.word	0x2000006d
 80002f4:	2000006c 	.word	0x2000006c

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b095      	sub	sp, #84	@ 0x54
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	2418      	movs	r4, #24
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	2338      	movs	r3, #56	@ 0x38
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f001 fd3f 	bl	8001d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	2314      	movs	r3, #20
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f001 fd38 	bl	8001d8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031c:	4b1c      	ldr	r3, [pc, #112]	@ (8000390 <SystemClock_Config+0x98>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <SystemClock_Config+0x9c>)
 8000322:	401a      	ands	r2, r3
 8000324:	4b1a      	ldr	r3, [pc, #104]	@ (8000390 <SystemClock_Config+0x98>)
 8000326:	2180      	movs	r1, #128	@ 0x80
 8000328:	0109      	lsls	r1, r1, #4
 800032a:	430a      	orrs	r2, r1
 800032c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032e:	0021      	movs	r1, r4
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2202      	movs	r2, #2
 8000334:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2201      	movs	r2, #1
 800033a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2210      	movs	r2, #16
 8000340:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fce8 	bl	8000d20 <HAL_RCC_OscConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000354:	f000 f974 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	220f      	movs	r2, #15
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2201      	movs	r2, #1
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2100      	movs	r1, #0
 800037a:	0018      	movs	r0, r3
 800037c:	f001 f894 	bl	80014a8 <HAL_RCC_ClockConfig>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000384:	f000 f95c 	bl	8000640 <Error_Handler>
  }
}
 8000388:	46c0      	nop			@ (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b015      	add	sp, #84	@ 0x54
 800038e:	bd90      	pop	{r4, r7, pc}
 8000390:	40007000 	.word	0x40007000
 8000394:	ffffe7ff 	.word	0xffffe7ff

08000398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	2308      	movs	r3, #8
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	0018      	movs	r0, r3
 80003a4:	2310      	movs	r3, #16
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f001 fcef 	bl	8001d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ae:	003b      	movs	r3, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	2308      	movs	r3, #8
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f001 fce8 	bl	8001d8c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	05d2      	lsls	r2, r2, #23
 80003c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80003c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003c6:	220f      	movs	r2, #15
 80003c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003d0:	4b19      	ldr	r3, [pc, #100]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003d2:	4a1a      	ldr	r2, [pc, #104]	@ (800043c <MX_TIM2_Init+0xa4>)
 80003d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d6:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003dc:	4b16      	ldr	r3, [pc, #88]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_TIM2_Init+0xa0>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fa2d 	bl	8001844 <HAL_TIM_Base_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003ee:	f000 f927 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f2:	2108      	movs	r1, #8
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2280      	movs	r2, #128	@ 0x80
 80003f8:	0152      	lsls	r2, r2, #5
 80003fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003fc:	187a      	adds	r2, r7, r1
 80003fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <MX_TIM2_Init+0xa0>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f001 faa2 	bl	800194c <HAL_TIM_ConfigClockSource>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800040c:	f000 f918 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041c:	003a      	movs	r2, r7
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <MX_TIM2_Init+0xa0>)
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fc5a 	bl	8001cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800042c:	f000 f908 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b006      	add	sp, #24
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000028 	.word	0x20000028
 800043c:	0000ffff 	.word	0x0000ffff

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	0018      	movs	r0, r3
 800044a:	2314      	movs	r3, #20
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f001 fc9c 	bl	8001d8c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_GPIO_Init+0x54>)
 8000456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_GPIO_Init+0x54>)
 800045a:	2101      	movs	r1, #1
 800045c:	430a      	orrs	r2, r1
 800045e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_GPIO_Init+0x54>)
 8000462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000464:	2201      	movs	r2, #1
 8000466:	4013      	ands	r3, r2
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2220      	movs	r2, #32
 8000470:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2201      	movs	r2, #1
 800047c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800047e:	1d3a      	adds	r2, r7, #4
 8000480:	23a0      	movs	r3, #160	@ 0xa0
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fa9a 	bl	80009c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800048c:	46c0      	nop			@ (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b006      	add	sp, #24
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000

08000498 <DHT11_START>:

/* USER CODE BEGIN 4 */
void DHT11_START(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800049c:	23a0      	movs	r3, #160	@ 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2200      	movs	r2, #0
 80004a2:	2120      	movs	r1, #32
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fc1e 	bl	8000ce6 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80004aa:	2012      	movs	r0, #18
 80004ac:	f000 f9b0 	bl	8000810 <HAL_Delay>

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80004b0:	23a0      	movs	r3, #160	@ 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2201      	movs	r2, #1
 80004b6:	2120      	movs	r1, #32
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fc14 	bl	8000ce6 <HAL_GPIO_WritePin>
	DELAY_MICRO(5);
 80004be:	2005      	movs	r0, #5
 80004c0:	f000 f806 	bl	80004d0 <DELAY_MICRO>

	DHT11_ALTERN_PIN(INPUT);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 f87c 	bl	80005c2 <DHT11_ALTERN_PIN>
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <DELAY_MICRO>:

void DELAY_MICRO(uint16_t us)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80004dc:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <DELAY_MICRO+0x30>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2200      	movs	r2, #0
 80004e2:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <DELAY_MICRO+0x30>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004ec:	1dbb      	adds	r3, r7, #6
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f8      	bcc.n	80004e6 <DELAY_MICRO+0x16>
}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	20000028 	.word	0x20000028

08000504 <DHT11_READ_RESPONSE>:
uint8_t DHT11_READ_RESPONSE(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 8; ++i){
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	e02d      	b.n	8000572 <DHT11_READ_RESPONSE+0x6e>
		while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	23a0      	movs	r3, #160	@ 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2120      	movs	r1, #32
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fbc4 	bl	8000cac <HAL_GPIO_ReadPin>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d0f7      	beq.n	8000518 <DHT11_READ_RESPONSE+0x14>
		DELAY_MICRO(40);
 8000528:	2028      	movs	r0, #40	@ 0x28
 800052a:	f7ff ffd1 	bl	80004d0 <DELAY_MICRO>
		if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) result |= (1 << (7 - i));
 800052e:	23a0      	movs	r3, #160	@ 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	2120      	movs	r1, #32
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fbb9 	bl	8000cac <HAL_GPIO_ReadPin>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d00d      	beq.n	800055a <DHT11_READ_RESPONSE+0x56>
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	2207      	movs	r2, #7
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	2201      	movs	r2, #1
 8000546:	409a      	lsls	r2, r3
 8000548:	0013      	movs	r3, r2
 800054a:	b25a      	sxtb	r2, r3
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b25b      	sxtb	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b25a      	sxtb	r2, r3
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	23a0      	movs	r3, #160	@ 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	2120      	movs	r1, #32
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fba2 	bl	8000cac <HAL_GPIO_ReadPin>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d1f7      	bne.n	800055c <DHT11_READ_RESPONSE+0x58>
	for(int i = 0; i < 8; ++i){
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b07      	cmp	r3, #7
 8000576:	ddce      	ble.n	8000516 <DHT11_READ_RESPONSE+0x12>
	}

	return result;
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}

08000584 <DHT11_CHECK_RESPONSE>:
uint8_t DHT11_CHECK_RESPONSE(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0)
 8000588:	23a0      	movs	r3, #160	@ 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2120      	movs	r1, #32
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fb8c 	bl	8000cac <HAL_GPIO_ReadPin>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d110      	bne.n	80005ba <DHT11_CHECK_RESPONSE+0x36>
	{
		DELAY_MICRO(85);
 8000598:	2055      	movs	r0, #85	@ 0x55
 800059a:	f7ff ff99 	bl	80004d0 <DELAY_MICRO>
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 1)
 800059e:	23a0      	movs	r3, #160	@ 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2120      	movs	r1, #32
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fb81 	bl	8000cac <HAL_GPIO_ReadPin>
 80005aa:	0003      	movs	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d104      	bne.n	80005ba <DHT11_CHECK_RESPONSE+0x36>
		{
			DELAY_MICRO(85);
 80005b0:	2055      	movs	r0, #85	@ 0x55
 80005b2:	f7ff ff8d 	bl	80004d0 <DELAY_MICRO>
			return 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <DHT11_CHECK_RESPONSE+0x38>
		}
	}
	return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <DHT11_ALTERN_PIN>:

void DHT11_ALTERN_PIN(uint8_t mode){
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b089      	sub	sp, #36	@ 0x24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	0002      	movs	r2, r0
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	240c      	movs	r4, #12
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2314      	movs	r3, #20
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f001 fbd7 	bl	8001d8c <memset>

	if(mode == INPUT){
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d110      	bne.n	8000608 <DHT11_ALTERN_PIN+0x46>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2220      	movs	r2, #32
 80005ea:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2201      	movs	r2, #1
 80005f6:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80005f8:	193a      	adds	r2, r7, r4
 80005fa:	23a0      	movs	r3, #160	@ 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f9dd 	bl	80009c0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
	}
}
 8000606:	e017      	b.n	8000638 <DHT11_ALTERN_PIN+0x76>
	else if (mode == OUTPUT){
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d113      	bne.n	8000638 <DHT11_ALTERN_PIN+0x76>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 8000610:	210c      	movs	r1, #12
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2220      	movs	r2, #32
 8000616:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2211      	movs	r2, #17
 800061c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2201      	movs	r2, #1
 8000622:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2203      	movs	r2, #3
 8000628:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800062a:	187a      	adds	r2, r7, r1
 800062c:	23a0      	movs	r3, #160	@ 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f9c4 	bl	80009c0 <HAL_GPIO_Init>
}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b009      	add	sp, #36	@ 0x24
 800063e:	bd90      	pop	{r4, r7, pc}

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <HAL_MspInit+0x24>)
 8000652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_MspInit+0x24>)
 8000656:	2101      	movs	r1, #1
 8000658:	430a      	orrs	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <HAL_MspInit+0x24>)
 800065e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <HAL_MspInit+0x24>)
 8000662:	2180      	movs	r1, #128	@ 0x80
 8000664:	0549      	lsls	r1, r1, #21
 8000666:	430a      	orrs	r2, r1
 8000668:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	429a      	cmp	r2, r3
 8000686:	d105      	bne.n	8000694 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <HAL_TIM_Base_MspInit+0x28>)
 800068a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <HAL_TIM_Base_MspInit+0x28>)
 800068e:	2101      	movs	r1, #1
 8000690:	430a      	orrs	r2, r1
 8000692:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 f886 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	@ (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f7ff fff7 	bl	80006d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f001 fb47 	bl	8001d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070e:	f7ff fd87 	bl	8000220 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	08001e20 	.word	0x08001e20
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	20000074 	.word	0x20000074

0800072c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_COMP_IRQHandler>
	...

08000730 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <HAL_Init+0x3c>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <HAL_Init+0x3c>)
 8000742:	2140      	movs	r1, #64	@ 0x40
 8000744:	430a      	orrs	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f811 	bl	8000770 <HAL_InitTick>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d003      	beq.n	800075a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e001      	b.n	800075e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800075a:	f7ff ff77 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	781b      	ldrb	r3, [r3, #0]
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <HAL_InitTick+0x5c>)
 800077a:	681c      	ldr	r4, [r3, #0]
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <HAL_InitTick+0x60>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	0019      	movs	r1, r3
 8000782:	23fa      	movs	r3, #250	@ 0xfa
 8000784:	0098      	lsls	r0, r3, #2
 8000786:	f7ff fcbf 	bl	8000108 <__udivsi3>
 800078a:	0003      	movs	r3, r0
 800078c:	0019      	movs	r1, r3
 800078e:	0020      	movs	r0, r4
 8000790:	f7ff fcba 	bl	8000108 <__udivsi3>
 8000794:	0003      	movs	r3, r0
 8000796:	0018      	movs	r0, r3
 8000798:	f000 f905 	bl	80009a6 <HAL_SYSTICK_Config>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e00f      	b.n	80007c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d80b      	bhi.n	80007c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2301      	movs	r3, #1
 80007ae:	425b      	negs	r3, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f8e2 	bl	800097c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_InitTick+0x64>)
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b003      	add	sp, #12
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_IncTick+0x1c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	001a      	movs	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_IncTick+0x20>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	18d2      	adds	r2, r2, r3
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_IncTick+0x20>)
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000070 	.word	0x20000070

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b02      	ldr	r3, [pc, #8]	@ (800080c <HAL_GetTick+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000070 	.word	0x20000070

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff fff0 	bl	80007fc <HAL_GetTick>
 800081c:	0003      	movs	r3, r0
 800081e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	d005      	beq.n	8000836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_Delay+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	001a      	movs	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	189b      	adds	r3, r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	f7ff ffe0 	bl	80007fc <HAL_GetTick>
 800083c:	0002      	movs	r2, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f7      	bhi.n	8000838 <HAL_Delay+0x28>
  {
  }
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b004      	add	sp, #16
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	20000008 	.word	0x20000008

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b7f      	cmp	r3, #127	@ 0x7f
 800086c:	d828      	bhi.n	80008c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086e:	4a2f      	ldr	r2, [pc, #188]	@ (800092c <__NVIC_SetPriority+0xd4>)
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b25b      	sxtb	r3, r3
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	33c0      	adds	r3, #192	@ 0xc0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	589b      	ldr	r3, [r3, r2]
 800087e:	1dfa      	adds	r2, r7, #7
 8000880:	7812      	ldrb	r2, [r2, #0]
 8000882:	0011      	movs	r1, r2
 8000884:	2203      	movs	r2, #3
 8000886:	400a      	ands	r2, r1
 8000888:	00d2      	lsls	r2, r2, #3
 800088a:	21ff      	movs	r1, #255	@ 0xff
 800088c:	4091      	lsls	r1, r2
 800088e:	000a      	movs	r2, r1
 8000890:	43d2      	mvns	r2, r2
 8000892:	401a      	ands	r2, r3
 8000894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	22ff      	movs	r2, #255	@ 0xff
 800089c:	401a      	ands	r2, r3
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	0018      	movs	r0, r3
 80008a4:	2303      	movs	r3, #3
 80008a6:	4003      	ands	r3, r0
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ac:	481f      	ldr	r0, [pc, #124]	@ (800092c <__NVIC_SetPriority+0xd4>)
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	089b      	lsrs	r3, r3, #2
 80008b6:	430a      	orrs	r2, r1
 80008b8:	33c0      	adds	r3, #192	@ 0xc0
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008be:	e031      	b.n	8000924 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000930 <__NVIC_SetPriority+0xd8>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0019      	movs	r1, r3
 80008c8:	230f      	movs	r3, #15
 80008ca:	400b      	ands	r3, r1
 80008cc:	3b08      	subs	r3, #8
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3306      	adds	r3, #6
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	3304      	adds	r3, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1dfa      	adds	r2, r7, #7
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	0011      	movs	r1, r2
 80008e0:	2203      	movs	r2, #3
 80008e2:	400a      	ands	r2, r1
 80008e4:	00d2      	lsls	r2, r2, #3
 80008e6:	21ff      	movs	r1, #255	@ 0xff
 80008e8:	4091      	lsls	r1, r2
 80008ea:	000a      	movs	r2, r1
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	401a      	ands	r2, r3
 80008f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	019b      	lsls	r3, r3, #6
 80008f6:	22ff      	movs	r2, #255	@ 0xff
 80008f8:	401a      	ands	r2, r3
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	2303      	movs	r3, #3
 8000902:	4003      	ands	r3, r0
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <__NVIC_SetPriority+0xd8>)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	001c      	movs	r4, r3
 8000910:	230f      	movs	r3, #15
 8000912:	4023      	ands	r3, r4
 8000914:	3b08      	subs	r3, #8
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	430a      	orrs	r2, r1
 800091a:	3306      	adds	r3, #6
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	18c3      	adds	r3, r0, r3
 8000920:	3304      	adds	r3, #4
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b003      	add	sp, #12
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	1e5a      	subs	r2, r3, #1
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	045b      	lsls	r3, r3, #17
 8000944:	429a      	cmp	r2, r3
 8000946:	d301      	bcc.n	800094c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000948:	2301      	movs	r3, #1
 800094a:	e010      	b.n	800096e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <SysTick_Config+0x44>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	3a01      	subs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000954:	2301      	movs	r3, #1
 8000956:	425b      	negs	r3, r3
 8000958:	2103      	movs	r1, #3
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff ff7c 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <SysTick_Config+0x44>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <SysTick_Config+0x44>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	210f      	movs	r1, #15
 8000988:	187b      	adds	r3, r7, r1
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	187b      	adds	r3, r7, r1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff5d 	bl	8000858 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ffbf 	bl	8000934 <SysTick_Config>
 80009b6:	0003      	movs	r3, r0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009d6:	e14f      	b.n	8000c78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d100      	bne.n	80009f0 <HAL_GPIO_Init+0x30>
 80009ee:	e140      	b.n	8000c72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d005      	beq.n	8000a08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d130      	bne.n	8000a6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	2201      	movs	r2, #1
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2203      	movs	r2, #3
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d017      	beq.n	8000aa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2203      	movs	r2, #3
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d123      	bne.n	8000afa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3208      	adds	r2, #8
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	58d3      	ldr	r3, [r2, r3]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	691a      	ldr	r2, [r3, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2107      	movs	r1, #7
 8000ade:	400b      	ands	r3, r1
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	6939      	ldr	r1, [r7, #16]
 8000af8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2203      	movs	r2, #3
 8000b18:	401a      	ands	r2, r3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	23c0      	movs	r3, #192	@ 0xc0
 8000b34:	029b      	lsls	r3, r3, #10
 8000b36:	4013      	ands	r3, r2
 8000b38:	d100      	bne.n	8000b3c <HAL_GPIO_Init+0x17c>
 8000b3a:	e09a      	b.n	8000c72 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3c:	4b54      	ldr	r3, [pc, #336]	@ (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b40:	4b53      	ldr	r3, [pc, #332]	@ (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	430a      	orrs	r2, r1
 8000b46:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b48:	4a52      	ldr	r2, [pc, #328]	@ (8000c94 <HAL_GPIO_Init+0x2d4>)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	589b      	ldr	r3, [r3, r2]
 8000b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	220f      	movs	r2, #15
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	43da      	mvns	r2, r3
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	23a0      	movs	r3, #160	@ 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d019      	beq.n	8000baa <HAL_GPIO_Init+0x1ea>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a47      	ldr	r2, [pc, #284]	@ (8000c98 <HAL_GPIO_Init+0x2d8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0x1e6>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a46      	ldr	r2, [pc, #280]	@ (8000c9c <HAL_GPIO_Init+0x2dc>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d00d      	beq.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a45      	ldr	r2, [pc, #276]	@ (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d007      	beq.n	8000b9e <HAL_GPIO_Init+0x1de>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a44      	ldr	r2, [pc, #272]	@ (8000ca4 <HAL_GPIO_Init+0x2e4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_GPIO_Init+0x1da>
 8000b96:	2305      	movs	r3, #5
 8000b98:	e008      	b.n	8000bac <HAL_GPIO_Init+0x1ec>
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x1ec>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e004      	b.n	8000bac <HAL_GPIO_Init+0x1ec>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x1ec>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_GPIO_Init+0x1ec>
 8000baa:	2300      	movs	r3, #0
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	2103      	movs	r1, #3
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bbc:	4935      	ldr	r1, [pc, #212]	@ (8000c94 <HAL_GPIO_Init+0x2d4>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b37      	ldr	r3, [pc, #220]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	035b      	lsls	r3, r3, #13
 8000be2:	4013      	ands	r3, r2
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	039b      	lsls	r3, r3, #14
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c18:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000c1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	029b      	lsls	r3, r3, #10
 8000c36:	4013      	ands	r3, r2
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43da      	mvns	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	4013      	ands	r3, r2
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	40da      	lsrs	r2, r3
 8000c80:	1e13      	subs	r3, r2, #0
 8000c82:	d000      	beq.n	8000c86 <HAL_GPIO_Init+0x2c6>
 8000c84:	e6a8      	b.n	80009d8 <HAL_GPIO_Init+0x18>
  }
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b006      	add	sp, #24
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000
 8000c98:	50000400 	.word	0x50000400
 8000c9c:	50000800 	.word	0x50000800
 8000ca0:	50000c00 	.word	0x50000c00
 8000ca4:	50001c00 	.word	0x50001c00
 8000ca8:	40010400 	.word	0x40010400

08000cac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	000a      	movs	r2, r1
 8000cb6:	1cbb      	adds	r3, r7, #2
 8000cb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	1cba      	adds	r2, r7, #2
 8000cc0:	8812      	ldrh	r2, [r2, #0]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d004      	beq.n	8000cd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e003      	b.n	8000cd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000cd8:	230f      	movs	r3, #15
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	0008      	movs	r0, r1
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	1cbb      	adds	r3, r7, #2
 8000cf4:	1c02      	adds	r2, r0, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
 8000cf8:	1c7b      	adds	r3, r7, #1
 8000cfa:	1c0a      	adds	r2, r1, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfe:	1c7b      	adds	r3, r7, #1
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d06:	1cbb      	adds	r3, r7, #2
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d0e:	e003      	b.n	8000d18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d10:	1cbb      	adds	r3, r7, #2
 8000d12:	881a      	ldrh	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d18:	46c0      	nop			@ (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f000 fbaf 	bl	8001492 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d34:	4bcf      	ldr	r3, [pc, #828]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	220c      	movs	r2, #12
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d3e:	4bcd      	ldr	r3, [pc, #820]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	025b      	lsls	r3, r3, #9
 8000d46:	4013      	ands	r3, r2
 8000d48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	d100      	bne.n	8000d56 <HAL_RCC_OscConfig+0x36>
 8000d54:	e07e      	b.n	8000e54 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d007      	beq.n	8000d6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	2b0c      	cmp	r3, #12
 8000d60:	d112      	bne.n	8000d88 <HAL_RCC_OscConfig+0x68>
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d10d      	bne.n	8000d88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	4bc1      	ldr	r3, [pc, #772]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	d100      	bne.n	8000d7a <HAL_RCC_OscConfig+0x5a>
 8000d78:	e06b      	b.n	8000e52 <HAL_RCC_OscConfig+0x132>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d167      	bne.n	8000e52 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f000 fb85 	bl	8001492 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	025b      	lsls	r3, r3, #9
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d107      	bne.n	8000da4 <HAL_RCC_OscConfig+0x84>
 8000d94:	4bb7      	ldr	r3, [pc, #732]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4bb6      	ldr	r3, [pc, #728]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d9a:	2180      	movs	r1, #128	@ 0x80
 8000d9c:	0249      	lsls	r1, r1, #9
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e027      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	23a0      	movs	r3, #160	@ 0xa0
 8000daa:	02db      	lsls	r3, r3, #11
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10e      	bne.n	8000dce <HAL_RCC_OscConfig+0xae>
 8000db0:	4bb0      	ldr	r3, [pc, #704]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4baf      	ldr	r3, [pc, #700]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000db6:	2180      	movs	r1, #128	@ 0x80
 8000db8:	02c9      	lsls	r1, r1, #11
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	4bad      	ldr	r3, [pc, #692]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4bac      	ldr	r3, [pc, #688]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0249      	lsls	r1, r1, #9
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e012      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000dce:	4ba9      	ldr	r3, [pc, #676]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4ba8      	ldr	r3, [pc, #672]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dd4:	49a8      	ldr	r1, [pc, #672]	@ (8001078 <HAL_RCC_OscConfig+0x358>)
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	4ba6      	ldr	r3, [pc, #664]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4ba2      	ldr	r3, [pc, #648]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4ba1      	ldr	r3, [pc, #644]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dee:	49a3      	ldr	r1, [pc, #652]	@ (800107c <HAL_RCC_OscConfig+0x35c>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d015      	beq.n	8000e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fcfe 	bl	80007fc <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e04:	e009      	b.n	8000e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fcf9 	bl	80007fc <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	@ 0x64
 8000e12:	d902      	bls.n	8000e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f000 fb3c 	bl	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e1a:	4b96      	ldr	r3, [pc, #600]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	029b      	lsls	r3, r3, #10
 8000e22:	4013      	ands	r3, r2
 8000e24:	d0ef      	beq.n	8000e06 <HAL_RCC_OscConfig+0xe6>
 8000e26:	e015      	b.n	8000e54 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fce8 	bl	80007fc <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e32:	f7ff fce3 	bl	80007fc <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	@ 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e326      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e44:	4b8b      	ldr	r3, [pc, #556]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	029b      	lsls	r3, r3, #10
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d1f0      	bne.n	8000e32 <HAL_RCC_OscConfig+0x112>
 8000e50:	e000      	b.n	8000e54 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_RCC_OscConfig+0x140>
 8000e5e:	e08b      	b.n	8000f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d005      	beq.n	8000e78 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	d13e      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1d0>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d13b      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e78:	4b7e      	ldr	r3, [pc, #504]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d004      	beq.n	8000e8c <HAL_RCC_OscConfig+0x16c>
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e302      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b79      	ldr	r3, [pc, #484]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a7b      	ldr	r2, [pc, #492]	@ (8001080 <HAL_RCC_OscConfig+0x360>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	021a      	lsls	r2, r3, #8
 8000e9c:	4b75      	ldr	r3, [pc, #468]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ea2:	4b74      	ldr	r3, [pc, #464]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2209      	movs	r2, #9
 8000ea8:	4393      	bics	r3, r2
 8000eaa:	0019      	movs	r1, r3
 8000eac:	4b71      	ldr	r3, [pc, #452]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000eb4:	f000 fc40 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8000eb8:	0001      	movs	r1, r0
 8000eba:	4b6e      	ldr	r3, [pc, #440]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	4a6f      	ldr	r2, [pc, #444]	@ (8001084 <HAL_RCC_OscConfig+0x364>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	000a      	movs	r2, r1
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	@ (8001088 <HAL_RCC_OscConfig+0x368>)
 8000ece:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800108c <HAL_RCC_OscConfig+0x36c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2513      	movs	r5, #19
 8000ed6:	197c      	adds	r4, r7, r5
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fc49 	bl	8000770 <HAL_InitTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d046      	beq.n	8000f78 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	e2d0      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d027      	beq.n	8000f46 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2209      	movs	r2, #9
 8000efc:	4393      	bics	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	4b5c      	ldr	r3, [pc, #368]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc78 	bl	80007fc <HAL_GetTick>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fc73 	bl	80007fc <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e2b6      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f24:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f1      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b51      	ldr	r3, [pc, #324]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a53      	ldr	r2, [pc, #332]	@ (8001080 <HAL_RCC_OscConfig+0x360>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	021a      	lsls	r2, r3, #8
 8000f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f40:	430a      	orrs	r2, r1
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	e018      	b.n	8000f78 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f46:	4b4b      	ldr	r3, [pc, #300]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc53 	bl	80007fc <HAL_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fc4e 	bl	80007fc <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e291      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f6e:	4b41      	ldr	r3, [pc, #260]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2204      	movs	r2, #4
 8000f74:	4013      	ands	r3, r2
 8000f76:	d1f1      	bne.n	8000f5c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d100      	bne.n	8000f84 <HAL_RCC_OscConfig+0x264>
 8000f82:	e0a1      	b.n	80010c8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d140      	bne.n	800100c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4013      	ands	r3, r2
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x282>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e277      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001090 <HAL_RCC_OscConfig+0x370>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	0a19      	lsrs	r1, r3, #8
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	061a      	lsls	r2, r3, #24
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	0b5b      	lsrs	r3, r3, #13
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	0212      	lsls	r2, r2, #8
 8000fd6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	210f      	movs	r1, #15
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	4928      	ldr	r1, [pc, #160]	@ (8001084 <HAL_RCC_OscConfig+0x364>)
 8000fe4:	5ccb      	ldrb	r3, [r1, r3]
 8000fe6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <HAL_RCC_OscConfig+0x368>)
 8000fea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_RCC_OscConfig+0x36c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2513      	movs	r5, #19
 8000ff2:	197c      	adds	r4, r7, r5
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff fbbb 	bl	8000770 <HAL_InitTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000ffe:	197b      	adds	r3, r7, r5
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d060      	beq.n	80010c8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001006:	197b      	adds	r3, r7, r5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	e242      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d03f      	beq.n	8001094 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	0049      	lsls	r1, r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fbeb 	bl	80007fc <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102c:	f7ff fbe6 	bl	80007fc <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e229      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	2380      	movs	r3, #128	@ 0x80
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4013      	ands	r3, r2
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_RCC_OscConfig+0x370>)
 8001050:	4013      	ands	r3, r2
 8001052:	0019      	movs	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800105a:	430a      	orrs	r2, r1
 800105c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	0a19      	lsrs	r1, r3, #8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	061a      	lsls	r2, r3, #24
 800106c:	4b01      	ldr	r3, [pc, #4]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e029      	b.n	80010c8 <HAL_RCC_OscConfig+0x3a8>
 8001074:	40021000 	.word	0x40021000
 8001078:	fffeffff 	.word	0xfffeffff
 800107c:	fffbffff 	.word	0xfffbffff
 8001080:	ffffe0ff 	.word	0xffffe0ff
 8001084:	08001dfc 	.word	0x08001dfc
 8001088:	20000000 	.word	0x20000000
 800108c:	20000004 	.word	0x20000004
 8001090:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001094:	4bbd      	ldr	r3, [pc, #756]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4bbc      	ldr	r3, [pc, #752]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800109a:	49bd      	ldr	r1, [pc, #756]	@ (8001390 <HAL_RCC_OscConfig+0x670>)
 800109c:	400a      	ands	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fbac 	bl	80007fc <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010aa:	f7ff fba7 	bl	80007fc <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1ea      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010bc:	4bb3      	ldr	r3, [pc, #716]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4013      	ands	r3, r2
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2208      	movs	r2, #8
 80010ce:	4013      	ands	r3, r2
 80010d0:	d036      	beq.n	8001140 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d019      	beq.n	800110e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010da:	4bac      	ldr	r3, [pc, #688]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80010dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010de:	4bab      	ldr	r3, [pc, #684]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb89 	bl	80007fc <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fb84 	bl	80007fc <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1c7      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001102:	4ba2      	ldr	r3, [pc, #648]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001106:	2202      	movs	r2, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d0f1      	beq.n	80010f0 <HAL_RCC_OscConfig+0x3d0>
 800110c:	e018      	b.n	8001140 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800110e:	4b9f      	ldr	r3, [pc, #636]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001112:	4b9e      	ldr	r3, [pc, #632]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001114:	2101      	movs	r1, #1
 8001116:	438a      	bics	r2, r1
 8001118:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fb6f 	bl	80007fc <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fb6a 	bl	80007fc <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1ad      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001136:	4b95      	ldr	r3, [pc, #596]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d1f1      	bne.n	8001124 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2204      	movs	r2, #4
 8001146:	4013      	ands	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_RCC_OscConfig+0x42c>
 800114a:	e0ae      	b.n	80012aa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114c:	2027      	movs	r0, #39	@ 0x27
 800114e:	183b      	adds	r3, r7, r0
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001154:	4b8d      	ldr	r3, [pc, #564]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	055b      	lsls	r3, r3, #21
 800115c:	4013      	ands	r3, r2
 800115e:	d109      	bne.n	8001174 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	4b8a      	ldr	r3, [pc, #552]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001164:	4b89      	ldr	r3, [pc, #548]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	0549      	lsls	r1, r1, #21
 800116a:	430a      	orrs	r2, r1
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800116e:	183b      	adds	r3, r7, r0
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	4b87      	ldr	r3, [pc, #540]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d11a      	bne.n	80011b6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001180:	4b84      	ldr	r3, [pc, #528]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b83      	ldr	r3, [pc, #524]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 8001186:	2180      	movs	r1, #128	@ 0x80
 8001188:	0049      	lsls	r1, r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118e:	f7ff fb35 	bl	80007fc <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001198:	f7ff fb30 	bl	80007fc <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e173      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	429a      	cmp	r2, r3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4b2>
 80011c2:	4b72      	ldr	r3, [pc, #456]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011c6:	4b71      	ldr	r3, [pc, #452]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	0049      	lsls	r1, r1, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80011d0:	e031      	b.n	8001236 <HAL_RCC_OscConfig+0x516>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
 80011da:	4b6c      	ldr	r3, [pc, #432]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011de:	4b6b      	ldr	r3, [pc, #428]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011e0:	496b      	ldr	r1, [pc, #428]	@ (8001390 <HAL_RCC_OscConfig+0x670>)
 80011e2:	400a      	ands	r2, r1
 80011e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80011e6:	4b69      	ldr	r3, [pc, #420]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011ea:	4b68      	ldr	r3, [pc, #416]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011ec:	496a      	ldr	r1, [pc, #424]	@ (8001398 <HAL_RCC_OscConfig+0x678>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80011f2:	e020      	b.n	8001236 <HAL_RCC_OscConfig+0x516>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	23a0      	movs	r3, #160	@ 0xa0
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d10e      	bne.n	800121e <HAL_RCC_OscConfig+0x4fe>
 8001200:	4b62      	ldr	r3, [pc, #392]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001202:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001204:	4b61      	ldr	r3, [pc, #388]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	00c9      	lsls	r1, r1, #3
 800120a:	430a      	orrs	r2, r1
 800120c:	651a      	str	r2, [r3, #80]	@ 0x50
 800120e:	4b5f      	ldr	r3, [pc, #380]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001212:	4b5e      	ldr	r3, [pc, #376]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	0049      	lsls	r1, r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	651a      	str	r2, [r3, #80]	@ 0x50
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x516>
 800121e:	4b5b      	ldr	r3, [pc, #364]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001222:	4b5a      	ldr	r3, [pc, #360]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001224:	495a      	ldr	r1, [pc, #360]	@ (8001390 <HAL_RCC_OscConfig+0x670>)
 8001226:	400a      	ands	r2, r1
 8001228:	651a      	str	r2, [r3, #80]	@ 0x50
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800122c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800122e:	4b57      	ldr	r3, [pc, #348]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001230:	4959      	ldr	r1, [pc, #356]	@ (8001398 <HAL_RCC_OscConfig+0x678>)
 8001232:	400a      	ands	r2, r1
 8001234:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fadd 	bl	80007fc <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001246:	e009      	b.n	800125c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff fad8 	bl	80007fc <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_RCC_OscConfig+0x67c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e11a      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800125c:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800125e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d0ef      	beq.n	8001248 <HAL_RCC_OscConfig+0x528>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fac7 	bl	80007fc <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001272:	e009      	b.n	8001288 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fac2 	bl	80007fc <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	4a47      	ldr	r2, [pc, #284]	@ (800139c <HAL_RCC_OscConfig+0x67c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e104      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001288:	4b40      	ldr	r3, [pc, #256]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800128a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d1ef      	bne.n	8001274 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001294:	2327      	movs	r3, #39	@ 0x27
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d105      	bne.n	80012aa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012a2:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012a4:	493e      	ldr	r1, [pc, #248]	@ (80013a0 <HAL_RCC_OscConfig+0x680>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2220      	movs	r2, #32
 80012b0:	4013      	ands	r3, r2
 80012b2:	d049      	beq.n	8001348 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d026      	beq.n	800130a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	4b32      	ldr	r3, [pc, #200]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012cc:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012ce:	2101      	movs	r1, #1
 80012d0:	430a      	orrs	r2, r1
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	0189      	lsls	r1, r1, #6
 80012de:	430a      	orrs	r2, r1
 80012e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fa8b 	bl	80007fc <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ec:	f7ff fa86 	bl	80007fc <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0c9      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d0f1      	beq.n	80012ec <HAL_RCC_OscConfig+0x5cc>
 8001308:	e01e      	b.n	8001348 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001310:	2101      	movs	r1, #1
 8001312:	438a      	bics	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 800131c:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_RCC_OscConfig+0x688>)
 800131e:	400a      	ands	r2, r1
 8001320:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fa6b 	bl	80007fc <HAL_GetTick>
 8001326:	0003      	movs	r3, r0
 8001328:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800132c:	f7ff fa66 	bl	80007fc <HAL_GetTick>
 8001330:	0002      	movs	r2, r0
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e0a9      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d1f1      	bne.n	800132c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <HAL_RCC_OscConfig+0x632>
 8001350:	e09e      	b.n	8001490 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x63a>
 8001358:	e077      	b.n	800144a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	2b02      	cmp	r3, #2
 8001360:	d158      	bne.n	8001414 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001368:	4910      	ldr	r1, [pc, #64]	@ (80013ac <HAL_RCC_OscConfig+0x68c>)
 800136a:	400a      	ands	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fa45 	bl	80007fc <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001376:	e01b      	b.n	80013b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff fa40 	bl	80007fc <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d914      	bls.n	80013b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e083      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	fffffeff 	.word	0xfffffeff
 8001394:	40007000 	.word	0x40007000
 8001398:	fffffbff 	.word	0xfffffbff
 800139c:	00001388 	.word	0x00001388
 80013a0:	efffffff 	.word	0xefffffff
 80013a4:	40010000 	.word	0x40010000
 80013a8:	ffffdfff 	.word	0xffffdfff
 80013ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013b0:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	049b      	lsls	r3, r3, #18
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1dd      	bne.n	8001378 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a37      	ldr	r2, [pc, #220]	@ (80014a0 <HAL_RCC_OscConfig+0x780>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013d8:	430a      	orrs	r2, r1
 80013da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013e2:	2180      	movs	r1, #128	@ 0x80
 80013e4:	0449      	lsls	r1, r1, #17
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fa07 	bl	80007fc <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff fa02 	bl	80007fc <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e045      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	049b      	lsls	r3, r3, #18
 800140e:	4013      	ands	r3, r2
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x6d4>
 8001412:	e03d      	b.n	8001490 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 800141a:	4922      	ldr	r1, [pc, #136]	@ (80014a4 <HAL_RCC_OscConfig+0x784>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff f9ec 	bl	80007fc <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff f9e7 	bl	80007fc <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e02a      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	049b      	lsls	r3, r3, #18
 8001444:	4013      	ands	r3, r2
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x70a>
 8001448:	e022      	b.n	8001490 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e01d      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	401a      	ands	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	429a      	cmp	r2, r3
 800146a:	d10f      	bne.n	800148c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	23f0      	movs	r3, #240	@ 0xf0
 8001470:	039b      	lsls	r3, r3, #14
 8001472:	401a      	ands	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d107      	bne.n	800148c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	23c0      	movs	r3, #192	@ 0xc0
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	401a      	ands	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b00a      	add	sp, #40	@ 0x28
 8001498:	bdb0      	pop	{r4, r5, r7, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	40021000 	.word	0x40021000
 80014a0:	ff02ffff 	.word	0xff02ffff
 80014a4:	feffffff 	.word	0xfeffffff

080014a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e128      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b96      	ldr	r3, [pc, #600]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d91e      	bls.n	8001508 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b93      	ldr	r3, [pc, #588]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b90      	ldr	r3, [pc, #576]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f98e 	bl	80007fc <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e6:	f7ff f989 	bl	80007fc <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a8a      	ldr	r2, [pc, #552]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e109      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b87      	ldr	r3, [pc, #540]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001512:	4b83      	ldr	r3, [pc, #524]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	22f0      	movs	r2, #240	@ 0xf0
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001522:	430a      	orrs	r2, r1
 8001524:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	d100      	bne.n	8001532 <HAL_RCC_ClockConfig+0x8a>
 8001530:	e089      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800153a:	4b79      	ldr	r3, [pc, #484]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	029b      	lsls	r3, r3, #10
 8001542:	4013      	ands	r3, r2
 8001544:	d120      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0e1      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001552:	4b73      	ldr	r3, [pc, #460]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	049b      	lsls	r3, r3, #18
 800155a:	4013      	ands	r3, r2
 800155c:	d114      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0d5      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d106      	bne.n	8001578 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156a:	4b6d      	ldr	r3, [pc, #436]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	d109      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0ca      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001578:	4b69      	ldr	r3, [pc, #420]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0c2      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001588:	4b65      	ldr	r3, [pc, #404]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2203      	movs	r2, #3
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4b62      	ldr	r3, [pc, #392]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff f92e 	bl	80007fc <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ae:	f7ff f925 	bl	80007fc <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a58      	ldr	r2, [pc, #352]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0a5      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c2:	4b57      	ldr	r3, [pc, #348]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	220c      	movs	r2, #12
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d1ef      	bne.n	80015ae <HAL_RCC_ClockConfig+0x106>
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d111      	bne.n	80015fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7ff f90f 	bl	80007fc <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a4d      	ldr	r2, [pc, #308]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e08f      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	220c      	movs	r2, #12
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d1ef      	bne.n	80015da <HAL_RCC_ClockConfig+0x132>
 80015fa:	e024      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d11b      	bne.n	800163c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001604:	e009      	b.n	800161a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001606:	f7ff f8f9 	bl	80007fc <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	4a42      	ldr	r2, [pc, #264]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e079      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	220c      	movs	r2, #12
 8001620:	4013      	ands	r3, r2
 8001622:	2b04      	cmp	r3, #4
 8001624:	d1ef      	bne.n	8001606 <HAL_RCC_ClockConfig+0x15e>
 8001626:	e00e      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff f8e8 	bl	80007fc <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a3a      	ldr	r2, [pc, #232]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e068      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d21e      	bcs.n	8001692 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4393      	bics	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001666:	f7ff f8c9 	bl	80007fc <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	e009      	b.n	8001684 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff f8c4 	bl	80007fc <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4a28      	ldr	r2, [pc, #160]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e044      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d1ee      	bne.n	8001670 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	d009      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <HAL_RCC_ClockConfig+0x27c>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4013      	ands	r3, r2
 80016b8:	d00a      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <HAL_RCC_ClockConfig+0x280>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00da      	lsls	r2, r3, #3
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d0:	f000 f832 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016d4:	0001      	movs	r1, r0
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	220f      	movs	r2, #15
 80016de:	4013      	ands	r3, r2
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <HAL_RCC_ClockConfig+0x284>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	000a      	movs	r2, r1
 80016e6:	40da      	lsrs	r2, r3
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_RCC_ClockConfig+0x288>)
 80016ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_RCC_ClockConfig+0x28c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	250b      	movs	r5, #11
 80016f2:	197c      	adds	r4, r7, r5
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff f83b 	bl	8000770 <HAL_InitTick>
 80016fa:	0003      	movs	r3, r0
 80016fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001706:	197b      	adds	r3, r7, r5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	e000      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bdb0      	pop	{r4, r5, r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	40022000 	.word	0x40022000
 800171c:	00001388 	.word	0x00001388
 8001720:	40021000 	.word	0x40021000
 8001724:	fffff8ff 	.word	0xfffff8ff
 8001728:	ffffc7ff 	.word	0xffffc7ff
 800172c:	08001dfc 	.word	0x08001dfc
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800173e:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d013      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x3e>
 800174e:	d85c      	bhi.n	800180a <HAL_RCC_GetSysClockFreq+0xd2>
 8001750:	2b04      	cmp	r3, #4
 8001752:	d002      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x22>
 8001754:	2b08      	cmp	r3, #8
 8001756:	d00b      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x38>
 8001758:	e057      	b.n	800180a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800175a:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2210      	movs	r2, #16
 8001760:	4013      	ands	r3, r2
 8001762:	d002      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001764:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001766:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001768:	e05d      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800176a:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x100>)
 800176c:	613b      	str	r3, [r7, #16]
      break;
 800176e:	e05a      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001770:	4b32      	ldr	r3, [pc, #200]	@ (800183c <HAL_RCC_GetSysClockFreq+0x104>)
 8001772:	613b      	str	r3, [r7, #16]
      break;
 8001774:	e057      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	220f      	movs	r2, #15
 800177c:	4013      	ands	r3, r2
 800177e:	4a30      	ldr	r2, [pc, #192]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001780:	5cd3      	ldrb	r3, [r2, r3]
 8001782:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0d9b      	lsrs	r3, r3, #22
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	3301      	adds	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	4013      	ands	r3, r2
 800179a:	d00f      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	000a      	movs	r2, r1
 80017a0:	0152      	lsls	r2, r2, #5
 80017a2:	1a52      	subs	r2, r2, r1
 80017a4:	0193      	lsls	r3, r2, #6
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	185b      	adds	r3, r3, r1
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe fca9 	bl	8000108 <__udivsi3>
 80017b6:	0003      	movs	r3, r0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e023      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2210      	movs	r2, #16
 80017c2:	4013      	ands	r3, r2
 80017c4:	d00f      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	000a      	movs	r2, r1
 80017ca:	0152      	lsls	r2, r2, #5
 80017cc:	1a52      	subs	r2, r2, r1
 80017ce:	0193      	lsls	r3, r2, #6
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	185b      	adds	r3, r3, r1
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f7fe fc94 	bl	8000108 <__udivsi3>
 80017e0:	0003      	movs	r3, r0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	000a      	movs	r2, r1
 80017ea:	0152      	lsls	r2, r2, #5
 80017ec:	1a52      	subs	r2, r2, r1
 80017ee:	0193      	lsls	r3, r2, #6
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	185b      	adds	r3, r3, r1
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7fe fc84 	bl	8000108 <__udivsi3>
 8001800:	0003      	movs	r3, r0
 8001802:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
      break;
 8001808:	e00d      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0b5b      	lsrs	r3, r3, #13
 8001810:	2207      	movs	r2, #7
 8001812:	4013      	ands	r3, r2
 8001814:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	2280      	movs	r2, #128	@ 0x80
 800181c:	0212      	lsls	r2, r2, #8
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      break;
 8001824:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001826:	693b      	ldr	r3, [r7, #16]
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b006      	add	sp, #24
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	003d0900 	.word	0x003d0900
 8001838:	00f42400 	.word	0x00f42400
 800183c:	007a1200 	.word	0x007a1200
 8001840:	08001e0c 	.word	0x08001e0c

08001844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e032      	b.n	80018bc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2239      	movs	r2, #57	@ 0x39
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2238      	movs	r2, #56	@ 0x38
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f7fe ff01 	bl	8000674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2239      	movs	r2, #57	@ 0x39
 8001876:	2102      	movs	r1, #2
 8001878:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	0019      	movs	r1, r3
 8001884:	0010      	movs	r0, r2
 8001886:	f000 f935 	bl	8001af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	223e      	movs	r2, #62	@ 0x3e
 800188e:	2101      	movs	r1, #1
 8001890:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	223a      	movs	r2, #58	@ 0x3a
 8001896:	2101      	movs	r1, #1
 8001898:	5499      	strb	r1, [r3, r2]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	223b      	movs	r2, #59	@ 0x3b
 800189e:	2101      	movs	r1, #1
 80018a0:	5499      	strb	r1, [r3, r2]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	223c      	movs	r2, #60	@ 0x3c
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	223d      	movs	r2, #61	@ 0x3d
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2239      	movs	r2, #57	@ 0x39
 80018b6:	2101      	movs	r1, #1
 80018b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2239      	movs	r2, #57	@ 0x39
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d001      	beq.n	80018dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e02e      	b.n	800193a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2239      	movs	r2, #57	@ 0x39
 80018e0:	2102      	movs	r1, #2
 80018e2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d009      	beq.n	8001904 <HAL_TIM_Base_Start+0x40>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a13      	ldr	r2, [pc, #76]	@ (8001944 <HAL_TIM_Base_Start+0x80>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d004      	beq.n	8001904 <HAL_TIM_Base_Start+0x40>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <HAL_TIM_Base_Start+0x84>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d111      	bne.n	8001928 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2207      	movs	r2, #7
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d010      	beq.n	8001938 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001926:	e007      	b.n	8001938 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	40010800 	.word	0x40010800
 8001948:	40011400 	.word	0x40011400

0800194c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	230f      	movs	r3, #15
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2238      	movs	r2, #56	@ 0x38
 8001962:	5c9b      	ldrb	r3, [r3, r2]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_TIM_ConfigClockSource+0x20>
 8001968:	2302      	movs	r3, #2
 800196a:	e0bc      	b.n	8001ae6 <HAL_TIM_ConfigClockSource+0x19a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2238      	movs	r2, #56	@ 0x38
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2239      	movs	r2, #57	@ 0x39
 8001978:	2102      	movs	r1, #2
 800197a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2277      	movs	r2, #119	@ 0x77
 8001988:	4393      	bics	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4a58      	ldr	r2, [pc, #352]	@ (8001af0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	0192      	lsls	r2, r2, #6
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d040      	beq.n	8001a2a <HAL_TIM_ConfigClockSource+0xde>
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	0192      	lsls	r2, r2, #6
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d900      	bls.n	80019b2 <HAL_TIM_ConfigClockSource+0x66>
 80019b0:	e088      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	0152      	lsls	r2, r2, #5
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d100      	bne.n	80019bc <HAL_TIM_ConfigClockSource+0x70>
 80019ba:	e088      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x182>
 80019bc:	2280      	movs	r2, #128	@ 0x80
 80019be:	0152      	lsls	r2, r2, #5
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d900      	bls.n	80019c6 <HAL_TIM_ConfigClockSource+0x7a>
 80019c4:	e07e      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019c6:	2b70      	cmp	r3, #112	@ 0x70
 80019c8:	d018      	beq.n	80019fc <HAL_TIM_ConfigClockSource+0xb0>
 80019ca:	d900      	bls.n	80019ce <HAL_TIM_ConfigClockSource+0x82>
 80019cc:	e07a      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019ce:	2b60      	cmp	r3, #96	@ 0x60
 80019d0:	d04f      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x126>
 80019d2:	d900      	bls.n	80019d6 <HAL_TIM_ConfigClockSource+0x8a>
 80019d4:	e076      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019d6:	2b50      	cmp	r3, #80	@ 0x50
 80019d8:	d03b      	beq.n	8001a52 <HAL_TIM_ConfigClockSource+0x106>
 80019da:	d900      	bls.n	80019de <HAL_TIM_ConfigClockSource+0x92>
 80019dc:	e072      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019de:	2b40      	cmp	r3, #64	@ 0x40
 80019e0:	d057      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0x146>
 80019e2:	d900      	bls.n	80019e6 <HAL_TIM_ConfigClockSource+0x9a>
 80019e4:	e06e      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019e6:	2b30      	cmp	r3, #48	@ 0x30
 80019e8:	d063      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x166>
 80019ea:	d86b      	bhi.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d060      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x166>
 80019f0:	d868      	bhi.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d05d      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x166>
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d05b      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x166>
 80019fa:	e063      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a0c:	f000 f946 	bl	8001c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2277      	movs	r2, #119	@ 0x77
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]
      break;
 8001a28:	e052      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a3a:	f000 f92f 	bl	8001c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	01c9      	lsls	r1, r1, #7
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
      break;
 8001a50:	e03e      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a5e:	001a      	movs	r2, r3
 8001a60:	f000 f8a2 	bl	8001ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2150      	movs	r1, #80	@ 0x50
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 f8fc 	bl	8001c68 <TIM_ITRx_SetConfig>
      break;
 8001a70:	e02e      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a7e:	001a      	movs	r2, r3
 8001a80:	f000 f8c0 	bl	8001c04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2160      	movs	r1, #96	@ 0x60
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f8ec 	bl	8001c68 <TIM_ITRx_SetConfig>
      break;
 8001a90:	e01e      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	f000 f882 	bl	8001ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 f8dc 	bl	8001c68 <TIM_ITRx_SetConfig>
      break;
 8001ab0:	e00e      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0019      	movs	r1, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	f000 f8d3 	bl	8001c68 <TIM_ITRx_SetConfig>
      break;
 8001ac2:	e005      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
      break;
 8001acc:	e000      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001ace:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2239      	movs	r2, #57	@ 0x39
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2238      	movs	r2, #56	@ 0x38
 8001adc:	2100      	movs	r1, #0
 8001ade:	5499      	strb	r1, [r3, r2]

  return status;
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	ffff00ff 	.word	0xffff00ff

08001af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x2a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a22      	ldr	r2, [pc, #136]	@ (8001b9c <TIM_Base_SetConfig+0xa8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x2a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a21      	ldr	r2, [pc, #132]	@ (8001ba0 <TIM_Base_SetConfig+0xac>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2270      	movs	r2, #112	@ 0x70
 8001b22:	4393      	bics	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d007      	beq.n	8001b4a <TIM_Base_SetConfig+0x56>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <TIM_Base_SetConfig+0xa8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <TIM_Base_SetConfig+0x56>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <TIM_Base_SetConfig+0xac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d108      	bne.n	8001b5c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ba4 <TIM_Base_SetConfig+0xb0>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	4393      	bics	r3, r2
 8001b62:	001a      	movs	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2204      	movs	r2, #4
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	40011400 	.word	0x40011400
 8001ba4:	fffffcff 	.word	0xfffffcff

08001ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4393      	bics	r3, r2
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	22f0      	movs	r2, #240	@ 0xf0
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	220a      	movs	r2, #10
 8001be4:	4393      	bics	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	621a      	str	r2, [r3, #32]
}
 8001bfc:	46c0      	nop			@ (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b006      	add	sp, #24
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	001a      	movs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <TIM_TI2_ConfigInputStage+0x60>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	031b      	lsls	r3, r3, #12
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	22a0      	movs	r2, #160	@ 0xa0
 8001c40:	4393      	bics	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	621a      	str	r2, [r3, #32]
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b006      	add	sp, #24
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	ffff0fff 	.word	0xffff0fff

08001c68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2270      	movs	r2, #112	@ 0x70
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	2207      	movs	r2, #7
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	609a      	str	r2, [r3, #8]
}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b004      	add	sp, #16
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <TIM_ETR_SetConfig+0x3c>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	021a      	lsls	r2, r3, #8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	46c0      	nop			@ (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b006      	add	sp, #24
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	ffff00ff 	.word	0xffff00ff

08001cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2238      	movs	r2, #56	@ 0x38
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e042      	b.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2238      	movs	r2, #56	@ 0x38
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2239      	movs	r2, #57	@ 0x39
 8001d00:	2102      	movs	r1, #2
 8001d02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2270      	movs	r2, #112	@ 0x70
 8001d18:	4393      	bics	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	05db      	lsls	r3, r3, #23
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d009      	beq.n	8001d4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10c      	bne.n	8001d68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2280      	movs	r2, #128	@ 0x80
 8001d52:	4393      	bics	r3, r2
 8001d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2239      	movs	r2, #57	@ 0x39
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2238      	movs	r2, #56	@ 0x38
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40011400 	.word	0x40011400

08001d8c <memset>:
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	1882      	adds	r2, r0, r2
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d100      	bne.n	8001d96 <memset+0xa>
 8001d94:	4770      	bx	lr
 8001d96:	7019      	strb	r1, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	e7f9      	b.n	8001d90 <memset+0x4>

08001d9c <__libc_init_array>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	2600      	movs	r6, #0
 8001da0:	4c0c      	ldr	r4, [pc, #48]	@ (8001dd4 <__libc_init_array+0x38>)
 8001da2:	4d0d      	ldr	r5, [pc, #52]	@ (8001dd8 <__libc_init_array+0x3c>)
 8001da4:	1b64      	subs	r4, r4, r5
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	42a6      	cmp	r6, r4
 8001daa:	d109      	bne.n	8001dc0 <__libc_init_array+0x24>
 8001dac:	2600      	movs	r6, #0
 8001dae:	f000 f819 	bl	8001de4 <_init>
 8001db2:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <__libc_init_array+0x40>)
 8001db4:	4d0a      	ldr	r5, [pc, #40]	@ (8001de0 <__libc_init_array+0x44>)
 8001db6:	1b64      	subs	r4, r4, r5
 8001db8:	10a4      	asrs	r4, r4, #2
 8001dba:	42a6      	cmp	r6, r4
 8001dbc:	d105      	bne.n	8001dca <__libc_init_array+0x2e>
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
 8001dc0:	00b3      	lsls	r3, r6, #2
 8001dc2:	58eb      	ldr	r3, [r5, r3]
 8001dc4:	4798      	blx	r3
 8001dc6:	3601      	adds	r6, #1
 8001dc8:	e7ee      	b.n	8001da8 <__libc_init_array+0xc>
 8001dca:	00b3      	lsls	r3, r6, #2
 8001dcc:	58eb      	ldr	r3, [r5, r3]
 8001dce:	4798      	blx	r3
 8001dd0:	3601      	adds	r6, #1
 8001dd2:	e7f2      	b.n	8001dba <__libc_init_array+0x1e>
 8001dd4:	08001e18 	.word	0x08001e18
 8001dd8:	08001e18 	.word	0x08001e18
 8001ddc:	08001e1c 	.word	0x08001e1c
 8001de0:	08001e18 	.word	0x08001e18

08001de4 <_init>:
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dea:	bc08      	pop	{r3}
 8001dec:	469e      	mov	lr, r3
 8001dee:	4770      	bx	lr

08001df0 <_fini>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df6:	bc08      	pop	{r3}
 8001df8:	469e      	mov	lr, r3
 8001dfa:	4770      	bx	lr


Frequencia de amostragem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ccc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003d8c  08003d8c  00004d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e30  08003e30  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e30  08003e30  00004e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e38  08003e38  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e38  08003e38  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e3c  08003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  2000005c  08003e9c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08003e9c  000057e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1aa  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1b  00000000  00000000  0000f22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00010d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000691  00000000  00000000  000115d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014019  00000000  00000000  00011c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4b8  00000000  00000000  00025c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aba0  00000000  00000000  0003113a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abcda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000224c  00000000  00000000  000abd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000adf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d74 	.word	0x08003d74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003d74 	.word	0x08003d74

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <FORMAT_ADC_DATA>:
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void FORMAT_ADC_DATA(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
	for(int i = 0; i < ROWS; i++){
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	e00c      	b.n	8000496 <FORMAT_ADC_DATA+0x26>
		sprintf(buffer, "%d,", (int)adc[i]);
 800047c:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <FORMAT_ADC_DATA+0x38>)
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	58d3      	ldr	r3, [r2, r3]
 8000484:	001a      	movs	r2, r3
 8000486:	4909      	ldr	r1, [pc, #36]	@ (80004ac <FORMAT_ADC_DATA+0x3c>)
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <FORMAT_ADC_DATA+0x40>)
 800048a:	0018      	movs	r0, r3
 800048c:	f002 ffd6 	bl	800343c <siprintf>
	for(int i = 0; i < ROWS; i++){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3301      	adds	r3, #1
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b3b      	cmp	r3, #59	@ 0x3b
 800049a:	ddef      	ble.n	800047c <FORMAT_ADC_DATA+0xc>
	}
}
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	200001a4 	.word	0x200001a4
 80004ac:	08003d8c 	.word	0x08003d8c
 80004b0:	20000298 	.word	0x20000298

080004b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	adc_read = HAL_ADC_GetValue(hadc);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fd56 	bl	8000f70 <HAL_ADC_GetValue>
 80004c4:	0003      	movs	r3, r0
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <HAL_ADC_ConvCpltCallback+0x58>)
 80004ca:	801a      	strh	r2, [r3, #0]

	if(flag == 0){
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <HAL_ADC_ConvCpltCallback+0x5c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d117      	bne.n	8000504 <HAL_ADC_ConvCpltCallback+0x50>
		adc[i] = adc_read;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <HAL_ADC_ConvCpltCallback+0x58>)
 80004d6:	8819      	ldrh	r1, [r3, #0]
 80004d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x60>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	001a      	movs	r2, r3
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x64>)
 80004e0:	0092      	lsls	r2, r2, #2
 80004e2:	50d1      	str	r1, [r2, r3]
		i++;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x60>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x60>)
 80004ee:	701a      	strb	r2, [r3, #0]

		if(i > 59) {
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x60>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80004f6:	d905      	bls.n	8000504 <HAL_ADC_ConvCpltCallback+0x50>
			i = 0;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x60>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80004fe:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000294 	.word	0x20000294
 8000510:	20000297 	.word	0x20000297
 8000514:	20000296 	.word	0x20000296
 8000518:	200001a4 	.word	0x200001a4

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fad0 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f82a 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f94c 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 f92c 	bl	8000788 <MX_DMA_Init>
  MX_ADC_Init();
 8000530:	f000 f896 	bl	8000660 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000534:	f000 f8f8 	bl	8000728 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc);
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <main+0x50>)
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fca6 	bl	8000e8c <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
{

	  if(flag == 1){
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <main+0x54>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d1fb      	bne.n	8000540 <main+0x24>
		  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <main+0x58>)
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff fddc 	bl	8000108 <strlen>
 8000550:	0003      	movs	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	2301      	movs	r3, #1
 8000556:	425b      	negs	r3, r3
 8000558:	4906      	ldr	r1, [pc, #24]	@ (8000574 <main+0x58>)
 800055a:	4807      	ldr	r0, [pc, #28]	@ (8000578 <main+0x5c>)
 800055c:	f002 fa1a 	bl	8002994 <HAL_UART_Transmit>
		  FORMAT_ADC_DATA();;
 8000560:	f7ff ff86 	bl	8000470 <FORMAT_ADC_DATA>
		  flag = 0;
 8000564:	4b02      	ldr	r3, [pc, #8]	@ (8000570 <main+0x54>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
	  if(flag == 1){
 800056a:	e7e9      	b.n	8000540 <main+0x24>
 800056c:	20000078 	.word	0x20000078
 8000570:	20000297 	.word	0x20000297
 8000574:	20000298 	.word	0x20000298
 8000578:	2000011c 	.word	0x2000011c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b09d      	sub	sp, #116	@ 0x74
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	2438      	movs	r4, #56	@ 0x38
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2338      	movs	r3, #56	@ 0x38
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 ff77 	bl	8003480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	2324      	movs	r3, #36	@ 0x24
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	0018      	movs	r0, r3
 8000598:	2314      	movs	r3, #20
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 ff6f 	bl	8003480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	2324      	movs	r3, #36	@ 0x24
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 ff68 	bl	8003480 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <SystemClock_Config+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a29      	ldr	r2, [pc, #164]	@ (800065c <SystemClock_Config+0xe0>)
 80005b6:	401a      	ands	r2, r3
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <SystemClock_Config+0xdc>)
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	0109      	lsls	r1, r1, #4
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2210      	movs	r2, #16
 80005d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	02d2      	lsls	r2, r2, #11
 80005e8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2280      	movs	r2, #128	@ 0x80
 80005ee:	03d2      	lsls	r2, r2, #15
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fa23 	bl	8001a40 <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005fe:	f000 f8f7 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	2124      	movs	r1, #36	@ 0x24
 8000604:	187b      	adds	r3, r7, r1
 8000606:	220f      	movs	r2, #15
 8000608:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2203      	movs	r2, #3
 800060e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2101      	movs	r1, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fdce 	bl	80021c8 <HAL_RCC_ClockConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000630:	f000 f8de 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000634:	003b      	movs	r3, r7
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800063a:	003b      	movs	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	003b      	movs	r3, r7
 8000642:	0018      	movs	r0, r3
 8000644:	f001 ffc4 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800064c:	f000 f8d0 	bl	80007f0 <Error_Handler>
  }
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b01d      	add	sp, #116	@ 0x74
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40007000 	.word	0x40007000
 800065c:	ffffe7ff 	.word	0xffffe7ff

08000660 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	003b      	movs	r3, r7
 8000668:	0018      	movs	r0, r3
 800066a:	2308      	movs	r3, #8
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 ff06 	bl	8003480 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <MX_ADC_Init+0xc0>)
 8000676:	4a2b      	ldr	r2, [pc, #172]	@ (8000724 <MX_ADC_Init+0xc4>)
 8000678:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800067a:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_ADC_Init+0xc0>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000680:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_ADC_Init+0xc0>)
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	05d2      	lsls	r2, r2, #23
 8000686:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <MX_ADC_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_ADC_Init+0xc0>)
 8000690:	2207      	movs	r2, #7
 8000692:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_ADC_Init+0xc0>)
 8000696:	2201      	movs	r2, #1
 8000698:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_ADC_Init+0xc0>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006a2:	2220      	movs	r2, #32
 80006a4:	2101      	movs	r1, #1
 80006a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006aa:	2221      	movs	r2, #33	@ 0x21
 80006ac:	2100      	movs	r1, #0
 80006ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006b8:	22c2      	movs	r2, #194	@ 0xc2
 80006ba:	32ff      	adds	r2, #255	@ 0xff
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006c0:	222c      	movs	r2, #44	@ 0x2c
 80006c2:	2101      	movs	r1, #1
 80006c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_ADC_Init+0xc0>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fa5c 	bl	8000ba4 <HAL_ADC_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006f0:	f000 f87e 	bl	80007f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	0152      	lsls	r2, r2, #5
 8000700:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000702:	003a      	movs	r2, r7
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_ADC_Init+0xc0>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fcf7 	bl	80010fc <HAL_ADC_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000712:	f000 f86d 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000078 	.word	0x20000078
 8000724:	40012400 	.word	0x40012400

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <MX_USART1_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 8000734:	22e1      	movs	r2, #225	@ 0xe1
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <MX_USART1_UART_Init+0x58>)
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f8bd 	bl	80028ec <HAL_UART_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f83b 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000011c 	.word	0x2000011c
 8000784:	40013800 	.word	0x40013800

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x38>)
 8000790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x38>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	631a      	str	r2, [r3, #48]	@ 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x38>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2009      	movs	r0, #9
 80007ac:	f000 fe7a 	bl	80014a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b0:	2009      	movs	r0, #9
 80007b2:	f000 fe8c 	bl	80014ce <HAL_NVIC_EnableIRQ>

}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_GPIO_Init+0x28>)
 80007cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007ce:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_GPIO_Init+0x28>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007d6:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <MX_GPIO_Init+0x28>)
 80007d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007da:	2201      	movs	r2, #1
 80007dc:	4013      	ands	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <HAL_MspInit+0x24>)
 8000802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x24>)
 8000806:	2101      	movs	r1, #1
 8000808:	430a      	orrs	r2, r1
 800080a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <HAL_MspInit+0x24>)
 800080e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000810:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <HAL_MspInit+0x24>)
 8000812:	2180      	movs	r1, #128	@ 0x80
 8000814:	0549      	lsls	r1, r1, #21
 8000816:	430a      	orrs	r2, r1
 8000818:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b089      	sub	sp, #36	@ 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	240c      	movs	r4, #12
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	2314      	movs	r3, #20
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f002 fe22 	bl	8003480 <memset>
  if(hadc->Instance==ADC1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d155      	bne.n	80008f2 <HAL_ADC_MspInit+0xce>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000846:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <HAL_ADC_MspInit+0xdc>)
 8000848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084a:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <HAL_ADC_MspInit+0xdc>)
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	0089      	lsls	r1, r1, #2
 8000850:	430a      	orrs	r2, r1
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <HAL_ADC_MspInit+0xdc>)
 8000856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000858:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <HAL_ADC_MspInit+0xdc>)
 800085a:	2101      	movs	r1, #1
 800085c:	430a      	orrs	r2, r1
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <HAL_ADC_MspInit+0xdc>)
 8000862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000864:	2201      	movs	r2, #1
 8000866:	4013      	ands	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2203      	movs	r2, #3
 8000876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	193a      	adds	r2, r7, r4
 8000880:	23a0      	movs	r3, #160	@ 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 ff64 	bl	8001754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 800088e:	4a1e      	ldr	r2, [pc, #120]	@ (8000908 <HAL_ADC_MspInit+0xe4>)
 8000890:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008a4:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	00d2      	lsls	r2, r2, #3
 80008b8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80008ba:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008bc:	2220      	movs	r2, #32
 80008be:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fe1d 	bl	8001508 <HAL_DMA_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80008d2:	f7ff ff8d 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_ADC_MspInit+0xe0>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	200c      	movs	r0, #12
 80008e8:	f000 fddc 	bl	80014a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80008ec:	200c      	movs	r0, #12
 80008ee:	f000 fdee 	bl	80014ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b009      	add	sp, #36	@ 0x24
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	40012400 	.word	0x40012400
 8000900:	40021000 	.word	0x40021000
 8000904:	200000d4 	.word	0x200000d4
 8000908:	40020008 	.word	0x40020008

0800090c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b089      	sub	sp, #36	@ 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	240c      	movs	r4, #12
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fdae 	bl	8003480 <memset>
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a18      	ldr	r2, [pc, #96]	@ (800098c <HAL_UART_MspInit+0x80>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12a      	bne.n	8000984 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_UART_MspInit+0x84>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <HAL_UART_MspInit+0x84>)
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	01c9      	lsls	r1, r1, #7
 8000938:	430a      	orrs	r2, r1
 800093a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_UART_MspInit+0x84>)
 800093e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <HAL_UART_MspInit+0x84>)
 8000942:	2101      	movs	r1, #1
 8000944:	430a      	orrs	r2, r1
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <HAL_UART_MspInit+0x84>)
 800094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094c:	2201      	movs	r2, #1
 800094e:	4013      	ands	r3, r2
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	22c0      	movs	r2, #192	@ 0xc0
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	0021      	movs	r1, r4
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2202      	movs	r2, #2
 8000962:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2203      	movs	r2, #3
 800096e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2204      	movs	r2, #4
 8000974:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	187a      	adds	r2, r7, r1
 8000978:	23a0      	movs	r3, #160	@ 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fee8 	bl	8001754 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b009      	add	sp, #36	@ 0x24
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	40013800 	.word	0x40013800
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	e7fd      	b.n	8000998 <NMI_Handler+0x4>

0800099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	e7fd      	b.n	80009a0 <HardFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8d6 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <DMA1_Channel1_IRQHandler+0x14>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fe12 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	200000d4 	.word	0x200000d4

080009e0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <ADC1_COMP_IRQHandler+0x14>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 face 	bl	8000f88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	20000078 	.word	0x20000078

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 fd32 	bl	8003490 <__errno>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	425b      	negs	r3, r3
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	18d2      	adds	r2, r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <_sbrk+0x64>)
 8000a48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b006      	add	sp, #24
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20002000 	.word	0x20002000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000698 	.word	0x20000698
 8000a60:	200007e8 	.word	0x200007e8

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a74:	f7ff fff6 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f002 fcfd 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd3b 	bl	800051c <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ab4:	08003e40 	.word	0x08003e40
  ldr r2, =_sbss
 8000ab8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000abc:	200007e8 	.word	0x200007e8

08000ac0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <DMA1_Channel2_3_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_Init+0x3c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_Init+0x3c>)
 8000ad6:	2140      	movs	r1, #64	@ 0x40
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f811 	bl	8000b04 <HAL_InitTick>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e001      	b.n	8000af2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aee:	f7ff fe85 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	40022000 	.word	0x40022000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_InitTick+0x5c>)
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_InitTick+0x60>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	23fa      	movs	r3, #250	@ 0xfa
 8000b18:	0098      	lsls	r0, r3, #2
 8000b1a:	f7ff fb07 	bl	800012c <__udivsi3>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	0019      	movs	r1, r3
 8000b22:	0020      	movs	r0, r4
 8000b24:	f7ff fb02 	bl	800012c <__udivsi3>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fcdf 	bl	80014ee <HAL_SYSTICK_Config>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e00f      	b.n	8000b58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d80b      	bhi.n	8000b56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fcac 	bl	80014a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_InitTick+0x64>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	2000069c 	.word	0x2000069c

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	@ (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	2000069c 	.word	0x2000069c

08000ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e159      	b.n	8000e6a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10a      	bne.n	8000bd4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2250      	movs	r2, #80	@ 0x50
 8000bc8:	2100      	movs	r1, #0
 8000bca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fe28 	bl	8000824 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bd8:	2210      	movs	r2, #16
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b10      	cmp	r3, #16
 8000bde:	d005      	beq.n	8000bec <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2204      	movs	r2, #4
 8000be8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000bea:	d00b      	beq.n	8000c04 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2250      	movs	r2, #80	@ 0x50
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e132      	b.n	8000e6a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c08:	4a9a      	ldr	r2, [pc, #616]	@ (8000e74 <HAL_ADC_Init+0x2d0>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_ADC_Init+0x90>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d101      	bne.n	8000c34 <HAL_ADC_Init+0x90>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <HAL_ADC_Init+0x92>
 8000c34:	2300      	movs	r3, #0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d149      	bne.n	8000cce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	23c0      	movs	r3, #192	@ 0xc0
 8000c40:	061b      	lsls	r3, r3, #24
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d00b      	beq.n	8000c5e <HAL_ADC_Init+0xba>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	@ 0x80
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d005      	beq.n	8000c5e <HAL_ADC_Init+0xba>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	061b      	lsls	r3, r3, #24
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d111      	bne.n	8000c82 <HAL_ADC_Init+0xde>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	0892      	lsrs	r2, r2, #2
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6919      	ldr	r1, [r3, #16]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	e014      	b.n	8000cac <HAL_ADC_Init+0x108>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	0092      	lsls	r2, r2, #2
 8000c8e:	0892      	lsrs	r2, r2, #2
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	4b79      	ldr	r3, [pc, #484]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b78      	ldr	r3, [pc, #480]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000c98:	4978      	ldr	r1, [pc, #480]	@ (8000e7c <HAL_ADC_Init+0x2d8>)
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	4b76      	ldr	r3, [pc, #472]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	4b74      	ldr	r3, [pc, #464]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2118      	movs	r1, #24
 8000cb8:	438a      	bics	r2, r1
 8000cba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68d9      	ldr	r1, [r3, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000cce:	4b6a      	ldr	r3, [pc, #424]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b69      	ldr	r3, [pc, #420]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000cd4:	496a      	ldr	r1, [pc, #424]	@ (8000e80 <HAL_ADC_Init+0x2dc>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000cda:	4b67      	ldr	r3, [pc, #412]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce2:	065a      	lsls	r2, r3, #25
 8000ce4:	4b64      	ldr	r3, [pc, #400]	@ (8000e78 <HAL_ADC_Init+0x2d4>)
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	055b      	lsls	r3, r3, #21
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d108      	bne.n	8000d0a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2180      	movs	r1, #128	@ 0x80
 8000d04:	0549      	lsls	r1, r1, #21
 8000d06:	430a      	orrs	r2, r1
 8000d08:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	495b      	ldr	r1, [pc, #364]	@ (8000e84 <HAL_ADC_Init+0x2e0>)
 8000d16:	400a      	ands	r2, r1
 8000d18:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68d9      	ldr	r1, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d101      	bne.n	8000d30 <HAL_ADC_Init+0x18c>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e000      	b.n	8000d32 <HAL_ADC_Init+0x18e>
 8000d30:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d32:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2020      	movs	r0, #32
 8000d38:	5c1b      	ldrb	r3, [r3, r0]
 8000d3a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d3c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	202c      	movs	r0, #44	@ 0x2c
 8000d42:	5c1b      	ldrb	r3, [r3, r0]
 8000d44:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d46:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000d54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d5c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d6a:	23c2      	movs	r3, #194	@ 0xc2
 8000d6c:	33ff      	adds	r3, #255	@ 0xff
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d00b      	beq.n	8000d8a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68d9      	ldr	r1, [r3, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2221      	movs	r2, #33	@ 0x21
 8000d8e:	5c9b      	ldrb	r3, [r3, r2]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d11a      	bne.n	8000dca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2220      	movs	r2, #32
 8000d98:	5c9b      	ldrb	r3, [r3, r2]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d109      	bne.n	8000db2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	0249      	lsls	r1, r1, #9
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	e00b      	b.n	8000dca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000db6:	2220      	movs	r2, #32
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d11f      	bne.n	8000e12 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	492a      	ldr	r1, [pc, #168]	@ (8000e88 <HAL_ADC_Init+0x2e4>)
 8000dde:	400a      	ands	r2, r1
 8000de0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6919      	ldr	r1, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000df0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000df6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	e00e      	b.n	8000e30 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d107      	bne.n	8000e30 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	438a      	bics	r2, r1
 8000e2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2107      	movs	r1, #7
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6959      	ldr	r1, [r3, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4393      	bics	r3, r2
 8000e60:	2201      	movs	r2, #1
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	fffffefd 	.word	0xfffffefd
 8000e78:	40012708 	.word	0x40012708
 8000e7c:	ffc3ffff 	.word	0xffc3ffff
 8000e80:	fdffffff 	.word	0xfdffffff
 8000e84:	fffe0219 	.word	0xfffe0219
 8000e88:	fffffc03 	.word	0xfffffc03

08000e8c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	230f      	movs	r3, #15
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d156      	bne.n	8000f56 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2250      	movs	r2, #80	@ 0x50
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Start_IT+0x2a>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e056      	b.n	8000f64 <HAL_ADC_Start_IT+0xd8>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2250      	movs	r2, #80	@ 0x50
 8000eba:	2101      	movs	r1, #1
 8000ebc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d007      	beq.n	8000ed6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	18fc      	adds	r4, r7, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 f9b5 	bl	800123c <ADC_Enable>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d13e      	bne.n	8000f5e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ee4:	4a21      	ldr	r2, [pc, #132]	@ (8000f6c <HAL_ADC_Start_IT+0xe0>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	0052      	lsls	r2, r2, #1
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2250      	movs	r2, #80	@ 0x50
 8000efc:	2100      	movs	r1, #0
 8000efe:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	221c      	movs	r2, #28
 8000f06:	601a      	str	r2, [r3, #0]

      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      switch (hadc->Init.EOCSelection)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d110      	bne.n	8000f32 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2118      	movs	r1, #24
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	605a      	str	r2, [r3, #4]
          break;
 8000f30:	e008      	b.n	8000f44 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	211c      	movs	r1, #28
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
          break;
 8000f42:	46c0      	nop			@ (mov r8, r8)

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2104      	movs	r1, #4
 8000f50:	430a      	orrs	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e003      	b.n	8000f5e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	781b      	ldrb	r3, [r3, #0]
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b005      	add	sp, #20
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	fffff0fe 	.word	0xfffff0fe

08000f70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d003      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0x28>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2204      	movs	r2, #4
 8000fac:	4013      	ands	r3, r2
 8000fae:	d107      	bne.n	8000fc0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000fb6:	d04e      	beq.n	8001056 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2208      	movs	r2, #8
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d04a      	beq.n	8001056 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d106      	bne.n	8000fd8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fce:	2280      	movs	r2, #128	@ 0x80
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	23c0      	movs	r3, #192	@ 0xc0
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d12b      	bne.n	800103e <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d126      	bne.n	800103e <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d022      	beq.n	800103e <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2204      	movs	r2, #4
 8001000:	4013      	ands	r3, r2
 8001002:	d110      	bne.n	8001026 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	210c      	movs	r1, #12
 8001010:	438a      	bics	r2, r1
 8001012:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001018:	4a2f      	ldr	r2, [pc, #188]	@ (80010d8 <HAL_ADC_IRQHandler+0x150>)
 800101a:	4013      	ands	r3, r2
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	655a      	str	r2, [r3, #84]	@ 0x54
 8001024:	e00b      	b.n	800103e <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102a:	2220      	movs	r2, #32
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	2201      	movs	r2, #1
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fa37 	bl	80004b4 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d003      	beq.n	8001056 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	4013      	ands	r3, r2
 800105c:	d012      	beq.n	8001084 <HAL_ADC_IRQHandler+0xfc>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	4013      	ands	r3, r2
 8001064:	d00e      	beq.n	8001084 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	0252      	lsls	r2, r2, #9
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0018      	movs	r0, r3
 8001078:	f000 f830 	bl	80010dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2210      	movs	r2, #16
 8001088:	4013      	ands	r3, r2
 800108a:	d020      	beq.n	80010ce <HAL_ADC_IRQHandler+0x146>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2210      	movs	r2, #16
 8001090:	4013      	ands	r3, r2
 8001092:	d01c      	beq.n	80010ce <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10d      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	2202      	movs	r2, #2
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2210      	movs	r2, #16
 80010bc:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 f813 	bl	80010ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2210      	movs	r2, #16
 80010cc:	601a      	str	r2, [r3, #0]
  }

}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	fffffefe 	.word	0xfffffefe

080010dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2250      	movs	r2, #80	@ 0x50
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x18>
 8001110:	2302      	movs	r3, #2
 8001112:	e085      	b.n	8001220 <HAL_ADC_ConfigChannel+0x124>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2250      	movs	r2, #80	@ 0x50
 8001118:	2101      	movs	r1, #1
 800111a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2204      	movs	r2, #4
 8001124:	4013      	ands	r3, r2
 8001126:	d00b      	beq.n	8001140 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112c:	2220      	movs	r2, #32
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2250      	movs	r2, #80	@ 0x50
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e06f      	b.n	8001220 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a38      	ldr	r2, [pc, #224]	@ (8001228 <HAL_ADC_ConfigChannel+0x12c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d035      	beq.n	80011b6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	035b      	lsls	r3, r3, #13
 8001156:	0b5a      	lsrs	r2, r3, #13
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	02db      	lsls	r3, r3, #11
 8001168:	4013      	ands	r3, r2
 800116a:	d009      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 8001172:	2180      	movs	r1, #128	@ 0x80
 8001174:	0409      	lsls	r1, r1, #16
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800117a:	200a      	movs	r0, #10
 800117c:	f000 f8c6 	bl	800130c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	d006      	beq.n	800119a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800118c:	4b27      	ldr	r3, [pc, #156]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	03c9      	lsls	r1, r1, #15
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	4013      	ands	r3, r2
 80011a4:	d037      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0449      	lsls	r1, r1, #17
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e02f      	b.n	8001216 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	035b      	lsls	r3, r3, #13
 80011c2:	0b5b      	lsrs	r3, r3, #13
 80011c4:	43d9      	mvns	r1, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	400a      	ands	r2, r1
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	02db      	lsls	r3, r3, #11
 80011d6:	4013      	ands	r3, r2
 80011d8:	d005      	beq.n	80011e6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 80011e0:	4913      	ldr	r1, [pc, #76]	@ (8001230 <HAL_ADC_ConfigChannel+0x134>)
 80011e2:	400a      	ands	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	029b      	lsls	r3, r3, #10
 80011ee:	4013      	ands	r3, r2
 80011f0:	d005      	beq.n	80011fe <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 80011f8:	490e      	ldr	r1, [pc, #56]	@ (8001234 <HAL_ADC_ConfigChannel+0x138>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	4013      	ands	r3, r2
 8001208:	d005      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <HAL_ADC_ConfigChannel+0x130>)
 8001210:	4909      	ldr	r1, [pc, #36]	@ (8001238 <HAL_ADC_ConfigChannel+0x13c>)
 8001212:	400a      	ands	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2250      	movs	r2, #80	@ 0x50
 800121a:	2100      	movs	r1, #0
 800121c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	00001001 	.word	0x00001001
 800122c:	40012708 	.word	0x40012708
 8001230:	ff7fffff 	.word	0xff7fffff
 8001234:	ffbfffff 	.word	0xffbfffff
 8001238:	feffffff 	.word	0xfeffffff

0800123c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <ADC_Enable+0x2c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <ADC_Enable+0x2c>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <ADC_Enable+0x2e>
 8001268:	2300      	movs	r3, #0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d146      	bne.n	80012fc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a24      	ldr	r2, [pc, #144]	@ (8001308 <ADC_Enable+0xcc>)
 8001276:	4013      	ands	r3, r2
 8001278:	d00d      	beq.n	8001296 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	2210      	movs	r2, #16
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	2201      	movs	r2, #1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e033      	b.n	80012fe <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 f830 	bl	800130c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ac:	f7ff fc70 	bl	8000b90 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012b4:	e01b      	b.n	80012ee <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012b6:	f7ff fc6b 	bl	8000b90 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b0a      	cmp	r3, #10
 80012c2:	d914      	bls.n	80012ee <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d00d      	beq.n	80012ee <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d6:	2210      	movs	r2, #16
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e2:	2201      	movs	r2, #1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e007      	b.n	80012fe <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d1dc      	bne.n	80012b6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	80000017 	.word	0x80000017

0800130c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <ADC_DelayMicroSecond+0x38>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	490b      	ldr	r1, [pc, #44]	@ (8001348 <ADC_DelayMicroSecond+0x3c>)
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe ff06 	bl	800012c <__udivsi3>
 8001320:	0003      	movs	r3, r0
 8001322:	001a      	movs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4353      	muls	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800132a:	e002      	b.n	8001332 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <ADC_DelayMicroSecond+0x20>
  }
}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	20000000 	.word	0x20000000
 8001348:	000f4240 	.word	0x000f4240

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b7f      	cmp	r3, #127	@ 0x7f
 800135e:	d809      	bhi.n	8001374 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	231f      	movs	r3, #31
 8001368:	401a      	ands	r2, r3
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_EnableIRQ+0x30>)
 800136c:	2101      	movs	r1, #1
 800136e:	4091      	lsls	r1, r2
 8001370:	000a      	movs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
  }
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b7f      	cmp	r3, #127	@ 0x7f
 8001394:	d828      	bhi.n	80013e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001396:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <__NVIC_SetPriority+0xd4>)
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	33c0      	adds	r3, #192	@ 0xc0
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	589b      	ldr	r3, [r3, r2]
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	0011      	movs	r1, r2
 80013ac:	2203      	movs	r2, #3
 80013ae:	400a      	ands	r2, r1
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	21ff      	movs	r1, #255	@ 0xff
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	43d2      	mvns	r2, r2
 80013ba:	401a      	ands	r2, r3
 80013bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	22ff      	movs	r2, #255	@ 0xff
 80013c4:	401a      	ands	r2, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	0018      	movs	r0, r3
 80013cc:	2303      	movs	r3, #3
 80013ce:	4003      	ands	r3, r0
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	481f      	ldr	r0, [pc, #124]	@ (8001454 <__NVIC_SetPriority+0xd4>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	430a      	orrs	r2, r1
 80013e0:	33c0      	adds	r3, #192	@ 0xc0
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013e6:	e031      	b.n	800144c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <__NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0019      	movs	r1, r3
 80013f0:	230f      	movs	r3, #15
 80013f2:	400b      	ands	r3, r1
 80013f4:	3b08      	subs	r3, #8
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3306      	adds	r3, #6
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1dfa      	adds	r2, r7, #7
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	0011      	movs	r1, r2
 8001408:	2203      	movs	r2, #3
 800140a:	400a      	ands	r2, r1
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	21ff      	movs	r1, #255	@ 0xff
 8001410:	4091      	lsls	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	43d2      	mvns	r2, r2
 8001416:	401a      	ands	r2, r3
 8001418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	22ff      	movs	r2, #255	@ 0xff
 8001420:	401a      	ands	r2, r3
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	2303      	movs	r3, #3
 800142a:	4003      	ands	r3, r0
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <__NVIC_SetPriority+0xd8>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	001c      	movs	r4, r3
 8001438:	230f      	movs	r3, #15
 800143a:	4023      	ands	r3, r4
 800143c:	3b08      	subs	r3, #8
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	3306      	adds	r3, #6
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	18c3      	adds	r3, r0, r3
 8001448:	3304      	adds	r3, #4
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b003      	add	sp, #12
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	045b      	lsls	r3, r3, #17
 800146c:	429a      	cmp	r2, r3
 800146e:	d301      	bcc.n	8001474 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001470:	2301      	movs	r3, #1
 8001472:	e010      	b.n	8001496 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <SysTick_Config+0x44>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	3a01      	subs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147c:	2301      	movs	r3, #1
 800147e:	425b      	negs	r3, r3
 8001480:	2103      	movs	r1, #3
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff ff7c 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x44>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	210f      	movs	r1, #15
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	1c02      	adds	r2, r0, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	0011      	movs	r1, r2
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	0002      	movs	r2, r0
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff33 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff ffaf 	bl	800145c <SysTick_Config>
 80014fe:	0003      	movs	r3, r0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e061      	b.n	80015de <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a32      	ldr	r2, [pc, #200]	@ (80015e8 <HAL_DMA_Init+0xe0>)
 8001520:	4694      	mov	ip, r2
 8001522:	4463      	add	r3, ip
 8001524:	2114      	movs	r1, #20
 8001526:	0018      	movs	r0, r3
 8001528:	f7fe fe00 	bl	800012c <__udivsi3>
 800152c:	0003      	movs	r3, r0
 800152e:	009a      	lsls	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <HAL_DMA_Init+0xe4>)
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2225      	movs	r2, #37	@ 0x25
 800153e:	2102      	movs	r1, #2
 8001540:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <HAL_DMA_Init+0xe8>)
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800155a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	429a      	cmp	r2, r3
 8001592:	d018      	beq.n	80015c6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_DMA_Init+0xec>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	211c      	movs	r1, #28
 800159e:	400b      	ands	r3, r1
 80015a0:	210f      	movs	r1, #15
 80015a2:	4099      	lsls	r1, r3
 80015a4:	000b      	movs	r3, r1
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_DMA_Init+0xec>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_DMA_Init+0xec>)
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	201c      	movs	r0, #28
 80015bc:	4003      	ands	r3, r0
 80015be:	409a      	lsls	r2, r3
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_DMA_Init+0xec>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2225      	movs	r2, #37	@ 0x25
 80015d0:	2101      	movs	r1, #1
 80015d2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2224      	movs	r2, #36	@ 0x24
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	bffdfff8 	.word	0xbffdfff8
 80015ec:	40020000 	.word	0x40020000
 80015f0:	ffff800f 	.word	0xffff800f
 80015f4:	400200a8 	.word	0x400200a8

080015f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001614:	221c      	movs	r2, #28
 8001616:	4013      	ands	r3, r2
 8001618:	2204      	movs	r2, #4
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	d026      	beq.n	8001672 <HAL_DMA_IRQHandler+0x7a>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d022      	beq.n	8001672 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2220      	movs	r2, #32
 8001634:	4013      	ands	r3, r2
 8001636:	d107      	bne.n	8001648 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2104      	movs	r1, #4
 8001644:	438a      	bics	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	221c      	movs	r2, #28
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	2104      	movs	r1, #4
 8001656:	4091      	lsls	r1, r2
 8001658:	000a      	movs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <HAL_DMA_IRQHandler+0x6e>
 8001664:	e071      	b.n	800174a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	0010      	movs	r0, r2
 800166e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001670:	e06b      	b.n	800174a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	221c      	movs	r2, #28
 8001678:	4013      	ands	r3, r2
 800167a:	2202      	movs	r2, #2
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	d02d      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xea>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d029      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2220      	movs	r2, #32
 8001696:	4013      	ands	r3, r2
 8001698:	d10b      	bne.n	80016b2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	210a      	movs	r1, #10
 80016a6:	438a      	bics	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2225      	movs	r2, #37	@ 0x25
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	221c      	movs	r2, #28
 80016b8:	401a      	ands	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	2102      	movs	r1, #2
 80016c0:	4091      	lsls	r1, r2
 80016c2:	000a      	movs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2224      	movs	r2, #36	@ 0x24
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d039      	beq.n	800174a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	0010      	movs	r0, r2
 80016de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016e0:	e033      	b.n	800174a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	221c      	movs	r2, #28
 80016e8:	4013      	ands	r3, r2
 80016ea:	2208      	movs	r2, #8
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	d02a      	beq.n	800174c <HAL_DMA_IRQHandler+0x154>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2208      	movs	r2, #8
 80016fa:	4013      	ands	r3, r2
 80016fc:	d026      	beq.n	800174c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	210e      	movs	r1, #14
 800170a:	438a      	bics	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	221c      	movs	r2, #28
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	2101      	movs	r1, #1
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2225      	movs	r2, #37	@ 0x25
 800172c:	2101      	movs	r1, #1
 800172e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	@ 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	0010      	movs	r0, r2
 8001748:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46c0      	nop			@ (mov r8, r8)
}
 800174e:	46bd      	mov	sp, r7
 8001750:	b004      	add	sp, #16
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800176a:	e14f      	b.n	8001a0c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4091      	lsls	r1, r2
 8001776:	000a      	movs	r2, r1
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d100      	bne.n	8001784 <HAL_GPIO_Init+0x30>
 8001782:	e140      	b.n	8001a06 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	2b01      	cmp	r3, #1
 800178e:	d005      	beq.n	800179c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001798:	2b02      	cmp	r3, #2
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	43da      	mvns	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b03      	cmp	r3, #3
 8001808:	d017      	beq.n	800183a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	4013      	ands	r3, r2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d123      	bne.n	800188e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	58d3      	ldr	r3, [r2, r3]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2207      	movs	r2, #7
 8001858:	4013      	ands	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2107      	movs	r1, #7
 8001872:	400b      	ands	r3, r1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	401a      	ands	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	23c0      	movs	r3, #192	@ 0xc0
 80018c8:	029b      	lsls	r3, r3, #10
 80018ca:	4013      	ands	r3, r2
 80018cc:	d100      	bne.n	80018d0 <HAL_GPIO_Init+0x17c>
 80018ce:	e09a      	b.n	8001a06 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d0:	4b54      	ldr	r3, [pc, #336]	@ (8001a24 <HAL_GPIO_Init+0x2d0>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d4:	4b53      	ldr	r3, [pc, #332]	@ (8001a24 <HAL_GPIO_Init+0x2d0>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018dc:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_GPIO_Init+0x2d4>)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	589b      	ldr	r3, [r3, r2]
 80018e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4013      	ands	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0013      	movs	r3, r2
 80018f8:	43da      	mvns	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	23a0      	movs	r3, #160	@ 0xa0
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	429a      	cmp	r2, r3
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x1ea>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a47      	ldr	r2, [pc, #284]	@ (8001a2c <HAL_GPIO_Init+0x2d8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x1e6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a46      	ldr	r2, [pc, #280]	@ (8001a30 <HAL_GPIO_Init+0x2dc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x1e2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a45      	ldr	r2, [pc, #276]	@ (8001a34 <HAL_GPIO_Init+0x2e0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x1de>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a44      	ldr	r2, [pc, #272]	@ (8001a38 <HAL_GPIO_Init+0x2e4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x1da>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x1ec>
 800192e:	2306      	movs	r3, #6
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x1ec>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x1ec>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x1ec>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x1ec>
 800193e:	2300      	movs	r3, #0
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	2103      	movs	r1, #3
 8001944:	400a      	ands	r2, r1
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	@ (8001a28 <HAL_GPIO_Init+0x2d4>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b37      	ldr	r3, [pc, #220]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43da      	mvns	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	035b      	lsls	r3, r3, #13
 8001976:	4013      	ands	r3, r2
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001988:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43da      	mvns	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	039b      	lsls	r3, r3, #14
 80019a0:	4013      	ands	r3, r2
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ac:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019b2:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	029b      	lsls	r3, r3, #10
 80019ca:	4013      	ands	r3, r2
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43da      	mvns	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	4013      	ands	r3, r2
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	1e13      	subs	r3, r2, #0
 8001a16:	d000      	beq.n	8001a1a <HAL_GPIO_Init+0x2c6>
 8001a18:	e6a8      	b.n	800176c <HAL_GPIO_Init+0x18>
  }
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b006      	add	sp, #24
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	50000400 	.word	0x50000400
 8001a30:	50000800 	.word	0x50000800
 8001a34:	50000c00 	.word	0x50000c00
 8001a38:	50001c00 	.word	0x50001c00
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f000 fbaf 	bl	80021b2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a54:	4bcf      	ldr	r3, [pc, #828]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5e:	4bcd      	ldr	r3, [pc, #820]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4013      	ands	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x36>
 8001a74:	e07e      	b.n	8001b74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d007      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x68>
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4bc1      	ldr	r3, [pc, #772]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5a>
 8001a98:	e06b      	b.n	8001b72 <HAL_RCC_OscConfig+0x132>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d167      	bne.n	8001b72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f000 fb85 	bl	80021b2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x84>
 8001ab4:	4bb7      	ldr	r3, [pc, #732]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4bb6      	ldr	r3, [pc, #728]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0249      	lsls	r1, r1, #9
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e027      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	23a0      	movs	r3, #160	@ 0xa0
 8001aca:	02db      	lsls	r3, r3, #11
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d10e      	bne.n	8001aee <HAL_RCC_OscConfig+0xae>
 8001ad0:	4bb0      	ldr	r3, [pc, #704]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4baf      	ldr	r3, [pc, #700]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	02c9      	lsls	r1, r1, #11
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	4bad      	ldr	r3, [pc, #692]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4bac      	ldr	r3, [pc, #688]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e012      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001aee:	4ba9      	ldr	r3, [pc, #676]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4ba8      	ldr	r3, [pc, #672]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001af4:	49a8      	ldr	r1, [pc, #672]	@ (8001d98 <HAL_RCC_OscConfig+0x358>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	4ba6      	ldr	r3, [pc, #664]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	025b      	lsls	r3, r3, #9
 8001b02:	4013      	ands	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4ba2      	ldr	r3, [pc, #648]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4ba1      	ldr	r3, [pc, #644]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001b0e:	49a3      	ldr	r1, [pc, #652]	@ (8001d9c <HAL_RCC_OscConfig+0x35c>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f838 	bl	8000b90 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7ff f833 	bl	8000b90 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	@ 0x64
 8001b32:	d902      	bls.n	8001b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f000 fb3c 	bl	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3a:	4b96      	ldr	r3, [pc, #600]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	4013      	ands	r3, r2
 8001b44:	d0ef      	beq.n	8001b26 <HAL_RCC_OscConfig+0xe6>
 8001b46:	e015      	b.n	8001b74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f822 	bl	8000b90 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b52:	f7ff f81d 	bl	8000b90 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	@ 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e326      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b64:	4b8b      	ldr	r3, [pc, #556]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x112>
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <HAL_RCC_OscConfig+0x140>
 8001b7e:	e08b      	b.n	8001c98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d13e      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1d0>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d13b      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b98:	4b7e      	ldr	r3, [pc, #504]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_RCC_OscConfig+0x16c>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e302      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b79      	ldr	r3, [pc, #484]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a7b      	ldr	r2, [pc, #492]	@ (8001da0 <HAL_RCC_OscConfig+0x360>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	021a      	lsls	r2, r3, #8
 8001bbc:	4b75      	ldr	r3, [pc, #468]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bc2:	4b74      	ldr	r3, [pc, #464]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2209      	movs	r2, #9
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b71      	ldr	r3, [pc, #452]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd4:	f000 fc40 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8001bd8:	0001      	movs	r1, r0
 8001bda:	4b6e      	ldr	r3, [pc, #440]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	220f      	movs	r2, #15
 8001be2:	4013      	ands	r3, r2
 8001be4:	4a6f      	ldr	r2, [pc, #444]	@ (8001da4 <HAL_RCC_OscConfig+0x364>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	000a      	movs	r2, r1
 8001bea:	40da      	lsrs	r2, r3
 8001bec:	4b6e      	ldr	r3, [pc, #440]	@ (8001da8 <HAL_RCC_OscConfig+0x368>)
 8001bee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001bf0:	4b6e      	ldr	r3, [pc, #440]	@ (8001dac <HAL_RCC_OscConfig+0x36c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2513      	movs	r5, #19
 8001bf6:	197c      	adds	r4, r7, r5
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7fe ff83 	bl	8000b04 <HAL_InitTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c02:	197b      	adds	r3, r7, r5
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d046      	beq.n	8001c98 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001c0a:	197b      	adds	r3, r7, r5
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	e2d0      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d027      	beq.n	8001c66 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c16:	4b5f      	ldr	r3, [pc, #380]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2209      	movs	r2, #9
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b5c      	ldr	r3, [pc, #368]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe ffb2 	bl	8000b90 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c32:	f7fe ffad 	bl	8000b90 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e2b6      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c44:	4b53      	ldr	r3, [pc, #332]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d0f1      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b51      	ldr	r3, [pc, #324]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a53      	ldr	r2, [pc, #332]	@ (8001da0 <HAL_RCC_OscConfig+0x360>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	021a      	lsls	r2, r3, #8
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	e018      	b.n	8001c98 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b4b      	ldr	r3, [pc, #300]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	438a      	bics	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7fe ff8d 	bl	8000b90 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7fe ff88 	bl	8000b90 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e291      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c8e:	4b41      	ldr	r3, [pc, #260]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f1      	bne.n	8001c7c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x264>
 8001ca2:	e0a1      	b.n	8001de8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d140      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001caa:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x282>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e277      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc2:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8001db0 <HAL_RCC_OscConfig+0x370>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cd0:	4b30      	ldr	r3, [pc, #192]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	0a19      	lsrs	r1, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	061a      	lsls	r2, r3, #24
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	0b5b      	lsrs	r3, r3, #13
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	0212      	lsls	r2, r2, #8
 8001cf6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	210f      	movs	r1, #15
 8001d00:	400b      	ands	r3, r1
 8001d02:	4928      	ldr	r1, [pc, #160]	@ (8001da4 <HAL_RCC_OscConfig+0x364>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d08:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_RCC_OscConfig+0x368>)
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <HAL_RCC_OscConfig+0x36c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2513      	movs	r5, #19
 8001d12:	197c      	adds	r4, r7, r5
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7fe fef5 	bl	8000b04 <HAL_InitTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d1e:	197b      	adds	r3, r7, r5
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d060      	beq.n	8001de8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001d26:	197b      	adds	r3, r7, r5
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	e242      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d03f      	beq.n	8001db4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d3a:	2180      	movs	r1, #128	@ 0x80
 8001d3c:	0049      	lsls	r1, r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff25 	bl	8000b90 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4c:	f7fe ff20 	bl	8000b90 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e229      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <HAL_RCC_OscConfig+0x370>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	0a19      	lsrs	r1, r3, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	061a      	lsls	r2, r3, #24
 8001d8c:	4b01      	ldr	r3, [pc, #4]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	e029      	b.n	8001de8 <HAL_RCC_OscConfig+0x3a8>
 8001d94:	40021000 	.word	0x40021000
 8001d98:	fffeffff 	.word	0xfffeffff
 8001d9c:	fffbffff 	.word	0xfffbffff
 8001da0:	ffffe0ff 	.word	0xffffe0ff
 8001da4:	08003d90 	.word	0x08003d90
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004
 8001db0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001db4:	4bbd      	ldr	r3, [pc, #756]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4bbc      	ldr	r3, [pc, #752]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001dba:	49bd      	ldr	r1, [pc, #756]	@ (80020b0 <HAL_RCC_OscConfig+0x670>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fee6 	bl	8000b90 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dca:	f7fe fee1 	bl	8000b90 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1ea      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ddc:	4bb3      	ldr	r3, [pc, #716]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	4013      	ands	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4bac      	ldr	r3, [pc, #688]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001dfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dfe:	4bab      	ldr	r3, [pc, #684]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fec3 	bl	8000b90 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7fe febe 	bl	8000b90 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1c7      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e22:	4ba2      	ldr	r3, [pc, #648]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f1      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3d0>
 8001e2c:	e018      	b.n	8001e60 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b9f      	ldr	r3, [pc, #636]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e32:	4b9e      	ldr	r3, [pc, #632]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	438a      	bics	r2, r1
 8001e38:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fea9 	bl	8000b90 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e44:	f7fe fea4 	bl	8000b90 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1ad      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e56:	4b95      	ldr	r3, [pc, #596]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d1f1      	bne.n	8001e44 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2204      	movs	r2, #4
 8001e66:	4013      	ands	r3, r2
 8001e68:	d100      	bne.n	8001e6c <HAL_RCC_OscConfig+0x42c>
 8001e6a:	e0ae      	b.n	8001fca <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6c:	2027      	movs	r0, #39	@ 0x27
 8001e6e:	183b      	adds	r3, r7, r0
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e74:	4b8d      	ldr	r3, [pc, #564]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d109      	bne.n	8001e94 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b8a      	ldr	r3, [pc, #552]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e84:	4b89      	ldr	r3, [pc, #548]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001e86:	2180      	movs	r1, #128	@ 0x80
 8001e88:	0549      	lsls	r1, r1, #21
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b87      	ldr	r3, [pc, #540]	@ (80020b4 <HAL_RCC_OscConfig+0x674>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d11a      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea0:	4b84      	ldr	r3, [pc, #528]	@ (80020b4 <HAL_RCC_OscConfig+0x674>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b83      	ldr	r3, [pc, #524]	@ (80020b4 <HAL_RCC_OscConfig+0x674>)
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	0049      	lsls	r1, r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7fe fe6f 	bl	8000b90 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7fe fe6a 	bl	8000b90 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	@ 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e173      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b7a      	ldr	r3, [pc, #488]	@ (80020b4 <HAL_RCC_OscConfig+0x674>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4b2>
 8001ee2:	4b72      	ldr	r3, [pc, #456]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001ee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ee6:	4b71      	ldr	r3, [pc, #452]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001ee8:	2180      	movs	r1, #128	@ 0x80
 8001eea:	0049      	lsls	r1, r1, #1
 8001eec:	430a      	orrs	r2, r1
 8001eee:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ef0:	e031      	b.n	8001f56 <HAL_RCC_OscConfig+0x516>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4d4>
 8001efa:	4b6c      	ldr	r3, [pc, #432]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001efe:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f00:	496b      	ldr	r1, [pc, #428]	@ (80020b0 <HAL_RCC_OscConfig+0x670>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f06:	4b69      	ldr	r3, [pc, #420]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f0a:	4b68      	ldr	r3, [pc, #416]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f0c:	496a      	ldr	r1, [pc, #424]	@ (80020b8 <HAL_RCC_OscConfig+0x678>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f12:	e020      	b.n	8001f56 <HAL_RCC_OscConfig+0x516>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	23a0      	movs	r3, #160	@ 0xa0
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10e      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4fe>
 8001f20:	4b62      	ldr	r3, [pc, #392]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f24:	4b61      	ldr	r3, [pc, #388]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	00c9      	lsls	r1, r1, #3
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f32:	4b5e      	ldr	r3, [pc, #376]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x516>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f42:	4b5a      	ldr	r3, [pc, #360]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f44:	495a      	ldr	r1, [pc, #360]	@ (80020b0 <HAL_RCC_OscConfig+0x670>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f4a:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f4e:	4b57      	ldr	r3, [pc, #348]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f50:	4959      	ldr	r1, [pc, #356]	@ (80020b8 <HAL_RCC_OscConfig+0x678>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fe17 	bl	8000b90 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe fe12 	bl	8000b90 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_RCC_OscConfig+0x67c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e11a      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001f7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCC_OscConfig+0x528>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe fe01 	bl	8000b90 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f92:	e009      	b.n	8001fa8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7fe fdfc 	bl	8000b90 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	4a47      	ldr	r2, [pc, #284]	@ (80020bc <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e104      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001faa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d1ef      	bne.n	8001f94 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fb4:	2327      	movs	r3, #39	@ 0x27
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001fc4:	493e      	ldr	r1, [pc, #248]	@ (80020c0 <HAL_RCC_OscConfig+0x680>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d049      	beq.n	8002068 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d026      	beq.n	800202a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b32      	ldr	r3, [pc, #200]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fec:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff4:	4b33      	ldr	r3, [pc, #204]	@ (80020c4 <HAL_RCC_OscConfig+0x684>)
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	4b32      	ldr	r3, [pc, #200]	@ (80020c4 <HAL_RCC_OscConfig+0x684>)
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	0189      	lsls	r1, r1, #6
 8001ffe:	430a      	orrs	r2, r1
 8002000:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe fdc5 	bl	8000b90 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800200c:	f7fe fdc0 	bl	8000b90 <HAL_GetTick>
 8002010:	0002      	movs	r2, r0
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0c9      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800201e:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_OscConfig+0x5cc>
 8002028:	e01e      	b.n	8002068 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8002030:	2101      	movs	r1, #1
 8002032:	438a      	bics	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	4b23      	ldr	r3, [pc, #140]	@ (80020c4 <HAL_RCC_OscConfig+0x684>)
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <HAL_RCC_OscConfig+0x684>)
 800203c:	4922      	ldr	r1, [pc, #136]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 800203e:	400a      	ands	r2, r1
 8002040:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe fda5 	bl	8000b90 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204c:	f7fe fda0 	bl	8000b90 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0a9      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800205e:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d1f1      	bne.n	800204c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d100      	bne.n	8002072 <HAL_RCC_OscConfig+0x632>
 8002070:	e09e      	b.n	80021b0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x63a>
 8002078:	e077      	b.n	800216a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	2b02      	cmp	r3, #2
 8002080:	d158      	bne.n	8002134 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_OscConfig+0x66c>)
 8002088:	4910      	ldr	r1, [pc, #64]	@ (80020cc <HAL_RCC_OscConfig+0x68c>)
 800208a:	400a      	ands	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fd7f 	bl	8000b90 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fd7a 	bl	8000b90 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d914      	bls.n	80020d0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e083      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000
 80020b0:	fffffeff 	.word	0xfffffeff
 80020b4:	40007000 	.word	0x40007000
 80020b8:	fffffbff 	.word	0xfffffbff
 80020bc:	00001388 	.word	0x00001388
 80020c0:	efffffff 	.word	0xefffffff
 80020c4:	40010000 	.word	0x40010000
 80020c8:	ffffdfff 	.word	0xffffdfff
 80020cc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020d0:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	049b      	lsls	r3, r3, #18
 80020d8:	4013      	ands	r3, r2
 80020da:	d1dd      	bne.n	8002098 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a37      	ldr	r2, [pc, #220]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f4:	431a      	orrs	r2, r3
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 8002102:	2180      	movs	r1, #128	@ 0x80
 8002104:	0449      	lsls	r1, r1, #17
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fd41 	bl	8000b90 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe fd3c 	bl	8000b90 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e045      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002126:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	049b      	lsls	r3, r3, #18
 800212e:	4013      	ands	r3, r2
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x6d4>
 8002132:	e03d      	b.n	80021b0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 800213a:	4922      	ldr	r1, [pc, #136]	@ (80021c4 <HAL_RCC_OscConfig+0x784>)
 800213c:	400a      	ands	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fd26 	bl	8000b90 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fd21 	bl	8000b90 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e02a      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800215c:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	049b      	lsls	r3, r3, #18
 8002164:	4013      	ands	r3, r2
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x70a>
 8002168:	e022      	b.n	80021b0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e01d      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_RCC_OscConfig+0x77c>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	025b      	lsls	r3, r3, #9
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	429a      	cmp	r2, r3
 800218a:	d10f      	bne.n	80021ac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	23f0      	movs	r3, #240	@ 0xf0
 8002190:	039b      	lsls	r3, r3, #14
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d107      	bne.n	80021ac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	23c0      	movs	r3, #192	@ 0xc0
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b00a      	add	sp, #40	@ 0x28
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	ff02ffff 	.word	0xff02ffff
 80021c4:	feffffff 	.word	0xfeffffff

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e128      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b96      	ldr	r3, [pc, #600]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d91e      	bls.n	8002228 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b93      	ldr	r3, [pc, #588]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	4b90      	ldr	r3, [pc, #576]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fcc8 	bl	8000b90 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002204:	e009      	b.n	800221a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe fcc3 	bl	8000b90 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	4a8a      	ldr	r2, [pc, #552]	@ (800243c <HAL_RCC_ClockConfig+0x274>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e109      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b87      	ldr	r3, [pc, #540]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002232:	4b83      	ldr	r3, [pc, #524]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	22f0      	movs	r2, #240	@ 0xf0
 8002238:	4393      	bics	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b7f      	ldr	r3, [pc, #508]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_RCC_ClockConfig+0x8a>
 8002250:	e089      	b.n	8002366 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800225a:	4b79      	ldr	r3, [pc, #484]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	4013      	ands	r3, r2
 8002264:	d120      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0e1      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002272:	4b73      	ldr	r3, [pc, #460]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	4013      	ands	r3, r2
 800227c:	d114      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0d5      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d106      	bne.n	8002298 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800228a:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0ca      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0c2      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a8:	4b65      	ldr	r3, [pc, #404]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2203      	movs	r2, #3
 80022ae:	4393      	bics	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4b62      	ldr	r3, [pc, #392]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fc68 	bl	8000b90 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d111      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ce:	f7fe fc5f 	bl	8000b90 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a58      	ldr	r2, [pc, #352]	@ (800243c <HAL_RCC_ClockConfig+0x274>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0a5      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e2:	4b57      	ldr	r3, [pc, #348]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	220c      	movs	r2, #12
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_ClockConfig+0x106>
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d111      	bne.n	800231c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	e009      	b.n	800230e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f7fe fc49 	bl	8000b90 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a4d      	ldr	r2, [pc, #308]	@ (800243c <HAL_RCC_ClockConfig+0x274>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e08f      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230e:	4b4c      	ldr	r3, [pc, #304]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	220c      	movs	r2, #12
 8002314:	4013      	ands	r3, r2
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d1ef      	bne.n	80022fa <HAL_RCC_ClockConfig+0x132>
 800231a:	e024      	b.n	8002366 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d11b      	bne.n	800235c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002324:	e009      	b.n	800233a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7fe fc33 	bl	8000b90 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	4a42      	ldr	r2, [pc, #264]	@ (800243c <HAL_RCC_ClockConfig+0x274>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e079      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	220c      	movs	r2, #12
 8002340:	4013      	ands	r3, r2
 8002342:	2b04      	cmp	r3, #4
 8002344:	d1ef      	bne.n	8002326 <HAL_RCC_ClockConfig+0x15e>
 8002346:	e00e      	b.n	8002366 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe fc22 	bl	8000b90 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	4a3a      	ldr	r2, [pc, #232]	@ (800243c <HAL_RCC_ClockConfig+0x274>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e068      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800235c:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	220c      	movs	r2, #12
 8002362:	4013      	ands	r3, r2
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002366:	4b34      	ldr	r3, [pc, #208]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	4013      	ands	r3, r2
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d21e      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002374:	4b30      	ldr	r3, [pc, #192]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	4393      	bics	r3, r2
 800237c:	0019      	movs	r1, r3
 800237e:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002386:	f7fe fc03 	bl	8000b90 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	e009      	b.n	80023a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7fe fbfe 	bl	8000b90 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	4a28      	ldr	r2, [pc, #160]	@ (800243c <HAL_RCC_ClockConfig+0x274>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e044      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_RCC_ClockConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d1ee      	bne.n	8002390 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2204      	movs	r2, #4
 80023b8:	4013      	ands	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a20      	ldr	r2, [pc, #128]	@ (8002444 <HAL_RCC_ClockConfig+0x27c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2208      	movs	r2, #8
 80023d6:	4013      	ands	r3, r2
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <HAL_RCC_ClockConfig+0x280>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	00da      	lsls	r2, r3, #3
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023f0:	f000 f832 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 80023f4:	0001      	movs	r1, r0
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_RCC_ClockConfig+0x278>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	220f      	movs	r2, #15
 80023fe:	4013      	ands	r3, r2
 8002400:	4a12      	ldr	r2, [pc, #72]	@ (800244c <HAL_RCC_ClockConfig+0x284>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	000a      	movs	r2, r1
 8002406:	40da      	lsrs	r2, r3
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <HAL_RCC_ClockConfig+0x288>)
 800240a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_RCC_ClockConfig+0x28c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	250b      	movs	r5, #11
 8002412:	197c      	adds	r4, r7, r5
 8002414:	0018      	movs	r0, r3
 8002416:	f7fe fb75 	bl	8000b04 <HAL_InitTick>
 800241a:	0003      	movs	r3, r0
 800241c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800241e:	197b      	adds	r3, r7, r5
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002426:	197b      	adds	r3, r7, r5
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	e000      	b.n	800242e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b004      	add	sp, #16
 8002434:	bdb0      	pop	{r4, r5, r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	40022000 	.word	0x40022000
 800243c:	00001388 	.word	0x00001388
 8002440:	40021000 	.word	0x40021000
 8002444:	fffff8ff 	.word	0xfffff8ff
 8002448:	ffffc7ff 	.word	0xffffc7ff
 800244c:	08003d90 	.word	0x08003d90
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800245e:	4b3c      	ldr	r3, [pc, #240]	@ (8002550 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	220c      	movs	r2, #12
 8002468:	4013      	ands	r3, r2
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d013      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x3e>
 800246e:	d85c      	bhi.n	800252a <HAL_RCC_GetSysClockFreq+0xd2>
 8002470:	2b04      	cmp	r3, #4
 8002472:	d002      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x22>
 8002474:	2b08      	cmp	r3, #8
 8002476:	d00b      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x38>
 8002478:	e057      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800247a:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2210      	movs	r2, #16
 8002480:	4013      	ands	r3, r2
 8002482:	d002      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002484:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002486:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002488:	e05d      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800248a:	4b33      	ldr	r3, [pc, #204]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x100>)
 800248c:	613b      	str	r3, [r7, #16]
      break;
 800248e:	e05a      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b32      	ldr	r3, [pc, #200]	@ (800255c <HAL_RCC_GetSysClockFreq+0x104>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e057      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	220f      	movs	r2, #15
 800249c:	4013      	ands	r3, r2
 800249e:	4a30      	ldr	r2, [pc, #192]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	0d9b      	lsrs	r3, r3, #22
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	3301      	adds	r3, #1
 80024ae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00f      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	000a      	movs	r2, r1
 80024c0:	0152      	lsls	r2, r2, #5
 80024c2:	1a52      	subs	r2, r2, r1
 80024c4:	0193      	lsls	r3, r2, #6
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	185b      	adds	r3, r3, r1
 80024cc:	025b      	lsls	r3, r3, #9
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fd fe2b 	bl	800012c <__udivsi3>
 80024d6:	0003      	movs	r3, r0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e023      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2210      	movs	r2, #16
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00f      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	000a      	movs	r2, r1
 80024ea:	0152      	lsls	r2, r2, #5
 80024ec:	1a52      	subs	r2, r2, r1
 80024ee:	0193      	lsls	r3, r2, #6
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	185b      	adds	r3, r3, r1
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fd fe16 	bl	800012c <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00e      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	000a      	movs	r2, r1
 800250a:	0152      	lsls	r2, r2, #5
 800250c:	1a52      	subs	r2, r2, r1
 800250e:	0193      	lsls	r3, r2, #6
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	185b      	adds	r3, r3, r1
 8002516:	029b      	lsls	r3, r3, #10
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f7fd fe06 	bl	800012c <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	e00d      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0b5b      	lsrs	r3, r3, #13
 8002530:	2207      	movs	r2, #7
 8002532:	4013      	ands	r3, r2
 8002534:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	2280      	movs	r2, #128	@ 0x80
 800253c:	0212      	lsls	r2, r2, #8
 800253e:	409a      	lsls	r2, r3
 8002540:	0013      	movs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002546:	693b      	ldr	r3, [r7, #16]
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b006      	add	sp, #24
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	003d0900 	.word	0x003d0900
 8002558:	00f42400 	.word	0x00f42400
 800255c:	007a1200 	.word	0x007a1200
 8002560:	08003da8 	.word	0x08003da8

08002564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002568:	4b02      	ldr	r3, [pc, #8]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x10>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800257c:	f7ff fff2 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002580:	0001      	movs	r1, r0
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	2207      	movs	r2, #7
 800258a:	4013      	ands	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	40d9      	lsrs	r1, r3
 8002592:	000b      	movs	r3, r1
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	08003da0 	.word	0x08003da0

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a8:	f7ff ffdc 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80025ac:	0001      	movs	r1, r0
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0adb      	lsrs	r3, r3, #11
 80025b4:	2207      	movs	r2, #7
 80025b6:	4013      	ands	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	40d9      	lsrs	r1, r3
 80025be:	000b      	movs	r3, r1
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08003da0 	.word	0x08003da0

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025d8:	2317      	movs	r3, #23
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	4013      	ands	r3, r2
 80025e8:	d106      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	4013      	ands	r3, r2
 80025f4:	d100      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80025f6:	e104      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f8:	4bb1      	ldr	r3, [pc, #708]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	055b      	lsls	r3, r3, #21
 8002600:	4013      	ands	r3, r2
 8002602:	d10a      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	4bae      	ldr	r3, [pc, #696]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002608:	4bad      	ldr	r3, [pc, #692]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	0549      	lsls	r1, r1, #21
 800260e:	430a      	orrs	r2, r1
 8002610:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002612:	2317      	movs	r3, #23
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4baa      	ldr	r3, [pc, #680]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4013      	ands	r3, r2
 8002624:	d11a      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4ba7      	ldr	r3, [pc, #668]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4ba6      	ldr	r3, [pc, #664]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	0049      	lsls	r1, r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002634:	f7fe faac 	bl	8000b90 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe faa7 	bl	8000b90 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b64      	cmp	r3, #100	@ 0x64
 800264a:	d901      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e133      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b9c      	ldr	r3, [pc, #624]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d0f0      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800265c:	4b98      	ldr	r3, [pc, #608]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	23c0      	movs	r3, #192	@ 0xc0
 8002662:	039b      	lsls	r3, r3, #14
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23c0      	movs	r3, #192	@ 0xc0
 800266e:	039b      	lsls	r3, r3, #14
 8002670:	4013      	ands	r3, r2
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	23c0      	movs	r3, #192	@ 0xc0
 800267e:	039b      	lsls	r3, r3, #14
 8002680:	4013      	ands	r3, r2
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d013      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	23c0      	movs	r3, #192	@ 0xc0
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	401a      	ands	r2, r3
 8002692:	23c0      	movs	r3, #192	@ 0xc0
 8002694:	029b      	lsls	r3, r3, #10
 8002696:	429a      	cmp	r2, r3
 8002698:	d10a      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	401a      	ands	r2, r3
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d101      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e103      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026b0:	4b83      	ldr	r3, [pc, #524]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026b4:	23c0      	movs	r3, #192	@ 0xc0
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d049      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	23c0      	movs	r3, #192	@ 0xc0
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	4013      	ands	r3, r2
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d004      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2220      	movs	r2, #32
 80026d8:	4013      	ands	r3, r2
 80026da:	d10d      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	23c0      	movs	r3, #192	@ 0xc0
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	4013      	ands	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d034      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d02e      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026f8:	4b71      	ldr	r3, [pc, #452]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fc:	4a72      	ldr	r2, [pc, #456]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002702:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002706:	4b6e      	ldr	r3, [pc, #440]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002708:	2180      	movs	r1, #128	@ 0x80
 800270a:	0309      	lsls	r1, r1, #12
 800270c:	430a      	orrs	r2, r1
 800270e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002710:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002714:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002716:	496d      	ldr	r1, [pc, #436]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002718:	400a      	ands	r2, r1
 800271a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800271c:	4b68      	ldr	r3, [pc, #416]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4013      	ands	r3, r2
 800272a:	d014      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fa30 	bl	8000b90 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002734:	e009      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fa2b 	bl	8000b90 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4a63      	ldr	r2, [pc, #396]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0b6      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800274a:	4b5d      	ldr	r3, [pc, #372]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800274c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0ef      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4013      	ands	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	23c0      	movs	r3, #192	@ 0xc0
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	401a      	ands	r2, r3
 800276c:	23c0      	movs	r3, #192	@ 0xc0
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	429a      	cmp	r2, r3
 8002772:	d10c      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002774:	4b52      	ldr	r3, [pc, #328]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a56      	ldr	r2, [pc, #344]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	23c0      	movs	r3, #192	@ 0xc0
 8002784:	039b      	lsls	r3, r3, #14
 8002786:	401a      	ands	r2, r3
 8002788:	4b4d      	ldr	r3, [pc, #308]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278a:	430a      	orrs	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002790:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	23c0      	movs	r3, #192	@ 0xc0
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	401a      	ands	r2, r3
 800279c:	4b48      	ldr	r3, [pc, #288]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2220      	movs	r2, #32
 80027a8:	4013      	ands	r3, r2
 80027aa:	d01f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	23c0      	movs	r3, #192	@ 0xc0
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	401a      	ands	r2, r3
 80027b6:	23c0      	movs	r3, #192	@ 0xc0
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80027be:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a44      	ldr	r2, [pc, #272]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	23c0      	movs	r3, #192	@ 0xc0
 80027ce:	039b      	lsls	r3, r3, #14
 80027d0:	401a      	ands	r2, r3
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027da:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	23c0      	movs	r3, #192	@ 0xc0
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	401a      	ands	r2, r3
 80027e6:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ec:	2317      	movs	r3, #23
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027fc:	4936      	ldr	r1, [pc, #216]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027fe:	400a      	ands	r2, r1
 8002800:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280c:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	2203      	movs	r2, #3
 8002812:	4393      	bics	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800281c:	430a      	orrs	r2, r1
 800281e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2202      	movs	r2, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d009      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282a:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	220c      	movs	r2, #12
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800283a:	430a      	orrs	r2, r1
 800283c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002848:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284c:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002858:	430a      	orrs	r2, r1
 800285a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2208      	movs	r2, #8
 8002862:	4013      	ands	r3, r2
 8002864:	d009      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800286c:	4013      	ands	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002876:	430a      	orrs	r2, r1
 8002878:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	4013      	ands	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002888:	4a16      	ldr	r2, [pc, #88]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002894:	430a      	orrs	r2, r1
 8002896:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	4a10      	ldr	r2, [pc, #64]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b006      	add	sp, #24
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	fffcffff 	.word	0xfffcffff
 80028cc:	fff7ffff 	.word	0xfff7ffff
 80028d0:	00001388 	.word	0x00001388
 80028d4:	ffcfffff 	.word	0xffcfffff
 80028d8:	efffffff 	.word	0xefffffff
 80028dc:	fffff3ff 	.word	0xfffff3ff
 80028e0:	ffffcfff 	.word	0xffffcfff
 80028e4:	fbffffff 	.word	0xfbffffff
 80028e8:	fff3ffff 	.word	0xfff3ffff

080028ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e044      	b.n	8002988 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2278      	movs	r2, #120	@ 0x78
 800290a:	2100      	movs	r1, #0
 800290c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f7fd fffb 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2224      	movs	r2, #36	@ 0x24
 800291a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	438a      	bics	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fb50 	bl	8002fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f8c8 	bl	8002ad4 <UART_SetConfig>
 8002944:	0003      	movs	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e01c      	b.n	8002988 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	490d      	ldr	r1, [pc, #52]	@ (8002990 <HAL_UART_Init+0xa4>)
 800295a:	400a      	ands	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	212a      	movs	r1, #42	@ 0x2a
 800296a:	438a      	bics	r2, r1
 800296c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fbdf 	bl	8003144 <UART_CheckIdleState>
 8002986:	0003      	movs	r3, r0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	ffffb7ff 	.word	0xffffb7ff

08002994 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d000      	beq.n	80029ae <HAL_UART_Transmit+0x1a>
 80029ac:	e08c      	b.n	8002ac8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_UART_Transmit+0x28>
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e084      	b.n	8002aca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d109      	bne.n	80029e0 <HAL_UART_Transmit+0x4c>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e074      	b.n	8002aca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2284      	movs	r2, #132	@ 0x84
 80029e4:	2100      	movs	r1, #0
 80029e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2221      	movs	r2, #33	@ 0x21
 80029ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ee:	f7fe f8cf 	bl	8000b90 <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1dba      	adds	r2, r7, #6
 80029fa:	2150      	movs	r1, #80	@ 0x50
 80029fc:	8812      	ldrh	r2, [r2, #0]
 80029fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1dba      	adds	r2, r7, #6
 8002a04:	2152      	movs	r1, #82	@ 0x52
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	015b      	lsls	r3, r3, #5
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d108      	bne.n	8002a28 <HAL_UART_Transmit+0x94>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e003      	b.n	8002a30 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a30:	e02f      	b.n	8002a92 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2180      	movs	r1, #128	@ 0x80
 8002a40:	f000 fc28 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d004      	beq.n	8002a52 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e03b      	b.n	8002aca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	001a      	movs	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	05d2      	lsls	r2, r2, #23
 8002a64:	0dd2      	lsrs	r2, r2, #23
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e007      	b.n	8002a80 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2252      	movs	r2, #82	@ 0x52
 8002a84:	5a9b      	ldrh	r3, [r3, r2]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b299      	uxth	r1, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2252      	movs	r2, #82	@ 0x52
 8002a90:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2252      	movs	r2, #82	@ 0x52
 8002a96:	5a9b      	ldrh	r3, [r3, r2]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1c9      	bne.n	8002a32 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2140      	movs	r1, #64	@ 0x40
 8002aac:	f000 fbf2 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d004      	beq.n	8002abe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e005      	b.n	8002aca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
  }
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b008      	add	sp, #32
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	b08e      	sub	sp, #56	@ 0x38
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002adc:	231a      	movs	r3, #26
 8002ade:	2218      	movs	r2, #24
 8002ae0:	189b      	adds	r3, r3, r2
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4ac6      	ldr	r2, [pc, #792]	@ (8002e20 <UART_SetConfig+0x34c>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4ac1      	ldr	r2, [pc, #772]	@ (8002e24 <UART_SetConfig+0x350>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4abb      	ldr	r2, [pc, #748]	@ (8002e28 <UART_SetConfig+0x354>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b44:	4313      	orrs	r3, r2
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4ab7      	ldr	r2, [pc, #732]	@ (8002e2c <UART_SetConfig+0x358>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4ab3      	ldr	r2, [pc, #716]	@ (8002e30 <UART_SetConfig+0x35c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d131      	bne.n	8002bcc <UART_SetConfig+0xf8>
 8002b68:	4bb2      	ldr	r3, [pc, #712]	@ (8002e34 <UART_SetConfig+0x360>)
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d01d      	beq.n	8002bb0 <UART_SetConfig+0xdc>
 8002b74:	d823      	bhi.n	8002bbe <UART_SetConfig+0xea>
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d00c      	beq.n	8002b94 <UART_SetConfig+0xc0>
 8002b7a:	d820      	bhi.n	8002bbe <UART_SetConfig+0xea>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <UART_SetConfig+0xb2>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d00e      	beq.n	8002ba2 <UART_SetConfig+0xce>
 8002b84:	e01b      	b.n	8002bbe <UART_SetConfig+0xea>
 8002b86:	231b      	movs	r3, #27
 8002b88:	2218      	movs	r2, #24
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e09c      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002b94:	231b      	movs	r3, #27
 8002b96:	2218      	movs	r2, #24
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e095      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002ba2:	231b      	movs	r3, #27
 8002ba4:	2218      	movs	r2, #24
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	19db      	adds	r3, r3, r7
 8002baa:	2204      	movs	r2, #4
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e08e      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002bb0:	231b      	movs	r3, #27
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	2208      	movs	r2, #8
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e087      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	2218      	movs	r2, #24
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e080      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a99      	ldr	r2, [pc, #612]	@ (8002e38 <UART_SetConfig+0x364>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d131      	bne.n	8002c3a <UART_SetConfig+0x166>
 8002bd6:	4b97      	ldr	r3, [pc, #604]	@ (8002e34 <UART_SetConfig+0x360>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	220c      	movs	r2, #12
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d01d      	beq.n	8002c1e <UART_SetConfig+0x14a>
 8002be2:	d823      	bhi.n	8002c2c <UART_SetConfig+0x158>
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00c      	beq.n	8002c02 <UART_SetConfig+0x12e>
 8002be8:	d820      	bhi.n	8002c2c <UART_SetConfig+0x158>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <UART_SetConfig+0x120>
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00e      	beq.n	8002c10 <UART_SetConfig+0x13c>
 8002bf2:	e01b      	b.n	8002c2c <UART_SetConfig+0x158>
 8002bf4:	231b      	movs	r3, #27
 8002bf6:	2218      	movs	r2, #24
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	19db      	adds	r3, r3, r7
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e065      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c02:	231b      	movs	r3, #27
 8002c04:	2218      	movs	r2, #24
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	19db      	adds	r3, r3, r7
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e05e      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c10:	231b      	movs	r3, #27
 8002c12:	2218      	movs	r2, #24
 8002c14:	189b      	adds	r3, r3, r2
 8002c16:	19db      	adds	r3, r3, r7
 8002c18:	2204      	movs	r2, #4
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e057      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c1e:	231b      	movs	r3, #27
 8002c20:	2218      	movs	r2, #24
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	19db      	adds	r3, r3, r7
 8002c26:	2208      	movs	r2, #8
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e050      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c2c:	231b      	movs	r3, #27
 8002c2e:	2218      	movs	r2, #24
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	19db      	adds	r3, r3, r7
 8002c34:	2210      	movs	r2, #16
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e049      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e28 <UART_SetConfig+0x354>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d13e      	bne.n	8002cc2 <UART_SetConfig+0x1ee>
 8002c44:	4b7b      	ldr	r3, [pc, #492]	@ (8002e34 <UART_SetConfig+0x360>)
 8002c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c48:	23c0      	movs	r3, #192	@ 0xc0
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	22c0      	movs	r2, #192	@ 0xc0
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d027      	beq.n	8002ca6 <UART_SetConfig+0x1d2>
 8002c56:	22c0      	movs	r2, #192	@ 0xc0
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d82a      	bhi.n	8002cb4 <UART_SetConfig+0x1e0>
 8002c5e:	2280      	movs	r2, #128	@ 0x80
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d011      	beq.n	8002c8a <UART_SetConfig+0x1b6>
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d822      	bhi.n	8002cb4 <UART_SetConfig+0x1e0>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <UART_SetConfig+0x1a8>
 8002c72:	2280      	movs	r2, #128	@ 0x80
 8002c74:	00d2      	lsls	r2, r2, #3
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <UART_SetConfig+0x1c4>
 8002c7a:	e01b      	b.n	8002cb4 <UART_SetConfig+0x1e0>
 8002c7c:	231b      	movs	r3, #27
 8002c7e:	2218      	movs	r2, #24
 8002c80:	189b      	adds	r3, r3, r2
 8002c82:	19db      	adds	r3, r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e021      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c8a:	231b      	movs	r3, #27
 8002c8c:	2218      	movs	r2, #24
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	19db      	adds	r3, r3, r7
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e01a      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002c98:	231b      	movs	r3, #27
 8002c9a:	2218      	movs	r2, #24
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	19db      	adds	r3, r3, r7
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e013      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002ca6:	231b      	movs	r3, #27
 8002ca8:	2218      	movs	r2, #24
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	19db      	adds	r3, r3, r7
 8002cae:	2208      	movs	r2, #8
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e00c      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	189b      	adds	r3, r3, r2
 8002cba:	19db      	adds	r3, r3, r7
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e005      	b.n	8002cce <UART_SetConfig+0x1fa>
 8002cc2:	231b      	movs	r3, #27
 8002cc4:	2218      	movs	r2, #24
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	19db      	adds	r3, r3, r7
 8002cca:	2210      	movs	r2, #16
 8002ccc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a55      	ldr	r2, [pc, #340]	@ (8002e28 <UART_SetConfig+0x354>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d000      	beq.n	8002cda <UART_SetConfig+0x206>
 8002cd8:	e084      	b.n	8002de4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cda:	231b      	movs	r3, #27
 8002cdc:	2218      	movs	r2, #24
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	19db      	adds	r3, r3, r7
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d01d      	beq.n	8002d24 <UART_SetConfig+0x250>
 8002ce8:	dc20      	bgt.n	8002d2c <UART_SetConfig+0x258>
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d015      	beq.n	8002d1a <UART_SetConfig+0x246>
 8002cee:	dc1d      	bgt.n	8002d2c <UART_SetConfig+0x258>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <UART_SetConfig+0x226>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d005      	beq.n	8002d04 <UART_SetConfig+0x230>
 8002cf8:	e018      	b.n	8002d2c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7ff fc3d 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d02:	e01c      	b.n	8002d3e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d04:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <UART_SetConfig+0x360>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d002      	beq.n	8002d14 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e3c <UART_SetConfig+0x368>)
 8002d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d12:	e014      	b.n	8002d3e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002d14:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <UART_SetConfig+0x36c>)
 8002d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d18:	e011      	b.n	8002d3e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7ff fb9d 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d22:	e00c      	b.n	8002d3e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d2a:	e008      	b.n	8002d3e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002d30:	231a      	movs	r3, #26
 8002d32:	2218      	movs	r2, #24
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	19db      	adds	r3, r3, r7
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
        break;
 8002d3c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <UART_SetConfig+0x272>
 8002d44:	e132      	b.n	8002fac <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d305      	bcc.n	8002d62 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d906      	bls.n	8002d70 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002d62:	231a      	movs	r3, #26
 8002d64:	2218      	movs	r2, #24
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	19db      	adds	r3, r3, r7
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e11d      	b.n	8002fac <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	000b      	movs	r3, r1
 8002d7e:	0e1b      	lsrs	r3, r3, #24
 8002d80:	0010      	movs	r0, r2
 8002d82:	0205      	lsls	r5, r0, #8
 8002d84:	431d      	orrs	r5, r3
 8002d86:	000b      	movs	r3, r1
 8002d88:	021c      	lsls	r4, r3, #8
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68b8      	ldr	r0, [r7, #8]
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	1900      	adds	r0, r0, r4
 8002d9c:	4169      	adcs	r1, r5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f7fd fa4a 	bl	8000244 <__aeabi_uldivmod>
 8002db0:	0002      	movs	r2, r0
 8002db2:	000b      	movs	r3, r1
 8002db4:	0013      	movs	r3, r2
 8002db6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002db8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dba:	23c0      	movs	r3, #192	@ 0xc0
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d309      	bcc.n	8002dd6 <UART_SetConfig+0x302>
 8002dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	035b      	lsls	r3, r3, #13
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d204      	bcs.n	8002dd6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	e0ea      	b.n	8002fac <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002dd6:	231a      	movs	r3, #26
 8002dd8:	2218      	movs	r2, #24
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	19db      	adds	r3, r3, r7
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e0e3      	b.n	8002fac <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d000      	beq.n	8002df2 <UART_SetConfig+0x31e>
 8002df0:	e085      	b.n	8002efe <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002df2:	231b      	movs	r3, #27
 8002df4:	2218      	movs	r2, #24
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	19db      	adds	r3, r3, r7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d837      	bhi.n	8002e70 <UART_SetConfig+0x39c>
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <UART_SetConfig+0x370>)
 8002e04:	18d3      	adds	r3, r2, r3
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0a:	f7ff fbb5 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e12:	e036      	b.n	8002e82 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e14:	f7ff fbc6 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e1c:	e031      	b.n	8002e82 <UART_SetConfig+0x3ae>
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	efff69f3 	.word	0xefff69f3
 8002e24:	ffffcfff 	.word	0xffffcfff
 8002e28:	40004800 	.word	0x40004800
 8002e2c:	fffff4ff 	.word	0xfffff4ff
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40004400 	.word	0x40004400
 8002e3c:	003d0900 	.word	0x003d0900
 8002e40:	00f42400 	.word	0x00f42400
 8002e44:	08003db4 	.word	0x08003db4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e48:	4b60      	ldr	r3, [pc, #384]	@ (8002fcc <UART_SetConfig+0x4f8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d002      	beq.n	8002e58 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e52:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd0 <UART_SetConfig+0x4fc>)
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e56:	e014      	b.n	8002e82 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002e58:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <UART_SetConfig+0x500>)
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e5c:	e011      	b.n	8002e82 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5e:	f7ff fafb 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002e62:	0003      	movs	r3, r0
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e66:	e00c      	b.n	8002e82 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e6e:	e008      	b.n	8002e82 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002e74:	231a      	movs	r3, #26
 8002e76:	2218      	movs	r2, #24
 8002e78:	189b      	adds	r3, r3, r2
 8002e7a:	19db      	adds	r3, r3, r7
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
        break;
 8002e80:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d100      	bne.n	8002e8a <UART_SetConfig+0x3b6>
 8002e88:	e090      	b.n	8002fac <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	005a      	lsls	r2, r3, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	18d2      	adds	r2, r2, r3
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	0010      	movs	r0, r2
 8002e9e:	f7fd f945 	bl	800012c <__udivsi3>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea8:	2b0f      	cmp	r3, #15
 8002eaa:	d921      	bls.n	8002ef0 <UART_SetConfig+0x41c>
 8002eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d21c      	bcs.n	8002ef0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	200e      	movs	r0, #14
 8002ebc:	2418      	movs	r4, #24
 8002ebe:	1903      	adds	r3, r0, r4
 8002ec0:	19db      	adds	r3, r3, r7
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2207      	movs	r2, #7
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b299      	uxth	r1, r3
 8002ed4:	1903      	adds	r3, r0, r4
 8002ed6:	19db      	adds	r3, r3, r7
 8002ed8:	1902      	adds	r2, r0, r4
 8002eda:	19d2      	adds	r2, r2, r7
 8002edc:	8812      	ldrh	r2, [r2, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1902      	adds	r2, r0, r4
 8002ee8:	19d2      	adds	r2, r2, r7
 8002eea:	8812      	ldrh	r2, [r2, #0]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	e05d      	b.n	8002fac <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef0:	231a      	movs	r3, #26
 8002ef2:	2218      	movs	r2, #24
 8002ef4:	189b      	adds	r3, r3, r2
 8002ef6:	19db      	adds	r3, r3, r7
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e056      	b.n	8002fac <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002efe:	231b      	movs	r3, #27
 8002f00:	2218      	movs	r2, #24
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	19db      	adds	r3, r3, r7
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d822      	bhi.n	8002f52 <UART_SetConfig+0x47e>
 8002f0c:	009a      	lsls	r2, r3, #2
 8002f0e:	4b32      	ldr	r3, [pc, #200]	@ (8002fd8 <UART_SetConfig+0x504>)
 8002f10:	18d3      	adds	r3, r2, r3
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f16:	f7ff fb2f 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f1e:	e021      	b.n	8002f64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f20:	f7ff fb40 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8002f24:	0003      	movs	r3, r0
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f28:	e01c      	b.n	8002f64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f2a:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <UART_SetConfig+0x4f8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	4013      	ands	r3, r2
 8002f32:	d002      	beq.n	8002f3a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f34:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <UART_SetConfig+0x4fc>)
 8002f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f38:	e014      	b.n	8002f64 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002f3a:	4b26      	ldr	r3, [pc, #152]	@ (8002fd4 <UART_SetConfig+0x500>)
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f3e:	e011      	b.n	8002f64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f40:	f7ff fa8a 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002f44:	0003      	movs	r3, r0
 8002f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f48:	e00c      	b.n	8002f64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f50:	e008      	b.n	8002f64 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002f56:	231a      	movs	r3, #26
 8002f58:	2218      	movs	r2, #24
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	19db      	adds	r3, r3, r7
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
        break;
 8002f62:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085a      	lsrs	r2, r3, #1
 8002f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f72:	18d2      	adds	r2, r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0019      	movs	r1, r3
 8002f7a:	0010      	movs	r0, r2
 8002f7c:	f7fd f8d6 	bl	800012c <__udivsi3>
 8002f80:	0003      	movs	r3, r0
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d90a      	bls.n	8002fa0 <UART_SetConfig+0x4cc>
 8002f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	025b      	lsls	r3, r3, #9
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d205      	bcs.n	8002fa0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e005      	b.n	8002fac <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa0:	231a      	movs	r3, #26
 8002fa2:	2218      	movs	r2, #24
 8002fa4:	189b      	adds	r3, r3, r2
 8002fa6:	19db      	adds	r3, r3, r7
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fb8:	231a      	movs	r3, #26
 8002fba:	2218      	movs	r2, #24
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	781b      	ldrb	r3, [r3, #0]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b00e      	add	sp, #56	@ 0x38
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	003d0900 	.word	0x003d0900
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	08003dd8 	.word	0x08003dd8

08002fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	2208      	movs	r2, #8
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00b      	beq.n	8003006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8003120 <UART_AdvFeatureConfig+0x144>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d00b      	beq.n	8003028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a43      	ldr	r2, [pc, #268]	@ (8003124 <UART_AdvFeatureConfig+0x148>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	4013      	ands	r3, r2
 8003030:	d00b      	beq.n	800304a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a3b      	ldr	r2, [pc, #236]	@ (8003128 <UART_AdvFeatureConfig+0x14c>)
 800303a:	4013      	ands	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	2204      	movs	r2, #4
 8003050:	4013      	ands	r3, r2
 8003052:	d00b      	beq.n	800306c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a34      	ldr	r2, [pc, #208]	@ (800312c <UART_AdvFeatureConfig+0x150>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	2210      	movs	r2, #16
 8003072:	4013      	ands	r3, r2
 8003074:	d00b      	beq.n	800308e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a2c      	ldr	r2, [pc, #176]	@ (8003130 <UART_AdvFeatureConfig+0x154>)
 800307e:	4013      	ands	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	2220      	movs	r2, #32
 8003094:	4013      	ands	r3, r2
 8003096:	d00b      	beq.n	80030b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4a25      	ldr	r2, [pc, #148]	@ (8003134 <UART_AdvFeatureConfig+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	2240      	movs	r2, #64	@ 0x40
 80030b6:	4013      	ands	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <UART_AdvFeatureConfig+0x15c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d6:	2380      	movs	r3, #128	@ 0x80
 80030d8:	035b      	lsls	r3, r3, #13
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10b      	bne.n	80030f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a15      	ldr	r2, [pc, #84]	@ (800313c <UART_AdvFeatureConfig+0x160>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	4013      	ands	r3, r2
 80030fe:	d00b      	beq.n	8003118 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a0e      	ldr	r2, [pc, #56]	@ (8003140 <UART_AdvFeatureConfig+0x164>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  }
}
 8003118:	46c0      	nop			@ (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	ffff7fff 	.word	0xffff7fff
 8003124:	fffdffff 	.word	0xfffdffff
 8003128:	fffeffff 	.word	0xfffeffff
 800312c:	fffbffff 	.word	0xfffbffff
 8003130:	ffffefff 	.word	0xffffefff
 8003134:	ffffdfff 	.word	0xffffdfff
 8003138:	ffefffff 	.word	0xffefffff
 800313c:	ff9fffff 	.word	0xff9fffff
 8003140:	fff7ffff 	.word	0xfff7ffff

08003144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b092      	sub	sp, #72	@ 0x48
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2284      	movs	r2, #132	@ 0x84
 8003150:	2100      	movs	r1, #0
 8003152:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003154:	f7fd fd1c 	bl	8000b90 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2208      	movs	r2, #8
 8003164:	4013      	ands	r3, r2
 8003166:	2b08      	cmp	r3, #8
 8003168:	d12c      	bne.n	80031c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800316a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316c:	2280      	movs	r2, #128	@ 0x80
 800316e:	0391      	lsls	r1, r2, #14
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4a46      	ldr	r2, [pc, #280]	@ (800328c <UART_CheckIdleState+0x148>)
 8003174:	9200      	str	r2, [sp, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	f000 f88c 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d021      	beq.n	80031c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003180:	f3ef 8310 	mrs	r3, PRIMASK
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38
 800318a:	2301      	movs	r3, #1
 800318c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003190:	f383 8810 	msr	PRIMASK, r3
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2180      	movs	r1, #128	@ 0x80
 80031a2:	438a      	bics	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2278      	movs	r2, #120	@ 0x78
 80031bc:	2100      	movs	r1, #0
 80031be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e05f      	b.n	8003284 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2204      	movs	r2, #4
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d146      	bne.n	8003260 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d4:	2280      	movs	r2, #128	@ 0x80
 80031d6:	03d1      	lsls	r1, r2, #15
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <UART_CheckIdleState+0x148>)
 80031dc:	9200      	str	r2, [sp, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	f000 f858 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d03b      	beq.n	8003260 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e8:	f3ef 8310 	mrs	r3, PRIMASK
 80031ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80031ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031f2:	2301      	movs	r3, #1
 80031f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f383 8810 	msr	PRIMASK, r3
}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4921      	ldr	r1, [pc, #132]	@ (8003290 <UART_CheckIdleState+0x14c>)
 800320a:	400a      	ands	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f383 8810 	msr	PRIMASK, r3
}
 8003218:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321a:	f3ef 8310 	mrs	r3, PRIMASK
 800321e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003220:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
 8003224:	2301      	movs	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f383 8810 	msr	PRIMASK, r3
}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2101      	movs	r1, #1
 800323c:	438a      	bics	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	2120      	movs	r1, #32
 8003252:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2278      	movs	r2, #120	@ 0x78
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	2120      	movs	r1, #32
 800326c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2278      	movs	r2, #120	@ 0x78
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b010      	add	sp, #64	@ 0x40
 800328a:	bd80      	pop	{r7, pc}
 800328c:	01ffffff 	.word	0x01ffffff
 8003290:	fffffedf 	.word	0xfffffedf

08003294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a4:	e051      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3301      	adds	r3, #1
 80032aa:	d04e      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	f7fd fc70 	bl	8000b90 <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e051      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2204      	movs	r2, #4
 80032ce:	4013      	ands	r3, r2
 80032d0:	d03b      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xb6>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b80      	cmp	r3, #128	@ 0x80
 80032d6:	d038      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xb6>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b40      	cmp	r3, #64	@ 0x40
 80032dc:	d035      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2208      	movs	r2, #8
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d111      	bne.n	8003310 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f83c 	bl	8003374 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2284      	movs	r2, #132	@ 0x84
 8003300:	2108      	movs	r1, #8
 8003302:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2278      	movs	r2, #120	@ 0x78
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e02c      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	401a      	ands	r2, r3
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	429a      	cmp	r2, r3
 8003322:	d112      	bne.n	800334a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2280      	movs	r2, #128	@ 0x80
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f81f 	bl	8003374 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2284      	movs	r2, #132	@ 0x84
 800333a:	2120      	movs	r1, #32
 800333c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2278      	movs	r2, #120	@ 0x78
 8003342:	2100      	movs	r1, #0
 8003344:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	425a      	negs	r2, r3
 800335a:	4153      	adcs	r3, r2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	001a      	movs	r2, r3
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d09e      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08e      	sub	sp, #56	@ 0x38
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337c:	f3ef 8310 	mrs	r3, PRIMASK
 8003380:	617b      	str	r3, [r7, #20]
  return(result);
 8003382:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f383 8810 	msr	PRIMASK, r3
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4926      	ldr	r1, [pc, #152]	@ (8003438 <UART_EndRxTransfer+0xc4>)
 800339e:	400a      	ands	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	623b      	str	r3, [r7, #32]
  return(result);
 80033b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b8:	2301      	movs	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	438a      	bics	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d118      	bne.n	800341a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f2:	2301      	movs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2110      	movs	r1, #16
 800340a:	438a      	bics	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2280      	movs	r2, #128	@ 0x80
 800341e:	2120      	movs	r1, #32
 8003420:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b00e      	add	sp, #56	@ 0x38
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	fffffedf 	.word	0xfffffedf

0800343c <siprintf>:
 800343c:	b40e      	push	{r1, r2, r3}
 800343e:	b510      	push	{r4, lr}
 8003440:	2400      	movs	r4, #0
 8003442:	490c      	ldr	r1, [pc, #48]	@ (8003474 <siprintf+0x38>)
 8003444:	b09d      	sub	sp, #116	@ 0x74
 8003446:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003448:	9002      	str	r0, [sp, #8]
 800344a:	9006      	str	r0, [sp, #24]
 800344c:	9107      	str	r1, [sp, #28]
 800344e:	9104      	str	r1, [sp, #16]
 8003450:	4809      	ldr	r0, [pc, #36]	@ (8003478 <siprintf+0x3c>)
 8003452:	490a      	ldr	r1, [pc, #40]	@ (800347c <siprintf+0x40>)
 8003454:	cb04      	ldmia	r3!, {r2}
 8003456:	9105      	str	r1, [sp, #20]
 8003458:	6800      	ldr	r0, [r0, #0]
 800345a:	a902      	add	r1, sp, #8
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003460:	f000 f99e 	bl	80037a0 <_svfiprintf_r>
 8003464:	9b02      	ldr	r3, [sp, #8]
 8003466:	701c      	strb	r4, [r3, #0]
 8003468:	b01d      	add	sp, #116	@ 0x74
 800346a:	bc10      	pop	{r4}
 800346c:	bc08      	pop	{r3}
 800346e:	b003      	add	sp, #12
 8003470:	4718      	bx	r3
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	7fffffff 	.word	0x7fffffff
 8003478:	2000000c 	.word	0x2000000c
 800347c:	ffff0208 	.word	0xffff0208

08003480 <memset>:
 8003480:	0003      	movs	r3, r0
 8003482:	1882      	adds	r2, r0, r2
 8003484:	4293      	cmp	r3, r2
 8003486:	d100      	bne.n	800348a <memset+0xa>
 8003488:	4770      	bx	lr
 800348a:	7019      	strb	r1, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	e7f9      	b.n	8003484 <memset+0x4>

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	@ (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	2000000c 	.word	0x2000000c

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	2600      	movs	r6, #0
 80034a0:	4c0c      	ldr	r4, [pc, #48]	@ (80034d4 <__libc_init_array+0x38>)
 80034a2:	4d0d      	ldr	r5, [pc, #52]	@ (80034d8 <__libc_init_array+0x3c>)
 80034a4:	1b64      	subs	r4, r4, r5
 80034a6:	10a4      	asrs	r4, r4, #2
 80034a8:	42a6      	cmp	r6, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	2600      	movs	r6, #0
 80034ae:	f000 fc61 	bl	8003d74 <_init>
 80034b2:	4c0a      	ldr	r4, [pc, #40]	@ (80034dc <__libc_init_array+0x40>)
 80034b4:	4d0a      	ldr	r5, [pc, #40]	@ (80034e0 <__libc_init_array+0x44>)
 80034b6:	1b64      	subs	r4, r4, r5
 80034b8:	10a4      	asrs	r4, r4, #2
 80034ba:	42a6      	cmp	r6, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	00b3      	lsls	r3, r6, #2
 80034c2:	58eb      	ldr	r3, [r5, r3]
 80034c4:	4798      	blx	r3
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	00b3      	lsls	r3, r6, #2
 80034cc:	58eb      	ldr	r3, [r5, r3]
 80034ce:	4798      	blx	r3
 80034d0:	3601      	adds	r6, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	08003e38 	.word	0x08003e38
 80034d8:	08003e38 	.word	0x08003e38
 80034dc:	08003e3c 	.word	0x08003e3c
 80034e0:	08003e38 	.word	0x08003e38

080034e4 <__retarget_lock_acquire_recursive>:
 80034e4:	4770      	bx	lr

080034e6 <__retarget_lock_release_recursive>:
 80034e6:	4770      	bx	lr

080034e8 <_free_r>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	0005      	movs	r5, r0
 80034ec:	1e0c      	subs	r4, r1, #0
 80034ee:	d010      	beq.n	8003512 <_free_r+0x2a>
 80034f0:	3c04      	subs	r4, #4
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da00      	bge.n	80034fa <_free_r+0x12>
 80034f8:	18e4      	adds	r4, r4, r3
 80034fa:	0028      	movs	r0, r5
 80034fc:	f000 f8e0 	bl	80036c0 <__malloc_lock>
 8003500:	4a1d      	ldr	r2, [pc, #116]	@ (8003578 <_free_r+0x90>)
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <_free_r+0x2c>
 8003508:	6063      	str	r3, [r4, #4]
 800350a:	6014      	str	r4, [r2, #0]
 800350c:	0028      	movs	r0, r5
 800350e:	f000 f8df 	bl	80036d0 <__malloc_unlock>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	42a3      	cmp	r3, r4
 8003516:	d908      	bls.n	800352a <_free_r+0x42>
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	1821      	adds	r1, r4, r0
 800351c:	428b      	cmp	r3, r1
 800351e:	d1f3      	bne.n	8003508 <_free_r+0x20>
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	1809      	adds	r1, r1, r0
 8003526:	6021      	str	r1, [r4, #0]
 8003528:	e7ee      	b.n	8003508 <_free_r+0x20>
 800352a:	001a      	movs	r2, r3
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <_free_r+0x4e>
 8003532:	42a3      	cmp	r3, r4
 8003534:	d9f9      	bls.n	800352a <_free_r+0x42>
 8003536:	6811      	ldr	r1, [r2, #0]
 8003538:	1850      	adds	r0, r2, r1
 800353a:	42a0      	cmp	r0, r4
 800353c:	d10b      	bne.n	8003556 <_free_r+0x6e>
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	1809      	adds	r1, r1, r0
 8003542:	1850      	adds	r0, r2, r1
 8003544:	6011      	str	r1, [r2, #0]
 8003546:	4283      	cmp	r3, r0
 8003548:	d1e0      	bne.n	800350c <_free_r+0x24>
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	1841      	adds	r1, r0, r1
 8003550:	6011      	str	r1, [r2, #0]
 8003552:	6053      	str	r3, [r2, #4]
 8003554:	e7da      	b.n	800350c <_free_r+0x24>
 8003556:	42a0      	cmp	r0, r4
 8003558:	d902      	bls.n	8003560 <_free_r+0x78>
 800355a:	230c      	movs	r3, #12
 800355c:	602b      	str	r3, [r5, #0]
 800355e:	e7d5      	b.n	800350c <_free_r+0x24>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	1821      	adds	r1, r4, r0
 8003564:	428b      	cmp	r3, r1
 8003566:	d103      	bne.n	8003570 <_free_r+0x88>
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	1809      	adds	r1, r1, r0
 800356e:	6021      	str	r1, [r4, #0]
 8003570:	6063      	str	r3, [r4, #4]
 8003572:	6054      	str	r4, [r2, #4]
 8003574:	e7ca      	b.n	800350c <_free_r+0x24>
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	200007e4 	.word	0x200007e4

0800357c <sbrk_aligned>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4e0f      	ldr	r6, [pc, #60]	@ (80035bc <sbrk_aligned+0x40>)
 8003580:	000d      	movs	r5, r1
 8003582:	6831      	ldr	r1, [r6, #0]
 8003584:	0004      	movs	r4, r0
 8003586:	2900      	cmp	r1, #0
 8003588:	d102      	bne.n	8003590 <sbrk_aligned+0x14>
 800358a:	f000 fb95 	bl	8003cb8 <_sbrk_r>
 800358e:	6030      	str	r0, [r6, #0]
 8003590:	0029      	movs	r1, r5
 8003592:	0020      	movs	r0, r4
 8003594:	f000 fb90 	bl	8003cb8 <_sbrk_r>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d103      	bne.n	80035a4 <sbrk_aligned+0x28>
 800359c:	2501      	movs	r5, #1
 800359e:	426d      	negs	r5, r5
 80035a0:	0028      	movs	r0, r5
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	2303      	movs	r3, #3
 80035a6:	1cc5      	adds	r5, r0, #3
 80035a8:	439d      	bics	r5, r3
 80035aa:	42a8      	cmp	r0, r5
 80035ac:	d0f8      	beq.n	80035a0 <sbrk_aligned+0x24>
 80035ae:	1a29      	subs	r1, r5, r0
 80035b0:	0020      	movs	r0, r4
 80035b2:	f000 fb81 	bl	8003cb8 <_sbrk_r>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1f2      	bne.n	80035a0 <sbrk_aligned+0x24>
 80035ba:	e7ef      	b.n	800359c <sbrk_aligned+0x20>
 80035bc:	200007e0 	.word	0x200007e0

080035c0 <_malloc_r>:
 80035c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c2:	2203      	movs	r2, #3
 80035c4:	1ccb      	adds	r3, r1, #3
 80035c6:	4393      	bics	r3, r2
 80035c8:	3308      	adds	r3, #8
 80035ca:	0005      	movs	r5, r0
 80035cc:	001f      	movs	r7, r3
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d234      	bcs.n	800363c <_malloc_r+0x7c>
 80035d2:	270c      	movs	r7, #12
 80035d4:	42b9      	cmp	r1, r7
 80035d6:	d833      	bhi.n	8003640 <_malloc_r+0x80>
 80035d8:	0028      	movs	r0, r5
 80035da:	f000 f871 	bl	80036c0 <__malloc_lock>
 80035de:	4e37      	ldr	r6, [pc, #220]	@ (80036bc <_malloc_r+0xfc>)
 80035e0:	6833      	ldr	r3, [r6, #0]
 80035e2:	001c      	movs	r4, r3
 80035e4:	2c00      	cmp	r4, #0
 80035e6:	d12f      	bne.n	8003648 <_malloc_r+0x88>
 80035e8:	0039      	movs	r1, r7
 80035ea:	0028      	movs	r0, r5
 80035ec:	f7ff ffc6 	bl	800357c <sbrk_aligned>
 80035f0:	0004      	movs	r4, r0
 80035f2:	1c43      	adds	r3, r0, #1
 80035f4:	d15f      	bne.n	80036b6 <_malloc_r+0xf6>
 80035f6:	6834      	ldr	r4, [r6, #0]
 80035f8:	9400      	str	r4, [sp, #0]
 80035fa:	9b00      	ldr	r3, [sp, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d14a      	bne.n	8003696 <_malloc_r+0xd6>
 8003600:	2c00      	cmp	r4, #0
 8003602:	d052      	beq.n	80036aa <_malloc_r+0xea>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	0028      	movs	r0, r5
 8003608:	18e3      	adds	r3, r4, r3
 800360a:	9900      	ldr	r1, [sp, #0]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	f000 fb53 	bl	8003cb8 <_sbrk_r>
 8003612:	9b01      	ldr	r3, [sp, #4]
 8003614:	4283      	cmp	r3, r0
 8003616:	d148      	bne.n	80036aa <_malloc_r+0xea>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	0028      	movs	r0, r5
 800361c:	1aff      	subs	r7, r7, r3
 800361e:	0039      	movs	r1, r7
 8003620:	f7ff ffac 	bl	800357c <sbrk_aligned>
 8003624:	3001      	adds	r0, #1
 8003626:	d040      	beq.n	80036aa <_malloc_r+0xea>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	19db      	adds	r3, r3, r7
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	6833      	ldr	r3, [r6, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	2a00      	cmp	r2, #0
 8003634:	d133      	bne.n	800369e <_malloc_r+0xde>
 8003636:	9b00      	ldr	r3, [sp, #0]
 8003638:	6033      	str	r3, [r6, #0]
 800363a:	e019      	b.n	8003670 <_malloc_r+0xb0>
 800363c:	2b00      	cmp	r3, #0
 800363e:	dac9      	bge.n	80035d4 <_malloc_r+0x14>
 8003640:	230c      	movs	r3, #12
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	2000      	movs	r0, #0
 8003646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003648:	6821      	ldr	r1, [r4, #0]
 800364a:	1bc9      	subs	r1, r1, r7
 800364c:	d420      	bmi.n	8003690 <_malloc_r+0xd0>
 800364e:	290b      	cmp	r1, #11
 8003650:	d90a      	bls.n	8003668 <_malloc_r+0xa8>
 8003652:	19e2      	adds	r2, r4, r7
 8003654:	6027      	str	r7, [r4, #0]
 8003656:	42a3      	cmp	r3, r4
 8003658:	d104      	bne.n	8003664 <_malloc_r+0xa4>
 800365a:	6032      	str	r2, [r6, #0]
 800365c:	6863      	ldr	r3, [r4, #4]
 800365e:	6011      	str	r1, [r2, #0]
 8003660:	6053      	str	r3, [r2, #4]
 8003662:	e005      	b.n	8003670 <_malloc_r+0xb0>
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	e7f9      	b.n	800365c <_malloc_r+0x9c>
 8003668:	6862      	ldr	r2, [r4, #4]
 800366a:	42a3      	cmp	r3, r4
 800366c:	d10e      	bne.n	800368c <_malloc_r+0xcc>
 800366e:	6032      	str	r2, [r6, #0]
 8003670:	0028      	movs	r0, r5
 8003672:	f000 f82d 	bl	80036d0 <__malloc_unlock>
 8003676:	0020      	movs	r0, r4
 8003678:	2207      	movs	r2, #7
 800367a:	300b      	adds	r0, #11
 800367c:	1d23      	adds	r3, r4, #4
 800367e:	4390      	bics	r0, r2
 8003680:	1ac2      	subs	r2, r0, r3
 8003682:	4298      	cmp	r0, r3
 8003684:	d0df      	beq.n	8003646 <_malloc_r+0x86>
 8003686:	1a1b      	subs	r3, r3, r0
 8003688:	50a3      	str	r3, [r4, r2]
 800368a:	e7dc      	b.n	8003646 <_malloc_r+0x86>
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	e7ef      	b.n	8003670 <_malloc_r+0xb0>
 8003690:	0023      	movs	r3, r4
 8003692:	6864      	ldr	r4, [r4, #4]
 8003694:	e7a6      	b.n	80035e4 <_malloc_r+0x24>
 8003696:	9c00      	ldr	r4, [sp, #0]
 8003698:	6863      	ldr	r3, [r4, #4]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	e7ad      	b.n	80035fa <_malloc_r+0x3a>
 800369e:	001a      	movs	r2, r3
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	d1fb      	bne.n	800369e <_malloc_r+0xde>
 80036a6:	2300      	movs	r3, #0
 80036a8:	e7da      	b.n	8003660 <_malloc_r+0xa0>
 80036aa:	230c      	movs	r3, #12
 80036ac:	0028      	movs	r0, r5
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	f000 f80e 	bl	80036d0 <__malloc_unlock>
 80036b4:	e7c6      	b.n	8003644 <_malloc_r+0x84>
 80036b6:	6007      	str	r7, [r0, #0]
 80036b8:	e7da      	b.n	8003670 <_malloc_r+0xb0>
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	200007e4 	.word	0x200007e4

080036c0 <__malloc_lock>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4802      	ldr	r0, [pc, #8]	@ (80036cc <__malloc_lock+0xc>)
 80036c4:	f7ff ff0e 	bl	80034e4 <__retarget_lock_acquire_recursive>
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	200007dc 	.word	0x200007dc

080036d0 <__malloc_unlock>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4802      	ldr	r0, [pc, #8]	@ (80036dc <__malloc_unlock+0xc>)
 80036d4:	f7ff ff07 	bl	80034e6 <__retarget_lock_release_recursive>
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200007dc 	.word	0x200007dc

080036e0 <__ssputs_r>:
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	688e      	ldr	r6, [r1, #8]
 80036e4:	b085      	sub	sp, #20
 80036e6:	001f      	movs	r7, r3
 80036e8:	000c      	movs	r4, r1
 80036ea:	680b      	ldr	r3, [r1, #0]
 80036ec:	9002      	str	r0, [sp, #8]
 80036ee:	9203      	str	r2, [sp, #12]
 80036f0:	42be      	cmp	r6, r7
 80036f2:	d830      	bhi.n	8003756 <__ssputs_r+0x76>
 80036f4:	210c      	movs	r1, #12
 80036f6:	5e62      	ldrsh	r2, [r4, r1]
 80036f8:	2190      	movs	r1, #144	@ 0x90
 80036fa:	00c9      	lsls	r1, r1, #3
 80036fc:	420a      	tst	r2, r1
 80036fe:	d028      	beq.n	8003752 <__ssputs_r+0x72>
 8003700:	2003      	movs	r0, #3
 8003702:	6921      	ldr	r1, [r4, #16]
 8003704:	1a5b      	subs	r3, r3, r1
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	6963      	ldr	r3, [r4, #20]
 800370a:	4343      	muls	r3, r0
 800370c:	9801      	ldr	r0, [sp, #4]
 800370e:	0fdd      	lsrs	r5, r3, #31
 8003710:	18ed      	adds	r5, r5, r3
 8003712:	1c7b      	adds	r3, r7, #1
 8003714:	181b      	adds	r3, r3, r0
 8003716:	106d      	asrs	r5, r5, #1
 8003718:	42ab      	cmp	r3, r5
 800371a:	d900      	bls.n	800371e <__ssputs_r+0x3e>
 800371c:	001d      	movs	r5, r3
 800371e:	0552      	lsls	r2, r2, #21
 8003720:	d528      	bpl.n	8003774 <__ssputs_r+0x94>
 8003722:	0029      	movs	r1, r5
 8003724:	9802      	ldr	r0, [sp, #8]
 8003726:	f7ff ff4b 	bl	80035c0 <_malloc_r>
 800372a:	1e06      	subs	r6, r0, #0
 800372c:	d02c      	beq.n	8003788 <__ssputs_r+0xa8>
 800372e:	9a01      	ldr	r2, [sp, #4]
 8003730:	6921      	ldr	r1, [r4, #16]
 8003732:	f000 fade 	bl	8003cf2 <memcpy>
 8003736:	89a2      	ldrh	r2, [r4, #12]
 8003738:	4b18      	ldr	r3, [pc, #96]	@ (800379c <__ssputs_r+0xbc>)
 800373a:	401a      	ands	r2, r3
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	4313      	orrs	r3, r2
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	9b01      	ldr	r3, [sp, #4]
 8003744:	6126      	str	r6, [r4, #16]
 8003746:	18f6      	adds	r6, r6, r3
 8003748:	6026      	str	r6, [r4, #0]
 800374a:	003e      	movs	r6, r7
 800374c:	6165      	str	r5, [r4, #20]
 800374e:	1aed      	subs	r5, r5, r3
 8003750:	60a5      	str	r5, [r4, #8]
 8003752:	42be      	cmp	r6, r7
 8003754:	d900      	bls.n	8003758 <__ssputs_r+0x78>
 8003756:	003e      	movs	r6, r7
 8003758:	0032      	movs	r2, r6
 800375a:	9903      	ldr	r1, [sp, #12]
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	f000 fa99 	bl	8003c94 <memmove>
 8003762:	2000      	movs	r0, #0
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	1b9b      	subs	r3, r3, r6
 8003768:	60a3      	str	r3, [r4, #8]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	199b      	adds	r3, r3, r6
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	b005      	add	sp, #20
 8003772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003774:	002a      	movs	r2, r5
 8003776:	9802      	ldr	r0, [sp, #8]
 8003778:	f000 fac4 	bl	8003d04 <_realloc_r>
 800377c:	1e06      	subs	r6, r0, #0
 800377e:	d1e0      	bne.n	8003742 <__ssputs_r+0x62>
 8003780:	6921      	ldr	r1, [r4, #16]
 8003782:	9802      	ldr	r0, [sp, #8]
 8003784:	f7ff feb0 	bl	80034e8 <_free_r>
 8003788:	230c      	movs	r3, #12
 800378a:	2001      	movs	r0, #1
 800378c:	9a02      	ldr	r2, [sp, #8]
 800378e:	4240      	negs	r0, r0
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	89a2      	ldrh	r2, [r4, #12]
 8003794:	3334      	adds	r3, #52	@ 0x34
 8003796:	4313      	orrs	r3, r2
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	e7e9      	b.n	8003770 <__ssputs_r+0x90>
 800379c:	fffffb7f 	.word	0xfffffb7f

080037a0 <_svfiprintf_r>:
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a2:	b0a1      	sub	sp, #132	@ 0x84
 80037a4:	9003      	str	r0, [sp, #12]
 80037a6:	001d      	movs	r5, r3
 80037a8:	898b      	ldrh	r3, [r1, #12]
 80037aa:	000f      	movs	r7, r1
 80037ac:	0016      	movs	r6, r2
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	d511      	bpl.n	80037d6 <_svfiprintf_r+0x36>
 80037b2:	690b      	ldr	r3, [r1, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10e      	bne.n	80037d6 <_svfiprintf_r+0x36>
 80037b8:	2140      	movs	r1, #64	@ 0x40
 80037ba:	f7ff ff01 	bl	80035c0 <_malloc_r>
 80037be:	6038      	str	r0, [r7, #0]
 80037c0:	6138      	str	r0, [r7, #16]
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d105      	bne.n	80037d2 <_svfiprintf_r+0x32>
 80037c6:	230c      	movs	r3, #12
 80037c8:	9a03      	ldr	r2, [sp, #12]
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	2001      	movs	r0, #1
 80037ce:	4240      	negs	r0, r0
 80037d0:	e0cf      	b.n	8003972 <_svfiprintf_r+0x1d2>
 80037d2:	2340      	movs	r3, #64	@ 0x40
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	2300      	movs	r3, #0
 80037d8:	ac08      	add	r4, sp, #32
 80037da:	6163      	str	r3, [r4, #20]
 80037dc:	3320      	adds	r3, #32
 80037de:	7663      	strb	r3, [r4, #25]
 80037e0:	3310      	adds	r3, #16
 80037e2:	76a3      	strb	r3, [r4, #26]
 80037e4:	9507      	str	r5, [sp, #28]
 80037e6:	0035      	movs	r5, r6
 80037e8:	782b      	ldrb	r3, [r5, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <_svfiprintf_r+0x52>
 80037ee:	2b25      	cmp	r3, #37	@ 0x25
 80037f0:	d148      	bne.n	8003884 <_svfiprintf_r+0xe4>
 80037f2:	1bab      	subs	r3, r5, r6
 80037f4:	9305      	str	r3, [sp, #20]
 80037f6:	42b5      	cmp	r5, r6
 80037f8:	d00b      	beq.n	8003812 <_svfiprintf_r+0x72>
 80037fa:	0032      	movs	r2, r6
 80037fc:	0039      	movs	r1, r7
 80037fe:	9803      	ldr	r0, [sp, #12]
 8003800:	f7ff ff6e 	bl	80036e0 <__ssputs_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d100      	bne.n	800380a <_svfiprintf_r+0x6a>
 8003808:	e0ae      	b.n	8003968 <_svfiprintf_r+0x1c8>
 800380a:	6963      	ldr	r3, [r4, #20]
 800380c:	9a05      	ldr	r2, [sp, #20]
 800380e:	189b      	adds	r3, r3, r2
 8003810:	6163      	str	r3, [r4, #20]
 8003812:	782b      	ldrb	r3, [r5, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d100      	bne.n	800381a <_svfiprintf_r+0x7a>
 8003818:	e0a6      	b.n	8003968 <_svfiprintf_r+0x1c8>
 800381a:	2201      	movs	r2, #1
 800381c:	2300      	movs	r3, #0
 800381e:	4252      	negs	r2, r2
 8003820:	6062      	str	r2, [r4, #4]
 8003822:	a904      	add	r1, sp, #16
 8003824:	3254      	adds	r2, #84	@ 0x54
 8003826:	1852      	adds	r2, r2, r1
 8003828:	1c6e      	adds	r6, r5, #1
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	60e3      	str	r3, [r4, #12]
 800382e:	60a3      	str	r3, [r4, #8]
 8003830:	7013      	strb	r3, [r2, #0]
 8003832:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003834:	4b54      	ldr	r3, [pc, #336]	@ (8003988 <_svfiprintf_r+0x1e8>)
 8003836:	2205      	movs	r2, #5
 8003838:	0018      	movs	r0, r3
 800383a:	7831      	ldrb	r1, [r6, #0]
 800383c:	9305      	str	r3, [sp, #20]
 800383e:	f000 fa4d 	bl	8003cdc <memchr>
 8003842:	1c75      	adds	r5, r6, #1
 8003844:	2800      	cmp	r0, #0
 8003846:	d11f      	bne.n	8003888 <_svfiprintf_r+0xe8>
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	06d3      	lsls	r3, r2, #27
 800384c:	d504      	bpl.n	8003858 <_svfiprintf_r+0xb8>
 800384e:	2353      	movs	r3, #83	@ 0x53
 8003850:	a904      	add	r1, sp, #16
 8003852:	185b      	adds	r3, r3, r1
 8003854:	2120      	movs	r1, #32
 8003856:	7019      	strb	r1, [r3, #0]
 8003858:	0713      	lsls	r3, r2, #28
 800385a:	d504      	bpl.n	8003866 <_svfiprintf_r+0xc6>
 800385c:	2353      	movs	r3, #83	@ 0x53
 800385e:	a904      	add	r1, sp, #16
 8003860:	185b      	adds	r3, r3, r1
 8003862:	212b      	movs	r1, #43	@ 0x2b
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	7833      	ldrb	r3, [r6, #0]
 8003868:	2b2a      	cmp	r3, #42	@ 0x2a
 800386a:	d016      	beq.n	800389a <_svfiprintf_r+0xfa>
 800386c:	0035      	movs	r5, r6
 800386e:	2100      	movs	r1, #0
 8003870:	200a      	movs	r0, #10
 8003872:	68e3      	ldr	r3, [r4, #12]
 8003874:	782a      	ldrb	r2, [r5, #0]
 8003876:	1c6e      	adds	r6, r5, #1
 8003878:	3a30      	subs	r2, #48	@ 0x30
 800387a:	2a09      	cmp	r2, #9
 800387c:	d950      	bls.n	8003920 <_svfiprintf_r+0x180>
 800387e:	2900      	cmp	r1, #0
 8003880:	d111      	bne.n	80038a6 <_svfiprintf_r+0x106>
 8003882:	e017      	b.n	80038b4 <_svfiprintf_r+0x114>
 8003884:	3501      	adds	r5, #1
 8003886:	e7af      	b.n	80037e8 <_svfiprintf_r+0x48>
 8003888:	9b05      	ldr	r3, [sp, #20]
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	1ac0      	subs	r0, r0, r3
 800388e:	2301      	movs	r3, #1
 8003890:	4083      	lsls	r3, r0
 8003892:	4313      	orrs	r3, r2
 8003894:	002e      	movs	r6, r5
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	e7cc      	b.n	8003834 <_svfiprintf_r+0x94>
 800389a:	9b07      	ldr	r3, [sp, #28]
 800389c:	1d19      	adds	r1, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	9107      	str	r1, [sp, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	db01      	blt.n	80038aa <_svfiprintf_r+0x10a>
 80038a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038a8:	e004      	b.n	80038b4 <_svfiprintf_r+0x114>
 80038aa:	425b      	negs	r3, r3
 80038ac:	60e3      	str	r3, [r4, #12]
 80038ae:	2302      	movs	r3, #2
 80038b0:	4313      	orrs	r3, r2
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	782b      	ldrb	r3, [r5, #0]
 80038b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80038b8:	d10c      	bne.n	80038d4 <_svfiprintf_r+0x134>
 80038ba:	786b      	ldrb	r3, [r5, #1]
 80038bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80038be:	d134      	bne.n	800392a <_svfiprintf_r+0x18a>
 80038c0:	9b07      	ldr	r3, [sp, #28]
 80038c2:	3502      	adds	r5, #2
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	9207      	str	r2, [sp, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da01      	bge.n	80038d2 <_svfiprintf_r+0x132>
 80038ce:	2301      	movs	r3, #1
 80038d0:	425b      	negs	r3, r3
 80038d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80038d4:	4e2d      	ldr	r6, [pc, #180]	@ (800398c <_svfiprintf_r+0x1ec>)
 80038d6:	2203      	movs	r2, #3
 80038d8:	0030      	movs	r0, r6
 80038da:	7829      	ldrb	r1, [r5, #0]
 80038dc:	f000 f9fe 	bl	8003cdc <memchr>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d006      	beq.n	80038f2 <_svfiprintf_r+0x152>
 80038e4:	2340      	movs	r3, #64	@ 0x40
 80038e6:	1b80      	subs	r0, r0, r6
 80038e8:	4083      	lsls	r3, r0
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	3501      	adds	r5, #1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	7829      	ldrb	r1, [r5, #0]
 80038f4:	2206      	movs	r2, #6
 80038f6:	4826      	ldr	r0, [pc, #152]	@ (8003990 <_svfiprintf_r+0x1f0>)
 80038f8:	1c6e      	adds	r6, r5, #1
 80038fa:	7621      	strb	r1, [r4, #24]
 80038fc:	f000 f9ee 	bl	8003cdc <memchr>
 8003900:	2800      	cmp	r0, #0
 8003902:	d038      	beq.n	8003976 <_svfiprintf_r+0x1d6>
 8003904:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <_svfiprintf_r+0x1f4>)
 8003906:	2b00      	cmp	r3, #0
 8003908:	d122      	bne.n	8003950 <_svfiprintf_r+0x1b0>
 800390a:	2207      	movs	r2, #7
 800390c:	9b07      	ldr	r3, [sp, #28]
 800390e:	3307      	adds	r3, #7
 8003910:	4393      	bics	r3, r2
 8003912:	3308      	adds	r3, #8
 8003914:	9307      	str	r3, [sp, #28]
 8003916:	6963      	ldr	r3, [r4, #20]
 8003918:	9a04      	ldr	r2, [sp, #16]
 800391a:	189b      	adds	r3, r3, r2
 800391c:	6163      	str	r3, [r4, #20]
 800391e:	e762      	b.n	80037e6 <_svfiprintf_r+0x46>
 8003920:	4343      	muls	r3, r0
 8003922:	0035      	movs	r5, r6
 8003924:	2101      	movs	r1, #1
 8003926:	189b      	adds	r3, r3, r2
 8003928:	e7a4      	b.n	8003874 <_svfiprintf_r+0xd4>
 800392a:	2300      	movs	r3, #0
 800392c:	200a      	movs	r0, #10
 800392e:	0019      	movs	r1, r3
 8003930:	3501      	adds	r5, #1
 8003932:	6063      	str	r3, [r4, #4]
 8003934:	782a      	ldrb	r2, [r5, #0]
 8003936:	1c6e      	adds	r6, r5, #1
 8003938:	3a30      	subs	r2, #48	@ 0x30
 800393a:	2a09      	cmp	r2, #9
 800393c:	d903      	bls.n	8003946 <_svfiprintf_r+0x1a6>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0c8      	beq.n	80038d4 <_svfiprintf_r+0x134>
 8003942:	9109      	str	r1, [sp, #36]	@ 0x24
 8003944:	e7c6      	b.n	80038d4 <_svfiprintf_r+0x134>
 8003946:	4341      	muls	r1, r0
 8003948:	0035      	movs	r5, r6
 800394a:	2301      	movs	r3, #1
 800394c:	1889      	adds	r1, r1, r2
 800394e:	e7f1      	b.n	8003934 <_svfiprintf_r+0x194>
 8003950:	aa07      	add	r2, sp, #28
 8003952:	9200      	str	r2, [sp, #0]
 8003954:	0021      	movs	r1, r4
 8003956:	003a      	movs	r2, r7
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <_svfiprintf_r+0x1f8>)
 800395a:	9803      	ldr	r0, [sp, #12]
 800395c:	e000      	b.n	8003960 <_svfiprintf_r+0x1c0>
 800395e:	bf00      	nop
 8003960:	9004      	str	r0, [sp, #16]
 8003962:	9b04      	ldr	r3, [sp, #16]
 8003964:	3301      	adds	r3, #1
 8003966:	d1d6      	bne.n	8003916 <_svfiprintf_r+0x176>
 8003968:	89bb      	ldrh	r3, [r7, #12]
 800396a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800396c:	065b      	lsls	r3, r3, #25
 800396e:	d500      	bpl.n	8003972 <_svfiprintf_r+0x1d2>
 8003970:	e72c      	b.n	80037cc <_svfiprintf_r+0x2c>
 8003972:	b021      	add	sp, #132	@ 0x84
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003976:	aa07      	add	r2, sp, #28
 8003978:	9200      	str	r2, [sp, #0]
 800397a:	0021      	movs	r1, r4
 800397c:	003a      	movs	r2, r7
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <_svfiprintf_r+0x1f8>)
 8003980:	9803      	ldr	r0, [sp, #12]
 8003982:	f000 f87b 	bl	8003a7c <_printf_i>
 8003986:	e7eb      	b.n	8003960 <_svfiprintf_r+0x1c0>
 8003988:	08003dfc 	.word	0x08003dfc
 800398c:	08003e02 	.word	0x08003e02
 8003990:	08003e06 	.word	0x08003e06
 8003994:	00000000 	.word	0x00000000
 8003998:	080036e1 	.word	0x080036e1

0800399c <_printf_common>:
 800399c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800399e:	0016      	movs	r6, r2
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	688a      	ldr	r2, [r1, #8]
 80039a4:	690b      	ldr	r3, [r1, #16]
 80039a6:	000c      	movs	r4, r1
 80039a8:	9000      	str	r0, [sp, #0]
 80039aa:	4293      	cmp	r3, r2
 80039ac:	da00      	bge.n	80039b0 <_printf_common+0x14>
 80039ae:	0013      	movs	r3, r2
 80039b0:	0022      	movs	r2, r4
 80039b2:	6033      	str	r3, [r6, #0]
 80039b4:	3243      	adds	r2, #67	@ 0x43
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	2a00      	cmp	r2, #0
 80039ba:	d001      	beq.n	80039c0 <_printf_common+0x24>
 80039bc:	3301      	adds	r3, #1
 80039be:	6033      	str	r3, [r6, #0]
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	069b      	lsls	r3, r3, #26
 80039c4:	d502      	bpl.n	80039cc <_printf_common+0x30>
 80039c6:	6833      	ldr	r3, [r6, #0]
 80039c8:	3302      	adds	r3, #2
 80039ca:	6033      	str	r3, [r6, #0]
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	2306      	movs	r3, #6
 80039d0:	0015      	movs	r5, r2
 80039d2:	401d      	ands	r5, r3
 80039d4:	421a      	tst	r2, r3
 80039d6:	d027      	beq.n	8003a28 <_printf_common+0x8c>
 80039d8:	0023      	movs	r3, r4
 80039da:	3343      	adds	r3, #67	@ 0x43
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	1e5a      	subs	r2, r3, #1
 80039e0:	4193      	sbcs	r3, r2
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	0692      	lsls	r2, r2, #26
 80039e6:	d430      	bmi.n	8003a4a <_printf_common+0xae>
 80039e8:	0022      	movs	r2, r4
 80039ea:	9901      	ldr	r1, [sp, #4]
 80039ec:	9800      	ldr	r0, [sp, #0]
 80039ee:	9d08      	ldr	r5, [sp, #32]
 80039f0:	3243      	adds	r2, #67	@ 0x43
 80039f2:	47a8      	blx	r5
 80039f4:	3001      	adds	r0, #1
 80039f6:	d025      	beq.n	8003a44 <_printf_common+0xa8>
 80039f8:	2206      	movs	r2, #6
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	2500      	movs	r5, #0
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d105      	bne.n	8003a10 <_printf_common+0x74>
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	68e5      	ldr	r5, [r4, #12]
 8003a08:	1aed      	subs	r5, r5, r3
 8003a0a:	43eb      	mvns	r3, r5
 8003a0c:	17db      	asrs	r3, r3, #31
 8003a0e:	401d      	ands	r5, r3
 8003a10:	68a3      	ldr	r3, [r4, #8]
 8003a12:	6922      	ldr	r2, [r4, #16]
 8003a14:	4293      	cmp	r3, r2
 8003a16:	dd01      	ble.n	8003a1c <_printf_common+0x80>
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	18ed      	adds	r5, r5, r3
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	42b5      	cmp	r5, r6
 8003a20:	d120      	bne.n	8003a64 <_printf_common+0xc8>
 8003a22:	2000      	movs	r0, #0
 8003a24:	e010      	b.n	8003a48 <_printf_common+0xac>
 8003a26:	3501      	adds	r5, #1
 8003a28:	68e3      	ldr	r3, [r4, #12]
 8003a2a:	6832      	ldr	r2, [r6, #0]
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	42ab      	cmp	r3, r5
 8003a30:	ddd2      	ble.n	80039d8 <_printf_common+0x3c>
 8003a32:	0022      	movs	r2, r4
 8003a34:	2301      	movs	r3, #1
 8003a36:	9901      	ldr	r1, [sp, #4]
 8003a38:	9800      	ldr	r0, [sp, #0]
 8003a3a:	9f08      	ldr	r7, [sp, #32]
 8003a3c:	3219      	adds	r2, #25
 8003a3e:	47b8      	blx	r7
 8003a40:	3001      	adds	r0, #1
 8003a42:	d1f0      	bne.n	8003a26 <_printf_common+0x8a>
 8003a44:	2001      	movs	r0, #1
 8003a46:	4240      	negs	r0, r0
 8003a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a4a:	2030      	movs	r0, #48	@ 0x30
 8003a4c:	18e1      	adds	r1, r4, r3
 8003a4e:	3143      	adds	r1, #67	@ 0x43
 8003a50:	7008      	strb	r0, [r1, #0]
 8003a52:	0021      	movs	r1, r4
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	3145      	adds	r1, #69	@ 0x45
 8003a58:	7809      	ldrb	r1, [r1, #0]
 8003a5a:	18a2      	adds	r2, r4, r2
 8003a5c:	3243      	adds	r2, #67	@ 0x43
 8003a5e:	3302      	adds	r3, #2
 8003a60:	7011      	strb	r1, [r2, #0]
 8003a62:	e7c1      	b.n	80039e8 <_printf_common+0x4c>
 8003a64:	0022      	movs	r2, r4
 8003a66:	2301      	movs	r3, #1
 8003a68:	9901      	ldr	r1, [sp, #4]
 8003a6a:	9800      	ldr	r0, [sp, #0]
 8003a6c:	9f08      	ldr	r7, [sp, #32]
 8003a6e:	321a      	adds	r2, #26
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	d0e6      	beq.n	8003a44 <_printf_common+0xa8>
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7d1      	b.n	8003a1e <_printf_common+0x82>
	...

08003a7c <_printf_i>:
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b08b      	sub	sp, #44	@ 0x2c
 8003a80:	9206      	str	r2, [sp, #24]
 8003a82:	000a      	movs	r2, r1
 8003a84:	3243      	adds	r2, #67	@ 0x43
 8003a86:	9307      	str	r3, [sp, #28]
 8003a88:	9005      	str	r0, [sp, #20]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	7e0a      	ldrb	r2, [r1, #24]
 8003a8e:	000c      	movs	r4, r1
 8003a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003a92:	2a78      	cmp	r2, #120	@ 0x78
 8003a94:	d809      	bhi.n	8003aaa <_printf_i+0x2e>
 8003a96:	2a62      	cmp	r2, #98	@ 0x62
 8003a98:	d80b      	bhi.n	8003ab2 <_printf_i+0x36>
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d100      	bne.n	8003aa0 <_printf_i+0x24>
 8003a9e:	e0ba      	b.n	8003c16 <_printf_i+0x19a>
 8003aa0:	497a      	ldr	r1, [pc, #488]	@ (8003c8c <_printf_i+0x210>)
 8003aa2:	9104      	str	r1, [sp, #16]
 8003aa4:	2a58      	cmp	r2, #88	@ 0x58
 8003aa6:	d100      	bne.n	8003aaa <_printf_i+0x2e>
 8003aa8:	e08e      	b.n	8003bc8 <_printf_i+0x14c>
 8003aaa:	0025      	movs	r5, r4
 8003aac:	3542      	adds	r5, #66	@ 0x42
 8003aae:	702a      	strb	r2, [r5, #0]
 8003ab0:	e022      	b.n	8003af8 <_printf_i+0x7c>
 8003ab2:	0010      	movs	r0, r2
 8003ab4:	3863      	subs	r0, #99	@ 0x63
 8003ab6:	2815      	cmp	r0, #21
 8003ab8:	d8f7      	bhi.n	8003aaa <_printf_i+0x2e>
 8003aba:	f7fc fb2d 	bl	8000118 <__gnu_thumb1_case_shi>
 8003abe:	0016      	.short	0x0016
 8003ac0:	fff6001f 	.word	0xfff6001f
 8003ac4:	fff6fff6 	.word	0xfff6fff6
 8003ac8:	001ffff6 	.word	0x001ffff6
 8003acc:	fff6fff6 	.word	0xfff6fff6
 8003ad0:	fff6fff6 	.word	0xfff6fff6
 8003ad4:	0036009f 	.word	0x0036009f
 8003ad8:	fff6007e 	.word	0xfff6007e
 8003adc:	00b0fff6 	.word	0x00b0fff6
 8003ae0:	0036fff6 	.word	0x0036fff6
 8003ae4:	fff6fff6 	.word	0xfff6fff6
 8003ae8:	0082      	.short	0x0082
 8003aea:	0025      	movs	r5, r4
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	3542      	adds	r5, #66	@ 0x42
 8003af0:	1d11      	adds	r1, r2, #4
 8003af2:	6019      	str	r1, [r3, #0]
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	702b      	strb	r3, [r5, #0]
 8003af8:	2301      	movs	r3, #1
 8003afa:	e09e      	b.n	8003c3a <_printf_i+0x1be>
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	6809      	ldr	r1, [r1, #0]
 8003b00:	1d02      	adds	r2, r0, #4
 8003b02:	060d      	lsls	r5, r1, #24
 8003b04:	d50b      	bpl.n	8003b1e <_printf_i+0xa2>
 8003b06:	6806      	ldr	r6, [r0, #0]
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	da03      	bge.n	8003b16 <_printf_i+0x9a>
 8003b0e:	232d      	movs	r3, #45	@ 0x2d
 8003b10:	9a03      	ldr	r2, [sp, #12]
 8003b12:	4276      	negs	r6, r6
 8003b14:	7013      	strb	r3, [r2, #0]
 8003b16:	4b5d      	ldr	r3, [pc, #372]	@ (8003c8c <_printf_i+0x210>)
 8003b18:	270a      	movs	r7, #10
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	e018      	b.n	8003b50 <_printf_i+0xd4>
 8003b1e:	6806      	ldr	r6, [r0, #0]
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	0649      	lsls	r1, r1, #25
 8003b24:	d5f1      	bpl.n	8003b0a <_printf_i+0x8e>
 8003b26:	b236      	sxth	r6, r6
 8003b28:	e7ef      	b.n	8003b0a <_printf_i+0x8e>
 8003b2a:	6808      	ldr	r0, [r1, #0]
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	c940      	ldmia	r1!, {r6}
 8003b30:	0605      	lsls	r5, r0, #24
 8003b32:	d402      	bmi.n	8003b3a <_printf_i+0xbe>
 8003b34:	0640      	lsls	r0, r0, #25
 8003b36:	d500      	bpl.n	8003b3a <_printf_i+0xbe>
 8003b38:	b2b6      	uxth	r6, r6
 8003b3a:	6019      	str	r1, [r3, #0]
 8003b3c:	4b53      	ldr	r3, [pc, #332]	@ (8003c8c <_printf_i+0x210>)
 8003b3e:	270a      	movs	r7, #10
 8003b40:	9304      	str	r3, [sp, #16]
 8003b42:	2a6f      	cmp	r2, #111	@ 0x6f
 8003b44:	d100      	bne.n	8003b48 <_printf_i+0xcc>
 8003b46:	3f02      	subs	r7, #2
 8003b48:	0023      	movs	r3, r4
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	3343      	adds	r3, #67	@ 0x43
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	6863      	ldr	r3, [r4, #4]
 8003b52:	60a3      	str	r3, [r4, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db06      	blt.n	8003b66 <_printf_i+0xea>
 8003b58:	2104      	movs	r1, #4
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	9d03      	ldr	r5, [sp, #12]
 8003b5e:	438a      	bics	r2, r1
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	4333      	orrs	r3, r6
 8003b64:	d00c      	beq.n	8003b80 <_printf_i+0x104>
 8003b66:	9d03      	ldr	r5, [sp, #12]
 8003b68:	0030      	movs	r0, r6
 8003b6a:	0039      	movs	r1, r7
 8003b6c:	f7fc fb64 	bl	8000238 <__aeabi_uidivmod>
 8003b70:	9b04      	ldr	r3, [sp, #16]
 8003b72:	3d01      	subs	r5, #1
 8003b74:	5c5b      	ldrb	r3, [r3, r1]
 8003b76:	702b      	strb	r3, [r5, #0]
 8003b78:	0033      	movs	r3, r6
 8003b7a:	0006      	movs	r6, r0
 8003b7c:	429f      	cmp	r7, r3
 8003b7e:	d9f3      	bls.n	8003b68 <_printf_i+0xec>
 8003b80:	2f08      	cmp	r7, #8
 8003b82:	d109      	bne.n	8003b98 <_printf_i+0x11c>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	07db      	lsls	r3, r3, #31
 8003b88:	d506      	bpl.n	8003b98 <_printf_i+0x11c>
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dc02      	bgt.n	8003b98 <_printf_i+0x11c>
 8003b92:	2330      	movs	r3, #48	@ 0x30
 8003b94:	3d01      	subs	r5, #1
 8003b96:	702b      	strb	r3, [r5, #0]
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	1b5b      	subs	r3, r3, r5
 8003b9c:	6123      	str	r3, [r4, #16]
 8003b9e:	9b07      	ldr	r3, [sp, #28]
 8003ba0:	0021      	movs	r1, r4
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	9805      	ldr	r0, [sp, #20]
 8003ba6:	9b06      	ldr	r3, [sp, #24]
 8003ba8:	aa09      	add	r2, sp, #36	@ 0x24
 8003baa:	f7ff fef7 	bl	800399c <_printf_common>
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d148      	bne.n	8003c44 <_printf_i+0x1c8>
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	4240      	negs	r0, r0
 8003bb6:	b00b      	add	sp, #44	@ 0x2c
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bba:	2220      	movs	r2, #32
 8003bbc:	6809      	ldr	r1, [r1, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	6022      	str	r2, [r4, #0]
 8003bc2:	2278      	movs	r2, #120	@ 0x78
 8003bc4:	4932      	ldr	r1, [pc, #200]	@ (8003c90 <_printf_i+0x214>)
 8003bc6:	9104      	str	r1, [sp, #16]
 8003bc8:	0021      	movs	r1, r4
 8003bca:	3145      	adds	r1, #69	@ 0x45
 8003bcc:	700a      	strb	r2, [r1, #0]
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	c940      	ldmia	r1!, {r6}
 8003bd4:	0610      	lsls	r0, r2, #24
 8003bd6:	d402      	bmi.n	8003bde <_printf_i+0x162>
 8003bd8:	0650      	lsls	r0, r2, #25
 8003bda:	d500      	bpl.n	8003bde <_printf_i+0x162>
 8003bdc:	b2b6      	uxth	r6, r6
 8003bde:	6019      	str	r1, [r3, #0]
 8003be0:	07d3      	lsls	r3, r2, #31
 8003be2:	d502      	bpl.n	8003bea <_printf_i+0x16e>
 8003be4:	2320      	movs	r3, #32
 8003be6:	4313      	orrs	r3, r2
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	2e00      	cmp	r6, #0
 8003bec:	d001      	beq.n	8003bf2 <_printf_i+0x176>
 8003bee:	2710      	movs	r7, #16
 8003bf0:	e7aa      	b.n	8003b48 <_printf_i+0xcc>
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	4393      	bics	r3, r2
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	e7f8      	b.n	8003bee <_printf_i+0x172>
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	680d      	ldr	r5, [r1, #0]
 8003c00:	1d10      	adds	r0, r2, #4
 8003c02:	6949      	ldr	r1, [r1, #20]
 8003c04:	6018      	str	r0, [r3, #0]
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	062e      	lsls	r6, r5, #24
 8003c0a:	d501      	bpl.n	8003c10 <_printf_i+0x194>
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	e002      	b.n	8003c16 <_printf_i+0x19a>
 8003c10:	066d      	lsls	r5, r5, #25
 8003c12:	d5fb      	bpl.n	8003c0c <_printf_i+0x190>
 8003c14:	8019      	strh	r1, [r3, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	9d03      	ldr	r5, [sp, #12]
 8003c1a:	6123      	str	r3, [r4, #16]
 8003c1c:	e7bf      	b.n	8003b9e <_printf_i+0x122>
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	1d11      	adds	r1, r2, #4
 8003c22:	6019      	str	r1, [r3, #0]
 8003c24:	6815      	ldr	r5, [r2, #0]
 8003c26:	2100      	movs	r1, #0
 8003c28:	0028      	movs	r0, r5
 8003c2a:	6862      	ldr	r2, [r4, #4]
 8003c2c:	f000 f856 	bl	8003cdc <memchr>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d001      	beq.n	8003c38 <_printf_i+0x1bc>
 8003c34:	1b40      	subs	r0, r0, r5
 8003c36:	6060      	str	r0, [r4, #4]
 8003c38:	6863      	ldr	r3, [r4, #4]
 8003c3a:	6123      	str	r3, [r4, #16]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9a03      	ldr	r2, [sp, #12]
 8003c40:	7013      	strb	r3, [r2, #0]
 8003c42:	e7ac      	b.n	8003b9e <_printf_i+0x122>
 8003c44:	002a      	movs	r2, r5
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	9906      	ldr	r1, [sp, #24]
 8003c4a:	9805      	ldr	r0, [sp, #20]
 8003c4c:	9d07      	ldr	r5, [sp, #28]
 8003c4e:	47a8      	blx	r5
 8003c50:	3001      	adds	r0, #1
 8003c52:	d0ae      	beq.n	8003bb2 <_printf_i+0x136>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	079b      	lsls	r3, r3, #30
 8003c58:	d415      	bmi.n	8003c86 <_printf_i+0x20a>
 8003c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c5c:	68e0      	ldr	r0, [r4, #12]
 8003c5e:	4298      	cmp	r0, r3
 8003c60:	daa9      	bge.n	8003bb6 <_printf_i+0x13a>
 8003c62:	0018      	movs	r0, r3
 8003c64:	e7a7      	b.n	8003bb6 <_printf_i+0x13a>
 8003c66:	0022      	movs	r2, r4
 8003c68:	2301      	movs	r3, #1
 8003c6a:	9906      	ldr	r1, [sp, #24]
 8003c6c:	9805      	ldr	r0, [sp, #20]
 8003c6e:	9e07      	ldr	r6, [sp, #28]
 8003c70:	3219      	adds	r2, #25
 8003c72:	47b0      	blx	r6
 8003c74:	3001      	adds	r0, #1
 8003c76:	d09c      	beq.n	8003bb2 <_printf_i+0x136>
 8003c78:	3501      	adds	r5, #1
 8003c7a:	68e3      	ldr	r3, [r4, #12]
 8003c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	42ab      	cmp	r3, r5
 8003c82:	dcf0      	bgt.n	8003c66 <_printf_i+0x1ea>
 8003c84:	e7e9      	b.n	8003c5a <_printf_i+0x1de>
 8003c86:	2500      	movs	r5, #0
 8003c88:	e7f7      	b.n	8003c7a <_printf_i+0x1fe>
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	08003e0d 	.word	0x08003e0d
 8003c90:	08003e1e 	.word	0x08003e1e

08003c94 <memmove>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4288      	cmp	r0, r1
 8003c98:	d902      	bls.n	8003ca0 <memmove+0xc>
 8003c9a:	188b      	adds	r3, r1, r2
 8003c9c:	4298      	cmp	r0, r3
 8003c9e:	d308      	bcc.n	8003cb2 <memmove+0x1e>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d007      	beq.n	8003cb6 <memmove+0x22>
 8003ca6:	5ccc      	ldrb	r4, [r1, r3]
 8003ca8:	54c4      	strb	r4, [r0, r3]
 8003caa:	3301      	adds	r3, #1
 8003cac:	e7f9      	b.n	8003ca2 <memmove+0xe>
 8003cae:	5c8b      	ldrb	r3, [r1, r2]
 8003cb0:	5483      	strb	r3, [r0, r2]
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	d2fb      	bcs.n	8003cae <memmove+0x1a>
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <_sbrk_r>:
 8003cb8:	2300      	movs	r3, #0
 8003cba:	b570      	push	{r4, r5, r6, lr}
 8003cbc:	4d06      	ldr	r5, [pc, #24]	@ (8003cd8 <_sbrk_r+0x20>)
 8003cbe:	0004      	movs	r4, r0
 8003cc0:	0008      	movs	r0, r1
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	f7fc fe98 	bl	80009f8 <_sbrk>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d103      	bne.n	8003cd4 <_sbrk_r+0x1c>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d000      	beq.n	8003cd4 <_sbrk_r+0x1c>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	200007d8 	.word	0x200007d8

08003cdc <memchr>:
 8003cdc:	b2c9      	uxtb	r1, r1
 8003cde:	1882      	adds	r2, r0, r2
 8003ce0:	4290      	cmp	r0, r2
 8003ce2:	d101      	bne.n	8003ce8 <memchr+0xc>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	4770      	bx	lr
 8003ce8:	7803      	ldrb	r3, [r0, #0]
 8003cea:	428b      	cmp	r3, r1
 8003cec:	d0fb      	beq.n	8003ce6 <memchr+0xa>
 8003cee:	3001      	adds	r0, #1
 8003cf0:	e7f6      	b.n	8003ce0 <memchr+0x4>

08003cf2 <memcpy>:
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d100      	bne.n	8003cfc <memcpy+0xa>
 8003cfa:	bd10      	pop	{r4, pc}
 8003cfc:	5ccc      	ldrb	r4, [r1, r3]
 8003cfe:	54c4      	strb	r4, [r0, r3]
 8003d00:	3301      	adds	r3, #1
 8003d02:	e7f8      	b.n	8003cf6 <memcpy+0x4>

08003d04 <_realloc_r>:
 8003d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d06:	0006      	movs	r6, r0
 8003d08:	000c      	movs	r4, r1
 8003d0a:	0015      	movs	r5, r2
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d105      	bne.n	8003d1c <_realloc_r+0x18>
 8003d10:	0011      	movs	r1, r2
 8003d12:	f7ff fc55 	bl	80035c0 <_malloc_r>
 8003d16:	0004      	movs	r4, r0
 8003d18:	0020      	movs	r0, r4
 8003d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d103      	bne.n	8003d28 <_realloc_r+0x24>
 8003d20:	f7ff fbe2 	bl	80034e8 <_free_r>
 8003d24:	002c      	movs	r4, r5
 8003d26:	e7f7      	b.n	8003d18 <_realloc_r+0x14>
 8003d28:	f000 f81c 	bl	8003d64 <_malloc_usable_size_r>
 8003d2c:	0007      	movs	r7, r0
 8003d2e:	4285      	cmp	r5, r0
 8003d30:	d802      	bhi.n	8003d38 <_realloc_r+0x34>
 8003d32:	0843      	lsrs	r3, r0, #1
 8003d34:	42ab      	cmp	r3, r5
 8003d36:	d3ef      	bcc.n	8003d18 <_realloc_r+0x14>
 8003d38:	0029      	movs	r1, r5
 8003d3a:	0030      	movs	r0, r6
 8003d3c:	f7ff fc40 	bl	80035c0 <_malloc_r>
 8003d40:	9001      	str	r0, [sp, #4]
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d101      	bne.n	8003d4a <_realloc_r+0x46>
 8003d46:	9c01      	ldr	r4, [sp, #4]
 8003d48:	e7e6      	b.n	8003d18 <_realloc_r+0x14>
 8003d4a:	002a      	movs	r2, r5
 8003d4c:	42bd      	cmp	r5, r7
 8003d4e:	d900      	bls.n	8003d52 <_realloc_r+0x4e>
 8003d50:	003a      	movs	r2, r7
 8003d52:	0021      	movs	r1, r4
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	f7ff ffcc 	bl	8003cf2 <memcpy>
 8003d5a:	0021      	movs	r1, r4
 8003d5c:	0030      	movs	r0, r6
 8003d5e:	f7ff fbc3 	bl	80034e8 <_free_r>
 8003d62:	e7f0      	b.n	8003d46 <_realloc_r+0x42>

08003d64 <_malloc_usable_size_r>:
 8003d64:	1f0b      	subs	r3, r1, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	1f18      	subs	r0, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da01      	bge.n	8003d72 <_malloc_usable_size_r+0xe>
 8003d6e:	580b      	ldr	r3, [r1, r0]
 8003d70:	18c0      	adds	r0, r0, r3
 8003d72:	4770      	bx	lr

08003d74 <_init>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

08003d80 <_fini>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d86:	bc08      	pop	{r3}
 8003d88:	469e      	mov	lr, r3
 8003d8a:	4770      	bx	lr

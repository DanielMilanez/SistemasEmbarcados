
Workshop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002364  08002364  00003364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002380  08002380  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002380  08002380  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002380  08002380  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002380  08002380  00003380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002388  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002394  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002394  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000539e  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014eb  00000000  00000000  000093d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  0000a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000405  00000000  00000000  0000ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123a1  00000000  00000000  0000b235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006df2  00000000  00000000  0001d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070689  00000000  00000000  000243c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00094a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011d4  00000000  00000000  00094a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00095c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800234c 	.word	0x0800234c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800234c 	.word	0x0800234c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

}
 8000228:	46c0      	nop			@ (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	b002      	add	sp, #8
 800022e:	bd80      	pop	{r7, pc}

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fa00 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f812 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8f6 	bl	800042c <MX_GPIO_Init>
  MX_DMA_Init();
 8000240:	f000 f8d6 	bl	80003f0 <MX_DMA_Init>
  MX_ADC_Init();
 8000244:	f000 f860 	bl	8000308 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_READ, 2);
 8000248:	4903      	ldr	r1, [pc, #12]	@ (8000258 <main+0x28>)
 800024a:	4b04      	ldr	r3, [pc, #16]	@ (800025c <main+0x2c>)
 800024c:	2202      	movs	r2, #2
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fbd6 	bl	8000a00 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	e7fd      	b.n	8000254 <main+0x24>
 8000258:	200000cc 	.word	0x200000cc
 800025c:	20000028 	.word	0x20000028

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b095      	sub	sp, #84	@ 0x54
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2418      	movs	r4, #24
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2338      	movs	r3, #56	@ 0x38
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f83f 	bl	80022f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 f838 	bl	80022f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000284:	4b1e      	ldr	r3, [pc, #120]	@ (8000300 <SystemClock_Config+0xa0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1e      	ldr	r2, [pc, #120]	@ (8000304 <SystemClock_Config+0xa4>)
 800028a:	401a      	ands	r2, r3
 800028c:	4b1c      	ldr	r3, [pc, #112]	@ (8000300 <SystemClock_Config+0xa0>)
 800028e:	2180      	movs	r1, #128	@ 0x80
 8000290:	0109      	lsls	r1, r1, #4
 8000292:	430a      	orrs	r2, r1
 8000294:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000296:	0021      	movs	r1, r4
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2210      	movs	r2, #16
 800029c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2201      	movs	r2, #1
 80002a2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	22a0      	movs	r2, #160	@ 0xa0
 80002ae:	0212      	lsls	r2, r2, #8
 80002b0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 fa88 	bl	80017d0 <HAL_RCC_OscConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002c4:	f000 f8c8 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	220f      	movs	r2, #15
 80002cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fe34 	bl	8001f58 <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002f4:	f000 f8b0 	bl	8000458 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			@ (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b015      	add	sp, #84	@ 0x54
 80002fe:	bd90      	pop	{r4, r7, pc}
 8000300:	40007000 	.word	0x40007000
 8000304:	ffffe7ff 	.word	0xffffe7ff

08000308 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	003b      	movs	r3, r7
 8000310:	0018      	movs	r0, r3
 8000312:	2308      	movs	r3, #8
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f001 ffec 	bl	80022f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800031c:	4b30      	ldr	r3, [pc, #192]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800031e:	4a31      	ldr	r2, [pc, #196]	@ (80003e4 <MX_ADC_Init+0xdc>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000322:	4b2f      	ldr	r3, [pc, #188]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000324:	2200      	movs	r2, #0
 8000326:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000328:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800032a:	22c0      	movs	r2, #192	@ 0xc0
 800032c:	0612      	lsls	r2, r2, #24
 800032e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000330:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000336:	4b2a      	ldr	r3, [pc, #168]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000338:	2207      	movs	r2, #7
 800033a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800033c:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800033e:	2201      	movs	r2, #1
 8000340:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000342:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000348:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800034a:	2220      	movs	r2, #32
 800034c:	2101      	movs	r1, #1
 800034e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000350:	4b23      	ldr	r3, [pc, #140]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000352:	2221      	movs	r2, #33	@ 0x21
 8000354:	2100      	movs	r1, #0
 8000356:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800035a:	2200      	movs	r2, #0
 800035c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035e:	4b20      	ldr	r3, [pc, #128]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000360:	22c2      	movs	r2, #194	@ 0xc2
 8000362:	32ff      	adds	r2, #255	@ 0xff
 8000364:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000366:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000368:	222c      	movs	r2, #44	@ 0x2c
 800036a:	2101      	movs	r1, #1
 800036c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036e:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000370:	2204      	movs	r2, #4
 8000372:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000374:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000376:	2200      	movs	r2, #0
 8000378:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800037a:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000380:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000382:	2201      	movs	r2, #1
 8000384:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <MX_ADC_Init+0xd8>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <MX_ADC_Init+0xd8>)
 800038e:	0018      	movs	r0, r3
 8000390:	f000 f9c2 	bl	8000718 <HAL_ADC_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000398:	f000 f85e 	bl	8000458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800039c:	003b      	movs	r3, r7
 800039e:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <MX_ADC_Init+0xe0>)
 80003a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2280      	movs	r2, #128	@ 0x80
 80003a6:	0152      	lsls	r2, r2, #5
 80003a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003aa:	003a      	movs	r2, r7
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_ADC_Init+0xd8>)
 80003ae:	0011      	movs	r1, r2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fc6d 	bl	8000c90 <HAL_ADC_ConfigChannel>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80003ba:	f000 f84d 	bl	8000458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003be:	003b      	movs	r3, r7
 80003c0:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <MX_ADC_Init+0xe4>)
 80003c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003c4:	003a      	movs	r2, r7
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_ADC_Init+0xd8>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fc60 	bl	8000c90 <HAL_ADC_ConfigChannel>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80003d4:	f000 f840 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b002      	add	sp, #8
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40012400 	.word	0x40012400
 80003e8:	10000010 	.word	0x10000010
 80003ec:	14000020 	.word	0x14000020

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_DMA_Init+0x38>)
 80003f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_DMA_Init+0x38>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	631a      	str	r2, [r3, #48]	@ 0x30
 8000402:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_DMA_Init+0x38>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	2201      	movs	r2, #1
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	2009      	movs	r0, #9
 8000414:	f000 fe7a 	bl	800110c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000418:	2009      	movs	r0, #9
 800041a:	f000 fe8c 	bl	8001136 <HAL_NVIC_EnableIRQ>

}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_GPIO_Init+0x28>)
 8000434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000436:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <MX_GPIO_Init+0x28>)
 8000438:	2101      	movs	r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <MX_GPIO_Init+0x28>)
 8000440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000442:	2201      	movs	r2, #1
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	40021000 	.word	0x40021000

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	46c0      	nop			@ (mov r8, r8)
 8000462:	e7fd      	b.n	8000460 <Error_Handler+0x8>

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <HAL_MspInit+0x24>)
 800046a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <HAL_MspInit+0x24>)
 800046e:	2101      	movs	r1, #1
 8000470:	430a      	orrs	r2, r1
 8000472:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000474:	4b04      	ldr	r3, [pc, #16]	@ (8000488 <HAL_MspInit+0x24>)
 8000476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000478:	4b03      	ldr	r3, [pc, #12]	@ (8000488 <HAL_MspInit+0x24>)
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	0549      	lsls	r1, r1, #21
 800047e:	430a      	orrs	r2, r1
 8000480:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	@ 0x24
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	240c      	movs	r4, #12
 8000496:	193b      	adds	r3, r7, r4
 8000498:	0018      	movs	r0, r3
 800049a:	2314      	movs	r3, #20
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f001 ff28 	bl	80022f4 <memset>
  if(hadc->Instance==ADC1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000564 <HAL_ADC_MspInit+0xd8>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d155      	bne.n	800055a <HAL_ADC_MspInit+0xce>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000568 <HAL_ADC_MspInit+0xdc>)
 80004b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000568 <HAL_ADC_MspInit+0xdc>)
 80004b4:	2180      	movs	r1, #128	@ 0x80
 80004b6:	0089      	lsls	r1, r1, #2
 80004b8:	430a      	orrs	r2, r1
 80004ba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000568 <HAL_ADC_MspInit+0xdc>)
 80004be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c0:	4b29      	ldr	r3, [pc, #164]	@ (8000568 <HAL_ADC_MspInit+0xdc>)
 80004c2:	2101      	movs	r1, #1
 80004c4:	430a      	orrs	r2, r1
 80004c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004c8:	4b27      	ldr	r3, [pc, #156]	@ (8000568 <HAL_ADC_MspInit+0xdc>)
 80004ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004cc:	2201      	movs	r2, #1
 80004ce:	4013      	ands	r3, r2
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2230      	movs	r2, #48	@ 0x30
 80004d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2203      	movs	r2, #3
 80004de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	193a      	adds	r2, r7, r4
 80004e8:	23a0      	movs	r3, #160	@ 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fff8 	bl	80014e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 80004f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000570 <HAL_ADC_MspInit+0xe4>)
 80004f8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000500:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000506:	4b19      	ldr	r3, [pc, #100]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 800050e:	2280      	movs	r2, #128	@ 0x80
 8000510:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000512:	4b16      	ldr	r3, [pc, #88]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	00d2      	lsls	r2, r2, #3
 8000520:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000524:	2220      	movs	r2, #32
 8000526:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fe1d 	bl	8001170 <HAL_DMA_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800053a:	f7ff ff8d 	bl	8000458 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000542:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_ADC_MspInit+0xe0>)
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	200c      	movs	r0, #12
 8000550:	f000 fddc 	bl	800110c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000554:	200c      	movs	r0, #12
 8000556:	f000 fdee 	bl	8001136 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b009      	add	sp, #36	@ 0x24
 8000560:	bd90      	pop	{r4, r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	40012400 	.word	0x40012400
 8000568:	40021000 	.word	0x40021000
 800056c:	20000084 	.word	0x20000084
 8000570:	40020008 	.word	0x40020008

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	e7fd      	b.n	8000578 <NMI_Handler+0x4>

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7fd      	b.n	8000580 <HardFault_Handler+0x4>

08000584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059c:	f000 f8a0 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <DMA1_Channel1_IRQHandler+0x14>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 febc 	bl	800132c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	20000084 	.word	0x20000084

080005c0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <ADC1_COMP_IRQHandler+0x14>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 faa0 	bl	8000b0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	20000028 	.word	0x20000028

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e8:	f7ff fff6 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 fe77 	bl	8002304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f7ff fe0b 	bl	8000230 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
   ldr   r0, =_estack
 800061c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000628:	08002388 	.word	0x08002388
  ldr r2, =_sbss
 800062c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000630:	200000d4 	.word	0x200000d4

08000634 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <DMA1_Channel2_3_IRQHandler>
	...

08000638 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <HAL_Init+0x3c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_Init+0x3c>)
 800064a:	2140      	movs	r1, #64	@ 0x40
 800064c:	430a      	orrs	r2, r1
 800064e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f811 	bl	8000678 <HAL_InitTick>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d003      	beq.n	8000662 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e001      	b.n	8000666 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000662:	f7ff feff 	bl	8000464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <HAL_InitTick+0x5c>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <HAL_InitTick+0x60>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	0019      	movs	r1, r3
 800068a:	23fa      	movs	r3, #250	@ 0xfa
 800068c:	0098      	lsls	r0, r3, #2
 800068e:	f7ff fd3b 	bl	8000108 <__udivsi3>
 8000692:	0003      	movs	r3, r0
 8000694:	0019      	movs	r1, r3
 8000696:	0020      	movs	r0, r4
 8000698:	f7ff fd36 	bl	8000108 <__udivsi3>
 800069c:	0003      	movs	r3, r0
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fd59 	bl	8001156 <HAL_SYSTICK_Config>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e00f      	b.n	80006cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80b      	bhi.n	80006ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd26 	bl	800110c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_InitTick+0x64>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b003      	add	sp, #12
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	18d2      	adds	r2, r2, r3
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <HAL_IncTick+0x20>)
 80006f2:	601a      	str	r2, [r3, #0]
}
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	20000008 	.word	0x20000008
 8000700:	200000d0 	.word	0x200000d0

08000704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	@ (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	200000d0 	.word	0x200000d0

08000718 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e159      	b.n	80009de <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10a      	bne.n	8000748 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2250      	movs	r2, #80	@ 0x50
 800073c:	2100      	movs	r1, #0
 800073e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff fea2 	bl	800048c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800074c:	2210      	movs	r2, #16
 800074e:	4013      	ands	r3, r2
 8000750:	2b10      	cmp	r3, #16
 8000752:	d005      	beq.n	8000760 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	2204      	movs	r2, #4
 800075c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800075e:	d00b      	beq.n	8000778 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000764:	2210      	movs	r2, #16
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2250      	movs	r2, #80	@ 0x50
 8000770:	2100      	movs	r1, #0
 8000772:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e132      	b.n	80009de <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800077c:	4a9a      	ldr	r2, [pc, #616]	@ (80009e8 <HAL_ADC_Init+0x2d0>)
 800077e:	4013      	ands	r3, r2
 8000780:	2202      	movs	r2, #2
 8000782:	431a      	orrs	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	2203      	movs	r2, #3
 8000790:	4013      	ands	r3, r2
 8000792:	2b01      	cmp	r3, #1
 8000794:	d108      	bne.n	80007a8 <HAL_ADC_Init+0x90>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	4013      	ands	r3, r2
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d101      	bne.n	80007a8 <HAL_ADC_Init+0x90>
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <HAL_ADC_Init+0x92>
 80007a8:	2300      	movs	r3, #0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d149      	bne.n	8000842 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	23c0      	movs	r3, #192	@ 0xc0
 80007b4:	061b      	lsls	r3, r3, #24
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d00b      	beq.n	80007d2 <HAL_ADC_Init+0xba>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	2380      	movs	r3, #128	@ 0x80
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d005      	beq.n	80007d2 <HAL_ADC_Init+0xba>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	061b      	lsls	r3, r3, #24
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d111      	bne.n	80007f6 <HAL_ADC_Init+0xde>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	691a      	ldr	r2, [r3, #16]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	0892      	lsrs	r2, r2, #2
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6919      	ldr	r1, [r3, #16]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	430a      	orrs	r2, r1
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	e014      	b.n	8000820 <HAL_ADC_Init+0x108>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	0092      	lsls	r2, r2, #2
 8000802:	0892      	lsrs	r2, r2, #2
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	4b79      	ldr	r3, [pc, #484]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b78      	ldr	r3, [pc, #480]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 800080c:	4978      	ldr	r1, [pc, #480]	@ (80009f0 <HAL_ADC_Init+0x2d8>)
 800080e:	400a      	ands	r2, r1
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	4b76      	ldr	r3, [pc, #472]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4b74      	ldr	r3, [pc, #464]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68da      	ldr	r2, [r3, #12]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2118      	movs	r1, #24
 800082c:	438a      	bics	r2, r1
 800082e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68d9      	ldr	r1, [r3, #12]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	430a      	orrs	r2, r1
 8000840:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000842:	4b6a      	ldr	r3, [pc, #424]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b69      	ldr	r3, [pc, #420]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 8000848:	496a      	ldr	r1, [pc, #424]	@ (80009f4 <HAL_ADC_Init+0x2dc>)
 800084a:	400a      	ands	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800084e:	4b67      	ldr	r3, [pc, #412]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000856:	065a      	lsls	r2, r3, #25
 8000858:	4b64      	ldr	r3, [pc, #400]	@ (80009ec <HAL_ADC_Init+0x2d4>)
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	055b      	lsls	r3, r3, #21
 8000868:	4013      	ands	r3, r2
 800086a:	d108      	bne.n	800087e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689a      	ldr	r2, [r3, #8]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2180      	movs	r1, #128	@ 0x80
 8000878:	0549      	lsls	r1, r1, #21
 800087a:	430a      	orrs	r2, r1
 800087c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	495b      	ldr	r1, [pc, #364]	@ (80009f8 <HAL_ADC_Init+0x2e0>)
 800088a:	400a      	ands	r2, r1
 800088c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68d9      	ldr	r1, [r3, #12]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d101      	bne.n	80008a4 <HAL_ADC_Init+0x18c>
 80008a0:	2304      	movs	r3, #4
 80008a2:	e000      	b.n	80008a6 <HAL_ADC_Init+0x18e>
 80008a4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80008a6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2020      	movs	r0, #32
 80008ac:	5c1b      	ldrb	r3, [r3, r0]
 80008ae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80008b0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	202c      	movs	r0, #44	@ 0x2c
 80008b6:	5c1b      	ldrb	r3, [r3, r0]
 80008b8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80008ba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80008c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80008c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80008d0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008de:	23c2      	movs	r3, #194	@ 0xc2
 80008e0:	33ff      	adds	r3, #255	@ 0xff
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d00b      	beq.n	80008fe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68d9      	ldr	r1, [r3, #12]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80008f4:	431a      	orrs	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2221      	movs	r2, #33	@ 0x21
 8000902:	5c9b      	ldrb	r3, [r3, r2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d11a      	bne.n	800093e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2220      	movs	r2, #32
 800090c:	5c9b      	ldrb	r3, [r3, r2]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d109      	bne.n	8000926 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68da      	ldr	r2, [r3, #12]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0249      	lsls	r1, r1, #9
 8000920:	430a      	orrs	r2, r1
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	e00b      	b.n	800093e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800092a:	2220      	movs	r2, #32
 800092c:	431a      	orrs	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	2201      	movs	r2, #1
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000942:	2b01      	cmp	r3, #1
 8000944:	d11f      	bne.n	8000986 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	492a      	ldr	r1, [pc, #168]	@ (80009fc <HAL_ADC_Init+0x2e4>)
 8000952:	400a      	ands	r2, r1
 8000954:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6919      	ldr	r1, [r3, #16]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000964:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800096a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	430a      	orrs	r2, r1
 8000972:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2101      	movs	r1, #1
 8000980:	430a      	orrs	r2, r1
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	e00e      	b.n	80009a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	2201      	movs	r2, #1
 800098e:	4013      	ands	r3, r2
 8000990:	2b01      	cmp	r3, #1
 8000992:	d107      	bne.n	80009a4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	691a      	ldr	r2, [r3, #16]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2101      	movs	r1, #1
 80009a0:	438a      	bics	r2, r1
 80009a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2107      	movs	r1, #7
 80009b0:	438a      	bics	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6959      	ldr	r1, [r3, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	430a      	orrs	r2, r1
 80009c4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009d0:	2203      	movs	r2, #3
 80009d2:	4393      	bics	r3, r2
 80009d4:	2201      	movs	r2, #1
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	fffffefd 	.word	0xfffffefd
 80009ec:	40012708 	.word	0x40012708
 80009f0:	ffc3ffff 	.word	0xffc3ffff
 80009f4:	fdffffff 	.word	0xfdffffff
 80009f8:	fffe0219 	.word	0xfffe0219
 80009fc:	fffffc03 	.word	0xfffffc03

08000a00 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a0c:	2317      	movs	r3, #23
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	d161      	bne.n	8000ae4 <HAL_ADC_Start_DMA+0xe4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2250      	movs	r2, #80	@ 0x50
 8000a24:	5c9b      	ldrb	r3, [r3, r2]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <HAL_ADC_Start_DMA+0x2e>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e061      	b.n	8000af2 <HAL_ADC_Start_DMA+0xf2>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2250      	movs	r2, #80	@ 0x50
 8000a32:	2101      	movs	r1, #1
 8000a34:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d007      	beq.n	8000a5e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000a4e:	2317      	movs	r3, #23
 8000a50:	18fc      	adds	r4, r7, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 f9a1 	bl	8000d9c <ADC_Enable>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a5e:	2417      	movs	r4, #23
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d141      	bne.n	8000aec <HAL_ADC_Start_DMA+0xec>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a6c:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <HAL_ADC_Start_DMA+0xfc>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	0052      	lsls	r2, r2, #1
 8000a74:	431a      	orrs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2250      	movs	r2, #80	@ 0x50
 8000a84:	2100      	movs	r1, #0
 8000a86:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <HAL_ADC_Start_DMA+0x100>)
 8000a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	4a1b      	ldr	r2, [pc, #108]	@ (8000b04 <HAL_ADC_Start_DMA+0x104>)
 8000a96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <HAL_ADC_Start_DMA+0x108>)
 8000a9e:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	221c      	movs	r2, #28
 8000aa6:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3340      	adds	r3, #64	@ 0x40
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	193c      	adds	r4, r7, r4
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f000 fbc9 	bl	8001260 <HAL_DMA_Start_IT>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	7023      	strb	r3, [r4, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2104      	movs	r1, #4
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	e003      	b.n	8000aec <HAL_ADC_Start_DMA+0xec>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ae4:	2317      	movs	r3, #23
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	2202      	movs	r2, #2
 8000aea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000aec:	2317      	movs	r3, #23
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	781b      	ldrb	r3, [r3, #0]
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b007      	add	sp, #28
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	fffff0fe 	.word	0xfffff0fe
 8000b00:	08000e6d 	.word	0x08000e6d
 8000b04:	08000f21 	.word	0x08000f21
 8000b08:	08000f3f 	.word	0x08000f3f

08000b0c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2204      	movs	r2, #4
 8000b28:	4013      	ands	r3, r2
 8000b2a:	d003      	beq.n	8000b34 <HAL_ADC_IRQHandler+0x28>
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4013      	ands	r3, r2
 8000b32:	d107      	bne.n	8000b44 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2208      	movs	r2, #8
 8000b38:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000b3a:	d04e      	beq.n	8000bda <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4013      	ands	r3, r2
 8000b42:	d04a      	beq.n	8000bda <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b48:	2210      	movs	r2, #16
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b52:	2280      	movs	r2, #128	@ 0x80
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	23c0      	movs	r3, #192	@ 0xc0
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	4013      	ands	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d126      	bne.n	8000bc2 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2208      	movs	r2, #8
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d022      	beq.n	8000bc2 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2204      	movs	r2, #4
 8000b84:	4013      	ands	r3, r2
 8000b86:	d110      	bne.n	8000baa <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	210c      	movs	r1, #12
 8000b94:	438a      	bics	r2, r1
 8000b96:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c5c <HAL_ADC_IRQHandler+0x150>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ba8:	e00b      	b.n	8000bc2 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bae:	2220      	movs	r2, #32
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	2201      	movs	r2, #1
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fb2b 	bl	8000220 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d003      	beq.n	8000bda <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	4013      	ands	r3, r2
 8000be0:	d012      	beq.n	8000c08 <HAL_ADC_IRQHandler+0xfc>
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	4013      	ands	r3, r2
 8000be8:	d00e      	beq.n	8000c08 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bee:	2280      	movs	r2, #128	@ 0x80
 8000bf0:	0252      	lsls	r2, r2, #9
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f838 	bl	8000c70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d020      	beq.n	8000c52 <HAL_ADC_IRQHandler+0x146>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	2210      	movs	r2, #16
 8000c14:	4013      	ands	r3, r2
 8000c16:	d01c      	beq.n	8000c52 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d10d      	bne.n	8000c4a <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c32:	2202      	movs	r2, #2
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2210      	movs	r2, #16
 8000c40:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 f81b 	bl	8000c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2210      	movs	r2, #16
 8000c50:	601a      	str	r2, [r3, #0]
  }

}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	fffffefe 	.word	0xfffffefe

08000c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2250      	movs	r2, #80	@ 0x50
 8000c9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ADC_ConfigChannel+0x18>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e06c      	b.n	8000d82 <HAL_ADC_ConfigChannel+0xf2>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2250      	movs	r2, #80	@ 0x50
 8000cac:	2101      	movs	r1, #1
 8000cae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d00b      	beq.n	8000cd4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2250      	movs	r2, #80	@ 0x50
 8000ccc:	2100      	movs	r1, #0
 8000cce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e056      	b.n	8000d82 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8000d8c <HAL_ADC_ConfigChannel+0xfc>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d028      	beq.n	8000d30 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	035b      	lsls	r3, r3, #13
 8000cea:	0b5a      	lsrs	r2, r3, #13
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	02db      	lsls	r3, r3, #11
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d009      	beq.n	8000d14 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000d00:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d06:	2180      	movs	r1, #128	@ 0x80
 8000d08:	0409      	lsls	r1, r1, #16
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000d0e:	200a      	movs	r0, #10
 8000d10:	f000 f930 	bl	8000f74 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d02b      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	03c9      	lsls	r1, r1, #15
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e023      	b.n	8000d78 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	035b      	lsls	r3, r3, #13
 8000d3c:	0b5b      	lsrs	r3, r3, #13
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	400a      	ands	r2, r1
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	02db      	lsls	r3, r3, #11
 8000d50:	4013      	ands	r3, r2
 8000d52:	d005      	beq.n	8000d60 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d5a:	490e      	ldr	r1, [pc, #56]	@ (8000d94 <HAL_ADC_ConfigChannel+0x104>)
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d005      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <HAL_ADC_ConfigChannel+0x100>)
 8000d72:	4909      	ldr	r1, [pc, #36]	@ (8000d98 <HAL_ADC_ConfigChannel+0x108>)
 8000d74:	400a      	ands	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2250      	movs	r2, #80	@ 0x50
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	00001001 	.word	0x00001001
 8000d90:	40012708 	.word	0x40012708
 8000d94:	ff7fffff 	.word	0xff7fffff
 8000d98:	ffbfffff 	.word	0xffbfffff

08000d9c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2203      	movs	r2, #3
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d108      	bne.n	8000dc8 <ADC_Enable+0x2c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <ADC_Enable+0x2c>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <ADC_Enable+0x2e>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d146      	bne.n	8000e5c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a24      	ldr	r2, [pc, #144]	@ (8000e68 <ADC_Enable+0xcc>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dde:	2210      	movs	r2, #16
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	2201      	movs	r2, #1
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e033      	b.n	8000e5e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 f8b4 	bl	8000f74 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e0c:	f7ff fc7a 	bl	8000704 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e14:	e01b      	b.n	8000e4e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e16:	f7ff fc75 	bl	8000704 <HAL_GetTick>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d914      	bls.n	8000e4e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d00d      	beq.n	8000e4e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e36:	2210      	movs	r2, #16
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	2201      	movs	r2, #1
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e007      	b.n	8000e5e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d1dc      	bne.n	8000e16 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	80000017 	.word	0x80000017

08000e6c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7e:	2250      	movs	r2, #80	@ 0x50
 8000e80:	4013      	ands	r3, r2
 8000e82:	d141      	bne.n	8000f08 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e88:	2280      	movs	r2, #128	@ 0x80
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	23c0      	movs	r3, #192	@ 0xc0
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d12e      	bne.n	8000efe <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d129      	bne.n	8000efe <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d122      	bne.n	8000efe <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d110      	bne.n	8000ee6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	210c      	movs	r1, #12
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed8:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <ADC_DMAConvCplt+0xb0>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	2201      	movs	r2, #1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ee4:	e00b      	b.n	8000efe <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eea:	2220      	movs	r2, #32
 8000eec:	431a      	orrs	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff f98d 	bl	8000220 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f06:	e005      	b.n	8000f14 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	0010      	movs	r0, r2
 8000f12:	4798      	blx	r3
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	fffffefe 	.word	0xfffffefe

08000f20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fe95 	bl	8000c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f50:	2240      	movs	r2, #64	@ 0x40
 8000f52:	431a      	orrs	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fe8a 	bl	8000c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <ADC_DelayMicroSecond+0x38>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	490b      	ldr	r1, [pc, #44]	@ (8000fb0 <ADC_DelayMicroSecond+0x3c>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff f8c0 	bl	8000108 <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4353      	muls	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8000f92:	e002      	b.n	8000f9a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f9      	bne.n	8000f94 <ADC_DelayMicroSecond+0x20>
  }
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	000f4240 	.word	0x000f4240

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0002      	movs	r2, r0
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fc6:	d809      	bhi.n	8000fdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	231f      	movs	r3, #31
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_EnableIRQ+0x30>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4091      	lsls	r1, r2
 8000fd8:	000a      	movs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
  }
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffc:	d828      	bhi.n	8001050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	33c0      	adds	r3, #192	@ 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	589b      	ldr	r3, [r3, r2]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	@ 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	@ 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	481f      	ldr	r0, [pc, #124]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	33c0      	adds	r3, #192	@ 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104e:	e031      	b.n	80010b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0019      	movs	r1, r3
 8001058:	230f      	movs	r3, #15
 800105a:	400b      	ands	r3, r1
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3306      	adds	r3, #6
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	@ 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001c      	movs	r4, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18c3      	adds	r3, r0, r3
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d301      	bcc.n	80010dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d8:	2301      	movs	r3, #1
 80010da:	e010      	b.n	80010fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SysTick_Config+0x44>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff7c 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x44>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	0002      	movs	r2, r0
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff33 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ffaf 	bl	80010c4 <SysTick_Config>
 8001166:	0003      	movs	r3, r0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e061      	b.n	8001246 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <HAL_DMA_Init+0xe0>)
 8001188:	4694      	mov	ip, r2
 800118a:	4463      	add	r3, ip
 800118c:	2114      	movs	r1, #20
 800118e:	0018      	movs	r0, r3
 8001190:	f7fe ffba 	bl	8000108 <__udivsi3>
 8001194:	0003      	movs	r3, r0
 8001196:	009a      	lsls	r2, r3, #2
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <HAL_DMA_Init+0xe4>)
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2225      	movs	r2, #37	@ 0x25
 80011a6:	2102      	movs	r1, #2
 80011a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4a28      	ldr	r2, [pc, #160]	@ (8001258 <HAL_DMA_Init+0xe8>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	01db      	lsls	r3, r3, #7
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d018      	beq.n	800122e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_DMA_Init+0xec>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	211c      	movs	r1, #28
 8001206:	400b      	ands	r3, r1
 8001208:	210f      	movs	r1, #15
 800120a:	4099      	lsls	r1, r3
 800120c:	000b      	movs	r3, r1
 800120e:	43d9      	mvns	r1, r3
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_DMA_Init+0xec>)
 8001212:	400a      	ands	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_DMA_Init+0xec>)
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	201c      	movs	r0, #28
 8001224:	4003      	ands	r3, r0
 8001226:	409a      	lsls	r2, r3
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_DMA_Init+0xec>)
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2225      	movs	r2, #37	@ 0x25
 8001238:	2101      	movs	r1, #1
 800123a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	2100      	movs	r1, #0
 8001242:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	bffdfff8 	.word	0xbffdfff8
 8001254:	40020000 	.word	0x40020000
 8001258:	ffff800f 	.word	0xffff800f
 800125c:	400200a8 	.word	0x400200a8

08001260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800126e:	2317      	movs	r3, #23
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2224      	movs	r2, #36	@ 0x24
 800127a:	5c9b      	ldrb	r3, [r3, r2]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_DMA_Start_IT+0x24>
 8001280:	2302      	movs	r3, #2
 8001282:	e04f      	b.n	8001324 <HAL_DMA_Start_IT+0xc4>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2224      	movs	r2, #36	@ 0x24
 8001288:	2101      	movs	r1, #1
 800128a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2225      	movs	r2, #37	@ 0x25
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b01      	cmp	r3, #1
 8001296:	d13a      	bne.n	800130e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2225      	movs	r2, #37	@ 0x25
 800129c:	2102      	movs	r1, #2
 800129e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	438a      	bics	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f8e3 	bl	8001488 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d008      	beq.n	80012dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	210e      	movs	r1, #14
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e00f      	b.n	80012fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2104      	movs	r1, #4
 80012e8:	438a      	bics	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	210a      	movs	r1, #10
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e007      	b.n	800131e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2224      	movs	r2, #36	@ 0x24
 8001312:	2100      	movs	r1, #0
 8001314:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001316:	2317      	movs	r3, #23
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	2202      	movs	r2, #2
 800131c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800131e:	2317      	movs	r3, #23
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	781b      	ldrb	r3, [r3, #0]
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b006      	add	sp, #24
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001348:	221c      	movs	r2, #28
 800134a:	4013      	ands	r3, r2
 800134c:	2204      	movs	r2, #4
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	d026      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x7a>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2204      	movs	r2, #4
 800135c:	4013      	ands	r3, r2
 800135e:	d022      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2220      	movs	r2, #32
 8001368:	4013      	ands	r3, r2
 800136a:	d107      	bne.n	800137c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2104      	movs	r1, #4
 8001378:	438a      	bics	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001380:	221c      	movs	r2, #28
 8001382:	401a      	ands	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	2104      	movs	r1, #4
 800138a:	4091      	lsls	r1, r2
 800138c:	000a      	movs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	2b00      	cmp	r3, #0
 8001396:	d100      	bne.n	800139a <HAL_DMA_IRQHandler+0x6e>
 8001398:	e071      	b.n	800147e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	0010      	movs	r0, r2
 80013a2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	e06b      	b.n	800147e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	221c      	movs	r2, #28
 80013ac:	4013      	ands	r3, r2
 80013ae:	2202      	movs	r2, #2
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	d02d      	beq.n	8001416 <HAL_DMA_IRQHandler+0xea>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d029      	beq.n	8001416 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2220      	movs	r2, #32
 80013ca:	4013      	ands	r3, r2
 80013cc:	d10b      	bne.n	80013e6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	210a      	movs	r1, #10
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2225      	movs	r2, #37	@ 0x25
 80013e2:	2101      	movs	r1, #1
 80013e4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	221c      	movs	r2, #28
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	2102      	movs	r1, #2
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2224      	movs	r2, #36	@ 0x24
 80013fe:	2100      	movs	r1, #0
 8001400:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001406:	2b00      	cmp	r3, #0
 8001408:	d039      	beq.n	800147e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	0010      	movs	r0, r2
 8001412:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001414:	e033      	b.n	800147e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	221c      	movs	r2, #28
 800141c:	4013      	ands	r3, r2
 800141e:	2208      	movs	r2, #8
 8001420:	409a      	lsls	r2, r3
 8001422:	0013      	movs	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	d02a      	beq.n	8001480 <HAL_DMA_IRQHandler+0x154>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2208      	movs	r2, #8
 800142e:	4013      	ands	r3, r2
 8001430:	d026      	beq.n	8001480 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	210e      	movs	r1, #14
 800143e:	438a      	bics	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	221c      	movs	r2, #28
 8001448:	401a      	ands	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	2101      	movs	r1, #1
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2225      	movs	r2, #37	@ 0x25
 8001460:	2101      	movs	r1, #1
 8001462:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	@ 0x24
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	0010      	movs	r0, r2
 800147c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46c0      	nop			@ (mov r8, r8)
}
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}

08001488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	221c      	movs	r2, #28
 800149c:	401a      	ands	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	2101      	movs	r1, #1
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d108      	bne.n	80014cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014ca:	e007      	b.n	80014dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]
}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b004      	add	sp, #16
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014fa:	e14f      	b.n	800179c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <HAL_GPIO_Init+0x30>
 8001512:	e140      	b.n	8001796 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	2b01      	cmp	r3, #1
 800151e:	d005      	beq.n	800152c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001528:	2b02      	cmp	r3, #2
 800152a:	d130      	bne.n	800158e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001562:	2201      	movs	r2, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	2201      	movs	r2, #1
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b03      	cmp	r3, #3
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d123      	bne.n	800161e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	58d3      	ldr	r3, [r2, r3]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2207      	movs	r2, #7
 80015e8:	4013      	ands	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2107      	movs	r1, #7
 8001602:	400b      	ands	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	23c0      	movs	r3, #192	@ 0xc0
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_GPIO_Init+0x17c>
 800165e:	e09a      	b.n	8001796 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001660:	4b54      	ldr	r3, [pc, #336]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001664:	4b53      	ldr	r3, [pc, #332]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800166c:	4a52      	ldr	r2, [pc, #328]	@ (80017b8 <HAL_GPIO_Init+0x2d4>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	589b      	ldr	r3, [r3, r2]
 8001678:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2203      	movs	r2, #3
 800167e:	4013      	ands	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	409a      	lsls	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	43da      	mvns	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	23a0      	movs	r3, #160	@ 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	429a      	cmp	r2, r3
 8001698:	d019      	beq.n	80016ce <HAL_GPIO_Init+0x1ea>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a47      	ldr	r2, [pc, #284]	@ (80017bc <HAL_GPIO_Init+0x2d8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0x1e6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a46      	ldr	r2, [pc, #280]	@ (80017c0 <HAL_GPIO_Init+0x2dc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00d      	beq.n	80016c6 <HAL_GPIO_Init+0x1e2>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <HAL_GPIO_Init+0x2e0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x1de>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <HAL_GPIO_Init+0x2e4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_GPIO_Init+0x1da>
 80016ba:	2305      	movs	r3, #5
 80016bc:	e008      	b.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016be:	2306      	movs	r3, #6
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016c2:	2303      	movs	r3, #3
 80016c4:	e004      	b.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016ce:	2300      	movs	r3, #0
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	2103      	movs	r1, #3
 80016d4:	400a      	ands	r2, r1
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4093      	lsls	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e0:	4935      	ldr	r1, [pc, #212]	@ (80017b8 <HAL_GPIO_Init+0x2d4>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ee:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	035b      	lsls	r3, r3, #13
 8001706:	4013      	ands	r3, r2
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001718:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43da      	mvns	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	039b      	lsls	r3, r3, #14
 8001730:	4013      	ands	r3, r2
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800173c:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43da      	mvns	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	4013      	ands	r3, r2
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_GPIO_Init+0x2e8>)
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	40da      	lsrs	r2, r3
 80017a4:	1e13      	subs	r3, r2, #0
 80017a6:	d000      	beq.n	80017aa <HAL_GPIO_Init+0x2c6>
 80017a8:	e6a8      	b.n	80014fc <HAL_GPIO_Init+0x18>
  }
}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b006      	add	sp, #24
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	50000400 	.word	0x50000400
 80017c0:	50000800 	.word	0x50000800
 80017c4:	50000c00 	.word	0x50000c00
 80017c8:	50001c00 	.word	0x50001c00
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f000 fbaf 	bl	8001f42 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e4:	4bcf      	ldr	r3, [pc, #828]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	220c      	movs	r2, #12
 80017ea:	4013      	ands	r3, r2
 80017ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ee:	4bcd      	ldr	r3, [pc, #820]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	025b      	lsls	r3, r3, #9
 80017f6:	4013      	ands	r3, r2
 80017f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d100      	bne.n	8001806 <HAL_RCC_OscConfig+0x36>
 8001804:	e07e      	b.n	8001904 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d112      	bne.n	8001838 <HAL_RCC_OscConfig+0x68>
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	429a      	cmp	r2, r3
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4bc1      	ldr	r3, [pc, #772]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x5a>
 8001828:	e06b      	b.n	8001902 <HAL_RCC_OscConfig+0x132>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d167      	bne.n	8001902 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f000 fb85 	bl	8001f42 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	429a      	cmp	r2, r3
 8001842:	d107      	bne.n	8001854 <HAL_RCC_OscConfig+0x84>
 8001844:	4bb7      	ldr	r3, [pc, #732]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4bb6      	ldr	r3, [pc, #728]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800184a:	2180      	movs	r1, #128	@ 0x80
 800184c:	0249      	lsls	r1, r1, #9
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e027      	b.n	80018a4 <HAL_RCC_OscConfig+0xd4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	23a0      	movs	r3, #160	@ 0xa0
 800185a:	02db      	lsls	r3, r3, #11
 800185c:	429a      	cmp	r2, r3
 800185e:	d10e      	bne.n	800187e <HAL_RCC_OscConfig+0xae>
 8001860:	4bb0      	ldr	r3, [pc, #704]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4baf      	ldr	r3, [pc, #700]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	02c9      	lsls	r1, r1, #11
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	4bad      	ldr	r3, [pc, #692]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4bac      	ldr	r3, [pc, #688]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0249      	lsls	r1, r1, #9
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e012      	b.n	80018a4 <HAL_RCC_OscConfig+0xd4>
 800187e:	4ba9      	ldr	r3, [pc, #676]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4ba8      	ldr	r3, [pc, #672]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001884:	49a8      	ldr	r1, [pc, #672]	@ (8001b28 <HAL_RCC_OscConfig+0x358>)
 8001886:	400a      	ands	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	4ba6      	ldr	r3, [pc, #664]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4ba2      	ldr	r3, [pc, #648]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4ba1      	ldr	r3, [pc, #644]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800189e:	49a3      	ldr	r1, [pc, #652]	@ (8001b2c <HAL_RCC_OscConfig+0x35c>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d015      	beq.n	80018d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7fe ff2a 	bl	8000704 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b4:	e009      	b.n	80018ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b6:	f7fe ff25 	bl	8000704 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	@ 0x64
 80018c2:	d902      	bls.n	80018ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f000 fb3c 	bl	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ca:	4b96      	ldr	r3, [pc, #600]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	4013      	ands	r3, r2
 80018d4:	d0ef      	beq.n	80018b6 <HAL_RCC_OscConfig+0xe6>
 80018d6:	e015      	b.n	8001904 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe ff14 	bl	8000704 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e2:	f7fe ff0f 	bl	8000704 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b64      	cmp	r3, #100	@ 0x64
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e326      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	029b      	lsls	r3, r3, #10
 80018fc:	4013      	ands	r3, r2
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x112>
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001902:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d100      	bne.n	8001910 <HAL_RCC_OscConfig+0x140>
 800190e:	e08b      	b.n	8001a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d13e      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1d0>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d13b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001928:	4b7e      	ldr	r3, [pc, #504]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2204      	movs	r2, #4
 800192e:	4013      	ands	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_RCC_OscConfig+0x16c>
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e302      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b79      	ldr	r3, [pc, #484]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a7b      	ldr	r2, [pc, #492]	@ (8001b30 <HAL_RCC_OscConfig+0x360>)
 8001942:	4013      	ands	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	021a      	lsls	r2, r3, #8
 800194c:	4b75      	ldr	r3, [pc, #468]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001952:	4b74      	ldr	r3, [pc, #464]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2209      	movs	r2, #9
 8001958:	4393      	bics	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	4b71      	ldr	r3, [pc, #452]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001964:	f000 fc40 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8001968:	0001      	movs	r1, r0
 800196a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	220f      	movs	r2, #15
 8001972:	4013      	ands	r3, r2
 8001974:	4a6f      	ldr	r2, [pc, #444]	@ (8001b34 <HAL_RCC_OscConfig+0x364>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	000a      	movs	r2, r1
 800197a:	40da      	lsrs	r2, r3
 800197c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b38 <HAL_RCC_OscConfig+0x368>)
 800197e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001980:	4b6e      	ldr	r3, [pc, #440]	@ (8001b3c <HAL_RCC_OscConfig+0x36c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2513      	movs	r5, #19
 8001986:	197c      	adds	r4, r7, r5
 8001988:	0018      	movs	r0, r3
 800198a:	f7fe fe75 	bl	8000678 <HAL_InitTick>
 800198e:	0003      	movs	r3, r0
 8001990:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001992:	197b      	adds	r3, r7, r5
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d046      	beq.n	8001a28 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800199a:	197b      	adds	r3, r7, r5
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	e2d0      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d027      	beq.n	80019f6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2209      	movs	r2, #9
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	4b5c      	ldr	r3, [pc, #368]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7fe fea4 	bl	8000704 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7fe fe9f 	bl	8000704 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e2b6      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2204      	movs	r2, #4
 80019da:	4013      	ands	r3, r2
 80019dc:	d0f1      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b51      	ldr	r3, [pc, #324]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a53      	ldr	r2, [pc, #332]	@ (8001b30 <HAL_RCC_OscConfig+0x360>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	021a      	lsls	r2, r3, #8
 80019ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	e018      	b.n	8001a28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	438a      	bics	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe fe7f 	bl	8000704 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7fe fe7a 	bl	8000704 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e291      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2204      	movs	r2, #4
 8001a24:	4013      	ands	r3, r2
 8001a26:	d1f1      	bne.n	8001a0c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d100      	bne.n	8001a34 <HAL_RCC_OscConfig+0x264>
 8001a32:	e0a1      	b.n	8001b78 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d140      	bne.n	8001abc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x282>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e277      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a52:	4b34      	ldr	r3, [pc, #208]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a3a      	ldr	r2, [pc, #232]	@ (8001b40 <HAL_RCC_OscConfig+0x370>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a60:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a66:	4b2f      	ldr	r3, [pc, #188]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	0a19      	lsrs	r1, r3, #8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	061a      	lsls	r2, r3, #24
 8001a74:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	0b5b      	lsrs	r3, r3, #13
 8001a80:	3301      	adds	r3, #1
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	0212      	lsls	r2, r2, #8
 8001a86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a88:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	210f      	movs	r1, #15
 8001a90:	400b      	ands	r3, r1
 8001a92:	4928      	ldr	r1, [pc, #160]	@ (8001b34 <HAL_RCC_OscConfig+0x364>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a98:	4b27      	ldr	r3, [pc, #156]	@ (8001b38 <HAL_RCC_OscConfig+0x368>)
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <HAL_RCC_OscConfig+0x36c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2513      	movs	r5, #19
 8001aa2:	197c      	adds	r4, r7, r5
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7fe fde7 	bl	8000678 <HAL_InitTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d060      	beq.n	8001b78 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001ab6:	197b      	adds	r3, r7, r5
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	e242      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d03f      	beq.n	8001b44 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ac4:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001aca:	2180      	movs	r1, #128	@ 0x80
 8001acc:	0049      	lsls	r1, r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fe17 	bl	8000704 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001adc:	f7fe fe12 	bl	8000704 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e229      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aee:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_RCC_OscConfig+0x370>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	0a19      	lsrs	r1, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	061a      	lsls	r2, r3, #24
 8001b1c:	4b01      	ldr	r3, [pc, #4]	@ (8001b24 <HAL_RCC_OscConfig+0x354>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e029      	b.n	8001b78 <HAL_RCC_OscConfig+0x3a8>
 8001b24:	40021000 	.word	0x40021000
 8001b28:	fffeffff 	.word	0xfffeffff
 8001b2c:	fffbffff 	.word	0xfffbffff
 8001b30:	ffffe0ff 	.word	0xffffe0ff
 8001b34:	08002364 	.word	0x08002364
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b44:	4bbd      	ldr	r3, [pc, #756]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4bbc      	ldr	r3, [pc, #752]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001b4a:	49bd      	ldr	r1, [pc, #756]	@ (8001e40 <HAL_RCC_OscConfig+0x670>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7fe fdd8 	bl	8000704 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b5a:	f7fe fdd3 	bl	8000704 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1ea      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b6c:	4bb3      	ldr	r3, [pc, #716]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	@ 0x80
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d036      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4bac      	ldr	r3, [pc, #688]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001b8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b8e:	4bab      	ldr	r3, [pc, #684]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	430a      	orrs	r2, r1
 8001b94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7fe fdb5 	bl	8000704 <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7fe fdb0 	bl	8000704 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1c7      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bb2:	4ba2      	ldr	r3, [pc, #648]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0f1      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x3d0>
 8001bbc:	e018      	b.n	8001bf0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	438a      	bics	r2, r1
 8001bc8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7fe fd9b 	bl	8000704 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7fe fd96 	bl	8000704 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1ad      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001be6:	4b95      	ldr	r3, [pc, #596]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bea:	2202      	movs	r2, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1f1      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <HAL_RCC_OscConfig+0x42c>
 8001bfa:	e0ae      	b.n	8001d5a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfc:	2027      	movs	r0, #39	@ 0x27
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c04:	4b8d      	ldr	r3, [pc, #564]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d109      	bne.n	8001c24 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b8a      	ldr	r3, [pc, #552]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c14:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	0549      	lsls	r1, r1, #21
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b87      	ldr	r3, [pc, #540]	@ (8001e44 <HAL_RCC_OscConfig+0x674>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d11a      	bne.n	8001c66 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c30:	4b84      	ldr	r3, [pc, #528]	@ (8001e44 <HAL_RCC_OscConfig+0x674>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b83      	ldr	r3, [pc, #524]	@ (8001e44 <HAL_RCC_OscConfig+0x674>)
 8001c36:	2180      	movs	r1, #128	@ 0x80
 8001c38:	0049      	lsls	r1, r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe fd61 	bl	8000704 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe fd5c 	bl	8000704 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e173      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e44 <HAL_RCC_OscConfig+0x674>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4b2>
 8001c72:	4b72      	ldr	r3, [pc, #456]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c76:	4b71      	ldr	r3, [pc, #452]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	0049      	lsls	r1, r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c80:	e031      	b.n	8001ce6 <HAL_RCC_OscConfig+0x516>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4d4>
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c90:	496b      	ldr	r1, [pc, #428]	@ (8001e40 <HAL_RCC_OscConfig+0x670>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c96:	4b69      	ldr	r3, [pc, #420]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c9a:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001c9c:	496a      	ldr	r1, [pc, #424]	@ (8001e48 <HAL_RCC_OscConfig+0x678>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ca2:	e020      	b.n	8001ce6 <HAL_RCC_OscConfig+0x516>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	23a0      	movs	r3, #160	@ 0xa0
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10e      	bne.n	8001cce <HAL_RCC_OscConfig+0x4fe>
 8001cb0:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb4:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cb6:	2180      	movs	r1, #128	@ 0x80
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0049      	lsls	r1, r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x516>
 8001cce:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cd4:	495a      	ldr	r1, [pc, #360]	@ (8001e40 <HAL_RCC_OscConfig+0x670>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cda:	4b58      	ldr	r3, [pc, #352]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cde:	4b57      	ldr	r3, [pc, #348]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001ce0:	4959      	ldr	r1, [pc, #356]	@ (8001e48 <HAL_RCC_OscConfig+0x678>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fd09 	bl	8000704 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf6:	e009      	b.n	8001d0c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fd04 	bl	8000704 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_RCC_OscConfig+0x67c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e11a      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0ef      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x528>
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fcf3 	bl	8000704 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d22:	e009      	b.n	8001d38 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7fe fcee 	bl	8000704 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	4a47      	ldr	r2, [pc, #284]	@ (8001e4c <HAL_RCC_OscConfig+0x67c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e104      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d1ef      	bne.n	8001d24 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d44:	2327      	movs	r3, #39	@ 0x27
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d52:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d54:	493e      	ldr	r1, [pc, #248]	@ (8001e50 <HAL_RCC_OscConfig+0x680>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	4013      	ands	r3, r2
 8001d62:	d049      	beq.n	8001df8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d026      	beq.n	8001dba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d6c:	4b33      	ldr	r3, [pc, #204]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d84:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <HAL_RCC_OscConfig+0x684>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	4b32      	ldr	r3, [pc, #200]	@ (8001e54 <HAL_RCC_OscConfig+0x684>)
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	0189      	lsls	r1, r1, #6
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fcb7 	bl	8000704 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9c:	f7fe fcb2 	bl	8000704 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0c9      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dae:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f1      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5cc>
 8001db8:	e01e      	b.n	8001df8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_RCC_OscConfig+0x684>)
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_RCC_OscConfig+0x684>)
 8001dcc:	4922      	ldr	r1, [pc, #136]	@ (8001e58 <HAL_RCC_OscConfig+0x688>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fc97 	bl	8000704 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ddc:	f7fe fc92 	bl	8000704 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0a9      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d1f1      	bne.n	8001ddc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d100      	bne.n	8001e02 <HAL_RCC_OscConfig+0x632>
 8001e00:	e09e      	b.n	8001f40 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d100      	bne.n	8001e0a <HAL_RCC_OscConfig+0x63a>
 8001e08:	e077      	b.n	8001efa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d158      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_OscConfig+0x66c>)
 8001e18:	4910      	ldr	r1, [pc, #64]	@ (8001e5c <HAL_RCC_OscConfig+0x68c>)
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fc71 	bl	8000704 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe fc6c 	bl	8000704 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d914      	bls.n	8001e60 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e083      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	fffffeff 	.word	0xfffffeff
 8001e44:	40007000 	.word	0x40007000
 8001e48:	fffffbff 	.word	0xfffffbff
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	efffffff 	.word	0xefffffff
 8001e54:	40010000 	.word	0x40010000
 8001e58:	ffffdfff 	.word	0xffffdfff
 8001e5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e60:	4b3a      	ldr	r3, [pc, #232]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	049b      	lsls	r3, r3, #18
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d1dd      	bne.n	8001e28 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6c:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a37      	ldr	r2, [pc, #220]	@ (8001f50 <HAL_RCC_OscConfig+0x780>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e84:	431a      	orrs	r2, r3
 8001e86:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	0449      	lsls	r1, r1, #17
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fc33 	bl	8000704 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fc2e 	bl	8000704 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e045      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001eb6:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	049b      	lsls	r3, r3, #18
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x6d4>
 8001ec2:	e03d      	b.n	8001f40 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001eca:	4922      	ldr	r1, [pc, #136]	@ (8001f54 <HAL_RCC_OscConfig+0x784>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fc18 	bl	8000704 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe fc13 	bl	8000704 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e02a      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	049b      	lsls	r3, r3, #18
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x70a>
 8001ef8:	e022      	b.n	8001f40 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e01d      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	025b      	lsls	r3, r3, #9
 8001f12:	401a      	ands	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10f      	bne.n	8001f3c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	23f0      	movs	r3, #240	@ 0xf0
 8001f20:	039b      	lsls	r3, r3, #14
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	23c0      	movs	r3, #192	@ 0xc0
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b00a      	add	sp, #40	@ 0x28
 8001f48:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	ff02ffff 	.word	0xff02ffff
 8001f54:	feffffff 	.word	0xfeffffff

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e128      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b96      	ldr	r3, [pc, #600]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d91e      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b93      	ldr	r3, [pc, #588]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4393      	bics	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	4b90      	ldr	r3, [pc, #576]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fbba 	bl	8000704 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	e009      	b.n	8001faa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe fbb5 	bl	8000704 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a8a      	ldr	r2, [pc, #552]	@ (80021cc <HAL_RCC_ClockConfig+0x274>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e109      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b87      	ldr	r3, [pc, #540]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc2:	4b83      	ldr	r3, [pc, #524]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	22f0      	movs	r2, #240	@ 0xf0
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b7f      	ldr	r3, [pc, #508]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x8a>
 8001fe0:	e089      	b.n	80020f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fea:	4b79      	ldr	r3, [pc, #484]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	029b      	lsls	r3, r3, #10
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d120      	bne.n	8002038 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0e1      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002002:	4b73      	ldr	r3, [pc, #460]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	049b      	lsls	r3, r3, #18
 800200a:	4013      	ands	r3, r2
 800200c:	d114      	bne.n	8002038 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0d5      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d106      	bne.n	8002028 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800201a:	4b6d      	ldr	r3, [pc, #436]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2204      	movs	r2, #4
 8002020:	4013      	ands	r3, r2
 8002022:	d109      	bne.n	8002038 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0ca      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002028:	4b69      	ldr	r3, [pc, #420]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0c2      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002038:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2203      	movs	r2, #3
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4b62      	ldr	r3, [pc, #392]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800204c:	f7fe fb5a 	bl	8000704 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d111      	bne.n	8002080 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800205c:	e009      	b.n	8002072 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205e:	f7fe fb51 	bl	8000704 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	4a58      	ldr	r2, [pc, #352]	@ (80021cc <HAL_RCC_ClockConfig+0x274>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0a5      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002072:	4b57      	ldr	r3, [pc, #348]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	220c      	movs	r2, #12
 8002078:	4013      	ands	r3, r2
 800207a:	2b08      	cmp	r3, #8
 800207c:	d1ef      	bne.n	800205e <HAL_RCC_ClockConfig+0x106>
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d111      	bne.n	80020ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002088:	e009      	b.n	800209e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208a:	f7fe fb3b 	bl	8000704 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a4d      	ldr	r2, [pc, #308]	@ (80021cc <HAL_RCC_ClockConfig+0x274>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e08f      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	220c      	movs	r2, #12
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d1ef      	bne.n	800208a <HAL_RCC_ClockConfig+0x132>
 80020aa:	e024      	b.n	80020f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d11b      	bne.n	80020ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b4:	e009      	b.n	80020ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7fe fb25 	bl	8000704 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a42      	ldr	r2, [pc, #264]	@ (80021cc <HAL_RCC_ClockConfig+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e079      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ca:	4b41      	ldr	r3, [pc, #260]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	220c      	movs	r2, #12
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d1ef      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x15e>
 80020d6:	e00e      	b.n	80020f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fb14 	bl	8000704 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	4a3a      	ldr	r2, [pc, #232]	@ (80021cc <HAL_RCC_ClockConfig+0x274>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e068      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020ec:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	220c      	movs	r2, #12
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d21e      	bcs.n	8002142 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002104:	4b30      	ldr	r3, [pc, #192]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	4b2e      	ldr	r3, [pc, #184]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002116:	f7fe faf5 	bl	8000704 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	e009      	b.n	8002134 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe faf0 	bl	8000704 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	4a28      	ldr	r2, [pc, #160]	@ (80021cc <HAL_RCC_ClockConfig+0x274>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e044      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002134:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_RCC_ClockConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	4013      	ands	r3, r2
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d1ee      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <HAL_RCC_ClockConfig+0x27c>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2208      	movs	r2, #8
 8002166:	4013      	ands	r3, r2
 8002168:	d00a      	beq.n	8002180 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4a1a      	ldr	r2, [pc, #104]	@ (80021d8 <HAL_RCC_ClockConfig+0x280>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	00da      	lsls	r2, r3, #3
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 800217c:	430a      	orrs	r2, r1
 800217e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002180:	f000 f832 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8002184:	0001      	movs	r1, r0
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_RCC_ClockConfig+0x278>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	220f      	movs	r2, #15
 800218e:	4013      	ands	r3, r2
 8002190:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <HAL_RCC_ClockConfig+0x284>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	000a      	movs	r2, r1
 8002196:	40da      	lsrs	r2, r3
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_RCC_ClockConfig+0x288>)
 800219a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_ClockConfig+0x28c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	250b      	movs	r5, #11
 80021a2:	197c      	adds	r4, r7, r5
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fa67 	bl	8000678 <HAL_InitTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021ae:	197b      	adds	r3, r7, r5
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80021b6:	197b      	adds	r3, r7, r5
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	e000      	b.n	80021be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	40022000 	.word	0x40022000
 80021cc:	00001388 	.word	0x00001388
 80021d0:	40021000 	.word	0x40021000
 80021d4:	fffff8ff 	.word	0xfffff8ff
 80021d8:	ffffc7ff 	.word	0xffffc7ff
 80021dc:	08002364 	.word	0x08002364
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80021ee:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	220c      	movs	r2, #12
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d013      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x3e>
 80021fe:	d85c      	bhi.n	80022ba <HAL_RCC_GetSysClockFreq+0xd2>
 8002200:	2b04      	cmp	r3, #4
 8002202:	d002      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x22>
 8002204:	2b08      	cmp	r3, #8
 8002206:	d00b      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x38>
 8002208:	e057      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800220a:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2210      	movs	r2, #16
 8002210:	4013      	ands	r3, r2
 8002212:	d002      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002214:	4b33      	ldr	r3, [pc, #204]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002216:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002218:	e05d      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800221a:	4b33      	ldr	r3, [pc, #204]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800221c:	613b      	str	r3, [r7, #16]
      break;
 800221e:	e05a      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b32      	ldr	r3, [pc, #200]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002222:	613b      	str	r3, [r7, #16]
      break;
 8002224:	e057      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	220f      	movs	r2, #15
 800222c:	4013      	ands	r3, r2
 800222e:	4a30      	ldr	r2, [pc, #192]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	5cd3      	ldrb	r3, [r2, r3]
 8002232:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	0d9b      	lsrs	r3, r3, #22
 8002238:	2203      	movs	r2, #3
 800223a:	4013      	ands	r3, r2
 800223c:	3301      	adds	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	4013      	ands	r3, r2
 800224a:	d00f      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	000a      	movs	r2, r1
 8002250:	0152      	lsls	r2, r2, #5
 8002252:	1a52      	subs	r2, r2, r1
 8002254:	0193      	lsls	r3, r2, #6
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	185b      	adds	r3, r3, r1
 800225c:	025b      	lsls	r3, r3, #9
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7fd ff51 	bl	8000108 <__udivsi3>
 8002266:	0003      	movs	r3, r0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e023      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	4013      	ands	r3, r2
 8002274:	d00f      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	000a      	movs	r2, r1
 800227a:	0152      	lsls	r2, r2, #5
 800227c:	1a52      	subs	r2, r2, r1
 800227e:	0193      	lsls	r3, r2, #6
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	185b      	adds	r3, r3, r1
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f7fd ff3c 	bl	8000108 <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e00e      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	000a      	movs	r2, r1
 800229a:	0152      	lsls	r2, r2, #5
 800229c:	1a52      	subs	r2, r2, r1
 800229e:	0193      	lsls	r3, r2, #6
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	185b      	adds	r3, r3, r1
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7fd ff2c 	bl	8000108 <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
      break;
 80022b8:	e00d      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0b5b      	lsrs	r3, r3, #13
 80022c0:	2207      	movs	r2, #7
 80022c2:	4013      	ands	r3, r2
 80022c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	0212      	lsls	r2, r2, #8
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      break;
 80022d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022d6:	693b      	ldr	r3, [r7, #16]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	003d0900 	.word	0x003d0900
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	007a1200 	.word	0x007a1200
 80022f0:	08002374 	.word	0x08002374

080022f4 <memset>:
 80022f4:	0003      	movs	r3, r0
 80022f6:	1882      	adds	r2, r0, r2
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d100      	bne.n	80022fe <memset+0xa>
 80022fc:	4770      	bx	lr
 80022fe:	7019      	strb	r1, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	e7f9      	b.n	80022f8 <memset+0x4>

08002304 <__libc_init_array>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	2600      	movs	r6, #0
 8002308:	4c0c      	ldr	r4, [pc, #48]	@ (800233c <__libc_init_array+0x38>)
 800230a:	4d0d      	ldr	r5, [pc, #52]	@ (8002340 <__libc_init_array+0x3c>)
 800230c:	1b64      	subs	r4, r4, r5
 800230e:	10a4      	asrs	r4, r4, #2
 8002310:	42a6      	cmp	r6, r4
 8002312:	d109      	bne.n	8002328 <__libc_init_array+0x24>
 8002314:	2600      	movs	r6, #0
 8002316:	f000 f819 	bl	800234c <_init>
 800231a:	4c0a      	ldr	r4, [pc, #40]	@ (8002344 <__libc_init_array+0x40>)
 800231c:	4d0a      	ldr	r5, [pc, #40]	@ (8002348 <__libc_init_array+0x44>)
 800231e:	1b64      	subs	r4, r4, r5
 8002320:	10a4      	asrs	r4, r4, #2
 8002322:	42a6      	cmp	r6, r4
 8002324:	d105      	bne.n	8002332 <__libc_init_array+0x2e>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	00b3      	lsls	r3, r6, #2
 800232a:	58eb      	ldr	r3, [r5, r3]
 800232c:	4798      	blx	r3
 800232e:	3601      	adds	r6, #1
 8002330:	e7ee      	b.n	8002310 <__libc_init_array+0xc>
 8002332:	00b3      	lsls	r3, r6, #2
 8002334:	58eb      	ldr	r3, [r5, r3]
 8002336:	4798      	blx	r3
 8002338:	3601      	adds	r6, #1
 800233a:	e7f2      	b.n	8002322 <__libc_init_array+0x1e>
 800233c:	08002380 	.word	0x08002380
 8002340:	08002380 	.word	0x08002380
 8002344:	08002384 	.word	0x08002384
 8002348:	08002380 	.word	0x08002380

0800234c <_init>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr

08002358 <_fini>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr

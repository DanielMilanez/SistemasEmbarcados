
Projeto GLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001840  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001900  08001900  00002900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800191c  0800191c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800191c  0800191c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800191c  0800191c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800191c  0800191c  0000291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001920  08001920  00002920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001924  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001930  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001930  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e04  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e65  00000000  00000000  00005e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00006ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b7  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001231c  00000000  00000000  0000731f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005038  00000000  00000000  0001963b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006faa2  00000000  00000000  0001e673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008e115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bcc  00000000  00000000  0008e158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0008ed24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080018e8 	.word	0x080018e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080018e8 	.word	0x080018e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fac5 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83d 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f88b 	bl	8000348 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Glcd_init();
 8000232:	f000 fa43 	bl	80006bc <Glcd_init>

  Info_manager(0x40 + 18, 0, CS1);
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	2052      	movs	r0, #82	@ 0x52
 800023c:	f000 f90e 	bl	800045c <Info_manager>
  Info_manager(0xBE + 18, 0, CS1);
 8000240:	2200      	movs	r2, #0
 8000242:	2100      	movs	r1, #0
 8000244:	20d0      	movs	r0, #208	@ 0xd0
 8000246:	f000 f909 	bl	800045c <Info_manager>

  for (int i = 0; i < (64 - 18); ++i){
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e00a      	b.n	8000266 <main+0x46>
	  Info_manager(0xFC, 1, CS1);
 8000250:	2200      	movs	r2, #0
 8000252:	2101      	movs	r1, #1
 8000254:	20fc      	movs	r0, #252	@ 0xfc
 8000256:	f000 f901 	bl	800045c <Info_manager>
	  HAL_Delay(25);
 800025a:	2019      	movs	r0, #25
 800025c:	f000 fb1a 	bl	8000894 <HAL_Delay>
  for (int i = 0; i < (64 - 18); ++i){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3301      	adds	r3, #1
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b2d      	cmp	r3, #45	@ 0x2d
 800026a:	ddf1      	ble.n	8000250 <main+0x30>
  }

  Info_manager(0x40, 0, CS2);
 800026c:	2201      	movs	r2, #1
 800026e:	2100      	movs	r1, #0
 8000270:	2040      	movs	r0, #64	@ 0x40
 8000272:	f000 f8f3 	bl	800045c <Info_manager>
  Info_manager(0xBE, 0, CS2);
 8000276:	2201      	movs	r2, #1
 8000278:	2100      	movs	r1, #0
 800027a:	20be      	movs	r0, #190	@ 0xbe
 800027c:	f000 f8ee 	bl	800045c <Info_manager>

  for (int i = 0; i < (64 - 16); ++i){
 8000280:	2300      	movs	r3, #0
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	e00a      	b.n	800029c <main+0x7c>
	  Info_manager(0xFC, 1, CS2);
 8000286:	2201      	movs	r2, #1
 8000288:	2101      	movs	r1, #1
 800028a:	20fc      	movs	r0, #252	@ 0xfc
 800028c:	f000 f8e6 	bl	800045c <Info_manager>
	  HAL_Delay(25);
 8000290:	2019      	movs	r0, #25
 8000292:	f000 faff 	bl	8000894 <HAL_Delay>
  for (int i = 0; i < (64 - 16); ++i){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	2b2f      	cmp	r3, #47	@ 0x2f
 80002a0:	ddf1      	ble.n	8000286 <main+0x66>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a2:	46c0      	nop			@ (mov r8, r8)
 80002a4:	e7fd      	b.n	80002a2 <main+0x82>
	...

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b095      	sub	sp, #84	@ 0x54
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2418      	movs	r4, #24
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2338      	movs	r3, #56	@ 0x38
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f001 fae9 	bl	8001890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2314      	movs	r3, #20
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f001 fae2 	bl	8001890 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <SystemClock_Config+0x98>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000344 <SystemClock_Config+0x9c>)
 80002d2:	401a      	ands	r2, r3
 80002d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <SystemClock_Config+0x98>)
 80002d6:	2180      	movs	r1, #128	@ 0x80
 80002d8:	0109      	lsls	r1, r1, #4
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	0021      	movs	r1, r4
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2210      	movs	r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fd36 	bl	8000d6c <HAL_RCC_OscConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000304:	f000 f9f3 	bl	80006ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	220f      	movs	r2, #15
 800030c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2201      	movs	r2, #1
 8000312:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2280      	movs	r2, #128	@ 0x80
 8000318:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f001 f8e2 	bl	80014f4 <HAL_RCC_ClockConfig>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000334:	f000 f9db 	bl	80006ee <Error_Handler>
  }
}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b015      	add	sp, #84	@ 0x54
 800033e:	bd90      	pop	{r4, r7, pc}
 8000340:	40007000 	.word	0x40007000
 8000344:	ffffe7ff 	.word	0xffffe7ff

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b089      	sub	sp, #36	@ 0x24
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	240c      	movs	r4, #12
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f001 fa99 	bl	8001890 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b3c      	ldr	r3, [pc, #240]	@ (8000450 <MX_GPIO_Init+0x108>)
 8000360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000362:	4b3b      	ldr	r3, [pc, #236]	@ (8000450 <MX_GPIO_Init+0x108>)
 8000364:	2101      	movs	r1, #1
 8000366:	430a      	orrs	r2, r1
 8000368:	62da      	str	r2, [r3, #44]	@ 0x2c
 800036a:	4b39      	ldr	r3, [pc, #228]	@ (8000450 <MX_GPIO_Init+0x108>)
 800036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800036e:	2201      	movs	r2, #1
 8000370:	4013      	ands	r3, r2
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <MX_GPIO_Init+0x108>)
 8000378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800037a:	4b35      	ldr	r3, [pc, #212]	@ (8000450 <MX_GPIO_Init+0x108>)
 800037c:	2102      	movs	r1, #2
 800037e:	430a      	orrs	r2, r1
 8000380:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000382:	4b33      	ldr	r3, [pc, #204]	@ (8000450 <MX_GPIO_Init+0x108>)
 8000384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000386:	2202      	movs	r2, #2
 8000388:	4013      	ands	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b30      	ldr	r3, [pc, #192]	@ (8000450 <MX_GPIO_Init+0x108>)
 8000390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000392:	4b2f      	ldr	r3, [pc, #188]	@ (8000450 <MX_GPIO_Init+0x108>)
 8000394:	2104      	movs	r1, #4
 8000396:	430a      	orrs	r2, r1
 8000398:	62da      	str	r2, [r3, #44]	@ 0x2c
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <MX_GPIO_Init+0x108>)
 800039c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800039e:	2204      	movs	r2, #4
 80003a0:	4013      	ands	r3, r2
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D0_Pin|D1_Pin|D5_Pin
 80003a6:	23fc      	movs	r3, #252	@ 0xfc
 80003a8:	00d9      	lsls	r1, r3, #3
 80003aa:	23a0      	movs	r3, #160	@ 0xa0
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2200      	movs	r2, #0
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fcbd 	bl	8000d30 <HAL_GPIO_WritePin>
                          |D4_Pin|RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|CS2_Pin|D7_Pin|CS1_Pin
 80003b6:	23ef      	movs	r3, #239	@ 0xef
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	4826      	ldr	r0, [pc, #152]	@ (8000454 <MX_GPIO_Init+0x10c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	0019      	movs	r1, r3
 80003c0:	f000 fcb6 	bl	8000d30 <HAL_GPIO_WritePin>
                          |D2_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 80003c4:	4b24      	ldr	r3, [pc, #144]	@ (8000458 <MX_GPIO_Init+0x110>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	2180      	movs	r1, #128	@ 0x80
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fcb0 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin D0_Pin D1_Pin D5_Pin
                           D4_Pin RST_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D0_Pin|D1_Pin|D5_Pin
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	22fc      	movs	r2, #252	@ 0xfc
 80003d4:	00d2      	lsls	r2, r2, #3
 80003d6:	601a      	str	r2, [r3, #0]
                          |D4_Pin|RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	193a      	adds	r2, r7, r4
 80003ec:	23a0      	movs	r3, #160	@ 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fb26 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin CS2_Pin D7_Pin CS1_Pin
                           D2_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = D6_Pin|CS2_Pin|D7_Pin|CS1_Pin
 80003f8:	0021      	movs	r1, r4
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	22ef      	movs	r2, #239	@ 0xef
 80003fe:	00d2      	lsls	r2, r2, #3
 8000400:	601a      	str	r2, [r3, #0]
                          |D2_Pin|RS_Pin|RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	000c      	movs	r4, r1
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2201      	movs	r2, #1
 8000408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	193b      	adds	r3, r7, r4
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000416:	193b      	adds	r3, r7, r4
 8000418:	4a0e      	ldr	r2, [pc, #56]	@ (8000454 <MX_GPIO_Init+0x10c>)
 800041a:	0019      	movs	r1, r3
 800041c:	0010      	movs	r0, r2
 800041e:	f000 fb11 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8000422:	0021      	movs	r1, r4
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2280      	movs	r2, #128	@ 0x80
 8000428:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2201      	movs	r2, #1
 800042e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 800043c:	187b      	adds	r3, r7, r1
 800043e:	4a06      	ldr	r2, [pc, #24]	@ (8000458 <MX_GPIO_Init+0x110>)
 8000440:	0019      	movs	r1, r3
 8000442:	0010      	movs	r0, r2
 8000444:	f000 fafe 	bl	8000a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b009      	add	sp, #36	@ 0x24
 800044e:	bd90      	pop	{r4, r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	50000400 	.word	0x50000400
 8000458:	50000800 	.word	0x50000800

0800045c <Info_manager>:

/* USER CODE BEGIN 4 */
void Info_manager(unsigned data, unsigned rs, unsigned chip_select){
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
	PORT.P0 = (data >> 0) & 1;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	1c1a      	adds	r2, r3, #0
 800046c:	2301      	movs	r3, #1
 800046e:	4013      	ands	r3, r2
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b8f      	ldr	r3, [pc, #572]	@ (80006b0 <Info_manager+0x254>)
 8000474:	2101      	movs	r1, #1
 8000476:	400a      	ands	r2, r1
 8000478:	0010      	movs	r0, r2
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	438a      	bics	r2, r1
 8000480:	1c11      	adds	r1, r2, #0
 8000482:	1c02      	adds	r2, r0, #0
 8000484:	430a      	orrs	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	085b      	lsrs	r3, r3, #1
 800048c:	1c1a      	adds	r2, r3, #0
 800048e:	2301      	movs	r3, #1
 8000490:	4013      	ands	r3, r2
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b86      	ldr	r3, [pc, #536]	@ (80006b0 <Info_manager+0x254>)
 8000496:	2101      	movs	r1, #1
 8000498:	400a      	ands	r2, r1
 800049a:	1890      	adds	r0, r2, r2
 800049c:	781a      	ldrb	r2, [r3, #0]
 800049e:	2102      	movs	r1, #2
 80004a0:	438a      	bics	r2, r1
 80004a2:	1c11      	adds	r1, r2, #0
 80004a4:	1c02      	adds	r2, r0, #0
 80004a6:	430a      	orrs	r2, r1
 80004a8:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	089b      	lsrs	r3, r3, #2
 80004ae:	1c1a      	adds	r2, r3, #0
 80004b0:	2301      	movs	r3, #1
 80004b2:	4013      	ands	r3, r2
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b7e      	ldr	r3, [pc, #504]	@ (80006b0 <Info_manager+0x254>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	400a      	ands	r2, r1
 80004bc:	0090      	lsls	r0, r2, #2
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	2104      	movs	r1, #4
 80004c2:	438a      	bics	r2, r1
 80004c4:	1c11      	adds	r1, r2, #0
 80004c6:	1c02      	adds	r2, r0, #0
 80004c8:	430a      	orrs	r2, r1
 80004ca:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	1c1a      	adds	r2, r3, #0
 80004d2:	2301      	movs	r3, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b75      	ldr	r3, [pc, #468]	@ (80006b0 <Info_manager+0x254>)
 80004da:	2101      	movs	r1, #1
 80004dc:	400a      	ands	r2, r1
 80004de:	00d0      	lsls	r0, r2, #3
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	2108      	movs	r1, #8
 80004e4:	438a      	bics	r2, r1
 80004e6:	1c11      	adds	r1, r2, #0
 80004e8:	1c02      	adds	r2, r0, #0
 80004ea:	430a      	orrs	r2, r1
 80004ec:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	091b      	lsrs	r3, r3, #4
 80004f2:	1c1a      	adds	r2, r3, #0
 80004f4:	2301      	movs	r3, #1
 80004f6:	4013      	ands	r3, r2
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b6d      	ldr	r3, [pc, #436]	@ (80006b0 <Info_manager+0x254>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	400a      	ands	r2, r1
 8000500:	0110      	lsls	r0, r2, #4
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	2110      	movs	r1, #16
 8000506:	438a      	bics	r2, r1
 8000508:	1c11      	adds	r1, r2, #0
 800050a:	1c02      	adds	r2, r0, #0
 800050c:	430a      	orrs	r2, r1
 800050e:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	1c1a      	adds	r2, r3, #0
 8000516:	2301      	movs	r3, #1
 8000518:	4013      	ands	r3, r2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b64      	ldr	r3, [pc, #400]	@ (80006b0 <Info_manager+0x254>)
 800051e:	2101      	movs	r1, #1
 8000520:	400a      	ands	r2, r1
 8000522:	0150      	lsls	r0, r2, #5
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	2120      	movs	r1, #32
 8000528:	438a      	bics	r2, r1
 800052a:	1c11      	adds	r1, r2, #0
 800052c:	1c02      	adds	r2, r0, #0
 800052e:	430a      	orrs	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	099b      	lsrs	r3, r3, #6
 8000536:	1c1a      	adds	r2, r3, #0
 8000538:	2301      	movs	r3, #1
 800053a:	4013      	ands	r3, r2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b5c      	ldr	r3, [pc, #368]	@ (80006b0 <Info_manager+0x254>)
 8000540:	2101      	movs	r1, #1
 8000542:	400a      	ands	r2, r1
 8000544:	0190      	lsls	r0, r2, #6
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	2140      	movs	r1, #64	@ 0x40
 800054a:	438a      	bics	r2, r1
 800054c:	1c11      	adds	r1, r2, #0
 800054e:	1c02      	adds	r2, r0, #0
 8000550:	430a      	orrs	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	09db      	lsrs	r3, r3, #7
 8000558:	1c1a      	adds	r2, r3, #0
 800055a:	2301      	movs	r3, #1
 800055c:	4013      	ands	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b53      	ldr	r3, [pc, #332]	@ (80006b0 <Info_manager+0x254>)
 8000562:	01d0      	lsls	r0, r2, #7
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	217f      	movs	r1, #127	@ 0x7f
 8000568:	400a      	ands	r2, r1
 800056a:	1c11      	adds	r1, r2, #0
 800056c:	1c02      	adds	r2, r0, #0
 800056e:	430a      	orrs	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]

	if (!chip_select) HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, SET);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d106      	bne.n	8000586 <Info_manager+0x12a>
 8000578:	4b4e      	ldr	r3, [pc, #312]	@ (80006b4 <Info_manager+0x258>)
 800057a:	2201      	movs	r2, #1
 800057c:	2120      	movs	r1, #32
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fbd6 	bl	8000d30 <HAL_GPIO_WritePin>
 8000584:	e005      	b.n	8000592 <Info_manager+0x136>
	else HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, SET);
 8000586:	4b4b      	ldr	r3, [pc, #300]	@ (80006b4 <Info_manager+0x258>)
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fbcf 	bl	8000d30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, (rs ? SET : RESET));
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	4193      	sbcs	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	001a      	movs	r2, r3
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4844      	ldr	r0, [pc, #272]	@ (80006b4 <Info_manager+0x258>)
 80005a2:	0019      	movs	r1, r3
 80005a4:	f000 fbc4 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, RESET);
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4841      	ldr	r0, [pc, #260]	@ (80006b4 <Info_manager+0x258>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0019      	movs	r1, r3
 80005b2:	f000 fbbd 	bl	8000d30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, PORT.P0);
 80005b6:	4b3e      	ldr	r3, [pc, #248]	@ (80006b0 <Info_manager+0x254>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	07db      	lsls	r3, r3, #31
 80005bc:	0fdb      	lsrs	r3, r3, #31
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	001a      	movs	r2, r3
 80005c2:	23a0      	movs	r3, #160	@ 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2140      	movs	r1, #64	@ 0x40
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 fbb1 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, PORT.P1);
 80005ce:	4b38      	ldr	r3, [pc, #224]	@ (80006b0 <Info_manager+0x254>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	079b      	lsls	r3, r3, #30
 80005d4:	0fdb      	lsrs	r3, r3, #31
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	001a      	movs	r2, r3
 80005da:	23a0      	movs	r3, #160	@ 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2180      	movs	r1, #128	@ 0x80
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fba5 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, PORT.P2);
 80005e6:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <Info_manager+0x254>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	075b      	lsls	r3, r3, #29
 80005ec:	0fdb      	lsrs	r3, r3, #31
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	001a      	movs	r2, r3
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <Info_manager+0x258>)
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fb9a 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, PORT.P3);
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <Info_manager+0x254>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	071b      	lsls	r3, r3, #28
 8000602:	0fdb      	lsrs	r3, r3, #31
 8000604:	b2db      	uxtb	r3, r3
 8000606:	001a      	movs	r2, r3
 8000608:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <Info_manager+0x25c>)
 800060a:	2180      	movs	r1, #128	@ 0x80
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fb8f 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <Info_manager+0x254>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	06db      	lsls	r3, r3, #27
 8000618:	0fdb      	lsrs	r3, r3, #31
 800061a:	b2db      	uxtb	r3, r3
 800061c:	001a      	movs	r2, r3
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	0099      	lsls	r1, r3, #2
 8000622:	23a0      	movs	r3, #160	@ 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fb82 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <Info_manager+0x254>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	069b      	lsls	r3, r3, #26
 8000632:	0fdb      	lsrs	r3, r3, #31
 8000634:	b2db      	uxtb	r3, r3
 8000636:	001a      	movs	r2, r3
 8000638:	2380      	movs	r3, #128	@ 0x80
 800063a:	0059      	lsls	r1, r3, #1
 800063c:	23a0      	movs	r3, #160	@ 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fb75 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Info_manager+0x254>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	065b      	lsls	r3, r3, #25
 800064c:	0fdb      	lsrs	r3, r3, #31
 800064e:	b2db      	uxtb	r3, r3
 8000650:	001a      	movs	r2, r3
 8000652:	2380      	movs	r3, #128	@ 0x80
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <Info_manager+0x258>)
 8000658:	0019      	movs	r1, r3
 800065a:	f000 fb69 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <Info_manager+0x254>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	061b      	lsls	r3, r3, #24
 8000664:	0fdb      	lsrs	r3, r3, #31
 8000666:	b2db      	uxtb	r3, r3
 8000668:	001a      	movs	r2, r3
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <Info_manager+0x258>)
 800066c:	2110      	movs	r1, #16
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fb5e 	bl	8000d30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8000674:	23a0      	movs	r3, #160	@ 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	2201      	movs	r2, #1
 800067a:	2120      	movs	r1, #32
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fb57 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8000682:	23a0      	movs	r3, #160	@ 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	2200      	movs	r2, #0
 8000688:	2120      	movs	r1, #32
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fb50 	bl	8000d30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, RESET);
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <Info_manager+0x258>)
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fb4a 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, RESET);
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <Info_manager+0x258>)
 800069e:	2200      	movs	r2, #0
 80006a0:	2108      	movs	r1, #8
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fb44 	bl	8000d30 <HAL_GPIO_WritePin>
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b004      	add	sp, #16
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	50000400 	.word	0x50000400
 80006b8:	50000800 	.word	0x50000800

080006bc <Glcd_init>:

void Glcd_init(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	Info_manager(0xC0, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	20c0      	movs	r0, #192	@ 0xc0
 80006c6:	f7ff fec9 	bl	800045c <Info_manager>
	Info_manager(0xC0, 0, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2100      	movs	r1, #0
 80006ce:	20c0      	movs	r0, #192	@ 0xc0
 80006d0:	f7ff fec4 	bl	800045c <Info_manager>

	Info_manager(0x3E, 0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	203e      	movs	r0, #62	@ 0x3e
 80006da:	f7ff febf 	bl	800045c <Info_manager>
	Info_manager(0x3E, 0, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2100      	movs	r1, #0
 80006e2:	203e      	movs	r0, #62	@ 0x3e
 80006e4:	f7ff feba 	bl	800045c <Info_manager>
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f2:	b672      	cpsid	i
}
 80006f4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	e7fd      	b.n	80006f6 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <HAL_MspInit+0x24>)
 8000702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <HAL_MspInit+0x24>)
 8000706:	2101      	movs	r1, #1
 8000708:	430a      	orrs	r2, r1
 800070a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <HAL_MspInit+0x24>)
 800070e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_MspInit+0x24>)
 8000712:	2180      	movs	r1, #128	@ 0x80
 8000714:	0549      	lsls	r1, r1, #21
 8000716:	430a      	orrs	r2, r1
 8000718:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f886 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f7ff fff7 	bl	8000756 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	@ (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	@ (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078e:	f001 f887 	bl	80018a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000792:	f7ff fd45 	bl	8000220 <main>

08000796 <LoopForever>:

LoopForever:
    b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007a4:	08001924 	.word	0x08001924
  ldr r2, =_sbss
 80007a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ac:	20000030 	.word	0x20000030

080007b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_COMP_IRQHandler>
	...

080007b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <HAL_Init+0x3c>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <HAL_Init+0x3c>)
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	430a      	orrs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 f811 	bl	80007f4 <HAL_InitTick>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d003      	beq.n	80007de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e001      	b.n	80007e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007de:	f7ff ff8d 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <HAL_InitTick+0x5c>)
 80007fe:	681c      	ldr	r4, [r3, #0]
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <HAL_InitTick+0x60>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	0019      	movs	r1, r3
 8000806:	23fa      	movs	r3, #250	@ 0xfa
 8000808:	0098      	lsls	r0, r3, #2
 800080a:	f7ff fc7d 	bl	8000108 <__udivsi3>
 800080e:	0003      	movs	r3, r0
 8000810:	0019      	movs	r1, r3
 8000812:	0020      	movs	r0, r4
 8000814:	f7ff fc78 	bl	8000108 <__udivsi3>
 8000818:	0003      	movs	r3, r0
 800081a:	0018      	movs	r0, r3
 800081c:	f000 f905 	bl	8000a2a <HAL_SYSTICK_Config>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	e00f      	b.n	8000848 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d80b      	bhi.n	8000846 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2301      	movs	r3, #1
 8000832:	425b      	negs	r3, r3
 8000834:	2200      	movs	r2, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f000 f8e2 	bl	8000a00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_InitTick+0x64>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b003      	add	sp, #12
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <HAL_IncTick+0x1c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <HAL_IncTick+0x20>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	18d2      	adds	r2, r2, r3
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <HAL_IncTick+0x20>)
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	20000008 	.word	0x20000008
 800087c:	2000002c 	.word	0x2000002c

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <HAL_GetTick+0x10>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	2000002c 	.word	0x2000002c

08000894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff fff0 	bl	8000880 <HAL_GetTick>
 80008a0:	0003      	movs	r3, r0
 80008a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	d005      	beq.n	80008ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_Delay+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	001a      	movs	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	189b      	adds	r3, r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	f7ff ffe0 	bl	8000880 <HAL_GetTick>
 80008c0:	0002      	movs	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <HAL_Delay+0x28>
  {
  }
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0002      	movs	r2, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80008f0:	d828      	bhi.n	8000944 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f2:	4a2f      	ldr	r2, [pc, #188]	@ (80009b0 <__NVIC_SetPriority+0xd4>)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	33c0      	adds	r3, #192	@ 0xc0
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	589b      	ldr	r3, [r3, r2]
 8000902:	1dfa      	adds	r2, r7, #7
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	0011      	movs	r1, r2
 8000908:	2203      	movs	r2, #3
 800090a:	400a      	ands	r2, r1
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	21ff      	movs	r1, #255	@ 0xff
 8000910:	4091      	lsls	r1, r2
 8000912:	000a      	movs	r2, r1
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	22ff      	movs	r2, #255	@ 0xff
 8000920:	401a      	ands	r2, r3
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0018      	movs	r0, r3
 8000928:	2303      	movs	r3, #3
 800092a:	4003      	ands	r3, r0
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	481f      	ldr	r0, [pc, #124]	@ (80009b0 <__NVIC_SetPriority+0xd4>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	430a      	orrs	r2, r1
 800093c:	33c0      	adds	r3, #192	@ 0xc0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000942:	e031      	b.n	80009a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <__NVIC_SetPriority+0xd8>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0019      	movs	r1, r3
 800094c:	230f      	movs	r3, #15
 800094e:	400b      	ands	r3, r1
 8000950:	3b08      	subs	r3, #8
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3306      	adds	r3, #6
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	3304      	adds	r3, #4
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1dfa      	adds	r2, r7, #7
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	0011      	movs	r1, r2
 8000964:	2203      	movs	r2, #3
 8000966:	400a      	ands	r2, r1
 8000968:	00d2      	lsls	r2, r2, #3
 800096a:	21ff      	movs	r1, #255	@ 0xff
 800096c:	4091      	lsls	r1, r2
 800096e:	000a      	movs	r2, r1
 8000970:	43d2      	mvns	r2, r2
 8000972:	401a      	ands	r2, r3
 8000974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	019b      	lsls	r3, r3, #6
 800097a:	22ff      	movs	r2, #255	@ 0xff
 800097c:	401a      	ands	r2, r3
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	0018      	movs	r0, r3
 8000984:	2303      	movs	r3, #3
 8000986:	4003      	ands	r3, r0
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098c:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <__NVIC_SetPriority+0xd8>)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	001c      	movs	r4, r3
 8000994:	230f      	movs	r3, #15
 8000996:	4023      	ands	r3, r4
 8000998:	3b08      	subs	r3, #8
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	430a      	orrs	r2, r1
 800099e:	3306      	adds	r3, #6
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	18c3      	adds	r3, r0, r3
 80009a4:	3304      	adds	r3, #4
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b003      	add	sp, #12
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	1e5a      	subs	r2, r3, #1
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	045b      	lsls	r3, r3, #17
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d301      	bcc.n	80009d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009cc:	2301      	movs	r3, #1
 80009ce:	e010      	b.n	80009f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <SysTick_Config+0x44>)
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	3a01      	subs	r2, #1
 80009d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d8:	2301      	movs	r3, #1
 80009da:	425b      	negs	r3, r3
 80009dc:	2103      	movs	r1, #3
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff ff7c 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <SysTick_Config+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <SysTick_Config+0x44>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	1c02      	adds	r2, r0, #0
 8000a10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff ff5d 	bl	80008dc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ffbf 	bl	80009b8 <SysTick_Config>
 8000a3a:	0003      	movs	r3, r0
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a5a:	e14f      	b.n	8000cfc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	4091      	lsls	r1, r2
 8000a66:	000a      	movs	r2, r1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d100      	bne.n	8000a74 <HAL_GPIO_Init+0x30>
 8000a72:	e140      	b.n	8000cf6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	409a      	lsls	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2203      	movs	r2, #3
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2203      	movs	r2, #3
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	58d3      	ldr	r3, [r2, r3]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2207      	movs	r2, #7
 8000b48:	4013      	ands	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	43da      	mvns	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2107      	movs	r1, #7
 8000b62:	400b      	ands	r3, r1
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	6939      	ldr	r1, [r7, #16]
 8000b7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	23c0      	movs	r3, #192	@ 0xc0
 8000bb8:	029b      	lsls	r3, r3, #10
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x17c>
 8000bbe:	e09a      	b.n	8000cf6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc4:	4b53      	ldr	r3, [pc, #332]	@ (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bcc:	4a52      	ldr	r2, [pc, #328]	@ (8000d18 <HAL_GPIO_Init+0x2d4>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	23a0      	movs	r3, #160	@ 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d019      	beq.n	8000c2e <HAL_GPIO_Init+0x1ea>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a47      	ldr	r2, [pc, #284]	@ (8000d1c <HAL_GPIO_Init+0x2d8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d013      	beq.n	8000c2a <HAL_GPIO_Init+0x1e6>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a46      	ldr	r2, [pc, #280]	@ (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d00d      	beq.n	8000c26 <HAL_GPIO_Init+0x1e2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a45      	ldr	r2, [pc, #276]	@ (8000d24 <HAL_GPIO_Init+0x2e0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d007      	beq.n	8000c22 <HAL_GPIO_Init+0x1de>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a44      	ldr	r2, [pc, #272]	@ (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_GPIO_Init+0x1da>
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	e008      	b.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c1e:	2306      	movs	r3, #6
 8000c20:	e006      	b.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c22:	2303      	movs	r3, #3
 8000c24:	e004      	b.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e002      	b.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	2103      	movs	r1, #3
 8000c34:	400a      	ands	r2, r1
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	4093      	lsls	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c40:	4935      	ldr	r1, [pc, #212]	@ (8000d18 <HAL_GPIO_Init+0x2d4>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	43da      	mvns	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	2380      	movs	r3, #128	@ 0x80
 8000c64:	035b      	lsls	r3, r3, #13
 8000c66:	4013      	ands	r3, r2
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	039b      	lsls	r3, r3, #14
 8000c90:	4013      	ands	r3, r2
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	029b      	lsls	r3, r3, #10
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	025b      	lsls	r3, r3, #9
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	40da      	lsrs	r2, r3
 8000d04:	1e13      	subs	r3, r2, #0
 8000d06:	d000      	beq.n	8000d0a <HAL_GPIO_Init+0x2c6>
 8000d08:	e6a8      	b.n	8000a5c <HAL_GPIO_Init+0x18>
  }
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b006      	add	sp, #24
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	50000400 	.word	0x50000400
 8000d20:	50000800 	.word	0x50000800
 8000d24:	50000c00 	.word	0x50000c00
 8000d28:	50001c00 	.word	0x50001c00
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	0008      	movs	r0, r1
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	1cbb      	adds	r3, r7, #2
 8000d3e:	1c02      	adds	r2, r0, #0
 8000d40:	801a      	strh	r2, [r3, #0]
 8000d42:	1c7b      	adds	r3, r7, #1
 8000d44:	1c0a      	adds	r2, r1, #0
 8000d46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d48:	1c7b      	adds	r3, r7, #1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d50:	1cbb      	adds	r3, r7, #2
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d58:	e003      	b.n	8000d62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d5a:	1cbb      	adds	r3, r7, #2
 8000d5c:	881a      	ldrh	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b08a      	sub	sp, #40	@ 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f000 fbaf 	bl	80014de <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d80:	4bcf      	ldr	r3, [pc, #828]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	220c      	movs	r2, #12
 8000d86:	4013      	ands	r3, r2
 8000d88:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d8a:	4bcd      	ldr	r3, [pc, #820]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	2380      	movs	r3, #128	@ 0x80
 8000d90:	025b      	lsls	r3, r3, #9
 8000d92:	4013      	ands	r3, r2
 8000d94:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d100      	bne.n	8000da2 <HAL_RCC_OscConfig+0x36>
 8000da0:	e07e      	b.n	8000ea0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d007      	beq.n	8000db8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	d112      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x68>
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	025b      	lsls	r3, r3, #9
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d10d      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	4bc1      	ldr	r3, [pc, #772]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d100      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5a>
 8000dc4:	e06b      	b.n	8000e9e <HAL_RCC_OscConfig+0x132>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d167      	bne.n	8000e9e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f000 fb85 	bl	80014de <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d107      	bne.n	8000df0 <HAL_RCC_OscConfig+0x84>
 8000de0:	4bb7      	ldr	r3, [pc, #732]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4bb6      	ldr	r3, [pc, #728]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000de6:	2180      	movs	r1, #128	@ 0x80
 8000de8:	0249      	lsls	r1, r1, #9
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e027      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	23a0      	movs	r3, #160	@ 0xa0
 8000df6:	02db      	lsls	r3, r3, #11
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d10e      	bne.n	8000e1a <HAL_RCC_OscConfig+0xae>
 8000dfc:	4bb0      	ldr	r3, [pc, #704]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4baf      	ldr	r3, [pc, #700]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e02:	2180      	movs	r1, #128	@ 0x80
 8000e04:	02c9      	lsls	r1, r1, #11
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	4bad      	ldr	r3, [pc, #692]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4bac      	ldr	r3, [pc, #688]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0249      	lsls	r1, r1, #9
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e012      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e1a:	4ba9      	ldr	r3, [pc, #676]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4ba8      	ldr	r3, [pc, #672]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e20:	49a8      	ldr	r1, [pc, #672]	@ (80010c4 <HAL_RCC_OscConfig+0x358>)
 8000e22:	400a      	ands	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	4ba6      	ldr	r3, [pc, #664]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	025b      	lsls	r3, r3, #9
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4ba2      	ldr	r3, [pc, #648]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4ba1      	ldr	r3, [pc, #644]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e3a:	49a3      	ldr	r1, [pc, #652]	@ (80010c8 <HAL_RCC_OscConfig+0x35c>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d015      	beq.n	8000e74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fd1a 	bl	8000880 <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e50:	e009      	b.n	8000e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e52:	f7ff fd15 	bl	8000880 <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b64      	cmp	r3, #100	@ 0x64
 8000e5e:	d902      	bls.n	8000e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	f000 fb3c 	bl	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e66:	4b96      	ldr	r3, [pc, #600]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	029b      	lsls	r3, r3, #10
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d0ef      	beq.n	8000e52 <HAL_RCC_OscConfig+0xe6>
 8000e72:	e015      	b.n	8000ea0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fd04 	bl	8000880 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fcff 	bl	8000880 <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b64      	cmp	r3, #100	@ 0x64
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e326      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e90:	4b8b      	ldr	r3, [pc, #556]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d1f0      	bne.n	8000e7e <HAL_RCC_OscConfig+0x112>
 8000e9c:	e000      	b.n	8000ea0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d100      	bne.n	8000eac <HAL_RCC_OscConfig+0x140>
 8000eaa:	e08b      	b.n	8000fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d005      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	2b0c      	cmp	r3, #12
 8000ebc:	d13e      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1d0>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d13b      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d004      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x16c>
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e302      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b79      	ldr	r3, [pc, #484]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a7b      	ldr	r2, [pc, #492]	@ (80010cc <HAL_RCC_OscConfig+0x360>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	021a      	lsls	r2, r3, #8
 8000ee8:	4b75      	ldr	r3, [pc, #468]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000eee:	4b74      	ldr	r3, [pc, #464]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2209      	movs	r2, #9
 8000ef4:	4393      	bics	r3, r2
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	4b71      	ldr	r3, [pc, #452]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f00:	f000 fc40 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8000f04:	0001      	movs	r1, r0
 8000f06:	4b6e      	ldr	r3, [pc, #440]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	4013      	ands	r3, r2
 8000f10:	4a6f      	ldr	r2, [pc, #444]	@ (80010d0 <HAL_RCC_OscConfig+0x364>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	000a      	movs	r2, r1
 8000f16:	40da      	lsrs	r2, r3
 8000f18:	4b6e      	ldr	r3, [pc, #440]	@ (80010d4 <HAL_RCC_OscConfig+0x368>)
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f1c:	4b6e      	ldr	r3, [pc, #440]	@ (80010d8 <HAL_RCC_OscConfig+0x36c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2513      	movs	r5, #19
 8000f22:	197c      	adds	r4, r7, r5
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fc65 	bl	80007f4 <HAL_InitTick>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f2e:	197b      	adds	r3, r7, r5
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d046      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	e2d0      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d027      	beq.n	8000f92 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f42:	4b5f      	ldr	r3, [pc, #380]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2209      	movs	r2, #9
 8000f48:	4393      	bics	r3, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc94 	bl	8000880 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc8f 	bl	8000880 <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e2b6      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f70:	4b53      	ldr	r3, [pc, #332]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2204      	movs	r2, #4
 8000f76:	4013      	ands	r3, r2
 8000f78:	d0f1      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7a:	4b51      	ldr	r3, [pc, #324]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a53      	ldr	r2, [pc, #332]	@ (80010cc <HAL_RCC_OscConfig+0x360>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	0019      	movs	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	021a      	lsls	r2, r3, #8
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	e018      	b.n	8000fc4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b4b      	ldr	r3, [pc, #300]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b4a      	ldr	r3, [pc, #296]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fc6f 	bl	8000880 <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fc6a 	bl	8000880 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e291      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fba:	4b41      	ldr	r3, [pc, #260]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d1f1      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2210      	movs	r2, #16
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d100      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x264>
 8000fce:	e0a1      	b.n	8001114 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d140      	bne.n	8001058 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x282>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e277      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	@ (80010dc <HAL_RCC_OscConfig+0x370>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8000ffe:	430a      	orrs	r2, r1
 8001000:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	0a19      	lsrs	r1, r3, #8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	061a      	lsls	r2, r3, #24
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8001012:	430a      	orrs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101a:	0b5b      	lsrs	r3, r3, #13
 800101c:	3301      	adds	r3, #1
 800101e:	2280      	movs	r2, #128	@ 0x80
 8001020:	0212      	lsls	r2, r2, #8
 8001022:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	210f      	movs	r1, #15
 800102c:	400b      	ands	r3, r1
 800102e:	4928      	ldr	r1, [pc, #160]	@ (80010d0 <HAL_RCC_OscConfig+0x364>)
 8001030:	5ccb      	ldrb	r3, [r1, r3]
 8001032:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001034:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <HAL_RCC_OscConfig+0x368>)
 8001036:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <HAL_RCC_OscConfig+0x36c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2513      	movs	r5, #19
 800103e:	197c      	adds	r4, r7, r5
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fbd7 	bl	80007f4 <HAL_InitTick>
 8001046:	0003      	movs	r3, r0
 8001048:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800104a:	197b      	adds	r3, r7, r5
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d060      	beq.n	8001114 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001052:	197b      	adds	r3, r7, r5
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	e242      	b.n	80014de <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d03f      	beq.n	80010e0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8001066:	2180      	movs	r1, #128	@ 0x80
 8001068:	0049      	lsls	r1, r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fc07 	bl	8000880 <HAL_GetTick>
 8001072:	0003      	movs	r3, r0
 8001074:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001078:	f7ff fc02 	bl	8000880 <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e229      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4013      	ands	r3, r2
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <HAL_RCC_OscConfig+0x370>)
 800109c:	4013      	ands	r3, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	0a19      	lsrs	r1, r3, #8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	061a      	lsls	r2, r3, #24
 80010b8:	4b01      	ldr	r3, [pc, #4]	@ (80010c0 <HAL_RCC_OscConfig+0x354>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	e029      	b.n	8001114 <HAL_RCC_OscConfig+0x3a8>
 80010c0:	40021000 	.word	0x40021000
 80010c4:	fffeffff 	.word	0xfffeffff
 80010c8:	fffbffff 	.word	0xfffbffff
 80010cc:	ffffe0ff 	.word	0xffffe0ff
 80010d0:	08001900 	.word	0x08001900
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004
 80010dc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010e0:	4bbd      	ldr	r3, [pc, #756]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4bbc      	ldr	r3, [pc, #752]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80010e6:	49bd      	ldr	r1, [pc, #756]	@ (80013dc <HAL_RCC_OscConfig+0x670>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fbc8 	bl	8000880 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f6:	f7ff fbc3 	bl	8000880 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1ea      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001108:	4bb3      	ldr	r3, [pc, #716]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2208      	movs	r2, #8
 800111a:	4013      	ands	r3, r2
 800111c:	d036      	beq.n	800118c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d019      	beq.n	800115a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4bac      	ldr	r3, [pc, #688]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800112a:	4bab      	ldr	r3, [pc, #684]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800112c:	2101      	movs	r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fba5 	bl	8000880 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fba0 	bl	8000880 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1c7      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800114e:	4ba2      	ldr	r3, [pc, #648]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d0f1      	beq.n	800113c <HAL_RCC_OscConfig+0x3d0>
 8001158:	e018      	b.n	800118c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b9f      	ldr	r3, [pc, #636]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800115c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800115e:	4b9e      	ldr	r3, [pc, #632]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fb8b 	bl	8000880 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fb86 	bl	8000880 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1ad      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001182:	4b95      	ldr	r3, [pc, #596]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d1f1      	bne.n	8001170 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2204      	movs	r2, #4
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_RCC_OscConfig+0x42c>
 8001196:	e0ae      	b.n	80012f6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001198:	2027      	movs	r0, #39	@ 0x27
 800119a:	183b      	adds	r3, r7, r0
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a0:	4b8d      	ldr	r3, [pc, #564]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80011a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	4013      	ands	r3, r2
 80011aa:	d109      	bne.n	80011c0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	4b8a      	ldr	r3, [pc, #552]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80011ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011b0:	4b89      	ldr	r3, [pc, #548]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80011b2:	2180      	movs	r1, #128	@ 0x80
 80011b4:	0549      	lsls	r1, r1, #21
 80011b6:	430a      	orrs	r2, r1
 80011b8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80011ba:	183b      	adds	r3, r7, r0
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	4b87      	ldr	r3, [pc, #540]	@ (80013e0 <HAL_RCC_OscConfig+0x674>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4013      	ands	r3, r2
 80011ca:	d11a      	bne.n	8001202 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011cc:	4b84      	ldr	r3, [pc, #528]	@ (80013e0 <HAL_RCC_OscConfig+0x674>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b83      	ldr	r3, [pc, #524]	@ (80013e0 <HAL_RCC_OscConfig+0x674>)
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	0049      	lsls	r1, r1, #1
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011da:	f7ff fb51 	bl	8000880 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e4:	f7ff fb4c 	bl	8000880 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e173      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b7a      	ldr	r3, [pc, #488]	@ (80013e0 <HAL_RCC_OscConfig+0x674>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	429a      	cmp	r2, r3
 800120c:	d107      	bne.n	800121e <HAL_RCC_OscConfig+0x4b2>
 800120e:	4b72      	ldr	r3, [pc, #456]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001212:	4b71      	ldr	r3, [pc, #452]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	0049      	lsls	r1, r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	651a      	str	r2, [r3, #80]	@ 0x50
 800121c:	e031      	b.n	8001282 <HAL_RCC_OscConfig+0x516>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x4d4>
 8001226:	4b6c      	ldr	r3, [pc, #432]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800122a:	4b6b      	ldr	r3, [pc, #428]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800122c:	496b      	ldr	r1, [pc, #428]	@ (80013dc <HAL_RCC_OscConfig+0x670>)
 800122e:	400a      	ands	r2, r1
 8001230:	651a      	str	r2, [r3, #80]	@ 0x50
 8001232:	4b69      	ldr	r3, [pc, #420]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001236:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001238:	496a      	ldr	r1, [pc, #424]	@ (80013e4 <HAL_RCC_OscConfig+0x678>)
 800123a:	400a      	ands	r2, r1
 800123c:	651a      	str	r2, [r3, #80]	@ 0x50
 800123e:	e020      	b.n	8001282 <HAL_RCC_OscConfig+0x516>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	23a0      	movs	r3, #160	@ 0xa0
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	429a      	cmp	r2, r3
 800124a:	d10e      	bne.n	800126a <HAL_RCC_OscConfig+0x4fe>
 800124c:	4b62      	ldr	r3, [pc, #392]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800124e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001250:	4b61      	ldr	r3, [pc, #388]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	00c9      	lsls	r1, r1, #3
 8001256:	430a      	orrs	r2, r1
 8001258:	651a      	str	r2, [r3, #80]	@ 0x50
 800125a:	4b5f      	ldr	r3, [pc, #380]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800125c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800125e:	4b5e      	ldr	r3, [pc, #376]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001260:	2180      	movs	r1, #128	@ 0x80
 8001262:	0049      	lsls	r1, r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	651a      	str	r2, [r3, #80]	@ 0x50
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x516>
 800126a:	4b5b      	ldr	r3, [pc, #364]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800126c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800126e:	4b5a      	ldr	r3, [pc, #360]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001270:	495a      	ldr	r1, [pc, #360]	@ (80013dc <HAL_RCC_OscConfig+0x670>)
 8001272:	400a      	ands	r2, r1
 8001274:	651a      	str	r2, [r3, #80]	@ 0x50
 8001276:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800127a:	4b57      	ldr	r3, [pc, #348]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800127c:	4959      	ldr	r1, [pc, #356]	@ (80013e4 <HAL_RCC_OscConfig+0x678>)
 800127e:	400a      	ands	r2, r1
 8001280:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff faf9 	bl	8000880 <HAL_GetTick>
 800128e:	0003      	movs	r3, r0
 8001290:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001292:	e009      	b.n	80012a8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff faf4 	bl	8000880 <HAL_GetTick>
 8001298:	0002      	movs	r2, r0
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	4a52      	ldr	r2, [pc, #328]	@ (80013e8 <HAL_RCC_OscConfig+0x67c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e11a      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012a8:	4b4b      	ldr	r3, [pc, #300]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80012aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d0ef      	beq.n	8001294 <HAL_RCC_OscConfig+0x528>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fae3 	bl	8000880 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012be:	e009      	b.n	80012d4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fade 	bl	8000880 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4a47      	ldr	r2, [pc, #284]	@ (80013e8 <HAL_RCC_OscConfig+0x67c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e104      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012d4:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80012d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d1ef      	bne.n	80012c0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012e0:	2327      	movs	r3, #39	@ 0x27
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ea:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80012ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80012f0:	493e      	ldr	r1, [pc, #248]	@ (80013ec <HAL_RCC_OscConfig+0x680>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2220      	movs	r2, #32
 80012fc:	4013      	ands	r3, r2
 80012fe:	d049      	beq.n	8001394 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d026      	beq.n	8001356 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001308:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	4b32      	ldr	r3, [pc, #200]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001318:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800131a:	2101      	movs	r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <HAL_RCC_OscConfig+0x684>)
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <HAL_RCC_OscConfig+0x684>)
 8001326:	2180      	movs	r1, #128	@ 0x80
 8001328:	0189      	lsls	r1, r1, #6
 800132a:	430a      	orrs	r2, r1
 800132c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff faa7 	bl	8000880 <HAL_GetTick>
 8001332:	0003      	movs	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001338:	f7ff faa2 	bl	8000880 <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e0c9      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2202      	movs	r2, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d0f1      	beq.n	8001338 <HAL_RCC_OscConfig+0x5cc>
 8001354:	e01e      	b.n	8001394 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800135c:	2101      	movs	r1, #1
 800135e:	438a      	bics	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_RCC_OscConfig+0x684>)
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <HAL_RCC_OscConfig+0x684>)
 8001368:	4922      	ldr	r1, [pc, #136]	@ (80013f4 <HAL_RCC_OscConfig+0x688>)
 800136a:	400a      	ands	r2, r1
 800136c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fa87 	bl	8000880 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001378:	f7ff fa82 	bl	8000880 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e0a9      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	d1f1      	bne.n	8001378 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <HAL_RCC_OscConfig+0x632>
 800139c:	e09e      	b.n	80014dc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d100      	bne.n	80013a6 <HAL_RCC_OscConfig+0x63a>
 80013a4:	e077      	b.n	8001496 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d158      	bne.n	8001460 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_RCC_OscConfig+0x66c>)
 80013b4:	4910      	ldr	r1, [pc, #64]	@ (80013f8 <HAL_RCC_OscConfig+0x68c>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fa61 	bl	8000880 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013c2:	e01b      	b.n	80013fc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fa5c 	bl	8000880 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d914      	bls.n	80013fc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e083      	b.n	80014de <HAL_RCC_OscConfig+0x772>
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	40021000 	.word	0x40021000
 80013dc:	fffffeff 	.word	0xfffffeff
 80013e0:	40007000 	.word	0x40007000
 80013e4:	fffffbff 	.word	0xfffffbff
 80013e8:	00001388 	.word	0x00001388
 80013ec:	efffffff 	.word	0xefffffff
 80013f0:	40010000 	.word	0x40010000
 80013f4:	ffffdfff 	.word	0xffffdfff
 80013f8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013fc:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	049b      	lsls	r3, r3, #18
 8001404:	4013      	ands	r3, r2
 8001406:	d1dd      	bne.n	80013c4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b37      	ldr	r3, [pc, #220]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a37      	ldr	r2, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x780>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001420:	431a      	orrs	r2, r3
 8001422:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0449      	lsls	r1, r1, #17
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fa23 	bl	8000880 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fa1e 	bl	8000880 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e045      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x6d4>
 800145e:	e03d      	b.n	80014dc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001460:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 8001466:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_RCC_OscConfig+0x784>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fa08 	bl	8000880 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fa03 	bl	8000880 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e02a      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	049b      	lsls	r3, r3, #18
 8001490:	4013      	ands	r3, r2
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x70a>
 8001494:	e022      	b.n	80014dc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e01d      	b.n	80014de <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_RCC_OscConfig+0x77c>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	2380      	movs	r3, #128	@ 0x80
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d10f      	bne.n	80014d8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	23f0      	movs	r3, #240	@ 0xf0
 80014bc:	039b      	lsls	r3, r3, #14
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	401a      	ands	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b00a      	add	sp, #40	@ 0x28
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	40021000 	.word	0x40021000
 80014ec:	ff02ffff 	.word	0xff02ffff
 80014f0:	feffffff 	.word	0xfeffffff

080014f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e128      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b96      	ldr	r3, [pc, #600]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d91e      	bls.n	8001554 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b93      	ldr	r3, [pc, #588]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2201      	movs	r2, #1
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	4b90      	ldr	r3, [pc, #576]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001528:	f7ff f9aa 	bl	8000880 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001530:	e009      	b.n	8001546 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001532:	f7ff f9a5 	bl	8000880 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	4a8a      	ldr	r2, [pc, #552]	@ (8001768 <HAL_RCC_ClockConfig+0x274>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e109      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b87      	ldr	r3, [pc, #540]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2201      	movs	r2, #1
 800154c:	4013      	ands	r3, r2
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d1ee      	bne.n	8001532 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2202      	movs	r2, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d009      	beq.n	8001572 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800155e:	4b83      	ldr	r3, [pc, #524]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	22f0      	movs	r2, #240	@ 0xf0
 8001564:	4393      	bics	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4b7f      	ldr	r3, [pc, #508]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 800156e:	430a      	orrs	r2, r1
 8001570:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_RCC_ClockConfig+0x8a>
 800157c:	e089      	b.n	8001692 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001586:	4b79      	ldr	r3, [pc, #484]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	029b      	lsls	r3, r3, #10
 800158e:	4013      	ands	r3, r2
 8001590:	d120      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0e1      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800159e:	4b73      	ldr	r3, [pc, #460]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	049b      	lsls	r3, r3, #18
 80015a6:	4013      	ands	r3, r2
 80015a8:	d114      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0d5      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d106      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b6:	4b6d      	ldr	r3, [pc, #436]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2204      	movs	r2, #4
 80015bc:	4013      	ands	r3, r2
 80015be:	d109      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0ca      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015c4:	4b69      	ldr	r3, [pc, #420]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4013      	ands	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0c2      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d4:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2203      	movs	r2, #3
 80015da:	4393      	bics	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4b62      	ldr	r3, [pc, #392]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f94a 	bl	8000880 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d111      	bne.n	800161c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f8:	e009      	b.n	800160e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	f7ff f941 	bl	8000880 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a58      	ldr	r2, [pc, #352]	@ (8001768 <HAL_RCC_ClockConfig+0x274>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0a5      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800160e:	4b57      	ldr	r3, [pc, #348]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	220c      	movs	r2, #12
 8001614:	4013      	ands	r3, r2
 8001616:	2b08      	cmp	r3, #8
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_ClockConfig+0x106>
 800161a:	e03a      	b.n	8001692 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d111      	bne.n	8001648 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001624:	e009      	b.n	800163a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001626:	f7ff f92b 	bl	8000880 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	4a4d      	ldr	r2, [pc, #308]	@ (8001768 <HAL_RCC_ClockConfig+0x274>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e08f      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163a:	4b4c      	ldr	r3, [pc, #304]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	220c      	movs	r2, #12
 8001640:	4013      	ands	r3, r2
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d1ef      	bne.n	8001626 <HAL_RCC_ClockConfig+0x132>
 8001646:	e024      	b.n	8001692 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11b      	bne.n	8001688 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001650:	e009      	b.n	8001666 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001652:	f7ff f915 	bl	8000880 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	4a42      	ldr	r2, [pc, #264]	@ (8001768 <HAL_RCC_ClockConfig+0x274>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e079      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001666:	4b41      	ldr	r3, [pc, #260]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	220c      	movs	r2, #12
 800166c:	4013      	ands	r3, r2
 800166e:	2b04      	cmp	r3, #4
 8001670:	d1ef      	bne.n	8001652 <HAL_RCC_ClockConfig+0x15e>
 8001672:	e00e      	b.n	8001692 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f904 	bl	8000880 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	4a3a      	ldr	r2, [pc, #232]	@ (8001768 <HAL_RCC_ClockConfig+0x274>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e068      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001688:	4b38      	ldr	r3, [pc, #224]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	220c      	movs	r2, #12
 800168e:	4013      	ands	r3, r2
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001692:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4013      	ands	r3, r2
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d21e      	bcs.n	80016de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2201      	movs	r2, #1
 80016a6:	4393      	bics	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b2:	f7ff f8e5 	bl	8000880 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	e009      	b.n	80016d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016bc:	f7ff f8e0 	bl	8000880 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	4a28      	ldr	r2, [pc, #160]	@ (8001768 <HAL_RCC_ClockConfig+0x274>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e044      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_RCC_ClockConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d1ee      	bne.n	80016bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d009      	beq.n	80016fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <HAL_RCC_ClockConfig+0x27c>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	0019      	movs	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2208      	movs	r2, #8
 8001702:	4013      	ands	r3, r2
 8001704:	d00a      	beq.n	800171c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <HAL_RCC_ClockConfig+0x280>)
 800170c:	4013      	ands	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	00da      	lsls	r2, r3, #3
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001718:	430a      	orrs	r2, r1
 800171a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171c:	f000 f832 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8001720:	0001      	movs	r1, r0
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x278>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	220f      	movs	r2, #15
 800172a:	4013      	ands	r3, r2
 800172c:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <HAL_RCC_ClockConfig+0x284>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	000a      	movs	r2, r1
 8001732:	40da      	lsrs	r2, r3
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_RCC_ClockConfig+0x288>)
 8001736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_RCC_ClockConfig+0x28c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	250b      	movs	r5, #11
 800173e:	197c      	adds	r4, r7, r5
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff f857 	bl	80007f4 <HAL_InitTick>
 8001746:	0003      	movs	r3, r0
 8001748:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800174a:	197b      	adds	r3, r7, r5
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001752:	197b      	adds	r3, r7, r5
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	e000      	b.n	800175a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	40022000 	.word	0x40022000
 8001768:	00001388 	.word	0x00001388
 800176c:	40021000 	.word	0x40021000
 8001770:	fffff8ff 	.word	0xfffff8ff
 8001774:	ffffc7ff 	.word	0xffffc7ff
 8001778:	08001900 	.word	0x08001900
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800178a:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	220c      	movs	r2, #12
 8001794:	4013      	ands	r3, r2
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d013      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x3e>
 800179a:	d85c      	bhi.n	8001856 <HAL_RCC_GetSysClockFreq+0xd2>
 800179c:	2b04      	cmp	r3, #4
 800179e:	d002      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x22>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d00b      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x38>
 80017a4:	e057      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2210      	movs	r2, #16
 80017ac:	4013      	ands	r3, r2
 80017ae:	d002      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80017b0:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017b2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80017b4:	e05d      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80017b6:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x100>)
 80017b8:	613b      	str	r3, [r7, #16]
      break;
 80017ba:	e05a      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017bc:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x104>)
 80017be:	613b      	str	r3, [r7, #16]
      break;
 80017c0:	e057      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	220f      	movs	r2, #15
 80017c8:	4013      	ands	r3, r2
 80017ca:	4a30      	ldr	r2, [pc, #192]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0d9b      	lsrs	r3, r3, #22
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4013      	ands	r3, r2
 80017e6:	d00f      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	000a      	movs	r2, r1
 80017ec:	0152      	lsls	r2, r2, #5
 80017ee:	1a52      	subs	r2, r2, r1
 80017f0:	0193      	lsls	r3, r2, #6
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	185b      	adds	r3, r3, r1
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7fe fc83 	bl	8000108 <__udivsi3>
 8001802:	0003      	movs	r3, r0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e023      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001808:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	4013      	ands	r3, r2
 8001810:	d00f      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	000a      	movs	r2, r1
 8001816:	0152      	lsls	r2, r2, #5
 8001818:	1a52      	subs	r2, r2, r1
 800181a:	0193      	lsls	r3, r2, #6
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	185b      	adds	r3, r3, r1
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f7fe fc6e 	bl	8000108 <__udivsi3>
 800182c:	0003      	movs	r3, r0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e00e      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	000a      	movs	r2, r1
 8001836:	0152      	lsls	r2, r2, #5
 8001838:	1a52      	subs	r2, r2, r1
 800183a:	0193      	lsls	r3, r2, #6
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	185b      	adds	r3, r3, r1
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f7fe fc5e 	bl	8000108 <__udivsi3>
 800184c:	0003      	movs	r3, r0
 800184e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
      break;
 8001854:	e00d      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	0b5b      	lsrs	r3, r3, #13
 800185c:	2207      	movs	r2, #7
 800185e:	4013      	ands	r3, r2
 8001860:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	0212      	lsls	r2, r2, #8
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      break;
 8001870:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001872:	693b      	ldr	r3, [r7, #16]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b006      	add	sp, #24
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	003d0900 	.word	0x003d0900
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200
 800188c:	08001910 	.word	0x08001910

08001890 <memset>:
 8001890:	0003      	movs	r3, r0
 8001892:	1882      	adds	r2, r0, r2
 8001894:	4293      	cmp	r3, r2
 8001896:	d100      	bne.n	800189a <memset+0xa>
 8001898:	4770      	bx	lr
 800189a:	7019      	strb	r1, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	e7f9      	b.n	8001894 <memset+0x4>

080018a0 <__libc_init_array>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	2600      	movs	r6, #0
 80018a4:	4c0c      	ldr	r4, [pc, #48]	@ (80018d8 <__libc_init_array+0x38>)
 80018a6:	4d0d      	ldr	r5, [pc, #52]	@ (80018dc <__libc_init_array+0x3c>)
 80018a8:	1b64      	subs	r4, r4, r5
 80018aa:	10a4      	asrs	r4, r4, #2
 80018ac:	42a6      	cmp	r6, r4
 80018ae:	d109      	bne.n	80018c4 <__libc_init_array+0x24>
 80018b0:	2600      	movs	r6, #0
 80018b2:	f000 f819 	bl	80018e8 <_init>
 80018b6:	4c0a      	ldr	r4, [pc, #40]	@ (80018e0 <__libc_init_array+0x40>)
 80018b8:	4d0a      	ldr	r5, [pc, #40]	@ (80018e4 <__libc_init_array+0x44>)
 80018ba:	1b64      	subs	r4, r4, r5
 80018bc:	10a4      	asrs	r4, r4, #2
 80018be:	42a6      	cmp	r6, r4
 80018c0:	d105      	bne.n	80018ce <__libc_init_array+0x2e>
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	00b3      	lsls	r3, r6, #2
 80018c6:	58eb      	ldr	r3, [r5, r3]
 80018c8:	4798      	blx	r3
 80018ca:	3601      	adds	r6, #1
 80018cc:	e7ee      	b.n	80018ac <__libc_init_array+0xc>
 80018ce:	00b3      	lsls	r3, r6, #2
 80018d0:	58eb      	ldr	r3, [r5, r3]
 80018d2:	4798      	blx	r3
 80018d4:	3601      	adds	r6, #1
 80018d6:	e7f2      	b.n	80018be <__libc_init_array+0x1e>
 80018d8:	0800191c 	.word	0x0800191c
 80018dc:	0800191c 	.word	0x0800191c
 80018e0:	08001920 	.word	0x08001920
 80018e4:	0800191c 	.word	0x0800191c

080018e8 <_init>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr

080018f4 <_fini>:
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fa:	bc08      	pop	{r3}
 80018fc:	469e      	mov	lr, r3
 80018fe:	4770      	bx	lr

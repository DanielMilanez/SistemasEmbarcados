
Projeto Servo Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002780  08002780  00003780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800279c  0800279c  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  0800279c  0800279c  0000379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027a4  080027a4  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000037a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027a8  080027a8  000037a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080027ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000001c  080027c8  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080027c8  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a7b  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013da  00000000  00000000  0000aabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0000bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ef  00000000  00000000  0000c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cb4  00000000  00000000  0000cc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089e1  00000000  00000000  0001f913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000761d6  00000000  00000000  000282f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e4ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  0009e510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000a00d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002768 	.word	0x08002768

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08002768 	.word	0x08002768

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fb26 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f834 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f90c 	bl	80006d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004b8:	f000 f88a 	bl	80005d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <main+0x68>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fc06 	bl	8001cd0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <main+0x68>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 fc8d 	bl	8001de8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Keyboard_check();
 80004ce:	f000 f99b 	bl	8000808 <Keyboard_check>
	  TIM2 -> CCR1 = 500;
 80004d2:	2380      	movs	r3, #128	@ 0x80
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	22fa      	movs	r2, #250	@ 0xfa
 80004d8:	0052      	lsls	r2, r2, #1
 80004da:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1000);
 80004dc:	23fa      	movs	r3, #250	@ 0xfa
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fb7b 	bl	8000bdc <HAL_Delay>
	  TIM2 -> CCR1 = 1500;
 80004e6:	2380      	movs	r3, #128	@ 0x80
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <main+0x6c>)
 80004ec:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1000);
 80004ee:	23fa      	movs	r3, #250	@ 0xfa
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fb72 	bl	8000bdc <HAL_Delay>
	  TIM2 -> CCR1 = 2500;
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <main+0x70>)
 80004fe:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1000);
 8000500:	23fa      	movs	r3, #250	@ 0xfa
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fb69 	bl	8000bdc <HAL_Delay>
	  Keyboard_check();
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	e7df      	b.n	80004ce <main+0x26>
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	20000038 	.word	0x20000038
 8000514:	000005dc 	.word	0x000005dc
 8000518:	000009c4 	.word	0x000009c4

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b095      	sub	sp, #84	@ 0x54
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	2418      	movs	r4, #24
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2338      	movs	r3, #56	@ 0x38
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f002 f8ef 	bl	8002710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f002 f8e8 	bl	8002710 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <SystemClock_Config+0xac>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <SystemClock_Config+0xb0>)
 8000546:	401a      	ands	r2, r3
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <SystemClock_Config+0xac>)
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	0109      	lsls	r1, r1, #4
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2202      	movs	r2, #2
 8000558:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2201      	movs	r2, #1
 800055e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2210      	movs	r2, #16
 8000564:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2202      	movs	r2, #2
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	0412      	lsls	r2, r2, #16
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	187b      	adds	r3, r7, r1
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fdb2 	bl	80010ec <HAL_RCC_OscConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800058c:	f000 fa02 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	220f      	movs	r2, #15
 8000594:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2203      	movs	r2, #3
 800059a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2280      	movs	r2, #128	@ 0x80
 80005a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f95e 	bl	8001874 <HAL_RCC_ClockConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f9ea 	bl	8000994 <Error_Handler>
  }
}
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b015      	add	sp, #84	@ 0x54
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	2318      	movs	r3, #24
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2310      	movs	r3, #16
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f002 f895 	bl	8002710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	2310      	movs	r3, #16
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2308      	movs	r3, #8
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f002 f88d 	bl	8002710 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f6:	003b      	movs	r3, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	2310      	movs	r3, #16
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f002 f886 	bl	8002710 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000604:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	05d2      	lsls	r2, r2, #23
 800060a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 800060e:	2207      	movs	r2, #7
 8000610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000612:	4b2d      	ldr	r3, [pc, #180]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 800061a:	4a2c      	ldr	r2, [pc, #176]	@ (80006cc <MX_TIM2_Init+0xfc>)
 800061c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062a:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fb0f 	bl	8001c50 <HAL_TIM_Base_Init>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000636:	f000 f9ad 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	2118      	movs	r1, #24
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	0152      	lsls	r2, r2, #5
 8000642:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000644:	187a      	adds	r2, r7, r1
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fd1e 	bl	800208c <HAL_TIM_ConfigClockSource>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000654:	f000 f99e 	bl	8000994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fb7c 	bl	8001d58 <HAL_TIM_PWM_Init>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 f996 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2110      	movs	r1, #16
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000676:	187a      	adds	r2, r7, r1
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 ffef 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000686:	f000 f985 	bl	8000994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068a:	003b      	movs	r3, r7
 800068c:	2260      	movs	r2, #96	@ 0x60
 800068e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 8000690:	003b      	movs	r3, r7
 8000692:	22f4      	movs	r2, #244	@ 0xf4
 8000694:	32ff      	adds	r2, #255	@ 0xff
 8000696:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a4:	0039      	movs	r1, r7
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fc28 	bl	8001f00 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80006b4:	f000 f96e 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006b8:	4b03      	ldr	r3, [pc, #12]	@ (80006c8 <MX_TIM2_Init+0xf8>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f99a 	bl	80009f4 <HAL_TIM_MspPostInit>

}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b00a      	add	sp, #40	@ 0x28
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000038 	.word	0x20000038
 80006cc:	00004e1f 	.word	0x00004e1f

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	@ 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f002 f815 	bl	8002710 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b45      	ldr	r3, [pc, #276]	@ (80007fc <MX_GPIO_Init+0x12c>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ea:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <MX_GPIO_Init+0x12c>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006f2:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <MX_GPIO_Init+0x12c>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <MX_GPIO_Init+0x12c>)
 8000700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000702:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <MX_GPIO_Init+0x12c>)
 8000704:	2104      	movs	r1, #4
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_GPIO_Init+0x12c>)
 800070c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070e:	2204      	movs	r2, #4
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <MX_GPIO_Init+0x12c>)
 8000718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800071a:	4b38      	ldr	r3, [pc, #224]	@ (80007fc <MX_GPIO_Init+0x12c>)
 800071c:	2102      	movs	r1, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <MX_GPIO_Init+0x12c>)
 8000724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);
 800072e:	23a0      	movs	r3, #160	@ 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fcbb 	bl	80010b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN_01_Pin|COLUMN_02_Pin, GPIO_PIN_RESET);
 800073c:	23c0      	movs	r3, #192	@ 0xc0
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	482f      	ldr	r0, [pc, #188]	@ (8000800 <MX_GPIO_Init+0x130>)
 8000742:	2200      	movs	r2, #0
 8000744:	0019      	movs	r1, r3
 8000746:	f000 fcb4 	bl	80010b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : COLUMN_03_Pin */
  GPIO_InitStruct.Pin = COLUMN_03_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2220      	movs	r2, #32
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2201      	movs	r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(COLUMN_03_GPIO_Port, &GPIO_InitStruct);
 8000762:	193a      	adds	r2, r7, r4
 8000764:	23a0      	movs	r3, #160	@ 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fb0e 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_01_Pin LINE_02_Pin */
  GPIO_InitStruct.Pin = LINE_01_Pin|LINE_02_Pin;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	22c0      	movs	r2, #192	@ 0xc0
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2201      	movs	r2, #1
 8000780:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	193a      	adds	r2, r7, r4
 8000784:	23a0      	movs	r3, #160	@ 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fafe 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_04_Pin */
  GPIO_InitStruct.Pin = LINE_04_Pin;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2280      	movs	r2, #128	@ 0x80
 8000794:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2201      	movs	r2, #1
 80007a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_04_GPIO_Port, &GPIO_InitStruct);
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_GPIO_Init+0x134>)
 80007a6:	0019      	movs	r1, r3
 80007a8:	0010      	movs	r0, r2
 80007aa:	f000 faef 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_03_Pin */
  GPIO_InitStruct.Pin = LINE_03_Pin;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2240      	movs	r2, #64	@ 0x40
 80007b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2201      	movs	r2, #1
 80007be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_03_GPIO_Port, &GPIO_InitStruct);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000800 <MX_GPIO_Init+0x130>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	0010      	movs	r0, r2
 80007c8:	f000 fae0 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_01_Pin COLUMN_02_Pin */
  GPIO_InitStruct.Pin = COLUMN_01_Pin|COLUMN_02_Pin;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	22c0      	movs	r2, #192	@ 0xc0
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2201      	movs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <MX_GPIO_Init+0x130>)
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	f000 facc 	bl	8000d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b009      	add	sp, #36	@ 0x24
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	50000400 	.word	0x50000400
 8000804:	50000800 	.word	0x50000800

08000808 <Keyboard_check>:

/* USER CODE BEGIN 4 */
void Keyboard_check(void){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	switch (atual_column){
 800080c:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <Keyboard_check+0xc0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d03b      	beq.n	800088c <Keyboard_check+0x84>
 8000814:	dc55      	bgt.n	80008c2 <Keyboard_check+0xba>
 8000816:	2b01      	cmp	r3, #1
 8000818:	d002      	beq.n	8000820 <Keyboard_check+0x18>
 800081a:	2b02      	cmp	r3, #2
 800081c:	d01b      	beq.n	8000856 <Keyboard_check+0x4e>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);
			Line_verify();
			atual_column = 1;
			break;
	}
}
 800081e:	e050      	b.n	80008c2 <Keyboard_check+0xba>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_RESET);
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4829      	ldr	r0, [pc, #164]	@ (80008cc <Keyboard_check+0xc4>)
 8000826:	2200      	movs	r2, #0
 8000828:	0019      	movs	r1, r3
 800082a:	f000 fc42 	bl	80010b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_SET);
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4826      	ldr	r0, [pc, #152]	@ (80008cc <Keyboard_check+0xc4>)
 8000834:	2201      	movs	r2, #1
 8000836:	0019      	movs	r1, r3
 8000838:	f000 fc3b 	bl	80010b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_SET);
 800083c:	23a0      	movs	r3, #160	@ 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2201      	movs	r2, #1
 8000842:	2120      	movs	r1, #32
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fc34 	bl	80010b2 <HAL_GPIO_WritePin>
			Line_verify();
 800084a:	f000 f841 	bl	80008d0 <Line_verify>
			atual_column = 2;
 800084e:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <Keyboard_check+0xc0>)
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
			break;
 8000854:	e035      	b.n	80008c2 <Keyboard_check+0xba>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_SET);
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	481c      	ldr	r0, [pc, #112]	@ (80008cc <Keyboard_check+0xc4>)
 800085c:	2201      	movs	r2, #1
 800085e:	0019      	movs	r1, r3
 8000860:	f000 fc27 	bl	80010b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_RESET);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4818      	ldr	r0, [pc, #96]	@ (80008cc <Keyboard_check+0xc4>)
 800086a:	2200      	movs	r2, #0
 800086c:	0019      	movs	r1, r3
 800086e:	f000 fc20 	bl	80010b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_SET);
 8000872:	23a0      	movs	r3, #160	@ 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fc19 	bl	80010b2 <HAL_GPIO_WritePin>
			Line_verify();
 8000880:	f000 f826 	bl	80008d0 <Line_verify>
			atual_column = 3;
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <Keyboard_check+0xc0>)
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
			break;
 800088a:	e01a      	b.n	80008c2 <Keyboard_check+0xba>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_SET);
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	480e      	ldr	r0, [pc, #56]	@ (80008cc <Keyboard_check+0xc4>)
 8000892:	2201      	movs	r2, #1
 8000894:	0019      	movs	r1, r3
 8000896:	f000 fc0c 	bl	80010b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_SET);
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <Keyboard_check+0xc4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	0019      	movs	r1, r3
 80008a4:	f000 fc05 	bl	80010b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);
 80008a8:	23a0      	movs	r3, #160	@ 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	2120      	movs	r1, #32
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fbfe 	bl	80010b2 <HAL_GPIO_WritePin>
			Line_verify();
 80008b6:	f000 f80b 	bl	80008d0 <Line_verify>
			atual_column = 1;
 80008ba:	4b03      	ldr	r3, [pc, #12]	@ (80008c8 <Keyboard_check+0xc0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
			break;
 80008c0:	46c0      	nop			@ (mov r8, r8)
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	50000400 	.word	0x50000400

080008d0 <Line_verify>:

void Line_verify(void){
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
	uint8_t bline1 = HAL_GPIO_ReadPin(LINE_01_GPIO_Port, LINE_01_Pin),
 80008d6:	1dfc      	adds	r4, r7, #7
 80008d8:	23a0      	movs	r3, #160	@ 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fbca 	bl	8001078 <HAL_GPIO_ReadPin>
 80008e4:	0003      	movs	r3, r0
 80008e6:	7023      	strb	r3, [r4, #0]
			bline2 = HAL_GPIO_ReadPin(LINE_02_GPIO_Port, LINE_02_Pin),
 80008e8:	1dbc      	adds	r4, r7, #6
 80008ea:	23a0      	movs	r3, #160	@ 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fbc1 	bl	8001078 <HAL_GPIO_ReadPin>
 80008f6:	0003      	movs	r3, r0
 80008f8:	7023      	strb	r3, [r4, #0]
			bline3 = HAL_GPIO_ReadPin(LINE_03_GPIO_Port, LINE_03_Pin),
 80008fa:	1d7c      	adds	r4, r7, #5
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <Line_verify+0xb0>)
 80008fe:	2140      	movs	r1, #64	@ 0x40
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fbb9 	bl	8001078 <HAL_GPIO_ReadPin>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
			bline4 = HAL_GPIO_ReadPin(LINE_04_GPIO_Port, LINE_04_Pin);
 800090a:	1d3c      	adds	r4, r7, #4
 800090c:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <Line_verify+0xb4>)
 800090e:	2180      	movs	r1, #128	@ 0x80
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fbb1 	bl	8001078 <HAL_GPIO_ReadPin>
 8000916:	0003      	movs	r3, r0
 8000918:	7023      	strb	r3, [r4, #0]

	if (!bline1) response = tmap[0][atual_column - 1];
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d106      	bne.n	8000930 <Line_verify+0x60>
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <Line_verify+0xb8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3b01      	subs	r3, #1
 8000928:	4a18      	ldr	r2, [pc, #96]	@ (800098c <Line_verify+0xbc>)
 800092a:	5cd2      	ldrb	r2, [r2, r3]
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <Line_verify+0xc0>)
 800092e:	701a      	strb	r2, [r3, #0]
	if (!bline2) response = tmap[1][atual_column - 1];
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <Line_verify+0x78>
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <Line_verify+0xb8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	3b01      	subs	r3, #1
 800093e:	4a13      	ldr	r2, [pc, #76]	@ (800098c <Line_verify+0xbc>)
 8000940:	18d3      	adds	r3, r2, r3
 8000942:	78da      	ldrb	r2, [r3, #3]
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <Line_verify+0xc0>)
 8000946:	701a      	strb	r2, [r3, #0]
	if (!bline3) response = tmap[2][atual_column - 1];
 8000948:	1d7b      	adds	r3, r7, #5
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d107      	bne.n	8000960 <Line_verify+0x90>
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <Line_verify+0xb8>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3b01      	subs	r3, #1
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <Line_verify+0xbc>)
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	799a      	ldrb	r2, [r3, #6]
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <Line_verify+0xc0>)
 800095e:	701a      	strb	r2, [r3, #0]
	if (!bline4) response = tmap[3][atual_column - 1];
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d107      	bne.n	8000978 <Line_verify+0xa8>
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <Line_verify+0xb8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a07      	ldr	r2, [pc, #28]	@ (800098c <Line_verify+0xbc>)
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	7a5a      	ldrb	r2, [r3, #9]
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <Line_verify+0xc0>)
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b003      	add	sp, #12
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	50000400 	.word	0x50000400
 8000984:	50000800 	.word	0x50000800
 8000988:	2000000c 	.word	0x2000000c
 800098c:	20000000 	.word	0x20000000
 8000990:	20000078 	.word	0x20000078

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <HAL_MspInit+0x24>)
 80009a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x24>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	430a      	orrs	r2, r1
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <HAL_MspInit+0x24>)
 80009b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_MspInit+0x24>)
 80009b6:	2180      	movs	r1, #128	@ 0x80
 80009b8:	0549      	lsls	r1, r1, #21
 80009ba:	430a      	orrs	r2, r1
 80009bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	2380      	movs	r3, #128	@ 0x80
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	429a      	cmp	r2, r3
 80009da:	d105      	bne.n	80009e8 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <HAL_TIM_Base_MspInit+0x28>)
 80009de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_TIM_Base_MspInit+0x28>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	240c      	movs	r4, #12
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	0018      	movs	r0, r3
 8000a02:	2314      	movs	r3, #20
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f001 fe82 	bl	8002710 <memset>
  if(htim->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d122      	bne.n	8000a5e <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_TIM_MspPostInit+0x74>)
 8000a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_TIM_MspPostInit+0x74>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <HAL_TIM_MspPostInit+0x74>)
 8000a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a30:	0021      	movs	r1, r4
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2201      	movs	r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	187a      	adds	r2, r7, r1
 8000a52:	23a0      	movs	r3, #160	@ 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 f997 	bl	8000d8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b009      	add	sp, #36	@ 0x24
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f886 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f7ff fff7 	bl	8000a9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f001 fe23 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fce5 	bl	80004a8 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000aec:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 8000af0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000af4:	20000080 	.word	0x20000080

08000af8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_COMP_IRQHandler>
	...

08000afc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_Init+0x3c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_Init+0x3c>)
 8000b0e:	2140      	movs	r1, #64	@ 0x40
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f811 	bl	8000b3c <HAL_InitTick>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e001      	b.n	8000b2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b26:	f7ff ff3b 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_InitTick+0x5c>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_InitTick+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	23fa      	movs	r3, #250	@ 0xfa
 8000b50:	0098      	lsls	r0, r3, #2
 8000b52:	f7ff fad9 	bl	8000108 <__udivsi3>
 8000b56:	0003      	movs	r3, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f7ff fad4 	bl	8000108 <__udivsi3>
 8000b60:	0003      	movs	r3, r0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f905 	bl	8000d72 <HAL_SYSTICK_Config>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e00f      	b.n	8000b90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d80b      	bhi.n	8000b8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f8e2 	bl	8000d48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_InitTick+0x64>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b003      	add	sp, #12
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000018 	.word	0x20000018
 8000ba0:	20000014 	.word	0x20000014

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000018 	.word	0x20000018
 8000bc4:	2000007c 	.word	0x2000007c

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	@ (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	2000007c 	.word	0x2000007c

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	20000018 	.word	0x20000018

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c38:	d828      	bhi.n	8000c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	33c0      	adds	r3, #192	@ 0xc0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	589b      	ldr	r3, [r3, r2]
 8000c4a:	1dfa      	adds	r2, r7, #7
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	0011      	movs	r1, r2
 8000c50:	2203      	movs	r2, #3
 8000c52:	400a      	ands	r2, r1
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	21ff      	movs	r1, #255	@ 0xff
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	22ff      	movs	r2, #255	@ 0xff
 8000c68:	401a      	ands	r2, r3
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2303      	movs	r3, #3
 8000c72:	4003      	ands	r3, r0
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	481f      	ldr	r0, [pc, #124]	@ (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	430a      	orrs	r2, r1
 8000c84:	33c0      	adds	r3, #192	@ 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c8a:	e031      	b.n	8000cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0019      	movs	r1, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	400b      	ands	r3, r1
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3306      	adds	r3, #6
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1dfa      	adds	r2, r7, #7
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	0011      	movs	r1, r2
 8000cac:	2203      	movs	r2, #3
 8000cae:	400a      	ands	r2, r1
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	21ff      	movs	r1, #255	@ 0xff
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	22ff      	movs	r2, #255	@ 0xff
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2303      	movs	r3, #3
 8000cce:	4003      	ands	r3, r0
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001c      	movs	r4, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	4023      	ands	r3, r4
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	3306      	adds	r3, #6
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	18c3      	adds	r3, r0, r3
 8000cec:	3304      	adds	r3, #4
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b003      	add	sp, #12
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	2380      	movs	r3, #128	@ 0x80
 8000d0e:	045b      	lsls	r3, r3, #17
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d301      	bcc.n	8000d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d14:	2301      	movs	r3, #1
 8000d16:	e010      	b.n	8000d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <SysTick_Config+0x44>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	2103      	movs	r1, #3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff ff7c 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <SysTick_Config+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <SysTick_Config+0x44>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	210f      	movs	r1, #15
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	1c02      	adds	r2, r0, #0
 8000d58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ffbf 	bl	8000d00 <SysTick_Config>
 8000d82:	0003      	movs	r3, r0
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000da2:	e14f      	b.n	8001044 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4091      	lsls	r1, r2
 8000dae:	000a      	movs	r2, r1
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d100      	bne.n	8000dbc <HAL_GPIO_Init+0x30>
 8000dba:	e140      	b.n	800103e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d005      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	409a      	lsls	r2, r3
 8000df6:	0013      	movs	r3, r2
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	2201      	movs	r2, #1
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d017      	beq.n	8000e72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d123      	bne.n	8000ec6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	58d3      	ldr	r3, [r2, r3]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2207      	movs	r2, #7
 8000e90:	4013      	ands	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	400b      	ands	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	23c0      	movs	r3, #192	@ 0xc0
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	4013      	ands	r3, r2
 8000f04:	d100      	bne.n	8000f08 <HAL_GPIO_Init+0x17c>
 8000f06:	e09a      	b.n	800103e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b54      	ldr	r3, [pc, #336]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f0c:	4b53      	ldr	r3, [pc, #332]	@ (800105c <HAL_GPIO_Init+0x2d0>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f14:	4a52      	ldr	r2, [pc, #328]	@ (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	589b      	ldr	r3, [r3, r2]
 8000f20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	0013      	movs	r3, r2
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	23a0      	movs	r3, #160	@ 0xa0
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x1ea>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	@ (8001064 <HAL_GPIO_Init+0x2d8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x1e6>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	@ (8001068 <HAL_GPIO_Init+0x2dc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	@ (800106c <HAL_GPIO_Init+0x2e0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x1de>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a44      	ldr	r2, [pc, #272]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x1da>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f76:	2300      	movs	r3, #0
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	@ (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	035b      	lsls	r3, r3, #13
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fba:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	039b      	lsls	r3, r3, #14
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fe4:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000fea:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	029b      	lsls	r3, r3, #10
 8001002:	4013      	ands	r3, r2
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	4013      	ands	r3, r2
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	40da      	lsrs	r2, r3
 800104c:	1e13      	subs	r3, r2, #0
 800104e:	d000      	beq.n	8001052 <HAL_GPIO_Init+0x2c6>
 8001050:	e6a8      	b.n	8000da4 <HAL_GPIO_Init+0x18>
  }
}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b006      	add	sp, #24
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	50000400 	.word	0x50000400
 8001068:	50000800 	.word	0x50000800
 800106c:	50000c00 	.word	0x50000c00
 8001070:	50001c00 	.word	0x50001c00
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	000a      	movs	r2, r1
 8001082:	1cbb      	adds	r3, r7, #2
 8001084:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	1cba      	adds	r2, r7, #2
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4013      	ands	r3, r2
 8001090:	d004      	beq.n	800109c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e003      	b.n	80010a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	0008      	movs	r0, r1
 80010bc:	0011      	movs	r1, r2
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	1c02      	adds	r2, r0, #0
 80010c2:	801a      	strh	r2, [r3, #0]
 80010c4:	1c7b      	adds	r3, r7, #1
 80010c6:	1c0a      	adds	r2, r1, #0
 80010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d2:	1cbb      	adds	r3, r7, #2
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010da:	e003      	b.n	80010e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010dc:	1cbb      	adds	r3, r7, #2
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f000 fbaf 	bl	800185e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001100:	4bcf      	ldr	r3, [pc, #828]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	220c      	movs	r2, #12
 8001106:	4013      	ands	r3, r2
 8001108:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800110a:	4bcd      	ldr	r3, [pc, #820]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	4013      	ands	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_RCC_OscConfig+0x36>
 8001120:	e07e      	b.n	8001220 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d007      	beq.n	8001138 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d112      	bne.n	8001154 <HAL_RCC_OscConfig+0x68>
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	025b      	lsls	r3, r3, #9
 8001134:	429a      	cmp	r2, r3
 8001136:	d10d      	bne.n	8001154 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4bc1      	ldr	r3, [pc, #772]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	d100      	bne.n	8001146 <HAL_RCC_OscConfig+0x5a>
 8001144:	e06b      	b.n	800121e <HAL_RCC_OscConfig+0x132>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d167      	bne.n	800121e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 fb85 	bl	800185e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x84>
 8001160:	4bb7      	ldr	r3, [pc, #732]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4bb6      	ldr	r3, [pc, #728]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	0249      	lsls	r1, r1, #9
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e027      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	23a0      	movs	r3, #160	@ 0xa0
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	429a      	cmp	r2, r3
 800117a:	d10e      	bne.n	800119a <HAL_RCC_OscConfig+0xae>
 800117c:	4bb0      	ldr	r3, [pc, #704]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4baf      	ldr	r3, [pc, #700]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	02c9      	lsls	r1, r1, #11
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4bad      	ldr	r3, [pc, #692]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4bac      	ldr	r3, [pc, #688]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001190:	2180      	movs	r1, #128	@ 0x80
 8001192:	0249      	lsls	r1, r1, #9
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e012      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 800119a:	4ba9      	ldr	r3, [pc, #676]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4ba8      	ldr	r3, [pc, #672]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80011a0:	49a8      	ldr	r1, [pc, #672]	@ (8001444 <HAL_RCC_OscConfig+0x358>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4ba2      	ldr	r3, [pc, #648]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4ba1      	ldr	r3, [pc, #644]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80011ba:	49a3      	ldr	r1, [pc, #652]	@ (8001448 <HAL_RCC_OscConfig+0x35c>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d015      	beq.n	80011f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fcfe 	bl	8000bc8 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d0:	e009      	b.n	80011e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fcf9 	bl	8000bc8 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	@ 0x64
 80011de:	d902      	bls.n	80011e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f000 fb3c 	bl	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011e6:	4b96      	ldr	r3, [pc, #600]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	029b      	lsls	r3, r3, #10
 80011ee:	4013      	ands	r3, r2
 80011f0:	d0ef      	beq.n	80011d2 <HAL_RCC_OscConfig+0xe6>
 80011f2:	e015      	b.n	8001220 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fce8 	bl	8000bc8 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fe:	f7ff fce3 	bl	8000bc8 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	@ 0x64
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e326      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001210:	4b8b      	ldr	r3, [pc, #556]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	029b      	lsls	r3, r3, #10
 8001218:	4013      	ands	r3, r2
 800121a:	d1f0      	bne.n	80011fe <HAL_RCC_OscConfig+0x112>
 800121c:	e000      	b.n	8001220 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2202      	movs	r2, #2
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_RCC_OscConfig+0x140>
 800122a:	e08b      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d13e      	bne.n	80012bc <HAL_RCC_OscConfig+0x1d0>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d13b      	bne.n	80012bc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2204      	movs	r2, #4
 800124a:	4013      	ands	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_RCC_OscConfig+0x16c>
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e302      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b79      	ldr	r3, [pc, #484]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a7b      	ldr	r2, [pc, #492]	@ (800144c <HAL_RCC_OscConfig+0x360>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	021a      	lsls	r2, r3, #8
 8001268:	4b75      	ldr	r3, [pc, #468]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800126e:	4b74      	ldr	r3, [pc, #464]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2209      	movs	r2, #9
 8001274:	4393      	bics	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	4b71      	ldr	r3, [pc, #452]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001280:	f000 fc40 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001284:	0001      	movs	r1, r0
 8001286:	4b6e      	ldr	r3, [pc, #440]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	220f      	movs	r2, #15
 800128e:	4013      	ands	r3, r2
 8001290:	4a6f      	ldr	r2, [pc, #444]	@ (8001450 <HAL_RCC_OscConfig+0x364>)
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	000a      	movs	r2, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	4b6e      	ldr	r3, [pc, #440]	@ (8001454 <HAL_RCC_OscConfig+0x368>)
 800129a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800129c:	4b6e      	ldr	r3, [pc, #440]	@ (8001458 <HAL_RCC_OscConfig+0x36c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2513      	movs	r5, #19
 80012a2:	197c      	adds	r4, r7, r5
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fc49 	bl	8000b3c <HAL_InitTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012ae:	197b      	adds	r3, r7, r5
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d046      	beq.n	8001344 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80012b6:	197b      	adds	r3, r7, r5
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e2d0      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d027      	beq.n	8001312 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2209      	movs	r2, #9
 80012c8:	4393      	bics	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fc78 	bl	8000bc8 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fc73 	bl	8000bc8 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e2b6      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2204      	movs	r2, #4
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0f1      	beq.n	80012de <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a53      	ldr	r2, [pc, #332]	@ (800144c <HAL_RCC_OscConfig+0x360>)
 8001300:	4013      	ands	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	021a      	lsls	r2, r3, #8
 800130a:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	e018      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b4a      	ldr	r3, [pc, #296]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001318:	2101      	movs	r1, #1
 800131a:	438a      	bics	r2, r1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fc53 	bl	8000bc8 <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001328:	f7ff fc4e 	bl	8000bc8 <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e291      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2204      	movs	r2, #4
 8001340:	4013      	ands	r3, r2
 8001342:	d1f1      	bne.n	8001328 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2210      	movs	r2, #16
 800134a:	4013      	ands	r3, r2
 800134c:	d100      	bne.n	8001350 <HAL_RCC_OscConfig+0x264>
 800134e:	e0a1      	b.n	8001494 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d140      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001356:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4013      	ands	r3, r2
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x282>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e277      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136e:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a3a      	ldr	r2, [pc, #232]	@ (800145c <HAL_RCC_OscConfig+0x370>)
 8001374:	4013      	ands	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	0a19      	lsrs	r1, r3, #8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	061a      	lsls	r2, r3, #24
 8001390:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001392:	430a      	orrs	r2, r1
 8001394:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	0b5b      	lsrs	r3, r3, #13
 800139c:	3301      	adds	r3, #1
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	0212      	lsls	r2, r2, #8
 80013a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	210f      	movs	r1, #15
 80013ac:	400b      	ands	r3, r1
 80013ae:	4928      	ldr	r1, [pc, #160]	@ (8001450 <HAL_RCC_OscConfig+0x364>)
 80013b0:	5ccb      	ldrb	r3, [r1, r3]
 80013b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x368>)
 80013b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <HAL_RCC_OscConfig+0x36c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2513      	movs	r5, #19
 80013be:	197c      	adds	r4, r7, r5
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fbbb 	bl	8000b3c <HAL_InitTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d060      	beq.n	8001494 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80013d2:	197b      	adds	r3, r7, r5
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	e242      	b.n	800185e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d03f      	beq.n	8001460 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 80013e6:	2180      	movs	r1, #128	@ 0x80
 80013e8:	0049      	lsls	r1, r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fbeb 	bl	8000bc8 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f8:	f7ff fbe6 	bl	8000bc8 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e229      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <HAL_RCC_OscConfig+0x370>)
 800141c:	4013      	ands	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 8001426:	430a      	orrs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	0a19      	lsrs	r1, r3, #8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	061a      	lsls	r2, r3, #24
 8001438:	4b01      	ldr	r3, [pc, #4]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e029      	b.n	8001494 <HAL_RCC_OscConfig+0x3a8>
 8001440:	40021000 	.word	0x40021000
 8001444:	fffeffff 	.word	0xfffeffff
 8001448:	fffbffff 	.word	0xfffbffff
 800144c:	ffffe0ff 	.word	0xffffe0ff
 8001450:	08002780 	.word	0x08002780
 8001454:	20000010 	.word	0x20000010
 8001458:	20000014 	.word	0x20000014
 800145c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001460:	4bbd      	ldr	r3, [pc, #756]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4bbc      	ldr	r3, [pc, #752]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001466:	49bd      	ldr	r1, [pc, #756]	@ (800175c <HAL_RCC_OscConfig+0x670>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fbac 	bl	8000bc8 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001476:	f7ff fba7 	bl	8000bc8 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1ea      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001488:	4bb3      	ldr	r3, [pc, #716]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2208      	movs	r2, #8
 800149a:	4013      	ands	r3, r2
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4bac      	ldr	r3, [pc, #688]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80014a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014aa:	4bab      	ldr	r3, [pc, #684]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80014ac:	2101      	movs	r1, #1
 80014ae:	430a      	orrs	r2, r1
 80014b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb89 	bl	8000bc8 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb84 	bl	8000bc8 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1c7      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ce:	4ba2      	ldr	r3, [pc, #648]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80014d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f1      	beq.n	80014bc <HAL_RCC_OscConfig+0x3d0>
 80014d8:	e018      	b.n	800150c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014da:	4b9f      	ldr	r3, [pc, #636]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80014dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014de:	4b9e      	ldr	r3, [pc, #632]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	438a      	bics	r2, r1
 80014e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb6f 	bl	8000bc8 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb6a 	bl	8000bc8 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1ad      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001502:	4b95      	ldr	r3, [pc, #596]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d1f1      	bne.n	80014f0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2204      	movs	r2, #4
 8001512:	4013      	ands	r3, r2
 8001514:	d100      	bne.n	8001518 <HAL_RCC_OscConfig+0x42c>
 8001516:	e0ae      	b.n	8001676 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001518:	2027      	movs	r0, #39	@ 0x27
 800151a:	183b      	adds	r3, r7, r0
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001520:	4b8d      	ldr	r3, [pc, #564]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	055b      	lsls	r3, r3, #21
 8001528:	4013      	ands	r3, r2
 800152a:	d109      	bne.n	8001540 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b8a      	ldr	r3, [pc, #552]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800152e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001530:	4b89      	ldr	r3, [pc, #548]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	0549      	lsls	r1, r1, #21
 8001536:	430a      	orrs	r2, r1
 8001538:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800153a:	183b      	adds	r3, r7, r0
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b87      	ldr	r3, [pc, #540]	@ (8001760 <HAL_RCC_OscConfig+0x674>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4013      	ands	r3, r2
 800154a:	d11a      	bne.n	8001582 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154c:	4b84      	ldr	r3, [pc, #528]	@ (8001760 <HAL_RCC_OscConfig+0x674>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b83      	ldr	r3, [pc, #524]	@ (8001760 <HAL_RCC_OscConfig+0x674>)
 8001552:	2180      	movs	r1, #128	@ 0x80
 8001554:	0049      	lsls	r1, r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fb35 	bl	8000bc8 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001564:	f7ff fb30 	bl	8000bc8 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	@ 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e173      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b7a      	ldr	r3, [pc, #488]	@ (8001760 <HAL_RCC_OscConfig+0x674>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4013      	ands	r3, r2
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	429a      	cmp	r2, r3
 800158c:	d107      	bne.n	800159e <HAL_RCC_OscConfig+0x4b2>
 800158e:	4b72      	ldr	r3, [pc, #456]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b71      	ldr	r3, [pc, #452]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	0049      	lsls	r1, r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	651a      	str	r2, [r3, #80]	@ 0x50
 800159c:	e031      	b.n	8001602 <HAL_RCC_OscConfig+0x516>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4d4>
 80015a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015ac:	496b      	ldr	r1, [pc, #428]	@ (800175c <HAL_RCC_OscConfig+0x670>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80015b2:	4b69      	ldr	r3, [pc, #420]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015b6:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015b8:	496a      	ldr	r1, [pc, #424]	@ (8001764 <HAL_RCC_OscConfig+0x678>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80015be:	e020      	b.n	8001602 <HAL_RCC_OscConfig+0x516>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	23a0      	movs	r3, #160	@ 0xa0
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10e      	bne.n	80015ea <HAL_RCC_OscConfig+0x4fe>
 80015cc:	4b62      	ldr	r3, [pc, #392]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015d0:	4b61      	ldr	r3, [pc, #388]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015d2:	2180      	movs	r1, #128	@ 0x80
 80015d4:	00c9      	lsls	r1, r1, #3
 80015d6:	430a      	orrs	r2, r1
 80015d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80015da:	4b5f      	ldr	r3, [pc, #380]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015de:	4b5e      	ldr	r3, [pc, #376]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	0049      	lsls	r1, r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80015e8:	e00b      	b.n	8001602 <HAL_RCC_OscConfig+0x516>
 80015ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015f0:	495a      	ldr	r1, [pc, #360]	@ (800175c <HAL_RCC_OscConfig+0x670>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80015f6:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015fa:	4b57      	ldr	r3, [pc, #348]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80015fc:	4959      	ldr	r1, [pc, #356]	@ (8001764 <HAL_RCC_OscConfig+0x678>)
 80015fe:	400a      	ands	r2, r1
 8001600:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d015      	beq.n	8001636 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff fadd 	bl	8000bc8 <HAL_GetTick>
 800160e:	0003      	movs	r3, r0
 8001610:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001612:	e009      	b.n	8001628 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fad8 	bl	8000bc8 <HAL_GetTick>
 8001618:	0002      	movs	r2, r0
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <HAL_RCC_OscConfig+0x67c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e11a      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001628:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800162a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x528>
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fac7 	bl	8000bc8 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800163e:	e009      	b.n	8001654 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff fac2 	bl	8000bc8 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4a47      	ldr	r2, [pc, #284]	@ (8001768 <HAL_RCC_OscConfig+0x67c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e104      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001654:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d1ef      	bne.n	8001640 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001660:	2327      	movs	r3, #39	@ 0x27
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800166c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800166e:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001670:	493e      	ldr	r1, [pc, #248]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001672:	400a      	ands	r2, r1
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2220      	movs	r2, #32
 800167c:	4013      	ands	r3, r2
 800167e:	d049      	beq.n	8001714 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d026      	beq.n	80016d6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001688:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001698:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800169a:	2101      	movs	r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a0:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <HAL_RCC_OscConfig+0x684>)
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <HAL_RCC_OscConfig+0x684>)
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	0189      	lsls	r1, r1, #6
 80016aa:	430a      	orrs	r2, r1
 80016ac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa8b 	bl	8000bc8 <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b8:	f7ff fa86 	bl	8000bc8 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0c9      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d0f1      	beq.n	80016b8 <HAL_RCC_OscConfig+0x5cc>
 80016d4:	e01e      	b.n	8001714 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 80016dc:	2101      	movs	r1, #1
 80016de:	438a      	bics	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_RCC_OscConfig+0x684>)
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_RCC_OscConfig+0x684>)
 80016e8:	4922      	ldr	r1, [pc, #136]	@ (8001774 <HAL_RCC_OscConfig+0x688>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa6b 	bl	8000bc8 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f8:	f7ff fa66 	bl	8000bc8 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0a9      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d1f1      	bne.n	80016f8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x632>
 800171c:	e09e      	b.n	800185c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x63a>
 8001724:	e077      	b.n	8001816 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	2b02      	cmp	r3, #2
 800172c:	d158      	bne.n	80017e0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_RCC_OscConfig+0x66c>)
 8001734:	4910      	ldr	r1, [pc, #64]	@ (8001778 <HAL_RCC_OscConfig+0x68c>)
 8001736:	400a      	ands	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa45 	bl	8000bc8 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001742:	e01b      	b.n	800177c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fa40 	bl	8000bc8 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d914      	bls.n	800177c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e083      	b.n	800185e <HAL_RCC_OscConfig+0x772>
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	fffffeff 	.word	0xfffffeff
 8001760:	40007000 	.word	0x40007000
 8001764:	fffffbff 	.word	0xfffffbff
 8001768:	00001388 	.word	0x00001388
 800176c:	efffffff 	.word	0xefffffff
 8001770:	40010000 	.word	0x40010000
 8001774:	ffffdfff 	.word	0xffffdfff
 8001778:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800177c:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	049b      	lsls	r3, r3, #18
 8001784:	4013      	ands	r3, r2
 8001786:	d1dd      	bne.n	8001744 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b37      	ldr	r3, [pc, #220]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a37      	ldr	r2, [pc, #220]	@ (800186c <HAL_RCC_OscConfig+0x780>)
 800178e:	4013      	ands	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a0:	431a      	orrs	r2, r3
 80017a2:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	0449      	lsls	r1, r1, #17
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fa07 	bl	8000bc8 <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa02 	bl	8000bc8 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e045      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017d2:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	@ 0x80
 80017d8:	049b      	lsls	r3, r3, #18
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x6d4>
 80017de:	e03d      	b.n	800185c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017e6:	4922      	ldr	r1, [pc, #136]	@ (8001870 <HAL_RCC_OscConfig+0x784>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff f9ec 	bl	8000bc8 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff f9e7 	bl	8000bc8 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e02a      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	049b      	lsls	r3, r3, #18
 8001810:	4013      	ands	r3, r2
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x70a>
 8001814:	e022      	b.n	800185c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e01d      	b.n	800185e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	429a      	cmp	r2, r3
 8001836:	d10f      	bne.n	8001858 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	23f0      	movs	r3, #240	@ 0xf0
 800183c:	039b      	lsls	r3, r3, #14
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	23c0      	movs	r3, #192	@ 0xc0
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	401a      	ands	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b00a      	add	sp, #40	@ 0x28
 8001864:	bdb0      	pop	{r4, r5, r7, pc}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	40021000 	.word	0x40021000
 800186c:	ff02ffff 	.word	0xff02ffff
 8001870:	feffffff 	.word	0xfeffffff

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b5b0      	push	{r4, r5, r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e128      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b96      	ldr	r3, [pc, #600]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d91e      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b93      	ldr	r3, [pc, #588]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	4b90      	ldr	r3, [pc, #576]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a8:	f7ff f98e 	bl	8000bc8 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f989 	bl	8000bc8 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a8a      	ldr	r2, [pc, #552]	@ (8001ae8 <HAL_RCC_ClockConfig+0x274>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e109      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b87      	ldr	r3, [pc, #540]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018de:	4b83      	ldr	r3, [pc, #524]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	22f0      	movs	r2, #240	@ 0xf0
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b7f      	ldr	r3, [pc, #508]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_ClockConfig+0x8a>
 80018fc:	e089      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001906:	4b79      	ldr	r3, [pc, #484]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	029b      	lsls	r3, r3, #10
 800190e:	4013      	ands	r3, r2
 8001910:	d120      	bne.n	8001954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0e1      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800191e:	4b73      	ldr	r3, [pc, #460]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	4013      	ands	r3, r2
 8001928:	d114      	bne.n	8001954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0d5      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d106      	bne.n	8001944 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001936:	4b6d      	ldr	r3, [pc, #436]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2204      	movs	r2, #4
 800193c:	4013      	ands	r3, r2
 800193e:	d109      	bne.n	8001954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0ca      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001944:	4b69      	ldr	r3, [pc, #420]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0c2      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001954:	4b65      	ldr	r3, [pc, #404]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2203      	movs	r2, #3
 800195a:	4393      	bics	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4b62      	ldr	r3, [pc, #392]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7ff f92e 	bl	8000bc8 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d111      	bne.n	800199c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	e009      	b.n	800198e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197a:	f7ff f925 	bl	8000bc8 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	4a58      	ldr	r2, [pc, #352]	@ (8001ae8 <HAL_RCC_ClockConfig+0x274>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0a5      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800198e:	4b57      	ldr	r3, [pc, #348]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	220c      	movs	r2, #12
 8001994:	4013      	ands	r3, r2
 8001996:	2b08      	cmp	r3, #8
 8001998:	d1ef      	bne.n	800197a <HAL_RCC_ClockConfig+0x106>
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d111      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	e009      	b.n	80019ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a6:	f7ff f90f 	bl	8000bc8 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae8 <HAL_RCC_ClockConfig+0x274>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e08f      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ba:	4b4c      	ldr	r3, [pc, #304]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d1ef      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x132>
 80019c6:	e024      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d11b      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f8f9 	bl	8000bc8 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a42      	ldr	r2, [pc, #264]	@ (8001ae8 <HAL_RCC_ClockConfig+0x274>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e079      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e6:	4b41      	ldr	r3, [pc, #260]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	220c      	movs	r2, #12
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d1ef      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x15e>
 80019f2:	e00e      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f8e8 	bl	8000bc8 <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae8 <HAL_RCC_ClockConfig+0x274>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e068      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a08:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	220c      	movs	r2, #12
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d21e      	bcs.n	8001a5e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a20:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4393      	bics	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a32:	f7ff f8c9 	bl	8000bc8 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f8c4 	bl	8000bc8 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a28      	ldr	r2, [pc, #160]	@ (8001ae8 <HAL_RCC_ClockConfig+0x274>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e044      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_ClockConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d1ee      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	@ (8001af0 <HAL_RCC_ClockConfig+0x27c>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2208      	movs	r2, #8
 8001a82:	4013      	ands	r3, r2
 8001a84:	d00a      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_RCC_ClockConfig+0x280>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	00da      	lsls	r2, r3, #3
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9c:	f000 f832 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001aa0:	0001      	movs	r1, r0
 8001aa2:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_RCC_ClockConfig+0x278>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_RCC_ClockConfig+0x284>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	40da      	lsrs	r2, r3
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_RCC_ClockConfig+0x288>)
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_RCC_ClockConfig+0x28c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	250b      	movs	r5, #11
 8001abe:	197c      	adds	r4, r7, r5
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff f83b 	bl	8000b3c <HAL_InitTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001aca:	197b      	adds	r3, r7, r5
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001ad2:	197b      	adds	r3, r7, r5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b004      	add	sp, #16
 8001ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	40021000 	.word	0x40021000
 8001af0:	fffff8ff 	.word	0xfffff8ff
 8001af4:	ffffc7ff 	.word	0xffffc7ff
 8001af8:	08002780 	.word	0x08002780
 8001afc:	20000010 	.word	0x20000010
 8001b00:	20000014 	.word	0x20000014

08001b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b12:	230c      	movs	r3, #12
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d014      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1a:	d900      	bls.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1a>
 8001b1c:	e07b      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x112>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x24>
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b26:	e076      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b28:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b34:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b36:	e07c      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b38:	4b42      	ldr	r3, [pc, #264]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b3c:	e079      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b3e:	4b42      	ldr	r3, [pc, #264]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b42:	e076      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b46:	0c9a      	lsrs	r2, r3, #18
 8001b48:	230f      	movs	r3, #15
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x148>)
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b54:	0d9a      	lsrs	r2, r3, #22
 8001b56:	2303      	movs	r3, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5e:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	2380      	movs	r3, #128	@ 0x80
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	4013      	ands	r3, r2
 8001b68:	d01a      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	4a35      	ldr	r2, [pc, #212]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	69b8      	ldr	r0, [r7, #24]
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	f7fe fb71 	bl	8000260 <__aeabi_lmul>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	000b      	movs	r3, r1
 8001b82:	0010      	movs	r0, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f7fe fb45 	bl	8000220 <__aeabi_uldivmod>
 8001b96:	0002      	movs	r2, r0
 8001b98:	000b      	movs	r3, r1
 8001b9a:	0013      	movs	r3, r2
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b9e:	e037      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ba0:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d01a      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4a23      	ldr	r2, [pc, #140]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	68b8      	ldr	r0, [r7, #8]
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	f7fe fb51 	bl	8000260 <__aeabi_lmul>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	000b      	movs	r3, r1
 8001bc2:	0010      	movs	r0, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f7fe fb25 	bl	8000220 <__aeabi_uldivmod>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	000b      	movs	r3, r1
 8001bda:	0013      	movs	r3, r2
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bde:	e017      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	0018      	movs	r0, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	0019      	movs	r1, r3
 8001be8:	4a16      	ldr	r2, [pc, #88]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8001bea:	2300      	movs	r3, #0
 8001bec:	f7fe fb38 	bl	8000260 <__aeabi_lmul>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	000b      	movs	r3, r1
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	001c      	movs	r4, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	001d      	movs	r5, r3
 8001c00:	0022      	movs	r2, r4
 8001c02:	002b      	movs	r3, r5
 8001c04:	f7fe fb0c 	bl	8000220 <__aeabi_uldivmod>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	000b      	movs	r3, r1
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c14:	e00d      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0b5b      	lsrs	r3, r3, #13
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	4013      	ands	r3, r2
 8001c20:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	3301      	adds	r3, #1
 8001c26:	2280      	movs	r2, #128	@ 0x80
 8001c28:	0212      	lsls	r2, r2, #8
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c30:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b00e      	add	sp, #56	@ 0x38
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	003d0900 	.word	0x003d0900
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	08002790 	.word	0x08002790

08001c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e032      	b.n	8001cc8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2239      	movs	r2, #57	@ 0x39
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2238      	movs	r2, #56	@ 0x38
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7fe fea5 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2239      	movs	r2, #57	@ 0x39
 8001c82:	2102      	movs	r1, #2
 8001c84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	0019      	movs	r1, r3
 8001c90:	0010      	movs	r0, r2
 8001c92:	f000 facf 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	223e      	movs	r2, #62	@ 0x3e
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	223a      	movs	r2, #58	@ 0x3a
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223b      	movs	r2, #59	@ 0x3b
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223c      	movs	r2, #60	@ 0x3c
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	@ 0x3d
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2239      	movs	r2, #57	@ 0x39
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2239      	movs	r2, #57	@ 0x39
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d001      	beq.n	8001ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e02e      	b.n	8001d46 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2239      	movs	r2, #57	@ 0x39
 8001cec:	2102      	movs	r1, #2
 8001cee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	05db      	lsls	r3, r3, #23
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d009      	beq.n	8001d10 <HAL_TIM_Base_Start+0x40>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a13      	ldr	r2, [pc, #76]	@ (8001d50 <HAL_TIM_Base_Start+0x80>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_TIM_Base_Start+0x40>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <HAL_TIM_Base_Start+0x84>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d111      	bne.n	8001d34 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2207      	movs	r2, #7
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d010      	beq.n	8001d44 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	e007      	b.n	8001d44 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	40010800 	.word	0x40010800
 8001d54:	40011400 	.word	0x40011400

08001d58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e032      	b.n	8001dd0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2239      	movs	r2, #57	@ 0x39
 8001d6e:	5c9b      	ldrb	r3, [r3, r2]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2238      	movs	r2, #56	@ 0x38
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 f829 	bl	8001dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2239      	movs	r2, #57	@ 0x39
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3304      	adds	r3, #4
 8001d96:	0019      	movs	r1, r3
 8001d98:	0010      	movs	r0, r2
 8001d9a:	f000 fa4b 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	223e      	movs	r2, #62	@ 0x3e
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	223a      	movs	r2, #58	@ 0x3a
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223b      	movs	r2, #59	@ 0x3b
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223c      	movs	r2, #60	@ 0x3c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223d      	movs	r2, #61	@ 0x3d
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2239      	movs	r2, #57	@ 0x39
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b002      	add	sp, #8
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <HAL_TIM_PWM_Start+0x22>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	223a      	movs	r2, #58	@ 0x3a
 8001dfc:	5c9b      	ldrb	r3, [r3, r2]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	4193      	sbcs	r3, r2
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	e01f      	b.n	8001e4a <HAL_TIM_PWM_Start+0x62>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d108      	bne.n	8001e22 <HAL_TIM_PWM_Start+0x3a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	223b      	movs	r2, #59	@ 0x3b
 8001e14:	5c9b      	ldrb	r3, [r3, r2]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	1e5a      	subs	r2, r3, #1
 8001e1c:	4193      	sbcs	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e013      	b.n	8001e4a <HAL_TIM_PWM_Start+0x62>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d108      	bne.n	8001e3a <HAL_TIM_PWM_Start+0x52>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	223c      	movs	r2, #60	@ 0x3c
 8001e2c:	5c9b      	ldrb	r3, [r3, r2]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	4193      	sbcs	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	e007      	b.n	8001e4a <HAL_TIM_PWM_Start+0x62>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223d      	movs	r2, #61	@ 0x3d
 8001e3e:	5c9b      	ldrb	r3, [r3, r2]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	1e5a      	subs	r2, r3, #1
 8001e46:	4193      	sbcs	r3, r2
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e04d      	b.n	8001eee <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_PWM_Start+0x7a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	223a      	movs	r2, #58	@ 0x3a
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	5499      	strb	r1, [r3, r2]
 8001e60:	e013      	b.n	8001e8a <HAL_TIM_PWM_Start+0xa2>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_PWM_Start+0x8a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	223b      	movs	r2, #59	@ 0x3b
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	5499      	strb	r1, [r3, r2]
 8001e70:	e00b      	b.n	8001e8a <HAL_TIM_PWM_Start+0xa2>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d104      	bne.n	8001e82 <HAL_TIM_PWM_Start+0x9a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223c      	movs	r2, #60	@ 0x3c
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	5499      	strb	r1, [r3, r2]
 8001e80:	e003      	b.n	8001e8a <HAL_TIM_PWM_Start+0xa2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	223d      	movs	r2, #61	@ 0x3d
 8001e86:	2102      	movs	r1, #2
 8001e88:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 fbc0 	bl	8002618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_PWM_Start+0xd0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <HAL_TIM_PWM_Start+0x110>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_PWM_Start+0xd0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <HAL_TIM_PWM_Start+0x114>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	40010800 	.word	0x40010800
 8001efc:	40011400 	.word	0x40011400

08001f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0c:	2317      	movs	r3, #23
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2238      	movs	r2, #56	@ 0x38
 8001f18:	5c9b      	ldrb	r3, [r3, r2]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e0ad      	b.n	800207e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2238      	movs	r2, #56	@ 0x38
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d100      	bne.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001f30:	e076      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	d900      	bls.n	8001f3a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001f38:	e095      	b.n	8002066 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d04e      	beq.n	8001fde <HAL_TIM_PWM_ConfigChannel+0xde>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d900      	bls.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001f46:	e08e      	b.n	8002066 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d021      	beq.n	8001f98 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001f54:	e087      	b.n	8002066 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f9bc 	bl	80022dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2108      	movs	r1, #8
 8001f70:	430a      	orrs	r2, r1
 8001f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2104      	movs	r1, #4
 8001f80:	438a      	bics	r2, r1
 8001f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	619a      	str	r2, [r3, #24]
      break;
 8001f96:	e06b      	b.n	8002070 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f9d7 	bl	8002354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	0109      	lsls	r1, r1, #4
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4931      	ldr	r1, [pc, #196]	@ (8002088 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6999      	ldr	r1, [r3, #24]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	619a      	str	r2, [r3, #24]
      break;
 8001fdc:	e048      	b.n	8002070 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f9f6 	bl	80023d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2108      	movs	r1, #8
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2104      	movs	r1, #4
 8002008:	438a      	bics	r2, r1
 800200a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69d9      	ldr	r1, [r3, #28]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	61da      	str	r2, [r3, #28]
      break;
 800201e:	e027      	b.n	8002070 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	0011      	movs	r1, r2
 8002028:	0018      	movs	r0, r3
 800202a:	f000 fa15 	bl	8002458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0109      	lsls	r1, r1, #4
 800203c:	430a      	orrs	r2, r1
 800203e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	490f      	ldr	r1, [pc, #60]	@ (8002088 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800204c:	400a      	ands	r2, r1
 800204e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69d9      	ldr	r1, [r3, #28]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	021a      	lsls	r2, r3, #8
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	61da      	str	r2, [r3, #28]
      break;
 8002064:	e004      	b.n	8002070 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002066:	2317      	movs	r3, #23
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
      break;
 800206e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2238      	movs	r2, #56	@ 0x38
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]

  return status;
 8002078:	2317      	movs	r3, #23
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b006      	add	sp, #24
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	fffffbff 	.word	0xfffffbff

0800208c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	230f      	movs	r3, #15
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2238      	movs	r2, #56	@ 0x38
 80020a2:	5c9b      	ldrb	r3, [r3, r2]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_TIM_ConfigClockSource+0x20>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e0bc      	b.n	8002226 <HAL_TIM_ConfigClockSource+0x19a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2238      	movs	r2, #56	@ 0x38
 80020b0:	2101      	movs	r1, #1
 80020b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2239      	movs	r2, #57	@ 0x39
 80020b8:	2102      	movs	r1, #2
 80020ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2277      	movs	r2, #119	@ 0x77
 80020c8:	4393      	bics	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2280      	movs	r2, #128	@ 0x80
 80020e2:	0192      	lsls	r2, r2, #6
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d040      	beq.n	800216a <HAL_TIM_ConfigClockSource+0xde>
 80020e8:	2280      	movs	r2, #128	@ 0x80
 80020ea:	0192      	lsls	r2, r2, #6
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d900      	bls.n	80020f2 <HAL_TIM_ConfigClockSource+0x66>
 80020f0:	e088      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	0152      	lsls	r2, r2, #5
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_TIM_ConfigClockSource+0x70>
 80020fa:	e088      	b.n	800220e <HAL_TIM_ConfigClockSource+0x182>
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	0152      	lsls	r2, r2, #5
 8002100:	4293      	cmp	r3, r2
 8002102:	d900      	bls.n	8002106 <HAL_TIM_ConfigClockSource+0x7a>
 8002104:	e07e      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 8002106:	2b70      	cmp	r3, #112	@ 0x70
 8002108:	d018      	beq.n	800213c <HAL_TIM_ConfigClockSource+0xb0>
 800210a:	d900      	bls.n	800210e <HAL_TIM_ConfigClockSource+0x82>
 800210c:	e07a      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 800210e:	2b60      	cmp	r3, #96	@ 0x60
 8002110:	d04f      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0x126>
 8002112:	d900      	bls.n	8002116 <HAL_TIM_ConfigClockSource+0x8a>
 8002114:	e076      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 8002116:	2b50      	cmp	r3, #80	@ 0x50
 8002118:	d03b      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x106>
 800211a:	d900      	bls.n	800211e <HAL_TIM_ConfigClockSource+0x92>
 800211c:	e072      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 800211e:	2b40      	cmp	r3, #64	@ 0x40
 8002120:	d057      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x146>
 8002122:	d900      	bls.n	8002126 <HAL_TIM_ConfigClockSource+0x9a>
 8002124:	e06e      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 8002126:	2b30      	cmp	r3, #48	@ 0x30
 8002128:	d063      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x166>
 800212a:	d86b      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 800212c:	2b20      	cmp	r3, #32
 800212e:	d060      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x166>
 8002130:	d868      	bhi.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
 8002132:	2b00      	cmp	r3, #0
 8002134:	d05d      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x166>
 8002136:	2b10      	cmp	r3, #16
 8002138:	d05b      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x166>
 800213a:	e063      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800214c:	f000 fa44 	bl	80025d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2277      	movs	r2, #119	@ 0x77
 800215c:	4313      	orrs	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
      break;
 8002168:	e052      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800217a:	f000 fa2d 	bl	80025d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2180      	movs	r1, #128	@ 0x80
 800218a:	01c9      	lsls	r1, r1, #7
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
      break;
 8002190:	e03e      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800219e:	001a      	movs	r2, r3
 80021a0:	f000 f9a0 	bl	80024e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2150      	movs	r1, #80	@ 0x50
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f9fa 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021b0:	e02e      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021be:	001a      	movs	r2, r3
 80021c0:	f000 f9be 	bl	8002540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2160      	movs	r1, #96	@ 0x60
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f9ea 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021d0:	e01e      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021de:	001a      	movs	r2, r3
 80021e0:	f000 f980 	bl	80024e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2140      	movs	r1, #64	@ 0x40
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 f9da 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021f0:	e00e      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0019      	movs	r1, r3
 80021fc:	0010      	movs	r0, r2
 80021fe:	f000 f9d1 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 8002202:	e005      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
      break;
 800220c:	e000      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800220e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2239      	movs	r2, #57	@ 0x39
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2238      	movs	r2, #56	@ 0x38
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

  return status;
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	ffff00ff 	.word	0xffff00ff

08002234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	05db      	lsls	r3, r3, #23
 800224a:	429a      	cmp	r2, r3
 800224c:	d007      	beq.n	800225e <TIM_Base_SetConfig+0x2a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <TIM_Base_SetConfig+0x9c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_Base_SetConfig+0x2a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <TIM_Base_SetConfig+0xa0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2270      	movs	r2, #112	@ 0x70
 8002262:	4393      	bics	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	05db      	lsls	r3, r3, #23
 8002276:	429a      	cmp	r2, r3
 8002278:	d007      	beq.n	800228a <TIM_Base_SetConfig+0x56>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <TIM_Base_SetConfig+0x9c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_Base_SetConfig+0x56>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <TIM_Base_SetConfig+0xa0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d108      	bne.n	800229c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <TIM_Base_SetConfig+0xa4>)
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2280      	movs	r2, #128	@ 0x80
 80022a0:	4393      	bics	r3, r2
 80022a2:	001a      	movs	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	615a      	str	r2, [r3, #20]
}
 80022c8:	46c0      	nop			@ (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40010800 	.word	0x40010800
 80022d4:	40011400 	.word	0x40011400
 80022d8:	fffffcff 	.word	0xfffffcff

080022dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4393      	bics	r3, r2
 80022ee:	001a      	movs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2270      	movs	r2, #112	@ 0x70
 800230a:	4393      	bics	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2203      	movs	r2, #3
 8002312:	4393      	bics	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2202      	movs	r2, #2
 8002324:	4393      	bics	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	621a      	str	r2, [r3, #32]
}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}

08002354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2210      	movs	r2, #16
 8002364:	4393      	bics	r3, r2
 8002366:	001a      	movs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <TIM_OC2_SetConfig+0x7c>)
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <TIM_OC2_SetConfig+0x80>)
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2220      	movs	r2, #32
 800239e:	4393      	bics	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	621a      	str	r2, [r3, #32]
}
 80023c8:	46c0      	nop			@ (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b006      	add	sp, #24
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	ffff8fff 	.word	0xffff8fff
 80023d4:	fffffcff 	.word	0xfffffcff

080023d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <TIM_OC3_SetConfig+0x78>)
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2270      	movs	r2, #112	@ 0x70
 8002404:	4393      	bics	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2203      	movs	r2, #3
 800240c:	4393      	bics	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4a0d      	ldr	r2, [pc, #52]	@ (8002454 <TIM_OC3_SetConfig+0x7c>)
 800241e:	4013      	ands	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	621a      	str	r2, [r3, #32]
}
 8002448:	46c0      	nop			@ (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b006      	add	sp, #24
 800244e:	bd80      	pop	{r7, pc}
 8002450:	fffffeff 	.word	0xfffffeff
 8002454:	fffffdff 	.word	0xfffffdff

08002458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a1b      	ldr	r2, [pc, #108]	@ (80024d4 <TIM_OC4_SetConfig+0x7c>)
 8002468:	401a      	ands	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <TIM_OC4_SetConfig+0x80>)
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <TIM_OC4_SetConfig+0x84>)
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	4a10      	ldr	r2, [pc, #64]	@ (80024e0 <TIM_OC4_SetConfig+0x88>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	031b      	lsls	r3, r3, #12
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	621a      	str	r2, [r3, #32]
}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	ffffefff 	.word	0xffffefff
 80024d8:	ffff8fff 	.word	0xffff8fff
 80024dc:	fffffcff 	.word	0xfffffcff
 80024e0:	ffffdfff 	.word	0xffffdfff

080024e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4393      	bics	r3, r2
 80024fe:	001a      	movs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	22f0      	movs	r2, #240	@ 0xf0
 800250e:	4393      	bics	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	220a      	movs	r2, #10
 8002520:	4393      	bics	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}

08002540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	2210      	movs	r2, #16
 8002552:	4393      	bics	r3, r2
 8002554:	001a      	movs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4a0d      	ldr	r2, [pc, #52]	@ (80025a0 <TIM_TI2_ConfigInputStage+0x60>)
 800256a:	4013      	ands	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	031b      	lsls	r3, r3, #12
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	22a0      	movs	r2, #160	@ 0xa0
 800257c:	4393      	bics	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	ffff0fff 	.word	0xffff0fff

080025a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2270      	movs	r2, #112	@ 0x70
 80025b8:	4393      	bics	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	2207      	movs	r2, #7
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	609a      	str	r2, [r3, #8]
}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <TIM_ETR_SetConfig+0x3c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	609a      	str	r2, [r3, #8]
}
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}
 8002614:	ffff00ff 	.word	0xffff00ff

08002618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	221f      	movs	r2, #31
 8002628:	4013      	ands	r3, r2
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	43d2      	mvns	r2, r2
 800263a:	401a      	ands	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	211f      	movs	r1, #31
 8002648:	400b      	ands	r3, r1
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4099      	lsls	r1, r3
 800264e:	000b      	movs	r3, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b006      	add	sp, #24
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2238      	movs	r2, #56	@ 0x38
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e042      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2238      	movs	r2, #56	@ 0x38
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2239      	movs	r2, #57	@ 0x39
 8002684:	2102      	movs	r1, #2
 8002686:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2270      	movs	r2, #112	@ 0x70
 800269c:	4393      	bics	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	05db      	lsls	r3, r3, #23
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d009      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	4393      	bics	r3, r2
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2239      	movs	r2, #57	@ 0x39
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2238      	movs	r2, #56	@ 0x38
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	40010800 	.word	0x40010800
 800270c:	40011400 	.word	0x40011400

08002710 <memset>:
 8002710:	0003      	movs	r3, r0
 8002712:	1882      	adds	r2, r0, r2
 8002714:	4293      	cmp	r3, r2
 8002716:	d100      	bne.n	800271a <memset+0xa>
 8002718:	4770      	bx	lr
 800271a:	7019      	strb	r1, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	e7f9      	b.n	8002714 <memset+0x4>

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2600      	movs	r6, #0
 8002724:	4c0c      	ldr	r4, [pc, #48]	@ (8002758 <__libc_init_array+0x38>)
 8002726:	4d0d      	ldr	r5, [pc, #52]	@ (800275c <__libc_init_array+0x3c>)
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	2600      	movs	r6, #0
 8002732:	f000 f819 	bl	8002768 <_init>
 8002736:	4c0a      	ldr	r4, [pc, #40]	@ (8002760 <__libc_init_array+0x40>)
 8002738:	4d0a      	ldr	r5, [pc, #40]	@ (8002764 <__libc_init_array+0x44>)
 800273a:	1b64      	subs	r4, r4, r5
 800273c:	10a4      	asrs	r4, r4, #2
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	00b3      	lsls	r3, r6, #2
 8002746:	58eb      	ldr	r3, [r5, r3]
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	00b3      	lsls	r3, r6, #2
 8002750:	58eb      	ldr	r3, [r5, r3]
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080027a4 	.word	0x080027a4
 800275c:	080027a4 	.word	0x080027a4
 8002760:	080027a8 	.word	0x080027a8
 8002764:	080027a4 	.word	0x080027a4

08002768 <_init>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr

08002774 <_fini>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

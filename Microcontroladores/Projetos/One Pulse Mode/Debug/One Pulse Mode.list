
One Pulse Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002024  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080020e4  080020e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002100  08002100  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002100  08002100  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002100  08002100  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002100  08002100  00003100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002104  08002104  00003104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002108  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002114  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002114  0000406c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ae8  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013b9  00000000  00000000  0000ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f2  00000000  00000000  0000c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012abd  00000000  00000000  0000cca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087b3  00000000  00000000  0001f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075291  00000000  00000000  00027f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d1a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b70  00000000  00000000  0009d1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0009ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080020cc 	.word	0x080020cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080020cc 	.word	0x080020cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa10 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80e 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ee 	bl	800040c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f85a 	bl	80002e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 8000234:	4b03      	ldr	r3, [pc, #12]	@ (8000244 <main+0x24>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 fb5a 	bl	80018f2 <HAL_TIM_OnePulse_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	e7fd      	b.n	800023e <main+0x1e>
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	20000028 	.word	0x20000028

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b095      	sub	sp, #84	@ 0x54
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2418      	movs	r4, #24
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2338      	movs	r3, #56	@ 0x38
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f001 ff0b 	bl	8002074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	0018      	movs	r0, r3
 8000262:	2314      	movs	r3, #20
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f001 ff04 	bl	8002074 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026c:	4b1c      	ldr	r3, [pc, #112]	@ (80002e0 <SystemClock_Config+0x98>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1c      	ldr	r2, [pc, #112]	@ (80002e4 <SystemClock_Config+0x9c>)
 8000272:	401a      	ands	r2, r3
 8000274:	4b1a      	ldr	r3, [pc, #104]	@ (80002e0 <SystemClock_Config+0x98>)
 8000276:	2180      	movs	r1, #128	@ 0x80
 8000278:	0109      	lsls	r1, r1, #4
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	0021      	movs	r1, r4
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2202      	movs	r2, #2
 8000284:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2201      	movs	r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2210      	movs	r2, #16
 8000290:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	187b      	adds	r3, r7, r1
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fcbe 	bl	8000c1c <HAL_RCC_OscConfig>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80002a4:	f000 f8e8 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	220f      	movs	r2, #15
 80002ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2201      	movs	r2, #1
 80002b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2280      	movs	r2, #128	@ 0x80
 80002b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f86a 	bl	80013a4 <HAL_RCC_ClockConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002d4:	f000 f8d0 	bl	8000478 <Error_Handler>
  }
}
 80002d8:	46c0      	nop			@ (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b015      	add	sp, #84	@ 0x54
 80002de:	bd90      	pop	{r4, r7, pc}
 80002e0:	40007000 	.word	0x40007000
 80002e4:	ffffe7ff 	.word	0xffffe7ff

080002e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08c      	sub	sp, #48	@ 0x30
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002ee:	231c      	movs	r3, #28
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	0018      	movs	r0, r3
 80002f4:	2314      	movs	r3, #20
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f001 febb 	bl	8002074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fe:	2314      	movs	r3, #20
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	0018      	movs	r0, r3
 8000304:	2308      	movs	r3, #8
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f001 feb3 	bl	8002074 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	2310      	movs	r3, #16
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f001 feac 	bl	8002074 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800031c:	4b38      	ldr	r3, [pc, #224]	@ (8000400 <MX_TIM2_Init+0x118>)
 800031e:	2280      	movs	r2, #128	@ 0x80
 8000320:	05d2      	lsls	r2, r2, #23
 8000322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000324:	4b36      	ldr	r3, [pc, #216]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000326:	2207      	movs	r2, #7
 8000328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032a:	4b35      	ldr	r3, [pc, #212]	@ (8000400 <MX_TIM2_Init+0x118>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8000330:	4b33      	ldr	r3, [pc, #204]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000332:	4a34      	ldr	r2, [pc, #208]	@ (8000404 <MX_TIM2_Init+0x11c>)
 8000334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000336:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033c:	4b30      	ldr	r3, [pc, #192]	@ (8000400 <MX_TIM2_Init+0x118>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000342:	4b2f      	ldr	r3, [pc, #188]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f9fb 	bl	8001740 <HAL_TIM_Base_Init>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800034e:	f000 f893 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000352:	4b2b      	ldr	r3, [pc, #172]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fa33 	bl	80017c0 <HAL_TIM_OC_Init>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800035e:	f000 f88b 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000364:	2108      	movs	r1, #8
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fa72 	bl	8001850 <HAL_TIM_OnePulse_Init>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000370:	f000 f882 	bl	8000478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000374:	211c      	movs	r1, #28
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2206      	movs	r2, #6
 800037a:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2260      	movs	r2, #96	@ 0x60
 8000380:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerFilter = 0;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800038e:	187a      	adds	r2, r7, r1
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_TIM2_Init+0x118>)
 8000392:	0011      	movs	r1, r2
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fb3b 	bl	8001a10 <HAL_TIM_SlaveConfigSynchro>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800039e:	f000 f86b 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a2:	2114      	movs	r1, #20
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b0:	187a      	adds	r2, r7, r1
 80003b2:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <MX_TIM2_Init+0x118>)
 80003b4:	0011      	movs	r1, r2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fe04 	bl	8001fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80003c0:	f000 f85a 	bl	8000478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2270      	movs	r2, #112	@ 0x70
 80003c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10000-1;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <MX_TIM2_Init+0x120>)
 80003ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003dc:	1d39      	adds	r1, r7, #4
 80003de:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <MX_TIM2_Init+0x118>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fabb 	bl	800195e <HAL_TIM_OC_ConfigChannel>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80003ec:	f000 f844 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003f0:	4b03      	ldr	r3, [pc, #12]	@ (8000400 <MX_TIM2_Init+0x118>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 f89c 	bl	8000530 <HAL_TIM_MspPostInit>

}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b00c      	add	sp, #48	@ 0x30
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000028 	.word	0x20000028
 8000404:	0000c34f 	.word	0x0000c34f
 8000408:	0000270f 	.word	0x0000270f

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	0018      	movs	r0, r3
 8000416:	2314      	movs	r3, #20
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f001 fe2a 	bl	8002074 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b14      	ldr	r3, [pc, #80]	@ (8000474 <MX_GPIO_Init+0x68>)
 8000422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <MX_GPIO_Init+0x68>)
 8000426:	2101      	movs	r1, #1
 8000428:	430a      	orrs	r2, r1
 800042a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800042c:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <MX_GPIO_Init+0x68>)
 800042e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000430:	2201      	movs	r2, #1
 8000432:	4013      	ands	r3, r2
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : ENCODER_SW_Pin */
  GPIO_InitStruct.Pin = ENCODER_SW_Pin;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2220      	movs	r2, #32
 800043c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2284      	movs	r2, #132	@ 0x84
 8000442:	0392      	lsls	r2, r2, #14
 8000444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2201      	movs	r2, #1
 800044a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCODER_SW_GPIO_Port, &GPIO_InitStruct);
 800044c:	1d3a      	adds	r2, r7, #4
 800044e:	23a0      	movs	r3, #160	@ 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fa45 	bl	80008e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2007      	movs	r0, #7
 8000460:	f000 fa0e 	bl	8000880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000464:	2007      	movs	r0, #7
 8000466:	f000 fa20 	bl	80008aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b006      	add	sp, #24
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000488:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <HAL_MspInit+0x24>)
 800048a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_MspInit+0x24>)
 800048e:	2101      	movs	r1, #1
 8000490:	430a      	orrs	r2, r1
 8000492:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000494:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <HAL_MspInit+0x24>)
 8000496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000498:	4b03      	ldr	r3, [pc, #12]	@ (80004a8 <HAL_MspInit+0x24>)
 800049a:	2180      	movs	r1, #128	@ 0x80
 800049c:	0549      	lsls	r1, r1, #21
 800049e:	430a      	orrs	r2, r1
 80004a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	240c      	movs	r4, #12
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	0018      	movs	r0, r3
 80004ba:	2314      	movs	r3, #20
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f001 fdd8 	bl	8002074 <memset>
  if(htim_base->Instance==TIM2)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	2380      	movs	r3, #128	@ 0x80
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d128      	bne.n	8000522 <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004d0:	4b16      	ldr	r3, [pc, #88]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004d6:	2101      	movs	r1, #1
 80004d8:	430a      	orrs	r2, r1
 80004da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e0:	4b12      	ldr	r3, [pc, #72]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004e2:	2101      	movs	r1, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e8:	4b10      	ldr	r3, [pc, #64]	@ (800052c <HAL_TIM_Base_MspInit+0x80>)
 80004ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ec:	2201      	movs	r2, #1
 80004ee:	4013      	ands	r3, r2
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2202      	movs	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2202      	movs	r2, #2
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2202      	movs	r2, #2
 8000512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	187a      	adds	r2, r7, r1
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 f9e1 	bl	80008e4 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b009      	add	sp, #36	@ 0x24
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b089      	sub	sp, #36	@ 0x24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	240c      	movs	r4, #12
 800053a:	193b      	adds	r3, r7, r4
 800053c:	0018      	movs	r0, r3
 800053e:	2314      	movs	r3, #20
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f001 fd96 	bl	8002074 <memset>
  if(htim->Instance==TIM2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	2380      	movs	r3, #128	@ 0x80
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	429a      	cmp	r2, r3
 8000552:	d122      	bne.n	800059a <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <HAL_TIM_MspPostInit+0x74>)
 8000556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_TIM_MspPostInit+0x74>)
 800055a:	2101      	movs	r1, #1
 800055c:	430a      	orrs	r2, r1
 800055e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <HAL_TIM_MspPostInit+0x74>)
 8000562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000564:	2201      	movs	r2, #1
 8000566:	4013      	ands	r3, r2
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2202      	movs	r2, #2
 8000578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2202      	movs	r2, #2
 800058a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	187a      	adds	r2, r7, r1
 800058e:	23a0      	movs	r3, #160	@ 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f000 f9a5 	bl	80008e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b009      	add	sp, #36	@ 0x24
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	e7fd      	b.n	80005ac <NMI_Handler+0x4>

080005b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	e7fd      	b.n	80005b4 <HardFault_Handler+0x4>

080005b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f88e 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_SW_Pin);
 80005de:	2020      	movs	r0, #32
 80005e0:	f000 faf6 	bl	8000bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff fff7 	bl	80005ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000622:	f001 fd2f 	bl	8002084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000626:	f7ff fdfb 	bl	8000220 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000638:	08002108 	.word	0x08002108
  ldr r2, =_sbss
 800063c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000640:	2000006c 	.word	0x2000006c

08000644 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_COMP_IRQHandler>
	...

08000648 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <HAL_Init+0x3c>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <HAL_Init+0x3c>)
 800065a:	2140      	movs	r1, #64	@ 0x40
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f811 	bl	8000688 <HAL_InitTick>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d003      	beq.n	8000672 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e001      	b.n	8000676 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000672:	f7ff ff07 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <HAL_InitTick+0x5c>)
 8000692:	681c      	ldr	r4, [r3, #0]
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <HAL_InitTick+0x60>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	0019      	movs	r1, r3
 800069a:	23fa      	movs	r3, #250	@ 0xfa
 800069c:	0098      	lsls	r0, r3, #2
 800069e:	f7ff fd33 	bl	8000108 <__udivsi3>
 80006a2:	0003      	movs	r3, r0
 80006a4:	0019      	movs	r1, r3
 80006a6:	0020      	movs	r0, r4
 80006a8:	f7ff fd2e 	bl	8000108 <__udivsi3>
 80006ac:	0003      	movs	r3, r0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f90b 	bl	80008ca <HAL_SYSTICK_Config>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e00f      	b.n	80006dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d80b      	bhi.n	80006da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f8d8 	bl	8000880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_InitTick+0x64>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b003      	add	sp, #12
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	18d2      	adds	r2, r2, r3
 8000700:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <HAL_IncTick+0x20>)
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000008 	.word	0x20000008
 8000710:	20000068 	.word	0x20000068

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	@ (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	20000068 	.word	0x20000068

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b7f      	cmp	r3, #127	@ 0x7f
 800073a:	d809      	bhi.n	8000750 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	001a      	movs	r2, r3
 8000742:	231f      	movs	r3, #31
 8000744:	401a      	ands	r2, r3
 8000746:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <__NVIC_EnableIRQ+0x30>)
 8000748:	2101      	movs	r1, #1
 800074a:	4091      	lsls	r1, r2
 800074c:	000a      	movs	r2, r1
 800074e:	601a      	str	r2, [r3, #0]
  }
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000770:	d828      	bhi.n	80007c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000772:	4a2f      	ldr	r2, [pc, #188]	@ (8000830 <__NVIC_SetPriority+0xd4>)
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	33c0      	adds	r3, #192	@ 0xc0
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	589b      	ldr	r3, [r3, r2]
 8000782:	1dfa      	adds	r2, r7, #7
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	0011      	movs	r1, r2
 8000788:	2203      	movs	r2, #3
 800078a:	400a      	ands	r2, r1
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	21ff      	movs	r1, #255	@ 0xff
 8000790:	4091      	lsls	r1, r2
 8000792:	000a      	movs	r2, r1
 8000794:	43d2      	mvns	r2, r2
 8000796:	401a      	ands	r2, r3
 8000798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	22ff      	movs	r2, #255	@ 0xff
 80007a0:	401a      	ands	r2, r3
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	0018      	movs	r0, r3
 80007a8:	2303      	movs	r3, #3
 80007aa:	4003      	ands	r3, r0
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b0:	481f      	ldr	r0, [pc, #124]	@ (8000830 <__NVIC_SetPriority+0xd4>)
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	089b      	lsrs	r3, r3, #2
 80007ba:	430a      	orrs	r2, r1
 80007bc:	33c0      	adds	r3, #192	@ 0xc0
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007c2:	e031      	b.n	8000828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <__NVIC_SetPriority+0xd8>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0019      	movs	r1, r3
 80007cc:	230f      	movs	r3, #15
 80007ce:	400b      	ands	r3, r1
 80007d0:	3b08      	subs	r3, #8
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	3306      	adds	r3, #6
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	3304      	adds	r3, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	@ 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	@ 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <__NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	001c      	movs	r4, r3
 8000814:	230f      	movs	r3, #15
 8000816:	4023      	ands	r3, r4
 8000818:	3b08      	subs	r3, #8
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	430a      	orrs	r2, r1
 800081e:	3306      	adds	r3, #6
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	18c3      	adds	r3, r0, r3
 8000824:	3304      	adds	r3, #4
 8000826:	601a      	str	r2, [r3, #0]
}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b003      	add	sp, #12
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	045b      	lsls	r3, r3, #17
 8000848:	429a      	cmp	r2, r3
 800084a:	d301      	bcc.n	8000850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084c:	2301      	movs	r3, #1
 800084e:	e010      	b.n	8000872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <SysTick_Config+0x44>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	3a01      	subs	r2, #1
 8000856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2103      	movs	r1, #3
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff7c 	bl	800075c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <SysTick_Config+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	@ (800087c <SysTick_Config+0x44>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	210f      	movs	r1, #15
 800088c:	187b      	adds	r3, r7, r1
 800088e:	1c02      	adds	r2, r0, #0
 8000890:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	187b      	adds	r3, r7, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff5d 	bl	800075c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	0002      	movs	r2, r0
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff33 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffaf 	bl	8000838 <SysTick_Config>
 80008da:	0003      	movs	r3, r0
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80008fa:	e14f      	b.n	8000b9c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <HAL_GPIO_Init+0x30>
 8000912:	e140      	b.n	8000b96 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2203      	movs	r2, #3
 800091a:	4013      	ands	r3, r2
 800091c:	2b01      	cmp	r3, #1
 800091e:	d005      	beq.n	800092c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2203      	movs	r2, #3
 8000926:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000928:	2b02      	cmp	r3, #2
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	409a      	lsls	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	43da      	mvns	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	2201      	movs	r2, #1
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2203      	movs	r2, #3
 8000994:	4013      	ands	r3, r2
 8000996:	2b03      	cmp	r3, #3
 8000998:	d017      	beq.n	80009ca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	43da      	mvns	r2, r3
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2203      	movs	r2, #3
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d123      	bne.n	8000a1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	08da      	lsrs	r2, r3, #3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3208      	adds	r2, #8
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	58d3      	ldr	r3, [r2, r3]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2207      	movs	r2, #7
 80009e8:	4013      	ands	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2107      	movs	r1, #7
 8000a02:	400b      	ands	r3, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3208      	adds	r2, #8
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	6939      	ldr	r1, [r7, #16]
 8000a1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	23c0      	movs	r3, #192	@ 0xc0
 8000a58:	029b      	lsls	r3, r3, #10
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d100      	bne.n	8000a60 <HAL_GPIO_Init+0x17c>
 8000a5e:	e09a      	b.n	8000b96 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	4b54      	ldr	r3, [pc, #336]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a64:	4b53      	ldr	r3, [pc, #332]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000a66:	2101      	movs	r1, #1
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a6c:	4a52      	ldr	r2, [pc, #328]	@ (8000bb8 <HAL_GPIO_Init+0x2d4>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	589b      	ldr	r3, [r3, r2]
 8000a78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	4013      	ands	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	220f      	movs	r2, #15
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	43da      	mvns	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	23a0      	movs	r3, #160	@ 0xa0
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d019      	beq.n	8000ace <HAL_GPIO_Init+0x1ea>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a47      	ldr	r2, [pc, #284]	@ (8000bbc <HAL_GPIO_Init+0x2d8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0x1e6>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a46      	ldr	r2, [pc, #280]	@ (8000bc0 <HAL_GPIO_Init+0x2dc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d00d      	beq.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a45      	ldr	r2, [pc, #276]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <HAL_GPIO_Init+0x1de>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a44      	ldr	r2, [pc, #272]	@ (8000bc8 <HAL_GPIO_Init+0x2e4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_GPIO_Init+0x1da>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e008      	b.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000abe:	2306      	movs	r3, #6
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e004      	b.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e002      	b.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	400a      	ands	r2, r1
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae0:	4935      	ldr	r1, [pc, #212]	@ (8000bb8 <HAL_GPIO_Init+0x2d4>)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aee:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	43da      	mvns	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	035b      	lsls	r3, r3, #13
 8000b06:	4013      	ands	r3, r2
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b12:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	039b      	lsls	r3, r3, #14
 8000b30:	4013      	ands	r3, r2
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b3c:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000b42:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	029b      	lsls	r3, r3, #10
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43da      	mvns	r2, r3
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	025b      	lsls	r3, r3, #9
 8000b84:	4013      	ands	r3, r2
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_GPIO_Init+0x2e8>)
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	40da      	lsrs	r2, r3
 8000ba4:	1e13      	subs	r3, r2, #0
 8000ba6:	d000      	beq.n	8000baa <HAL_GPIO_Init+0x2c6>
 8000ba8:	e6a8      	b.n	80008fc <HAL_GPIO_Init+0x18>
  }
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b006      	add	sp, #24
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	50000400 	.word	0x50000400
 8000bc0:	50000800 	.word	0x50000800
 8000bc4:	50000c00 	.word	0x50000c00
 8000bc8:	50001c00 	.word	0x50001c00
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	1dbb      	adds	r3, r7, #6
 8000bda:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	1dba      	adds	r2, r7, #6
 8000be2:	8812      	ldrh	r2, [r2, #0]
 8000be4:	4013      	ands	r3, r2
 8000be6:	d008      	beq.n	8000bfa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bea:	1dba      	adds	r2, r7, #6
 8000bec:	8812      	ldrh	r2, [r2, #0]
 8000bee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bf0:	1dbb      	adds	r3, r7, #6
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 f807 	bl	8000c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f000 fbaf 	bl	800138e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c30:	4bcf      	ldr	r3, [pc, #828]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	220c      	movs	r2, #12
 8000c36:	4013      	ands	r3, r2
 8000c38:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c3a:	4bcd      	ldr	r3, [pc, #820]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	025b      	lsls	r3, r3, #9
 8000c42:	4013      	ands	r3, r2
 8000c44:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	d100      	bne.n	8000c52 <HAL_RCC_OscConfig+0x36>
 8000c50:	e07e      	b.n	8000d50 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d007      	beq.n	8000c68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	2b0c      	cmp	r3, #12
 8000c5c:	d112      	bne.n	8000c84 <HAL_RCC_OscConfig+0x68>
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	025b      	lsls	r3, r3, #9
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d10d      	bne.n	8000c84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c68:	4bc1      	ldr	r3, [pc, #772]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2380      	movs	r3, #128	@ 0x80
 8000c6e:	029b      	lsls	r3, r3, #10
 8000c70:	4013      	ands	r3, r2
 8000c72:	d100      	bne.n	8000c76 <HAL_RCC_OscConfig+0x5a>
 8000c74:	e06b      	b.n	8000d4e <HAL_RCC_OscConfig+0x132>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d167      	bne.n	8000d4e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f000 fb85 	bl	800138e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d107      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x84>
 8000c90:	4bb7      	ldr	r3, [pc, #732]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4bb6      	ldr	r3, [pc, #728]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e027      	b.n	8000cf0 <HAL_RCC_OscConfig+0xd4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	23a0      	movs	r3, #160	@ 0xa0
 8000ca6:	02db      	lsls	r3, r3, #11
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d10e      	bne.n	8000cca <HAL_RCC_OscConfig+0xae>
 8000cac:	4bb0      	ldr	r3, [pc, #704]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4baf      	ldr	r3, [pc, #700]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cb2:	2180      	movs	r1, #128	@ 0x80
 8000cb4:	02c9      	lsls	r1, r1, #11
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	4bad      	ldr	r3, [pc, #692]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4bac      	ldr	r3, [pc, #688]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	0249      	lsls	r1, r1, #9
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e012      	b.n	8000cf0 <HAL_RCC_OscConfig+0xd4>
 8000cca:	4ba9      	ldr	r3, [pc, #676]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4ba8      	ldr	r3, [pc, #672]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cd0:	49a8      	ldr	r1, [pc, #672]	@ (8000f74 <HAL_RCC_OscConfig+0x358>)
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	4ba6      	ldr	r3, [pc, #664]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	2380      	movs	r3, #128	@ 0x80
 8000cdc:	025b      	lsls	r3, r3, #9
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4ba2      	ldr	r3, [pc, #648]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4ba1      	ldr	r3, [pc, #644]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000cea:	49a3      	ldr	r1, [pc, #652]	@ (8000f78 <HAL_RCC_OscConfig+0x35c>)
 8000cec:	400a      	ands	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d015      	beq.n	8000d24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fd0c 	bl	8000714 <HAL_GetTick>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d00:	e009      	b.n	8000d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fd07 	bl	8000714 <HAL_GetTick>
 8000d06:	0002      	movs	r2, r0
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b64      	cmp	r3, #100	@ 0x64
 8000d0e:	d902      	bls.n	8000d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f000 fb3c 	bl	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d16:	4b96      	ldr	r3, [pc, #600]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	029b      	lsls	r3, r3, #10
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d0ef      	beq.n	8000d02 <HAL_RCC_OscConfig+0xe6>
 8000d22:	e015      	b.n	8000d50 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fcf6 	bl	8000714 <HAL_GetTick>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fcf1 	bl	8000714 <HAL_GetTick>
 8000d32:	0002      	movs	r2, r0
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b64      	cmp	r3, #100	@ 0x64
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e326      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d40:	4b8b      	ldr	r3, [pc, #556]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d1f0      	bne.n	8000d2e <HAL_RCC_OscConfig+0x112>
 8000d4c:	e000      	b.n	8000d50 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2202      	movs	r2, #2
 8000d56:	4013      	ands	r3, r2
 8000d58:	d100      	bne.n	8000d5c <HAL_RCC_OscConfig+0x140>
 8000d5a:	e08b      	b.n	8000e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d005      	beq.n	8000d74 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	d13e      	bne.n	8000dec <HAL_RCC_OscConfig+0x1d0>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d13b      	bne.n	8000dec <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d74:	4b7e      	ldr	r3, [pc, #504]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d004      	beq.n	8000d88 <HAL_RCC_OscConfig+0x16c>
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e302      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	4b79      	ldr	r3, [pc, #484]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a7b      	ldr	r2, [pc, #492]	@ (8000f7c <HAL_RCC_OscConfig+0x360>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	0019      	movs	r1, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	4b75      	ldr	r3, [pc, #468]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d9e:	4b74      	ldr	r3, [pc, #464]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2209      	movs	r2, #9
 8000da4:	4393      	bics	r3, r2
 8000da6:	0019      	movs	r1, r3
 8000da8:	4b71      	ldr	r3, [pc, #452]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000db0:	f000 fc40 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8000db4:	0001      	movs	r1, r0
 8000db6:	4b6e      	ldr	r3, [pc, #440]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	4a6f      	ldr	r2, [pc, #444]	@ (8000f80 <HAL_RCC_OscConfig+0x364>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	000a      	movs	r2, r1
 8000dc6:	40da      	lsrs	r2, r3
 8000dc8:	4b6e      	ldr	r3, [pc, #440]	@ (8000f84 <HAL_RCC_OscConfig+0x368>)
 8000dca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000dcc:	4b6e      	ldr	r3, [pc, #440]	@ (8000f88 <HAL_RCC_OscConfig+0x36c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2513      	movs	r5, #19
 8000dd2:	197c      	adds	r4, r7, r5
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fc57 	bl	8000688 <HAL_InitTick>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000dde:	197b      	adds	r3, r7, r5
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d046      	beq.n	8000e74 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000de6:	197b      	adds	r3, r7, r5
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	e2d0      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d027      	beq.n	8000e42 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000df2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2209      	movs	r2, #9
 8000df8:	4393      	bics	r3, r2
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fc86 	bl	8000714 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fc81 	bl	8000714 <HAL_GetTick>
 8000e12:	0002      	movs	r2, r0
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e2b6      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e20:	4b53      	ldr	r3, [pc, #332]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2204      	movs	r2, #4
 8000e26:	4013      	ands	r3, r2
 8000e28:	d0f1      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b51      	ldr	r3, [pc, #324]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4a53      	ldr	r2, [pc, #332]	@ (8000f7c <HAL_RCC_OscConfig+0x360>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	0019      	movs	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	021a      	lsls	r2, r3, #8
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	e018      	b.n	8000e74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e42:	4b4b      	ldr	r3, [pc, #300]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fc61 	bl	8000714 <HAL_GetTick>
 8000e52:	0003      	movs	r3, r0
 8000e54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e58:	f7ff fc5c 	bl	8000714 <HAL_GetTick>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e291      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4013      	ands	r3, r2
 8000e72:	d1f1      	bne.n	8000e58 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2210      	movs	r2, #16
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <HAL_RCC_OscConfig+0x264>
 8000e7e:	e0a1      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d140      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	4b3a      	ldr	r3, [pc, #232]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d005      	beq.n	8000e9e <HAL_RCC_OscConfig+0x282>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e277      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9e:	4b34      	ldr	r3, [pc, #208]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8000f8c <HAL_RCC_OscConfig+0x370>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eac:	4b30      	ldr	r3, [pc, #192]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	0a19      	lsrs	r1, r3, #8
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	061a      	lsls	r2, r3, #24
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	0b5b      	lsrs	r3, r3, #13
 8000ecc:	3301      	adds	r3, #1
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	0212      	lsls	r2, r2, #8
 8000ed2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	210f      	movs	r1, #15
 8000edc:	400b      	ands	r3, r1
 8000ede:	4928      	ldr	r1, [pc, #160]	@ (8000f80 <HAL_RCC_OscConfig+0x364>)
 8000ee0:	5ccb      	ldrb	r3, [r1, r3]
 8000ee2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ee4:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <HAL_RCC_OscConfig+0x368>)
 8000ee6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <HAL_RCC_OscConfig+0x36c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2513      	movs	r5, #19
 8000eee:	197c      	adds	r4, r7, r5
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fbc9 	bl	8000688 <HAL_InitTick>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000efa:	197b      	adds	r3, r7, r5
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d060      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000f02:	197b      	adds	r3, r7, r5
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	e242      	b.n	800138e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d03f      	beq.n	8000f90 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	0049      	lsls	r1, r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1e:	f7ff fbf9 	bl	8000714 <HAL_GetTick>
 8000f22:	0003      	movs	r3, r0
 8000f24:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f28:	f7ff fbf4 	bl	8000714 <HAL_GetTick>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e229      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4013      	ands	r3, r2
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <HAL_RCC_OscConfig+0x370>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	0019      	movs	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f56:	430a      	orrs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	0a19      	lsrs	r1, r3, #8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	061a      	lsls	r2, r3, #24
 8000f68:	4b01      	ldr	r3, [pc, #4]	@ (8000f70 <HAL_RCC_OscConfig+0x354>)
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	e029      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3a8>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	fffeffff 	.word	0xfffeffff
 8000f78:	fffbffff 	.word	0xfffbffff
 8000f7c:	ffffe0ff 	.word	0xffffe0ff
 8000f80:	080020e4 	.word	0x080020e4
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f90:	4bbd      	ldr	r3, [pc, #756]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4bbc      	ldr	r3, [pc, #752]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8000f96:	49bd      	ldr	r1, [pc, #756]	@ (800128c <HAL_RCC_OscConfig+0x670>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fbba 	bl	8000714 <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa6:	f7ff fbb5 	bl	8000714 <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e1ea      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fb8:	4bb3      	ldr	r3, [pc, #716]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2208      	movs	r2, #8
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d036      	beq.n	800103c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d019      	beq.n	800100a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd6:	4bac      	ldr	r3, [pc, #688]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8000fd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fda:	4bab      	ldr	r3, [pc, #684]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb97 	bl	8000714 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fb92 	bl	8000714 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1c7      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ffe:	4ba2      	ldr	r3, [pc, #648]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001002:	2202      	movs	r2, #2
 8001004:	4013      	ands	r3, r2
 8001006:	d0f1      	beq.n	8000fec <HAL_RCC_OscConfig+0x3d0>
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800100a:	4b9f      	ldr	r3, [pc, #636]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800100c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800100e:	4b9e      	ldr	r3, [pc, #632]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fb7d 	bl	8000714 <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff fb78 	bl	8000714 <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1ad      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001032:	4b95      	ldr	r3, [pc, #596]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	d1f1      	bne.n	8001020 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2204      	movs	r2, #4
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_RCC_OscConfig+0x42c>
 8001046:	e0ae      	b.n	80011a6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001048:	2027      	movs	r0, #39	@ 0x27
 800104a:	183b      	adds	r3, r7, r0
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001050:	4b8d      	ldr	r3, [pc, #564]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	055b      	lsls	r3, r3, #21
 8001058:	4013      	ands	r3, r2
 800105a:	d109      	bne.n	8001070 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	4b8a      	ldr	r3, [pc, #552]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800105e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001060:	4b89      	ldr	r3, [pc, #548]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001062:	2180      	movs	r1, #128	@ 0x80
 8001064:	0549      	lsls	r1, r1, #21
 8001066:	430a      	orrs	r2, r1
 8001068:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800106a:	183b      	adds	r3, r7, r0
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	4b87      	ldr	r3, [pc, #540]	@ (8001290 <HAL_RCC_OscConfig+0x674>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4013      	ands	r3, r2
 800107a:	d11a      	bne.n	80010b2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107c:	4b84      	ldr	r3, [pc, #528]	@ (8001290 <HAL_RCC_OscConfig+0x674>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b83      	ldr	r3, [pc, #524]	@ (8001290 <HAL_RCC_OscConfig+0x674>)
 8001082:	2180      	movs	r1, #128	@ 0x80
 8001084:	0049      	lsls	r1, r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108a:	f7ff fb43 	bl	8000714 <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001094:	f7ff fb3e 	bl	8000714 <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	@ 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e173      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001290 <HAL_RCC_OscConfig+0x674>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4013      	ands	r3, r2
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_OscConfig+0x4b2>
 80010be:	4b72      	ldr	r3, [pc, #456]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010c2:	4b71      	ldr	r3, [pc, #452]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	0049      	lsls	r1, r1, #1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80010cc:	e031      	b.n	8001132 <HAL_RCC_OscConfig+0x516>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4d4>
 80010d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010da:	4b6b      	ldr	r3, [pc, #428]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010dc:	496b      	ldr	r1, [pc, #428]	@ (800128c <HAL_RCC_OscConfig+0x670>)
 80010de:	400a      	ands	r2, r1
 80010e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80010e2:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010e6:	4b68      	ldr	r3, [pc, #416]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010e8:	496a      	ldr	r1, [pc, #424]	@ (8001294 <HAL_RCC_OscConfig+0x678>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80010ee:	e020      	b.n	8001132 <HAL_RCC_OscConfig+0x516>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	23a0      	movs	r3, #160	@ 0xa0
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d10e      	bne.n	800111a <HAL_RCC_OscConfig+0x4fe>
 80010fc:	4b62      	ldr	r3, [pc, #392]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80010fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001100:	4b61      	ldr	r3, [pc, #388]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	00c9      	lsls	r1, r1, #3
 8001106:	430a      	orrs	r2, r1
 8001108:	651a      	str	r2, [r3, #80]	@ 0x50
 800110a:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800110c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800110e:	4b5e      	ldr	r3, [pc, #376]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	0049      	lsls	r1, r1, #1
 8001114:	430a      	orrs	r2, r1
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50
 8001118:	e00b      	b.n	8001132 <HAL_RCC_OscConfig+0x516>
 800111a:	4b5b      	ldr	r3, [pc, #364]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800111c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800111e:	4b5a      	ldr	r3, [pc, #360]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001120:	495a      	ldr	r1, [pc, #360]	@ (800128c <HAL_RCC_OscConfig+0x670>)
 8001122:	400a      	ands	r2, r1
 8001124:	651a      	str	r2, [r3, #80]	@ 0x50
 8001126:	4b58      	ldr	r3, [pc, #352]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800112a:	4b57      	ldr	r3, [pc, #348]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800112c:	4959      	ldr	r1, [pc, #356]	@ (8001294 <HAL_RCC_OscConfig+0x678>)
 800112e:	400a      	ands	r2, r1
 8001130:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d015      	beq.n	8001166 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff faeb 	bl	8000714 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001142:	e009      	b.n	8001158 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff fae6 	bl	8000714 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a52      	ldr	r2, [pc, #328]	@ (8001298 <HAL_RCC_OscConfig+0x67c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e11a      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001158:	4b4b      	ldr	r3, [pc, #300]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800115a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4013      	ands	r3, r2
 8001162:	d0ef      	beq.n	8001144 <HAL_RCC_OscConfig+0x528>
 8001164:	e014      	b.n	8001190 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fad5 	bl	8000714 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800116e:	e009      	b.n	8001184 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fad0 	bl	8000714 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	4a47      	ldr	r2, [pc, #284]	@ (8001298 <HAL_RCC_OscConfig+0x67c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e104      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001184:	4b40      	ldr	r3, [pc, #256]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d1ef      	bne.n	8001170 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001190:	2327      	movs	r3, #39	@ 0x27
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800119c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800119e:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80011a0:	493e      	ldr	r1, [pc, #248]	@ (800129c <HAL_RCC_OscConfig+0x680>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2220      	movs	r2, #32
 80011ac:	4013      	ands	r3, r2
 80011ae:	d049      	beq.n	8001244 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d026      	beq.n	8001206 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80011be:	2101      	movs	r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80011c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80011d0:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <HAL_RCC_OscConfig+0x684>)
 80011d2:	6a1a      	ldr	r2, [r3, #32]
 80011d4:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <HAL_RCC_OscConfig+0x684>)
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	0189      	lsls	r1, r1, #6
 80011da:	430a      	orrs	r2, r1
 80011dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fa99 	bl	8000714 <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011e8:	f7ff fa94 	bl	8000714 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e0c9      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	d0f1      	beq.n	80011e8 <HAL_RCC_OscConfig+0x5cc>
 8001204:	e01e      	b.n	8001244 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800120c:	2101      	movs	r1, #1
 800120e:	438a      	bics	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <HAL_RCC_OscConfig+0x684>)
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_RCC_OscConfig+0x684>)
 8001218:	4922      	ldr	r1, [pc, #136]	@ (80012a4 <HAL_RCC_OscConfig+0x688>)
 800121a:	400a      	ands	r2, r1
 800121c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fa79 	bl	8000714 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001228:	f7ff fa74 	bl	8000714 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0a9      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d1f1      	bne.n	8001228 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	2b00      	cmp	r3, #0
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x632>
 800124c:	e09e      	b.n	800138c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x63a>
 8001254:	e077      	b.n	8001346 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	2b02      	cmp	r3, #2
 800125c:	d158      	bne.n	8001310 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_RCC_OscConfig+0x66c>)
 8001264:	4910      	ldr	r1, [pc, #64]	@ (80012a8 <HAL_RCC_OscConfig+0x68c>)
 8001266:	400a      	ands	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fa53 	bl	8000714 <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001272:	e01b      	b.n	80012ac <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fa4e 	bl	8000714 <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d914      	bls.n	80012ac <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e083      	b.n	800138e <HAL_RCC_OscConfig+0x772>
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	40021000 	.word	0x40021000
 800128c:	fffffeff 	.word	0xfffffeff
 8001290:	40007000 	.word	0x40007000
 8001294:	fffffbff 	.word	0xfffffbff
 8001298:	00001388 	.word	0x00001388
 800129c:	efffffff 	.word	0xefffffff
 80012a0:	40010000 	.word	0x40010000
 80012a4:	ffffdfff 	.word	0xffffdfff
 80012a8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	049b      	lsls	r3, r3, #18
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1dd      	bne.n	8001274 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b8:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a37      	ldr	r2, [pc, #220]	@ (800139c <HAL_RCC_OscConfig+0x780>)
 80012be:	4013      	ands	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4b31      	ldr	r3, [pc, #196]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 80012d4:	430a      	orrs	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	0449      	lsls	r1, r1, #17
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fa15 	bl	8000714 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fa10 	bl	8000714 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e045      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	049b      	lsls	r3, r3, #18
 800130a:	4013      	ands	r3, r2
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x6d4>
 800130e:	e03d      	b.n	800138c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 8001316:	4922      	ldr	r1, [pc, #136]	@ (80013a0 <HAL_RCC_OscConfig+0x784>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff f9fa 	bl	8000714 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff f9f5 	bl	8000714 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e02a      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	049b      	lsls	r3, r3, #18
 8001340:	4013      	ands	r3, r2
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x70a>
 8001344:	e022      	b.n	800138c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e01d      	b.n	800138e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_OscConfig+0x77c>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001364:	429a      	cmp	r2, r3
 8001366:	d10f      	bne.n	8001388 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	23f0      	movs	r3, #240	@ 0xf0
 800136c:	039b      	lsls	r3, r3, #14
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d107      	bne.n	8001388 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	23c0      	movs	r3, #192	@ 0xc0
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	401a      	ands	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b00a      	add	sp, #40	@ 0x28
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	40021000 	.word	0x40021000
 800139c:	ff02ffff 	.word	0xff02ffff
 80013a0:	feffffff 	.word	0xfeffffff

080013a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e128      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b96      	ldr	r3, [pc, #600]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d91e      	bls.n	8001404 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b93      	ldr	r3, [pc, #588]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	4393      	bics	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	4b90      	ldr	r3, [pc, #576]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013d8:	f7ff f99c 	bl	8000714 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e2:	f7ff f997 	bl	8000714 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a8a      	ldr	r2, [pc, #552]	@ (8001618 <HAL_RCC_ClockConfig+0x274>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e109      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b87      	ldr	r3, [pc, #540]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d1ee      	bne.n	80013e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140e:	4b83      	ldr	r3, [pc, #524]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	22f0      	movs	r2, #240	@ 0xf0
 8001414:	4393      	bics	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 800141e:	430a      	orrs	r2, r1
 8001420:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	d100      	bne.n	800142e <HAL_RCC_ClockConfig+0x8a>
 800142c:	e089      	b.n	8001542 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001436:	4b79      	ldr	r3, [pc, #484]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	@ 0x80
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	4013      	ands	r3, r2
 8001440:	d120      	bne.n	8001484 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0e1      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800144e:	4b73      	ldr	r3, [pc, #460]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	049b      	lsls	r3, r3, #18
 8001456:	4013      	ands	r3, r2
 8001458:	d114      	bne.n	8001484 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0d5      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d106      	bne.n	8001474 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001466:	4b6d      	ldr	r3, [pc, #436]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2204      	movs	r2, #4
 800146c:	4013      	ands	r3, r2
 800146e:	d109      	bne.n	8001484 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0ca      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001474:	4b69      	ldr	r3, [pc, #420]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4013      	ands	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0c2      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001484:	4b65      	ldr	r3, [pc, #404]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2203      	movs	r2, #3
 800148a:	4393      	bics	r3, r2
 800148c:	0019      	movs	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4b62      	ldr	r3, [pc, #392]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff f93c 	bl	8000714 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d111      	bne.n	80014cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a8:	e009      	b.n	80014be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014aa:	f7ff f933 	bl	8000714 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	4a58      	ldr	r2, [pc, #352]	@ (8001618 <HAL_RCC_ClockConfig+0x274>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0a5      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014be:	4b57      	ldr	r3, [pc, #348]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	220c      	movs	r2, #12
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d1ef      	bne.n	80014aa <HAL_RCC_ClockConfig+0x106>
 80014ca:	e03a      	b.n	8001542 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d111      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d4:	e009      	b.n	80014ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f7ff f91d 	bl	8000714 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001618 <HAL_RCC_ClockConfig+0x274>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e08f      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ea:	4b4c      	ldr	r3, [pc, #304]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	220c      	movs	r2, #12
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d1ef      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x132>
 80014f6:	e024      	b.n	8001542 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d11b      	bne.n	8001538 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001500:	e009      	b.n	8001516 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001502:	f7ff f907 	bl	8000714 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a42      	ldr	r2, [pc, #264]	@ (8001618 <HAL_RCC_ClockConfig+0x274>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e079      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	220c      	movs	r2, #12
 800151c:	4013      	ands	r3, r2
 800151e:	2b04      	cmp	r3, #4
 8001520:	d1ef      	bne.n	8001502 <HAL_RCC_ClockConfig+0x15e>
 8001522:	e00e      	b.n	8001542 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff f8f6 	bl	8000714 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	4a3a      	ldr	r2, [pc, #232]	@ (8001618 <HAL_RCC_ClockConfig+0x274>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e068      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001538:	4b38      	ldr	r3, [pc, #224]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	220c      	movs	r2, #12
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001542:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d21e      	bcs.n	800158e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001550:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	4393      	bics	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001562:	f7ff f8d7 	bl	8000714 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	e009      	b.n	8001580 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff f8d2 	bl	8000714 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <HAL_RCC_ClockConfig+0x274>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e044      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <HAL_RCC_ClockConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d1ee      	bne.n	800156c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2204      	movs	r2, #4
 8001594:	4013      	ands	r3, r2
 8001596:	d009      	beq.n	80015ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <HAL_RCC_ClockConfig+0x27c>)
 800159e:	4013      	ands	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2208      	movs	r2, #8
 80015b2:	4013      	ands	r3, r2
 80015b4:	d00a      	beq.n	80015cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <HAL_RCC_ClockConfig+0x280>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00da      	lsls	r2, r3, #3
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015cc:	f000 f832 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80015d0:	0001      	movs	r1, r0
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_RCC_ClockConfig+0x278>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	220f      	movs	r2, #15
 80015da:	4013      	ands	r3, r2
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_RCC_ClockConfig+0x284>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	000a      	movs	r2, r1
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_RCC_ClockConfig+0x288>)
 80015e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_RCC_ClockConfig+0x28c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	250b      	movs	r5, #11
 80015ee:	197c      	adds	r4, r7, r5
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff f849 	bl	8000688 <HAL_InitTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80015fa:	197b      	adds	r3, r7, r5
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	e000      	b.n	800160a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bdb0      	pop	{r4, r5, r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	40022000 	.word	0x40022000
 8001618:	00001388 	.word	0x00001388
 800161c:	40021000 	.word	0x40021000
 8001620:	fffff8ff 	.word	0xfffff8ff
 8001624:	ffffc7ff 	.word	0xffffc7ff
 8001628:	080020e4 	.word	0x080020e4
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	220c      	movs	r2, #12
 8001644:	4013      	ands	r3, r2
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d013      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x3e>
 800164a:	d85c      	bhi.n	8001706 <HAL_RCC_GetSysClockFreq+0xd2>
 800164c:	2b04      	cmp	r3, #4
 800164e:	d002      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0x22>
 8001650:	2b08      	cmp	r3, #8
 8001652:	d00b      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x38>
 8001654:	e057      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	4013      	ands	r3, r2
 800165e:	d002      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001662:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001664:	e05d      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001666:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x100>)
 8001668:	613b      	str	r3, [r7, #16]
      break;
 800166a:	e05a      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x104>)
 800166e:	613b      	str	r3, [r7, #16]
      break;
 8001670:	e057      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	220f      	movs	r2, #15
 8001678:	4013      	ands	r3, r2
 800167a:	4a30      	ldr	r2, [pc, #192]	@ (800173c <HAL_RCC_GetSysClockFreq+0x108>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	0d9b      	lsrs	r3, r3, #22
 8001684:	2203      	movs	r2, #3
 8001686:	4013      	ands	r3, r2
 8001688:	3301      	adds	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	4013      	ands	r3, r2
 8001696:	d00f      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	000a      	movs	r2, r1
 800169c:	0152      	lsls	r2, r2, #5
 800169e:	1a52      	subs	r2, r2, r1
 80016a0:	0193      	lsls	r3, r2, #6
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	185b      	adds	r3, r3, r1
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7fe fd2b 	bl	8000108 <__udivsi3>
 80016b2:	0003      	movs	r3, r0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e023      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2210      	movs	r2, #16
 80016be:	4013      	ands	r3, r2
 80016c0:	d00f      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	000a      	movs	r2, r1
 80016c6:	0152      	lsls	r2, r2, #5
 80016c8:	1a52      	subs	r2, r2, r1
 80016ca:	0193      	lsls	r3, r2, #6
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	185b      	adds	r3, r3, r1
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7fe fd16 	bl	8000108 <__udivsi3>
 80016dc:	0003      	movs	r3, r0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	000a      	movs	r2, r1
 80016e6:	0152      	lsls	r2, r2, #5
 80016e8:	1a52      	subs	r2, r2, r1
 80016ea:	0193      	lsls	r3, r2, #6
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	185b      	adds	r3, r3, r1
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7fe fd06 	bl	8000108 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
      break;
 8001704:	e00d      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0b5b      	lsrs	r3, r3, #13
 800170c:	2207      	movs	r2, #7
 800170e:	4013      	ands	r3, r2
 8001710:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0212      	lsls	r2, r2, #8
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
      break;
 8001720:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001722:	693b      	ldr	r3, [r7, #16]
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b006      	add	sp, #24
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	003d0900 	.word	0x003d0900
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200
 800173c:	080020f4 	.word	0x080020f4

08001740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e032      	b.n	80017b8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2239      	movs	r2, #57	@ 0x39
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d107      	bne.n	800176e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2238      	movs	r2, #56	@ 0x38
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f7fe fe9f 	bl	80004ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2239      	movs	r2, #57	@ 0x39
 8001772:	2102      	movs	r1, #2
 8001774:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3304      	adds	r3, #4
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f000 f98b 	bl	8001a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	223e      	movs	r2, #62	@ 0x3e
 800178a:	2101      	movs	r1, #1
 800178c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	223a      	movs	r2, #58	@ 0x3a
 8001792:	2101      	movs	r1, #1
 8001794:	5499      	strb	r1, [r3, r2]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	223b      	movs	r2, #59	@ 0x3b
 800179a:	2101      	movs	r1, #1
 800179c:	5499      	strb	r1, [r3, r2]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	223c      	movs	r2, #60	@ 0x3c
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	223d      	movs	r2, #61	@ 0x3d
 80017aa:	2101      	movs	r1, #1
 80017ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2239      	movs	r2, #57	@ 0x39
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e032      	b.n	8001838 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2239      	movs	r2, #57	@ 0x39
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d107      	bne.n	80017ee <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2238      	movs	r2, #56	@ 0x38
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f000 f829 	bl	8001840 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2239      	movs	r2, #57	@ 0x39
 80017f2:	2102      	movs	r1, #2
 80017f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	0019      	movs	r1, r3
 8001800:	0010      	movs	r0, r2
 8001802:	f000 f94b 	bl	8001a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	223e      	movs	r2, #62	@ 0x3e
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	223a      	movs	r2, #58	@ 0x3a
 8001812:	2101      	movs	r1, #1
 8001814:	5499      	strb	r1, [r3, r2]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	223b      	movs	r2, #59	@ 0x3b
 800181a:	2101      	movs	r1, #1
 800181c:	5499      	strb	r1, [r3, r2]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	223c      	movs	r2, #60	@ 0x3c
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223d      	movs	r2, #61	@ 0x3d
 800182a:	2101      	movs	r1, #1
 800182c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2239      	movs	r2, #57	@ 0x39
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001848:	46c0      	nop			@ (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e03a      	b.n	80018da <HAL_TIM_OnePulse_Init+0x8a>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2239      	movs	r2, #57	@ 0x39
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2238      	movs	r2, #56	@ 0x38
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f831 	bl	80018e2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2239      	movs	r2, #57	@ 0x39
 8001884:	2102      	movs	r1, #2
 8001886:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	0019      	movs	r1, r3
 8001892:	0010      	movs	r0, r2
 8001894:	f000 f902 	bl	8001a9c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2108      	movs	r1, #8
 80018a4:	438a      	bics	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	223e      	movs	r2, #62	@ 0x3e
 80018bc:	2101      	movs	r1, #1
 80018be:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	223a      	movs	r2, #58	@ 0x3a
 80018c4:	2101      	movs	r1, #1
 80018c6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	223b      	movs	r2, #59	@ 0x3b
 80018cc:	2101      	movs	r1, #1
 80018ce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2239      	movs	r2, #57	@ 0x39
 80018d4:	2101      	movs	r1, #1
 80018d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80018f2:	b590      	push	{r4, r7, lr}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80018fc:	200f      	movs	r0, #15
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	213a      	movs	r1, #58	@ 0x3a
 8001904:	5c52      	ldrb	r2, [r2, r1]
 8001906:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001908:	240e      	movs	r4, #14
 800190a:	193b      	adds	r3, r7, r4
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	213b      	movs	r1, #59	@ 0x3b
 8001910:	5c52      	ldrb	r2, [r2, r1]
 8001912:	701a      	strb	r2, [r3, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001914:	183b      	adds	r3, r7, r0
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d103      	bne.n	8001924 <HAL_TIM_OnePulse_Start+0x32>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800191c:	193b      	adds	r3, r7, r4
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d001      	beq.n	8001928 <HAL_TIM_OnePulse_Start+0x36>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e016      	b.n	8001956 <HAL_TIM_OnePulse_Start+0x64>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	223a      	movs	r2, #58	@ 0x3a
 800192c:	2102      	movs	r1, #2
 800192e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	223b      	movs	r2, #59	@ 0x3b
 8001934:	2102      	movs	r1, #2
 8001936:	5499      	strb	r1, [r3, r2]
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	2100      	movs	r1, #0
 8001940:	0018      	movs	r0, r3
 8001942:	f000 fb1b 	bl	8001f7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	2104      	movs	r1, #4
 800194e:	0018      	movs	r0, r3
 8001950:	f000 fb14 	bl	8001f7c <TIM_CCxChannelCmd>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b005      	add	sp, #20
 800195c:	bd90      	pop	{r4, r7, pc}

0800195e <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800196a:	2317      	movs	r3, #23
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2238      	movs	r2, #56	@ 0x38
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_TIM_OC_ConfigChannel+0x22>
 800197c:	2302      	movs	r3, #2
 800197e:	e042      	b.n	8001a06 <HAL_TIM_OC_ConfigChannel+0xa8>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2238      	movs	r2, #56	@ 0x38
 8001984:	2101      	movs	r1, #1
 8001986:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d027      	beq.n	80019de <HAL_TIM_OC_ConfigChannel+0x80>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	d82c      	bhi.n	80019ee <HAL_TIM_OC_ConfigChannel+0x90>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b08      	cmp	r3, #8
 8001998:	d019      	beq.n	80019ce <HAL_TIM_OC_ConfigChannel+0x70>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d826      	bhi.n	80019ee <HAL_TIM_OC_ConfigChannel+0x90>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_OC_ConfigChannel+0x50>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d008      	beq.n	80019be <HAL_TIM_OC_ConfigChannel+0x60>
 80019ac:	e01f      	b.n	80019ee <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	0011      	movs	r1, r2
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f8ca 	bl	8001b50 <TIM_OC1_SetConfig>
      break;
 80019bc:	e01c      	b.n	80019f8 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	0011      	movs	r1, r2
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f8fe 	bl	8001bc8 <TIM_OC2_SetConfig>
      break;
 80019cc:	e014      	b.n	80019f8 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 f938 	bl	8001c4c <TIM_OC3_SetConfig>
      break;
 80019dc:	e00c      	b.n	80019f8 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	0011      	movs	r1, r2
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f970 	bl	8001ccc <TIM_OC4_SetConfig>
      break;
 80019ec:	e004      	b.n	80019f8 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80019ee:	2317      	movs	r3, #23
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2238      	movs	r2, #56	@ 0x38
 80019fc:	2100      	movs	r1, #0
 80019fe:	5499      	strb	r1, [r3, r2]

  return status;
 8001a00:	2317      	movs	r3, #23
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b006      	add	sp, #24
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2238      	movs	r2, #56	@ 0x38
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e032      	b.n	8001a8e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2238      	movs	r2, #56	@ 0x38
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2239      	movs	r2, #57	@ 0x39
 8001a34:	2102      	movs	r1, #2
 8001a36:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f98a 	bl	8001d58 <TIM_SlaveTimer_SetConfig>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2239      	movs	r2, #57	@ 0x39
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2238      	movs	r2, #56	@ 0x38
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e018      	b.n	8001a8e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2140      	movs	r1, #64	@ 0x40
 8001a68:	438a      	bics	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2239      	movs	r2, #57	@ 0x39
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2238      	movs	r2, #56	@ 0x38
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	ffffbfff 	.word	0xffffbfff

08001a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d007      	beq.n	8001ac6 <TIM_Base_SetConfig+0x2a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a22      	ldr	r2, [pc, #136]	@ (8001b44 <TIM_Base_SetConfig+0xa8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d003      	beq.n	8001ac6 <TIM_Base_SetConfig+0x2a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a21      	ldr	r2, [pc, #132]	@ (8001b48 <TIM_Base_SetConfig+0xac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d108      	bne.n	8001ad8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2270      	movs	r2, #112	@ 0x70
 8001aca:	4393      	bics	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d007      	beq.n	8001af2 <TIM_Base_SetConfig+0x56>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <TIM_Base_SetConfig+0xa8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d003      	beq.n	8001af2 <TIM_Base_SetConfig+0x56>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a16      	ldr	r2, [pc, #88]	@ (8001b48 <TIM_Base_SetConfig+0xac>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d108      	bne.n	8001b04 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a15      	ldr	r2, [pc, #84]	@ (8001b4c <TIM_Base_SetConfig+0xb0>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	4393      	bics	r3, r2
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]
}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40011400 	.word	0x40011400
 8001b4c:	fffffcff 	.word	0xfffffcff

08001b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4393      	bics	r3, r2
 8001b68:	001a      	movs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2270      	movs	r2, #112	@ 0x70
 8001b7e:	4393      	bics	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2203      	movs	r2, #3
 8001b86:	4393      	bics	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4393      	bics	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	621a      	str	r2, [r3, #32]
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b006      	add	sp, #24
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	4393      	bics	r3, r2
 8001be0:	001a      	movs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a13      	ldr	r2, [pc, #76]	@ (8001c44 <TIM_OC2_SetConfig+0x7c>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <TIM_OC2_SetConfig+0x80>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2220      	movs	r2, #32
 8001c12:	4393      	bics	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	621a      	str	r2, [r3, #32]
}
 8001c3c:	46c0      	nop			@ (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b006      	add	sp, #24
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	ffff8fff 	.word	0xffff8fff
 8001c48:	fffffcff 	.word	0xfffffcff

08001c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <TIM_OC3_SetConfig+0x78>)
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2270      	movs	r2, #112	@ 0x70
 8001c78:	4393      	bics	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	4393      	bics	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <TIM_OC3_SetConfig+0x7c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	621a      	str	r2, [r3, #32]
}
 8001cbc:	46c0      	nop			@ (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b006      	add	sp, #24
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	fffffeff 	.word	0xfffffeff
 8001cc8:	fffffdff 	.word	0xfffffdff

08001ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <TIM_OC4_SetConfig+0x7c>)
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <TIM_OC4_SetConfig+0x80>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <TIM_OC4_SetConfig+0x84>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <TIM_OC4_SetConfig+0x88>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	031b      	lsls	r3, r3, #12
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	621a      	str	r2, [r3, #32]
}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b006      	add	sp, #24
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	ffffefff 	.word	0xffffefff
 8001d4c:	ffff8fff 	.word	0xffff8fff
 8001d50:	fffffcff 	.word	0xfffffcff
 8001d54:	ffffdfff 	.word	0xffffdfff

08001d58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d62:	2317      	movs	r3, #23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2270      	movs	r2, #112	@ 0x70
 8001d76:	4393      	bics	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2207      	movs	r2, #7
 8001d88:	4393      	bics	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b70      	cmp	r3, #112	@ 0x70
 8001da4:	d015      	beq.n	8001dd2 <TIM_SlaveTimer_SetConfig+0x7a>
 8001da6:	d900      	bls.n	8001daa <TIM_SlaveTimer_SetConfig+0x52>
 8001da8:	e05b      	b.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
 8001daa:	2b60      	cmp	r3, #96	@ 0x60
 8001dac:	d04f      	beq.n	8001e4e <TIM_SlaveTimer_SetConfig+0xf6>
 8001dae:	d858      	bhi.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
 8001db0:	2b50      	cmp	r3, #80	@ 0x50
 8001db2:	d042      	beq.n	8001e3a <TIM_SlaveTimer_SetConfig+0xe2>
 8001db4:	d855      	bhi.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
 8001db6:	2b40      	cmp	r3, #64	@ 0x40
 8001db8:	d016      	beq.n	8001de8 <TIM_SlaveTimer_SetConfig+0x90>
 8001dba:	d852      	bhi.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
 8001dbc:	2b30      	cmp	r3, #48	@ 0x30
 8001dbe:	d055      	beq.n	8001e6c <TIM_SlaveTimer_SetConfig+0x114>
 8001dc0:	d84f      	bhi.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d052      	beq.n	8001e6c <TIM_SlaveTimer_SetConfig+0x114>
 8001dc6:	d84c      	bhi.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d04f      	beq.n	8001e6c <TIM_SlaveTimer_SetConfig+0x114>
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d04d      	beq.n	8001e6c <TIM_SlaveTimer_SetConfig+0x114>
 8001dd0:	e047      	b.n	8001e62 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001de2:	f000 f8ab 	bl	8001f3c <TIM_ETR_SetConfig>
      break;
 8001de6:	e042      	b.n	8001e6e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d101      	bne.n	8001df4 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e03f      	b.n	8001e74 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	22f0      	movs	r2, #240	@ 0xf0
 8001e18:	4393      	bics	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	621a      	str	r2, [r3, #32]
      break;
 8001e38:	e019      	b.n	8001e6e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e46:	001a      	movs	r2, r3
 8001e48:	f000 f818 	bl	8001e7c <TIM_TI1_ConfigInputStage>
      break;
 8001e4c:	e00f      	b.n	8001e6e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	f000 f83c 	bl	8001ed8 <TIM_TI2_ConfigInputStage>
      break;
 8001e60:	e005      	b.n	8001e6e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001e62:	2317      	movs	r3, #23
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
      break;
 8001e6a:	e000      	b.n	8001e6e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8001e6c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001e6e:	2317      	movs	r3, #23
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b006      	add	sp, #24
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4393      	bics	r3, r2
 8001e96:	001a      	movs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	22f0      	movs	r2, #240	@ 0xf0
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	220a      	movs	r2, #10
 8001eb8:	4393      	bics	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	621a      	str	r2, [r3, #32]
}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b006      	add	sp, #24
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <TIM_TI2_ConfigInputStage+0x60>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	031b      	lsls	r3, r3, #12
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	22a0      	movs	r2, #160	@ 0xa0
 8001f14:	4393      	bics	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b006      	add	sp, #24
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	ffff0fff 	.word	0xffff0fff

08001f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <TIM_ETR_SetConfig+0x3c>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	ffff00ff 	.word	0xffff00ff

08001f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2201      	movs	r2, #1
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	43d2      	mvns	r2, r2
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	211f      	movs	r1, #31
 8001fac:	400b      	ands	r3, r1
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4099      	lsls	r1, r3
 8001fb2:	000b      	movs	r3, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	621a      	str	r2, [r3, #32]
}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b006      	add	sp, #24
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2238      	movs	r2, #56	@ 0x38
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e042      	b.n	8002062 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2238      	movs	r2, #56	@ 0x38
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2239      	movs	r2, #57	@ 0x39
 8001fe8:	2102      	movs	r1, #2
 8001fea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2270      	movs	r2, #112	@ 0x70
 8002000:	4393      	bics	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	05db      	lsls	r3, r3, #23
 800201e:	429a      	cmp	r2, r3
 8002020:	d009      	beq.n	8002036 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10c      	bne.n	8002050 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	4393      	bics	r3, r2
 800203c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2239      	movs	r2, #57	@ 0x39
 8002054:	2101      	movs	r1, #1
 8002056:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2238      	movs	r2, #56	@ 0x38
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	40010800 	.word	0x40010800
 8002070:	40011400 	.word	0x40011400

08002074 <memset>:
 8002074:	0003      	movs	r3, r0
 8002076:	1882      	adds	r2, r0, r2
 8002078:	4293      	cmp	r3, r2
 800207a:	d100      	bne.n	800207e <memset+0xa>
 800207c:	4770      	bx	lr
 800207e:	7019      	strb	r1, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	e7f9      	b.n	8002078 <memset+0x4>

08002084 <__libc_init_array>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	2600      	movs	r6, #0
 8002088:	4c0c      	ldr	r4, [pc, #48]	@ (80020bc <__libc_init_array+0x38>)
 800208a:	4d0d      	ldr	r5, [pc, #52]	@ (80020c0 <__libc_init_array+0x3c>)
 800208c:	1b64      	subs	r4, r4, r5
 800208e:	10a4      	asrs	r4, r4, #2
 8002090:	42a6      	cmp	r6, r4
 8002092:	d109      	bne.n	80020a8 <__libc_init_array+0x24>
 8002094:	2600      	movs	r6, #0
 8002096:	f000 f819 	bl	80020cc <_init>
 800209a:	4c0a      	ldr	r4, [pc, #40]	@ (80020c4 <__libc_init_array+0x40>)
 800209c:	4d0a      	ldr	r5, [pc, #40]	@ (80020c8 <__libc_init_array+0x44>)
 800209e:	1b64      	subs	r4, r4, r5
 80020a0:	10a4      	asrs	r4, r4, #2
 80020a2:	42a6      	cmp	r6, r4
 80020a4:	d105      	bne.n	80020b2 <__libc_init_array+0x2e>
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	00b3      	lsls	r3, r6, #2
 80020aa:	58eb      	ldr	r3, [r5, r3]
 80020ac:	4798      	blx	r3
 80020ae:	3601      	adds	r6, #1
 80020b0:	e7ee      	b.n	8002090 <__libc_init_array+0xc>
 80020b2:	00b3      	lsls	r3, r6, #2
 80020b4:	58eb      	ldr	r3, [r5, r3]
 80020b6:	4798      	blx	r3
 80020b8:	3601      	adds	r6, #1
 80020ba:	e7f2      	b.n	80020a2 <__libc_init_array+0x1e>
 80020bc:	08002100 	.word	0x08002100
 80020c0:	08002100 	.word	0x08002100
 80020c4:	08002104 	.word	0x08002104
 80020c8:	08002100 	.word	0x08002100

080020cc <_init>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d2:	bc08      	pop	{r3}
 80020d4:	469e      	mov	lr, r3
 80020d6:	4770      	bx	lr

080020d8 <_fini>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020de:	bc08      	pop	{r3}
 80020e0:	469e      	mov	lr, r3
 80020e2:	4770      	bx	lr


Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de8  08004de8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004de8  08004de8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004de8  08004de8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dec  08004dec  00005dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004df0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08004dfc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004dfc  00006170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cc6  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001853  00000000  00000000  0000ecfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00010550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001330f  00000000  00000000  000115ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a07a  00000000  00000000  000248fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000794ec  00000000  00000000  0002e975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d8  00000000  00000000  000a7ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000aa17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c70 	.word	0x08004c70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004c70 	.word	0x08004c70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fa95 	bl	8000758 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fa1d 	bl	8000678 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fa87 	bl	8000758 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fa7d 	bl	8000758 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fa2b 	bl	80006c8 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fa21 	bl	80006c8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fadd>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	024b      	lsls	r3, r1, #9
 8000298:	0a5a      	lsrs	r2, r3, #9
 800029a:	4694      	mov	ip, r2
 800029c:	004a      	lsls	r2, r1, #1
 800029e:	0fc9      	lsrs	r1, r1, #31
 80002a0:	46ce      	mov	lr, r9
 80002a2:	4647      	mov	r7, r8
 80002a4:	4689      	mov	r9, r1
 80002a6:	0045      	lsls	r5, r0, #1
 80002a8:	0246      	lsls	r6, r0, #9
 80002aa:	0e2d      	lsrs	r5, r5, #24
 80002ac:	0e12      	lsrs	r2, r2, #24
 80002ae:	b580      	push	{r7, lr}
 80002b0:	0999      	lsrs	r1, r3, #6
 80002b2:	0a77      	lsrs	r7, r6, #9
 80002b4:	0fc4      	lsrs	r4, r0, #31
 80002b6:	09b6      	lsrs	r6, r6, #6
 80002b8:	1aab      	subs	r3, r5, r2
 80002ba:	454c      	cmp	r4, r9
 80002bc:	d020      	beq.n	8000300 <__aeabi_fadd+0x6c>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd0c      	ble.n	80002dc <__aeabi_fadd+0x48>
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d134      	bne.n	8000330 <__aeabi_fadd+0x9c>
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d02a      	beq.n	8000320 <__aeabi_fadd+0x8c>
 80002ca:	1e5a      	subs	r2, r3, #1
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fadd+0x3e>
 80002d0:	e08f      	b.n	80003f2 <__aeabi_fadd+0x15e>
 80002d2:	2bff      	cmp	r3, #255	@ 0xff
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fadd+0x44>
 80002d6:	e0cd      	b.n	8000474 <__aeabi_fadd+0x1e0>
 80002d8:	0013      	movs	r3, r2
 80002da:	e02f      	b.n	800033c <__aeabi_fadd+0xa8>
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d060      	beq.n	80003a2 <__aeabi_fadd+0x10e>
 80002e0:	1b53      	subs	r3, r2, r5
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d000      	beq.n	80002e8 <__aeabi_fadd+0x54>
 80002e6:	e0ee      	b.n	80004c6 <__aeabi_fadd+0x232>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d100      	bne.n	80002ee <__aeabi_fadd+0x5a>
 80002ec:	e13e      	b.n	800056c <__aeabi_fadd+0x2d8>
 80002ee:	1e5c      	subs	r4, r3, #1
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fadd+0x62>
 80002f4:	e16b      	b.n	80005ce <__aeabi_fadd+0x33a>
 80002f6:	2bff      	cmp	r3, #255	@ 0xff
 80002f8:	d100      	bne.n	80002fc <__aeabi_fadd+0x68>
 80002fa:	e0b9      	b.n	8000470 <__aeabi_fadd+0x1dc>
 80002fc:	0023      	movs	r3, r4
 80002fe:	e0e7      	b.n	80004d0 <__aeabi_fadd+0x23c>
 8000300:	2b00      	cmp	r3, #0
 8000302:	dc00      	bgt.n	8000306 <__aeabi_fadd+0x72>
 8000304:	e0a4      	b.n	8000450 <__aeabi_fadd+0x1bc>
 8000306:	2a00      	cmp	r2, #0
 8000308:	d069      	beq.n	80003de <__aeabi_fadd+0x14a>
 800030a:	2dff      	cmp	r5, #255	@ 0xff
 800030c:	d100      	bne.n	8000310 <__aeabi_fadd+0x7c>
 800030e:	e0b1      	b.n	8000474 <__aeabi_fadd+0x1e0>
 8000310:	2280      	movs	r2, #128	@ 0x80
 8000312:	04d2      	lsls	r2, r2, #19
 8000314:	4311      	orrs	r1, r2
 8000316:	2b1b      	cmp	r3, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0x88>
 800031a:	e0e9      	b.n	80004f0 <__aeabi_fadd+0x25c>
 800031c:	002b      	movs	r3, r5
 800031e:	3605      	adds	r6, #5
 8000320:	08f7      	lsrs	r7, r6, #3
 8000322:	2bff      	cmp	r3, #255	@ 0xff
 8000324:	d100      	bne.n	8000328 <__aeabi_fadd+0x94>
 8000326:	e0a5      	b.n	8000474 <__aeabi_fadd+0x1e0>
 8000328:	027a      	lsls	r2, r7, #9
 800032a:	0a52      	lsrs	r2, r2, #9
 800032c:	b2d8      	uxtb	r0, r3
 800032e:	e030      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000330:	2dff      	cmp	r5, #255	@ 0xff
 8000332:	d100      	bne.n	8000336 <__aeabi_fadd+0xa2>
 8000334:	e09e      	b.n	8000474 <__aeabi_fadd+0x1e0>
 8000336:	2280      	movs	r2, #128	@ 0x80
 8000338:	04d2      	lsls	r2, r2, #19
 800033a:	4311      	orrs	r1, r2
 800033c:	2001      	movs	r0, #1
 800033e:	2b1b      	cmp	r3, #27
 8000340:	dc08      	bgt.n	8000354 <__aeabi_fadd+0xc0>
 8000342:	0008      	movs	r0, r1
 8000344:	2220      	movs	r2, #32
 8000346:	40d8      	lsrs	r0, r3
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	4099      	lsls	r1, r3
 800034c:	000b      	movs	r3, r1
 800034e:	1e5a      	subs	r2, r3, #1
 8000350:	4193      	sbcs	r3, r2
 8000352:	4318      	orrs	r0, r3
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	0173      	lsls	r3, r6, #5
 8000358:	d400      	bmi.n	800035c <__aeabi_fadd+0xc8>
 800035a:	e071      	b.n	8000440 <__aeabi_fadd+0x1ac>
 800035c:	01b6      	lsls	r6, r6, #6
 800035e:	09b7      	lsrs	r7, r6, #6
 8000360:	0038      	movs	r0, r7
 8000362:	f000 fe09 	bl	8000f78 <__clzsi2>
 8000366:	003b      	movs	r3, r7
 8000368:	3805      	subs	r0, #5
 800036a:	4083      	lsls	r3, r0
 800036c:	4285      	cmp	r5, r0
 800036e:	dd4d      	ble.n	800040c <__aeabi_fadd+0x178>
 8000370:	4eb4      	ldr	r6, [pc, #720]	@ (8000644 <__aeabi_fadd+0x3b0>)
 8000372:	1a2d      	subs	r5, r5, r0
 8000374:	401e      	ands	r6, r3
 8000376:	075a      	lsls	r2, r3, #29
 8000378:	d068      	beq.n	800044c <__aeabi_fadd+0x1b8>
 800037a:	220f      	movs	r2, #15
 800037c:	4013      	ands	r3, r2
 800037e:	2b04      	cmp	r3, #4
 8000380:	d064      	beq.n	800044c <__aeabi_fadd+0x1b8>
 8000382:	3604      	adds	r6, #4
 8000384:	0173      	lsls	r3, r6, #5
 8000386:	d561      	bpl.n	800044c <__aeabi_fadd+0x1b8>
 8000388:	1c68      	adds	r0, r5, #1
 800038a:	2dfe      	cmp	r5, #254	@ 0xfe
 800038c:	d154      	bne.n	8000438 <__aeabi_fadd+0x1a4>
 800038e:	20ff      	movs	r0, #255	@ 0xff
 8000390:	2200      	movs	r2, #0
 8000392:	05c0      	lsls	r0, r0, #23
 8000394:	4310      	orrs	r0, r2
 8000396:	07e4      	lsls	r4, r4, #31
 8000398:	4320      	orrs	r0, r4
 800039a:	bcc0      	pop	{r6, r7}
 800039c:	46b9      	mov	r9, r7
 800039e:	46b0      	mov	r8, r6
 80003a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a2:	22fe      	movs	r2, #254	@ 0xfe
 80003a4:	4690      	mov	r8, r2
 80003a6:	1c68      	adds	r0, r5, #1
 80003a8:	0002      	movs	r2, r0
 80003aa:	4640      	mov	r0, r8
 80003ac:	4210      	tst	r0, r2
 80003ae:	d16b      	bne.n	8000488 <__aeabi_fadd+0x1f4>
 80003b0:	2d00      	cmp	r5, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0x122>
 80003b4:	e0dd      	b.n	8000572 <__aeabi_fadd+0x2de>
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d100      	bne.n	80003bc <__aeabi_fadd+0x128>
 80003ba:	e102      	b.n	80005c2 <__aeabi_fadd+0x32e>
 80003bc:	2900      	cmp	r1, #0
 80003be:	d0b3      	beq.n	8000328 <__aeabi_fadd+0x94>
 80003c0:	2280      	movs	r2, #128	@ 0x80
 80003c2:	1a77      	subs	r7, r6, r1
 80003c4:	04d2      	lsls	r2, r2, #19
 80003c6:	4217      	tst	r7, r2
 80003c8:	d100      	bne.n	80003cc <__aeabi_fadd+0x138>
 80003ca:	e136      	b.n	800063a <__aeabi_fadd+0x3a6>
 80003cc:	464c      	mov	r4, r9
 80003ce:	1b8e      	subs	r6, r1, r6
 80003d0:	d061      	beq.n	8000496 <__aeabi_fadd+0x202>
 80003d2:	2001      	movs	r0, #1
 80003d4:	4216      	tst	r6, r2
 80003d6:	d130      	bne.n	800043a <__aeabi_fadd+0x1a6>
 80003d8:	2300      	movs	r3, #0
 80003da:	08f7      	lsrs	r7, r6, #3
 80003dc:	e7a4      	b.n	8000328 <__aeabi_fadd+0x94>
 80003de:	2900      	cmp	r1, #0
 80003e0:	d09e      	beq.n	8000320 <__aeabi_fadd+0x8c>
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d100      	bne.n	80003ea <__aeabi_fadd+0x156>
 80003e8:	e0ca      	b.n	8000580 <__aeabi_fadd+0x2ec>
 80003ea:	2bff      	cmp	r3, #255	@ 0xff
 80003ec:	d042      	beq.n	8000474 <__aeabi_fadd+0x1e0>
 80003ee:	0013      	movs	r3, r2
 80003f0:	e791      	b.n	8000316 <__aeabi_fadd+0x82>
 80003f2:	1a71      	subs	r1, r6, r1
 80003f4:	014b      	lsls	r3, r1, #5
 80003f6:	d400      	bmi.n	80003fa <__aeabi_fadd+0x166>
 80003f8:	e0d1      	b.n	800059e <__aeabi_fadd+0x30a>
 80003fa:	018f      	lsls	r7, r1, #6
 80003fc:	09bf      	lsrs	r7, r7, #6
 80003fe:	0038      	movs	r0, r7
 8000400:	f000 fdba 	bl	8000f78 <__clzsi2>
 8000404:	003b      	movs	r3, r7
 8000406:	3805      	subs	r0, #5
 8000408:	4083      	lsls	r3, r0
 800040a:	2501      	movs	r5, #1
 800040c:	2220      	movs	r2, #32
 800040e:	1b40      	subs	r0, r0, r5
 8000410:	3001      	adds	r0, #1
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	001e      	movs	r6, r3
 8000416:	4093      	lsls	r3, r2
 8000418:	40c6      	lsrs	r6, r0
 800041a:	1e5a      	subs	r2, r3, #1
 800041c:	4193      	sbcs	r3, r2
 800041e:	431e      	orrs	r6, r3
 8000420:	d039      	beq.n	8000496 <__aeabi_fadd+0x202>
 8000422:	0773      	lsls	r3, r6, #29
 8000424:	d100      	bne.n	8000428 <__aeabi_fadd+0x194>
 8000426:	e11b      	b.n	8000660 <__aeabi_fadd+0x3cc>
 8000428:	230f      	movs	r3, #15
 800042a:	2500      	movs	r5, #0
 800042c:	4033      	ands	r3, r6
 800042e:	2b04      	cmp	r3, #4
 8000430:	d1a7      	bne.n	8000382 <__aeabi_fadd+0xee>
 8000432:	2001      	movs	r0, #1
 8000434:	0172      	lsls	r2, r6, #5
 8000436:	d57c      	bpl.n	8000532 <__aeabi_fadd+0x29e>
 8000438:	b2c0      	uxtb	r0, r0
 800043a:	01b2      	lsls	r2, r6, #6
 800043c:	0a52      	lsrs	r2, r2, #9
 800043e:	e7a8      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000440:	0773      	lsls	r3, r6, #29
 8000442:	d003      	beq.n	800044c <__aeabi_fadd+0x1b8>
 8000444:	230f      	movs	r3, #15
 8000446:	4033      	ands	r3, r6
 8000448:	2b04      	cmp	r3, #4
 800044a:	d19a      	bne.n	8000382 <__aeabi_fadd+0xee>
 800044c:	002b      	movs	r3, r5
 800044e:	e767      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000450:	2b00      	cmp	r3, #0
 8000452:	d023      	beq.n	800049c <__aeabi_fadd+0x208>
 8000454:	1b53      	subs	r3, r2, r5
 8000456:	2d00      	cmp	r5, #0
 8000458:	d17b      	bne.n	8000552 <__aeabi_fadd+0x2be>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_fadd+0x1cc>
 800045e:	e086      	b.n	800056e <__aeabi_fadd+0x2da>
 8000460:	1e5d      	subs	r5, r3, #1
 8000462:	2b01      	cmp	r3, #1
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x1d4>
 8000466:	e08b      	b.n	8000580 <__aeabi_fadd+0x2ec>
 8000468:	2bff      	cmp	r3, #255	@ 0xff
 800046a:	d002      	beq.n	8000472 <__aeabi_fadd+0x1de>
 800046c:	002b      	movs	r3, r5
 800046e:	e075      	b.n	800055c <__aeabi_fadd+0x2c8>
 8000470:	464c      	mov	r4, r9
 8000472:	4667      	mov	r7, ip
 8000474:	2f00      	cmp	r7, #0
 8000476:	d100      	bne.n	800047a <__aeabi_fadd+0x1e6>
 8000478:	e789      	b.n	800038e <__aeabi_fadd+0xfa>
 800047a:	2280      	movs	r2, #128	@ 0x80
 800047c:	03d2      	lsls	r2, r2, #15
 800047e:	433a      	orrs	r2, r7
 8000480:	0252      	lsls	r2, r2, #9
 8000482:	20ff      	movs	r0, #255	@ 0xff
 8000484:	0a52      	lsrs	r2, r2, #9
 8000486:	e784      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000488:	1a77      	subs	r7, r6, r1
 800048a:	017b      	lsls	r3, r7, #5
 800048c:	d46b      	bmi.n	8000566 <__aeabi_fadd+0x2d2>
 800048e:	2f00      	cmp	r7, #0
 8000490:	d000      	beq.n	8000494 <__aeabi_fadd+0x200>
 8000492:	e765      	b.n	8000360 <__aeabi_fadd+0xcc>
 8000494:	2400      	movs	r4, #0
 8000496:	2000      	movs	r0, #0
 8000498:	2200      	movs	r2, #0
 800049a:	e77a      	b.n	8000392 <__aeabi_fadd+0xfe>
 800049c:	22fe      	movs	r2, #254	@ 0xfe
 800049e:	1c6b      	adds	r3, r5, #1
 80004a0:	421a      	tst	r2, r3
 80004a2:	d149      	bne.n	8000538 <__aeabi_fadd+0x2a4>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d000      	beq.n	80004aa <__aeabi_fadd+0x216>
 80004a8:	e09f      	b.n	80005ea <__aeabi_fadd+0x356>
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0x21c>
 80004ae:	e0ba      	b.n	8000626 <__aeabi_fadd+0x392>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x222>
 80004b4:	e0cf      	b.n	8000656 <__aeabi_fadd+0x3c2>
 80004b6:	1872      	adds	r2, r6, r1
 80004b8:	0153      	lsls	r3, r2, #5
 80004ba:	d400      	bmi.n	80004be <__aeabi_fadd+0x22a>
 80004bc:	e0cd      	b.n	800065a <__aeabi_fadd+0x3c6>
 80004be:	0192      	lsls	r2, r2, #6
 80004c0:	2001      	movs	r0, #1
 80004c2:	0a52      	lsrs	r2, r2, #9
 80004c4:	e765      	b.n	8000392 <__aeabi_fadd+0xfe>
 80004c6:	2aff      	cmp	r2, #255	@ 0xff
 80004c8:	d0d2      	beq.n	8000470 <__aeabi_fadd+0x1dc>
 80004ca:	2080      	movs	r0, #128	@ 0x80
 80004cc:	04c0      	lsls	r0, r0, #19
 80004ce:	4306      	orrs	r6, r0
 80004d0:	2001      	movs	r0, #1
 80004d2:	2b1b      	cmp	r3, #27
 80004d4:	dc08      	bgt.n	80004e8 <__aeabi_fadd+0x254>
 80004d6:	0030      	movs	r0, r6
 80004d8:	2420      	movs	r4, #32
 80004da:	40d8      	lsrs	r0, r3
 80004dc:	1ae3      	subs	r3, r4, r3
 80004de:	409e      	lsls	r6, r3
 80004e0:	0033      	movs	r3, r6
 80004e2:	1e5c      	subs	r4, r3, #1
 80004e4:	41a3      	sbcs	r3, r4
 80004e6:	4318      	orrs	r0, r3
 80004e8:	464c      	mov	r4, r9
 80004ea:	0015      	movs	r5, r2
 80004ec:	1a0e      	subs	r6, r1, r0
 80004ee:	e732      	b.n	8000356 <__aeabi_fadd+0xc2>
 80004f0:	0008      	movs	r0, r1
 80004f2:	2220      	movs	r2, #32
 80004f4:	40d8      	lsrs	r0, r3
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4099      	lsls	r1, r3
 80004fa:	000b      	movs	r3, r1
 80004fc:	1e5a      	subs	r2, r3, #1
 80004fe:	4193      	sbcs	r3, r2
 8000500:	4303      	orrs	r3, r0
 8000502:	18f6      	adds	r6, r6, r3
 8000504:	0173      	lsls	r3, r6, #5
 8000506:	d59b      	bpl.n	8000440 <__aeabi_fadd+0x1ac>
 8000508:	3501      	adds	r5, #1
 800050a:	2dff      	cmp	r5, #255	@ 0xff
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x27c>
 800050e:	e73e      	b.n	800038e <__aeabi_fadd+0xfa>
 8000510:	2301      	movs	r3, #1
 8000512:	494d      	ldr	r1, [pc, #308]	@ (8000648 <__aeabi_fadd+0x3b4>)
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	4033      	ands	r3, r6
 8000518:	400a      	ands	r2, r1
 800051a:	431a      	orrs	r2, r3
 800051c:	0016      	movs	r6, r2
 800051e:	0753      	lsls	r3, r2, #29
 8000520:	d004      	beq.n	800052c <__aeabi_fadd+0x298>
 8000522:	230f      	movs	r3, #15
 8000524:	4013      	ands	r3, r2
 8000526:	2b04      	cmp	r3, #4
 8000528:	d000      	beq.n	800052c <__aeabi_fadd+0x298>
 800052a:	e72a      	b.n	8000382 <__aeabi_fadd+0xee>
 800052c:	0173      	lsls	r3, r6, #5
 800052e:	d500      	bpl.n	8000532 <__aeabi_fadd+0x29e>
 8000530:	e72a      	b.n	8000388 <__aeabi_fadd+0xf4>
 8000532:	002b      	movs	r3, r5
 8000534:	08f7      	lsrs	r7, r6, #3
 8000536:	e6f7      	b.n	8000328 <__aeabi_fadd+0x94>
 8000538:	2bff      	cmp	r3, #255	@ 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2aa>
 800053c:	e727      	b.n	800038e <__aeabi_fadd+0xfa>
 800053e:	1871      	adds	r1, r6, r1
 8000540:	0849      	lsrs	r1, r1, #1
 8000542:	074a      	lsls	r2, r1, #29
 8000544:	d02f      	beq.n	80005a6 <__aeabi_fadd+0x312>
 8000546:	220f      	movs	r2, #15
 8000548:	400a      	ands	r2, r1
 800054a:	2a04      	cmp	r2, #4
 800054c:	d02b      	beq.n	80005a6 <__aeabi_fadd+0x312>
 800054e:	1d0e      	adds	r6, r1, #4
 8000550:	e6e6      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000552:	2aff      	cmp	r2, #255	@ 0xff
 8000554:	d08d      	beq.n	8000472 <__aeabi_fadd+0x1de>
 8000556:	2080      	movs	r0, #128	@ 0x80
 8000558:	04c0      	lsls	r0, r0, #19
 800055a:	4306      	orrs	r6, r0
 800055c:	2b1b      	cmp	r3, #27
 800055e:	dd24      	ble.n	80005aa <__aeabi_fadd+0x316>
 8000560:	0013      	movs	r3, r2
 8000562:	1d4e      	adds	r6, r1, #5
 8000564:	e6dc      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000566:	464c      	mov	r4, r9
 8000568:	1b8f      	subs	r7, r1, r6
 800056a:	e6f9      	b.n	8000360 <__aeabi_fadd+0xcc>
 800056c:	464c      	mov	r4, r9
 800056e:	000e      	movs	r6, r1
 8000570:	e6d6      	b.n	8000320 <__aeabi_fadd+0x8c>
 8000572:	2e00      	cmp	r6, #0
 8000574:	d149      	bne.n	800060a <__aeabi_fadd+0x376>
 8000576:	2900      	cmp	r1, #0
 8000578:	d068      	beq.n	800064c <__aeabi_fadd+0x3b8>
 800057a:	4667      	mov	r7, ip
 800057c:	464c      	mov	r4, r9
 800057e:	e77c      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000580:	1870      	adds	r0, r6, r1
 8000582:	0143      	lsls	r3, r0, #5
 8000584:	d574      	bpl.n	8000670 <__aeabi_fadd+0x3dc>
 8000586:	4930      	ldr	r1, [pc, #192]	@ (8000648 <__aeabi_fadd+0x3b4>)
 8000588:	0840      	lsrs	r0, r0, #1
 800058a:	4001      	ands	r1, r0
 800058c:	0743      	lsls	r3, r0, #29
 800058e:	d009      	beq.n	80005a4 <__aeabi_fadd+0x310>
 8000590:	230f      	movs	r3, #15
 8000592:	4003      	ands	r3, r0
 8000594:	2b04      	cmp	r3, #4
 8000596:	d005      	beq.n	80005a4 <__aeabi_fadd+0x310>
 8000598:	2302      	movs	r3, #2
 800059a:	1d0e      	adds	r6, r1, #4
 800059c:	e6c0      	b.n	8000320 <__aeabi_fadd+0x8c>
 800059e:	2301      	movs	r3, #1
 80005a0:	08cf      	lsrs	r7, r1, #3
 80005a2:	e6c1      	b.n	8000328 <__aeabi_fadd+0x94>
 80005a4:	2302      	movs	r3, #2
 80005a6:	08cf      	lsrs	r7, r1, #3
 80005a8:	e6be      	b.n	8000328 <__aeabi_fadd+0x94>
 80005aa:	2520      	movs	r5, #32
 80005ac:	0030      	movs	r0, r6
 80005ae:	40d8      	lsrs	r0, r3
 80005b0:	1aeb      	subs	r3, r5, r3
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	1e5d      	subs	r5, r3, #1
 80005b8:	41ab      	sbcs	r3, r5
 80005ba:	4303      	orrs	r3, r0
 80005bc:	0015      	movs	r5, r2
 80005be:	185e      	adds	r6, r3, r1
 80005c0:	e7a0      	b.n	8000504 <__aeabi_fadd+0x270>
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x334>
 80005c6:	e765      	b.n	8000494 <__aeabi_fadd+0x200>
 80005c8:	464c      	mov	r4, r9
 80005ca:	4667      	mov	r7, ip
 80005cc:	e6ac      	b.n	8000328 <__aeabi_fadd+0x94>
 80005ce:	1b8f      	subs	r7, r1, r6
 80005d0:	017b      	lsls	r3, r7, #5
 80005d2:	d52e      	bpl.n	8000632 <__aeabi_fadd+0x39e>
 80005d4:	01bf      	lsls	r7, r7, #6
 80005d6:	09bf      	lsrs	r7, r7, #6
 80005d8:	0038      	movs	r0, r7
 80005da:	f000 fccd 	bl	8000f78 <__clzsi2>
 80005de:	003b      	movs	r3, r7
 80005e0:	3805      	subs	r0, #5
 80005e2:	4083      	lsls	r3, r0
 80005e4:	464c      	mov	r4, r9
 80005e6:	3501      	adds	r5, #1
 80005e8:	e710      	b.n	800040c <__aeabi_fadd+0x178>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0x35c>
 80005ee:	e740      	b.n	8000472 <__aeabi_fadd+0x1de>
 80005f0:	2900      	cmp	r1, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x362>
 80005f4:	e741      	b.n	800047a <__aeabi_fadd+0x1e6>
 80005f6:	2380      	movs	r3, #128	@ 0x80
 80005f8:	03db      	lsls	r3, r3, #15
 80005fa:	429f      	cmp	r7, r3
 80005fc:	d200      	bcs.n	8000600 <__aeabi_fadd+0x36c>
 80005fe:	e73c      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000600:	459c      	cmp	ip, r3
 8000602:	d300      	bcc.n	8000606 <__aeabi_fadd+0x372>
 8000604:	e739      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000606:	4667      	mov	r7, ip
 8000608:	e737      	b.n	800047a <__aeabi_fadd+0x1e6>
 800060a:	2900      	cmp	r1, #0
 800060c:	d100      	bne.n	8000610 <__aeabi_fadd+0x37c>
 800060e:	e734      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	03db      	lsls	r3, r3, #15
 8000614:	429f      	cmp	r7, r3
 8000616:	d200      	bcs.n	800061a <__aeabi_fadd+0x386>
 8000618:	e72f      	b.n	800047a <__aeabi_fadd+0x1e6>
 800061a:	459c      	cmp	ip, r3
 800061c:	d300      	bcc.n	8000620 <__aeabi_fadd+0x38c>
 800061e:	e72c      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000620:	464c      	mov	r4, r9
 8000622:	4667      	mov	r7, ip
 8000624:	e729      	b.n	800047a <__aeabi_fadd+0x1e6>
 8000626:	2900      	cmp	r1, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x398>
 800062a:	e734      	b.n	8000496 <__aeabi_fadd+0x202>
 800062c:	2300      	movs	r3, #0
 800062e:	08cf      	lsrs	r7, r1, #3
 8000630:	e67a      	b.n	8000328 <__aeabi_fadd+0x94>
 8000632:	464c      	mov	r4, r9
 8000634:	2301      	movs	r3, #1
 8000636:	08ff      	lsrs	r7, r7, #3
 8000638:	e676      	b.n	8000328 <__aeabi_fadd+0x94>
 800063a:	2f00      	cmp	r7, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x3ac>
 800063e:	e729      	b.n	8000494 <__aeabi_fadd+0x200>
 8000640:	08ff      	lsrs	r7, r7, #3
 8000642:	e671      	b.n	8000328 <__aeabi_fadd+0x94>
 8000644:	fbffffff 	.word	0xfbffffff
 8000648:	7dffffff 	.word	0x7dffffff
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	2400      	movs	r4, #0
 8000650:	20ff      	movs	r0, #255	@ 0xff
 8000652:	03d2      	lsls	r2, r2, #15
 8000654:	e69d      	b.n	8000392 <__aeabi_fadd+0xfe>
 8000656:	2300      	movs	r3, #0
 8000658:	e666      	b.n	8000328 <__aeabi_fadd+0x94>
 800065a:	2300      	movs	r3, #0
 800065c:	08d7      	lsrs	r7, r2, #3
 800065e:	e663      	b.n	8000328 <__aeabi_fadd+0x94>
 8000660:	2001      	movs	r0, #1
 8000662:	0172      	lsls	r2, r6, #5
 8000664:	d500      	bpl.n	8000668 <__aeabi_fadd+0x3d4>
 8000666:	e6e7      	b.n	8000438 <__aeabi_fadd+0x1a4>
 8000668:	0031      	movs	r1, r6
 800066a:	2300      	movs	r3, #0
 800066c:	08cf      	lsrs	r7, r1, #3
 800066e:	e65b      	b.n	8000328 <__aeabi_fadd+0x94>
 8000670:	2301      	movs	r3, #1
 8000672:	08c7      	lsrs	r7, r0, #3
 8000674:	e658      	b.n	8000328 <__aeabi_fadd+0x94>
 8000676:	46c0      	nop			@ (mov r8, r8)

08000678 <__eqsf2>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	0042      	lsls	r2, r0, #1
 800067c:	024e      	lsls	r6, r1, #9
 800067e:	004c      	lsls	r4, r1, #1
 8000680:	0245      	lsls	r5, r0, #9
 8000682:	0a6d      	lsrs	r5, r5, #9
 8000684:	0e12      	lsrs	r2, r2, #24
 8000686:	0fc3      	lsrs	r3, r0, #31
 8000688:	0a76      	lsrs	r6, r6, #9
 800068a:	0e24      	lsrs	r4, r4, #24
 800068c:	0fc9      	lsrs	r1, r1, #31
 800068e:	2aff      	cmp	r2, #255	@ 0xff
 8000690:	d010      	beq.n	80006b4 <__eqsf2+0x3c>
 8000692:	2cff      	cmp	r4, #255	@ 0xff
 8000694:	d00c      	beq.n	80006b0 <__eqsf2+0x38>
 8000696:	2001      	movs	r0, #1
 8000698:	42a2      	cmp	r2, r4
 800069a:	d10a      	bne.n	80006b2 <__eqsf2+0x3a>
 800069c:	42b5      	cmp	r5, r6
 800069e:	d108      	bne.n	80006b2 <__eqsf2+0x3a>
 80006a0:	428b      	cmp	r3, r1
 80006a2:	d00f      	beq.n	80006c4 <__eqsf2+0x4c>
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	d104      	bne.n	80006b2 <__eqsf2+0x3a>
 80006a8:	0028      	movs	r0, r5
 80006aa:	1e43      	subs	r3, r0, #1
 80006ac:	4198      	sbcs	r0, r3
 80006ae:	e000      	b.n	80006b2 <__eqsf2+0x3a>
 80006b0:	2001      	movs	r0, #1
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	2001      	movs	r0, #1
 80006b6:	2cff      	cmp	r4, #255	@ 0xff
 80006b8:	d1fb      	bne.n	80006b2 <__eqsf2+0x3a>
 80006ba:	4335      	orrs	r5, r6
 80006bc:	d1f9      	bne.n	80006b2 <__eqsf2+0x3a>
 80006be:	404b      	eors	r3, r1
 80006c0:	0018      	movs	r0, r3
 80006c2:	e7f6      	b.n	80006b2 <__eqsf2+0x3a>
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7f4      	b.n	80006b2 <__eqsf2+0x3a>

080006c8 <__gesf2>:
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	0042      	lsls	r2, r0, #1
 80006cc:	0244      	lsls	r4, r0, #9
 80006ce:	024d      	lsls	r5, r1, #9
 80006d0:	0fc3      	lsrs	r3, r0, #31
 80006d2:	0048      	lsls	r0, r1, #1
 80006d4:	0a64      	lsrs	r4, r4, #9
 80006d6:	0e12      	lsrs	r2, r2, #24
 80006d8:	0a6d      	lsrs	r5, r5, #9
 80006da:	0e00      	lsrs	r0, r0, #24
 80006dc:	0fc9      	lsrs	r1, r1, #31
 80006de:	2aff      	cmp	r2, #255	@ 0xff
 80006e0:	d018      	beq.n	8000714 <__gesf2+0x4c>
 80006e2:	28ff      	cmp	r0, #255	@ 0xff
 80006e4:	d00a      	beq.n	80006fc <__gesf2+0x34>
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d11e      	bne.n	8000728 <__gesf2+0x60>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d10a      	bne.n	8000704 <__gesf2+0x3c>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d029      	beq.n	8000746 <__gesf2+0x7e>
 80006f2:	2c00      	cmp	r4, #0
 80006f4:	d12d      	bne.n	8000752 <__gesf2+0x8a>
 80006f6:	0048      	lsls	r0, r1, #1
 80006f8:	3801      	subs	r0, #1
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d125      	bne.n	800074c <__gesf2+0x84>
 8000700:	2a00      	cmp	r2, #0
 8000702:	d101      	bne.n	8000708 <__gesf2+0x40>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d0f6      	beq.n	80006f6 <__gesf2+0x2e>
 8000708:	428b      	cmp	r3, r1
 800070a:	d019      	beq.n	8000740 <__gesf2+0x78>
 800070c:	2001      	movs	r0, #1
 800070e:	425b      	negs	r3, r3
 8000710:	4318      	orrs	r0, r3
 8000712:	e7f2      	b.n	80006fa <__gesf2+0x32>
 8000714:	2c00      	cmp	r4, #0
 8000716:	d119      	bne.n	800074c <__gesf2+0x84>
 8000718:	28ff      	cmp	r0, #255	@ 0xff
 800071a:	d1f7      	bne.n	800070c <__gesf2+0x44>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d115      	bne.n	800074c <__gesf2+0x84>
 8000720:	2000      	movs	r0, #0
 8000722:	428b      	cmp	r3, r1
 8000724:	d1f2      	bne.n	800070c <__gesf2+0x44>
 8000726:	e7e8      	b.n	80006fa <__gesf2+0x32>
 8000728:	2800      	cmp	r0, #0
 800072a:	d0ef      	beq.n	800070c <__gesf2+0x44>
 800072c:	428b      	cmp	r3, r1
 800072e:	d1ed      	bne.n	800070c <__gesf2+0x44>
 8000730:	4282      	cmp	r2, r0
 8000732:	dceb      	bgt.n	800070c <__gesf2+0x44>
 8000734:	db04      	blt.n	8000740 <__gesf2+0x78>
 8000736:	42ac      	cmp	r4, r5
 8000738:	d8e8      	bhi.n	800070c <__gesf2+0x44>
 800073a:	2000      	movs	r0, #0
 800073c:	42ac      	cmp	r4, r5
 800073e:	d2dc      	bcs.n	80006fa <__gesf2+0x32>
 8000740:	0058      	lsls	r0, r3, #1
 8000742:	3801      	subs	r0, #1
 8000744:	e7d9      	b.n	80006fa <__gesf2+0x32>
 8000746:	2c00      	cmp	r4, #0
 8000748:	d0d7      	beq.n	80006fa <__gesf2+0x32>
 800074a:	e7df      	b.n	800070c <__gesf2+0x44>
 800074c:	2002      	movs	r0, #2
 800074e:	4240      	negs	r0, r0
 8000750:	e7d3      	b.n	80006fa <__gesf2+0x32>
 8000752:	428b      	cmp	r3, r1
 8000754:	d1da      	bne.n	800070c <__gesf2+0x44>
 8000756:	e7ee      	b.n	8000736 <__gesf2+0x6e>

08000758 <__lesf2>:
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	0042      	lsls	r2, r0, #1
 800075c:	0244      	lsls	r4, r0, #9
 800075e:	024d      	lsls	r5, r1, #9
 8000760:	0fc3      	lsrs	r3, r0, #31
 8000762:	0048      	lsls	r0, r1, #1
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	0e12      	lsrs	r2, r2, #24
 8000768:	0a6d      	lsrs	r5, r5, #9
 800076a:	0e00      	lsrs	r0, r0, #24
 800076c:	0fc9      	lsrs	r1, r1, #31
 800076e:	2aff      	cmp	r2, #255	@ 0xff
 8000770:	d017      	beq.n	80007a2 <__lesf2+0x4a>
 8000772:	28ff      	cmp	r0, #255	@ 0xff
 8000774:	d00a      	beq.n	800078c <__lesf2+0x34>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d11b      	bne.n	80007b2 <__lesf2+0x5a>
 800077a:	2800      	cmp	r0, #0
 800077c:	d10a      	bne.n	8000794 <__lesf2+0x3c>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d01d      	beq.n	80007be <__lesf2+0x66>
 8000782:	2c00      	cmp	r4, #0
 8000784:	d12d      	bne.n	80007e2 <__lesf2+0x8a>
 8000786:	0048      	lsls	r0, r1, #1
 8000788:	3801      	subs	r0, #1
 800078a:	e011      	b.n	80007b0 <__lesf2+0x58>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d10e      	bne.n	80007ae <__lesf2+0x56>
 8000790:	2a00      	cmp	r2, #0
 8000792:	d101      	bne.n	8000798 <__lesf2+0x40>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d0f6      	beq.n	8000786 <__lesf2+0x2e>
 8000798:	428b      	cmp	r3, r1
 800079a:	d10c      	bne.n	80007b6 <__lesf2+0x5e>
 800079c:	0058      	lsls	r0, r3, #1
 800079e:	3801      	subs	r0, #1
 80007a0:	e006      	b.n	80007b0 <__lesf2+0x58>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d103      	bne.n	80007ae <__lesf2+0x56>
 80007a6:	28ff      	cmp	r0, #255	@ 0xff
 80007a8:	d105      	bne.n	80007b6 <__lesf2+0x5e>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d015      	beq.n	80007da <__lesf2+0x82>
 80007ae:	2002      	movs	r0, #2
 80007b0:	bd30      	pop	{r4, r5, pc}
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d106      	bne.n	80007c4 <__lesf2+0x6c>
 80007b6:	2001      	movs	r0, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	4318      	orrs	r0, r3
 80007bc:	e7f8      	b.n	80007b0 <__lesf2+0x58>
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d0f6      	beq.n	80007b0 <__lesf2+0x58>
 80007c2:	e7f8      	b.n	80007b6 <__lesf2+0x5e>
 80007c4:	428b      	cmp	r3, r1
 80007c6:	d1f6      	bne.n	80007b6 <__lesf2+0x5e>
 80007c8:	4282      	cmp	r2, r0
 80007ca:	dcf4      	bgt.n	80007b6 <__lesf2+0x5e>
 80007cc:	dbe6      	blt.n	800079c <__lesf2+0x44>
 80007ce:	42ac      	cmp	r4, r5
 80007d0:	d8f1      	bhi.n	80007b6 <__lesf2+0x5e>
 80007d2:	2000      	movs	r0, #0
 80007d4:	42ac      	cmp	r4, r5
 80007d6:	d2eb      	bcs.n	80007b0 <__lesf2+0x58>
 80007d8:	e7e0      	b.n	800079c <__lesf2+0x44>
 80007da:	2000      	movs	r0, #0
 80007dc:	428b      	cmp	r3, r1
 80007de:	d1ea      	bne.n	80007b6 <__lesf2+0x5e>
 80007e0:	e7e6      	b.n	80007b0 <__lesf2+0x58>
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d1e7      	bne.n	80007b6 <__lesf2+0x5e>
 80007e6:	e7f2      	b.n	80007ce <__lesf2+0x76>

080007e8 <__aeabi_i2f>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d012      	beq.n	8000814 <__aeabi_i2f+0x2c>
 80007ee:	17c3      	asrs	r3, r0, #31
 80007f0:	18c5      	adds	r5, r0, r3
 80007f2:	405d      	eors	r5, r3
 80007f4:	0fc4      	lsrs	r4, r0, #31
 80007f6:	0028      	movs	r0, r5
 80007f8:	f000 fbbe 	bl	8000f78 <__clzsi2>
 80007fc:	239e      	movs	r3, #158	@ 0x9e
 80007fe:	1a1b      	subs	r3, r3, r0
 8000800:	2b96      	cmp	r3, #150	@ 0x96
 8000802:	dc0f      	bgt.n	8000824 <__aeabi_i2f+0x3c>
 8000804:	2808      	cmp	r0, #8
 8000806:	d038      	beq.n	800087a <__aeabi_i2f+0x92>
 8000808:	3808      	subs	r0, #8
 800080a:	4085      	lsls	r5, r0
 800080c:	026d      	lsls	r5, r5, #9
 800080e:	0a6d      	lsrs	r5, r5, #9
 8000810:	b2d8      	uxtb	r0, r3
 8000812:	e002      	b.n	800081a <__aeabi_i2f+0x32>
 8000814:	2400      	movs	r4, #0
 8000816:	2000      	movs	r0, #0
 8000818:	2500      	movs	r5, #0
 800081a:	05c0      	lsls	r0, r0, #23
 800081c:	4328      	orrs	r0, r5
 800081e:	07e4      	lsls	r4, r4, #31
 8000820:	4320      	orrs	r0, r4
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	2b99      	cmp	r3, #153	@ 0x99
 8000826:	dc14      	bgt.n	8000852 <__aeabi_i2f+0x6a>
 8000828:	1f42      	subs	r2, r0, #5
 800082a:	4095      	lsls	r5, r2
 800082c:	002a      	movs	r2, r5
 800082e:	4915      	ldr	r1, [pc, #84]	@ (8000884 <__aeabi_i2f+0x9c>)
 8000830:	4011      	ands	r1, r2
 8000832:	0755      	lsls	r5, r2, #29
 8000834:	d01c      	beq.n	8000870 <__aeabi_i2f+0x88>
 8000836:	250f      	movs	r5, #15
 8000838:	402a      	ands	r2, r5
 800083a:	2a04      	cmp	r2, #4
 800083c:	d018      	beq.n	8000870 <__aeabi_i2f+0x88>
 800083e:	3104      	adds	r1, #4
 8000840:	08ca      	lsrs	r2, r1, #3
 8000842:	0149      	lsls	r1, r1, #5
 8000844:	d515      	bpl.n	8000872 <__aeabi_i2f+0x8a>
 8000846:	239f      	movs	r3, #159	@ 0x9f
 8000848:	0252      	lsls	r2, r2, #9
 800084a:	1a18      	subs	r0, r3, r0
 800084c:	0a55      	lsrs	r5, r2, #9
 800084e:	b2c0      	uxtb	r0, r0
 8000850:	e7e3      	b.n	800081a <__aeabi_i2f+0x32>
 8000852:	2205      	movs	r2, #5
 8000854:	0029      	movs	r1, r5
 8000856:	1a12      	subs	r2, r2, r0
 8000858:	40d1      	lsrs	r1, r2
 800085a:	0002      	movs	r2, r0
 800085c:	321b      	adds	r2, #27
 800085e:	4095      	lsls	r5, r2
 8000860:	002a      	movs	r2, r5
 8000862:	1e55      	subs	r5, r2, #1
 8000864:	41aa      	sbcs	r2, r5
 8000866:	430a      	orrs	r2, r1
 8000868:	4906      	ldr	r1, [pc, #24]	@ (8000884 <__aeabi_i2f+0x9c>)
 800086a:	4011      	ands	r1, r2
 800086c:	0755      	lsls	r5, r2, #29
 800086e:	d1e2      	bne.n	8000836 <__aeabi_i2f+0x4e>
 8000870:	08ca      	lsrs	r2, r1, #3
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	0a55      	lsrs	r5, r2, #9
 8000876:	b2d8      	uxtb	r0, r3
 8000878:	e7cf      	b.n	800081a <__aeabi_i2f+0x32>
 800087a:	026d      	lsls	r5, r5, #9
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	308e      	adds	r0, #142	@ 0x8e
 8000880:	e7cb      	b.n	800081a <__aeabi_i2f+0x32>
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	fbffffff 	.word	0xfbffffff

08000888 <__aeabi_ddiv>:
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	46de      	mov	lr, fp
 800088c:	4645      	mov	r5, r8
 800088e:	4657      	mov	r7, sl
 8000890:	464e      	mov	r6, r9
 8000892:	b5e0      	push	{r5, r6, r7, lr}
 8000894:	b087      	sub	sp, #28
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	030b      	lsls	r3, r1, #12
 800089c:	0b1b      	lsrs	r3, r3, #12
 800089e:	469b      	mov	fp, r3
 80008a0:	0fca      	lsrs	r2, r1, #31
 80008a2:	004b      	lsls	r3, r1, #1
 80008a4:	0004      	movs	r4, r0
 80008a6:	4680      	mov	r8, r0
 80008a8:	0d5b      	lsrs	r3, r3, #21
 80008aa:	9202      	str	r2, [sp, #8]
 80008ac:	d100      	bne.n	80008b0 <__aeabi_ddiv+0x28>
 80008ae:	e098      	b.n	80009e2 <__aeabi_ddiv+0x15a>
 80008b0:	4a7c      	ldr	r2, [pc, #496]	@ (8000aa4 <__aeabi_ddiv+0x21c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d037      	beq.n	8000926 <__aeabi_ddiv+0x9e>
 80008b6:	4659      	mov	r1, fp
 80008b8:	0f42      	lsrs	r2, r0, #29
 80008ba:	00c9      	lsls	r1, r1, #3
 80008bc:	430a      	orrs	r2, r1
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	0409      	lsls	r1, r1, #16
 80008c2:	4311      	orrs	r1, r2
 80008c4:	00c2      	lsls	r2, r0, #3
 80008c6:	4690      	mov	r8, r2
 80008c8:	4a77      	ldr	r2, [pc, #476]	@ (8000aa8 <__aeabi_ddiv+0x220>)
 80008ca:	4689      	mov	r9, r1
 80008cc:	4692      	mov	sl, r2
 80008ce:	449a      	add	sl, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	2400      	movs	r4, #0
 80008d4:	9303      	str	r3, [sp, #12]
 80008d6:	9e00      	ldr	r6, [sp, #0]
 80008d8:	9f01      	ldr	r7, [sp, #4]
 80008da:	033b      	lsls	r3, r7, #12
 80008dc:	0b1b      	lsrs	r3, r3, #12
 80008de:	469b      	mov	fp, r3
 80008e0:	007b      	lsls	r3, r7, #1
 80008e2:	0030      	movs	r0, r6
 80008e4:	0d5b      	lsrs	r3, r3, #21
 80008e6:	0ffd      	lsrs	r5, r7, #31
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d059      	beq.n	80009a0 <__aeabi_ddiv+0x118>
 80008ec:	4a6d      	ldr	r2, [pc, #436]	@ (8000aa4 <__aeabi_ddiv+0x21c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d048      	beq.n	8000984 <__aeabi_ddiv+0xfc>
 80008f2:	4659      	mov	r1, fp
 80008f4:	0f72      	lsrs	r2, r6, #29
 80008f6:	00c9      	lsls	r1, r1, #3
 80008f8:	430a      	orrs	r2, r1
 80008fa:	2180      	movs	r1, #128	@ 0x80
 80008fc:	0409      	lsls	r1, r1, #16
 80008fe:	4311      	orrs	r1, r2
 8000900:	468b      	mov	fp, r1
 8000902:	4969      	ldr	r1, [pc, #420]	@ (8000aa8 <__aeabi_ddiv+0x220>)
 8000904:	00f2      	lsls	r2, r6, #3
 8000906:	468c      	mov	ip, r1
 8000908:	4651      	mov	r1, sl
 800090a:	4463      	add	r3, ip
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	469a      	mov	sl, r3
 8000910:	2100      	movs	r1, #0
 8000912:	9e02      	ldr	r6, [sp, #8]
 8000914:	406e      	eors	r6, r5
 8000916:	b2f6      	uxtb	r6, r6
 8000918:	2c0f      	cmp	r4, #15
 800091a:	d900      	bls.n	800091e <__aeabi_ddiv+0x96>
 800091c:	e0ce      	b.n	8000abc <__aeabi_ddiv+0x234>
 800091e:	4b63      	ldr	r3, [pc, #396]	@ (8000aac <__aeabi_ddiv+0x224>)
 8000920:	00a4      	lsls	r4, r4, #2
 8000922:	591b      	ldr	r3, [r3, r4]
 8000924:	469f      	mov	pc, r3
 8000926:	465a      	mov	r2, fp
 8000928:	4302      	orrs	r2, r0
 800092a:	4691      	mov	r9, r2
 800092c:	d000      	beq.n	8000930 <__aeabi_ddiv+0xa8>
 800092e:	e090      	b.n	8000a52 <__aeabi_ddiv+0x1ca>
 8000930:	469a      	mov	sl, r3
 8000932:	2302      	movs	r3, #2
 8000934:	4690      	mov	r8, r2
 8000936:	2408      	movs	r4, #8
 8000938:	9303      	str	r3, [sp, #12]
 800093a:	e7cc      	b.n	80008d6 <__aeabi_ddiv+0x4e>
 800093c:	46cb      	mov	fp, r9
 800093e:	4642      	mov	r2, r8
 8000940:	9d02      	ldr	r5, [sp, #8]
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	2902      	cmp	r1, #2
 8000946:	d100      	bne.n	800094a <__aeabi_ddiv+0xc2>
 8000948:	e1de      	b.n	8000d08 <__aeabi_ddiv+0x480>
 800094a:	2903      	cmp	r1, #3
 800094c:	d100      	bne.n	8000950 <__aeabi_ddiv+0xc8>
 800094e:	e08d      	b.n	8000a6c <__aeabi_ddiv+0x1e4>
 8000950:	2901      	cmp	r1, #1
 8000952:	d000      	beq.n	8000956 <__aeabi_ddiv+0xce>
 8000954:	e179      	b.n	8000c4a <__aeabi_ddiv+0x3c2>
 8000956:	002e      	movs	r6, r5
 8000958:	2200      	movs	r2, #0
 800095a:	2300      	movs	r3, #0
 800095c:	2400      	movs	r4, #0
 800095e:	4690      	mov	r8, r2
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	4323      	orrs	r3, r4
 8000964:	07f6      	lsls	r6, r6, #31
 8000966:	4333      	orrs	r3, r6
 8000968:	4640      	mov	r0, r8
 800096a:	0019      	movs	r1, r3
 800096c:	b007      	add	sp, #28
 800096e:	bcf0      	pop	{r4, r5, r6, r7}
 8000970:	46bb      	mov	fp, r7
 8000972:	46b2      	mov	sl, r6
 8000974:	46a9      	mov	r9, r5
 8000976:	46a0      	mov	r8, r4
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	2200      	movs	r2, #0
 800097c:	2400      	movs	r4, #0
 800097e:	4690      	mov	r8, r2
 8000980:	4b48      	ldr	r3, [pc, #288]	@ (8000aa4 <__aeabi_ddiv+0x21c>)
 8000982:	e7ed      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000984:	465a      	mov	r2, fp
 8000986:	9b00      	ldr	r3, [sp, #0]
 8000988:	431a      	orrs	r2, r3
 800098a:	4b49      	ldr	r3, [pc, #292]	@ (8000ab0 <__aeabi_ddiv+0x228>)
 800098c:	469c      	mov	ip, r3
 800098e:	44e2      	add	sl, ip
 8000990:	2a00      	cmp	r2, #0
 8000992:	d159      	bne.n	8000a48 <__aeabi_ddiv+0x1c0>
 8000994:	2302      	movs	r3, #2
 8000996:	431c      	orrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	2102      	movs	r1, #2
 800099c:	469b      	mov	fp, r3
 800099e:	e7b8      	b.n	8000912 <__aeabi_ddiv+0x8a>
 80009a0:	465a      	mov	r2, fp
 80009a2:	9b00      	ldr	r3, [sp, #0]
 80009a4:	431a      	orrs	r2, r3
 80009a6:	d049      	beq.n	8000a3c <__aeabi_ddiv+0x1b4>
 80009a8:	465b      	mov	r3, fp
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_ddiv+0x128>
 80009ae:	e19c      	b.n	8000cea <__aeabi_ddiv+0x462>
 80009b0:	4658      	mov	r0, fp
 80009b2:	f000 fae1 	bl	8000f78 <__clzsi2>
 80009b6:	0002      	movs	r2, r0
 80009b8:	0003      	movs	r3, r0
 80009ba:	3a0b      	subs	r2, #11
 80009bc:	271d      	movs	r7, #29
 80009be:	9e00      	ldr	r6, [sp, #0]
 80009c0:	1aba      	subs	r2, r7, r2
 80009c2:	0019      	movs	r1, r3
 80009c4:	4658      	mov	r0, fp
 80009c6:	40d6      	lsrs	r6, r2
 80009c8:	3908      	subs	r1, #8
 80009ca:	4088      	lsls	r0, r1
 80009cc:	0032      	movs	r2, r6
 80009ce:	4302      	orrs	r2, r0
 80009d0:	4693      	mov	fp, r2
 80009d2:	9a00      	ldr	r2, [sp, #0]
 80009d4:	408a      	lsls	r2, r1
 80009d6:	4937      	ldr	r1, [pc, #220]	@ (8000ab4 <__aeabi_ddiv+0x22c>)
 80009d8:	4453      	add	r3, sl
 80009da:	468a      	mov	sl, r1
 80009dc:	2100      	movs	r1, #0
 80009de:	449a      	add	sl, r3
 80009e0:	e797      	b.n	8000912 <__aeabi_ddiv+0x8a>
 80009e2:	465b      	mov	r3, fp
 80009e4:	4303      	orrs	r3, r0
 80009e6:	4699      	mov	r9, r3
 80009e8:	d021      	beq.n	8000a2e <__aeabi_ddiv+0x1a6>
 80009ea:	465b      	mov	r3, fp
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_ddiv+0x16a>
 80009f0:	e169      	b.n	8000cc6 <__aeabi_ddiv+0x43e>
 80009f2:	4658      	mov	r0, fp
 80009f4:	f000 fac0 	bl	8000f78 <__clzsi2>
 80009f8:	230b      	movs	r3, #11
 80009fa:	425b      	negs	r3, r3
 80009fc:	469c      	mov	ip, r3
 80009fe:	0002      	movs	r2, r0
 8000a00:	4484      	add	ip, r0
 8000a02:	4666      	mov	r6, ip
 8000a04:	231d      	movs	r3, #29
 8000a06:	1b9b      	subs	r3, r3, r6
 8000a08:	0026      	movs	r6, r4
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	4658      	mov	r0, fp
 8000a0e:	40de      	lsrs	r6, r3
 8000a10:	3908      	subs	r1, #8
 8000a12:	4088      	lsls	r0, r1
 8000a14:	0033      	movs	r3, r6
 8000a16:	4303      	orrs	r3, r0
 8000a18:	4699      	mov	r9, r3
 8000a1a:	0023      	movs	r3, r4
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	4698      	mov	r8, r3
 8000a20:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <__aeabi_ddiv+0x230>)
 8000a22:	2400      	movs	r4, #0
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	469a      	mov	sl, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9303      	str	r3, [sp, #12]
 8000a2c:	e753      	b.n	80008d6 <__aeabi_ddiv+0x4e>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	4698      	mov	r8, r3
 8000a32:	469a      	mov	sl, r3
 8000a34:	3301      	adds	r3, #1
 8000a36:	2404      	movs	r4, #4
 8000a38:	9303      	str	r3, [sp, #12]
 8000a3a:	e74c      	b.n	80008d6 <__aeabi_ddiv+0x4e>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	431c      	orrs	r4, r3
 8000a40:	2300      	movs	r3, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	469b      	mov	fp, r3
 8000a46:	e764      	b.n	8000912 <__aeabi_ddiv+0x8a>
 8000a48:	2303      	movs	r3, #3
 8000a4a:	0032      	movs	r2, r6
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	431c      	orrs	r4, r3
 8000a50:	e75f      	b.n	8000912 <__aeabi_ddiv+0x8a>
 8000a52:	469a      	mov	sl, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	46d9      	mov	r9, fp
 8000a58:	240c      	movs	r4, #12
 8000a5a:	9303      	str	r3, [sp, #12]
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_ddiv+0x4e>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2480      	movs	r4, #128	@ 0x80
 8000a62:	4698      	mov	r8, r3
 8000a64:	2600      	movs	r6, #0
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <__aeabi_ddiv+0x21c>)
 8000a68:	0324      	lsls	r4, r4, #12
 8000a6a:	e779      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000a6c:	2480      	movs	r4, #128	@ 0x80
 8000a6e:	465b      	mov	r3, fp
 8000a70:	0324      	lsls	r4, r4, #12
 8000a72:	431c      	orrs	r4, r3
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	002e      	movs	r6, r5
 8000a78:	4690      	mov	r8, r2
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <__aeabi_ddiv+0x21c>)
 8000a7c:	0b24      	lsrs	r4, r4, #12
 8000a7e:	e76f      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000a80:	2480      	movs	r4, #128	@ 0x80
 8000a82:	464b      	mov	r3, r9
 8000a84:	0324      	lsls	r4, r4, #12
 8000a86:	4223      	tst	r3, r4
 8000a88:	d002      	beq.n	8000a90 <__aeabi_ddiv+0x208>
 8000a8a:	465b      	mov	r3, fp
 8000a8c:	4223      	tst	r3, r4
 8000a8e:	d0f0      	beq.n	8000a72 <__aeabi_ddiv+0x1ea>
 8000a90:	2480      	movs	r4, #128	@ 0x80
 8000a92:	464b      	mov	r3, r9
 8000a94:	0324      	lsls	r4, r4, #12
 8000a96:	431c      	orrs	r4, r3
 8000a98:	0324      	lsls	r4, r4, #12
 8000a9a:	9e02      	ldr	r6, [sp, #8]
 8000a9c:	4b01      	ldr	r3, [pc, #4]	@ (8000aa4 <__aeabi_ddiv+0x21c>)
 8000a9e:	0b24      	lsrs	r4, r4, #12
 8000aa0:	e75e      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	000007ff 	.word	0x000007ff
 8000aa8:	fffffc01 	.word	0xfffffc01
 8000aac:	08004d8c 	.word	0x08004d8c
 8000ab0:	fffff801 	.word	0xfffff801
 8000ab4:	000003f3 	.word	0x000003f3
 8000ab8:	fffffc0d 	.word	0xfffffc0d
 8000abc:	45cb      	cmp	fp, r9
 8000abe:	d200      	bcs.n	8000ac2 <__aeabi_ddiv+0x23a>
 8000ac0:	e0f8      	b.n	8000cb4 <__aeabi_ddiv+0x42c>
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_ddiv+0x23e>
 8000ac4:	e0f3      	b.n	8000cae <__aeabi_ddiv+0x426>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	469c      	mov	ip, r3
 8000acc:	4644      	mov	r4, r8
 8000ace:	4648      	mov	r0, r9
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	44e2      	add	sl, ip
 8000ad4:	465b      	mov	r3, fp
 8000ad6:	0e17      	lsrs	r7, r2, #24
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	431f      	orrs	r7, r3
 8000adc:	0c19      	lsrs	r1, r3, #16
 8000ade:	043b      	lsls	r3, r7, #16
 8000ae0:	0212      	lsls	r2, r2, #8
 8000ae2:	9700      	str	r7, [sp, #0]
 8000ae4:	0c1f      	lsrs	r7, r3, #16
 8000ae6:	4691      	mov	r9, r2
 8000ae8:	9102      	str	r1, [sp, #8]
 8000aea:	9703      	str	r7, [sp, #12]
 8000aec:	f7ff fb92 	bl	8000214 <__aeabi_uidivmod>
 8000af0:	0002      	movs	r2, r0
 8000af2:	437a      	muls	r2, r7
 8000af4:	040b      	lsls	r3, r1, #16
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	4680      	mov	r8, r0
 8000afa:	4319      	orrs	r1, r3
 8000afc:	428a      	cmp	r2, r1
 8000afe:	d909      	bls.n	8000b14 <__aeabi_ddiv+0x28c>
 8000b00:	9f00      	ldr	r7, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	46bc      	mov	ip, r7
 8000b06:	425b      	negs	r3, r3
 8000b08:	4461      	add	r1, ip
 8000b0a:	469c      	mov	ip, r3
 8000b0c:	44e0      	add	r8, ip
 8000b0e:	428f      	cmp	r7, r1
 8000b10:	d800      	bhi.n	8000b14 <__aeabi_ddiv+0x28c>
 8000b12:	e15c      	b.n	8000dce <__aeabi_ddiv+0x546>
 8000b14:	1a88      	subs	r0, r1, r2
 8000b16:	9902      	ldr	r1, [sp, #8]
 8000b18:	f7ff fb7c 	bl	8000214 <__aeabi_uidivmod>
 8000b1c:	9a03      	ldr	r2, [sp, #12]
 8000b1e:	0424      	lsls	r4, r4, #16
 8000b20:	4342      	muls	r2, r0
 8000b22:	0409      	lsls	r1, r1, #16
 8000b24:	0c24      	lsrs	r4, r4, #16
 8000b26:	0003      	movs	r3, r0
 8000b28:	430c      	orrs	r4, r1
 8000b2a:	42a2      	cmp	r2, r4
 8000b2c:	d906      	bls.n	8000b3c <__aeabi_ddiv+0x2b4>
 8000b2e:	9900      	ldr	r1, [sp, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	468c      	mov	ip, r1
 8000b34:	4464      	add	r4, ip
 8000b36:	42a1      	cmp	r1, r4
 8000b38:	d800      	bhi.n	8000b3c <__aeabi_ddiv+0x2b4>
 8000b3a:	e142      	b.n	8000dc2 <__aeabi_ddiv+0x53a>
 8000b3c:	1aa0      	subs	r0, r4, r2
 8000b3e:	4642      	mov	r2, r8
 8000b40:	0412      	lsls	r2, r2, #16
 8000b42:	431a      	orrs	r2, r3
 8000b44:	4693      	mov	fp, r2
 8000b46:	464b      	mov	r3, r9
 8000b48:	4659      	mov	r1, fp
 8000b4a:	0c1b      	lsrs	r3, r3, #16
 8000b4c:	001f      	movs	r7, r3
 8000b4e:	9304      	str	r3, [sp, #16]
 8000b50:	040b      	lsls	r3, r1, #16
 8000b52:	4649      	mov	r1, r9
 8000b54:	0409      	lsls	r1, r1, #16
 8000b56:	0c09      	lsrs	r1, r1, #16
 8000b58:	000c      	movs	r4, r1
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	435c      	muls	r4, r3
 8000b5e:	0c12      	lsrs	r2, r2, #16
 8000b60:	437b      	muls	r3, r7
 8000b62:	4688      	mov	r8, r1
 8000b64:	4351      	muls	r1, r2
 8000b66:	437a      	muls	r2, r7
 8000b68:	0c27      	lsrs	r7, r4, #16
 8000b6a:	46bc      	mov	ip, r7
 8000b6c:	185b      	adds	r3, r3, r1
 8000b6e:	4463      	add	r3, ip
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d903      	bls.n	8000b7c <__aeabi_ddiv+0x2f4>
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	0249      	lsls	r1, r1, #9
 8000b78:	468c      	mov	ip, r1
 8000b7a:	4462      	add	r2, ip
 8000b7c:	0c19      	lsrs	r1, r3, #16
 8000b7e:	0424      	lsls	r4, r4, #16
 8000b80:	041b      	lsls	r3, r3, #16
 8000b82:	0c24      	lsrs	r4, r4, #16
 8000b84:	188a      	adds	r2, r1, r2
 8000b86:	191c      	adds	r4, r3, r4
 8000b88:	4290      	cmp	r0, r2
 8000b8a:	d302      	bcc.n	8000b92 <__aeabi_ddiv+0x30a>
 8000b8c:	d116      	bne.n	8000bbc <__aeabi_ddiv+0x334>
 8000b8e:	42a5      	cmp	r5, r4
 8000b90:	d214      	bcs.n	8000bbc <__aeabi_ddiv+0x334>
 8000b92:	465b      	mov	r3, fp
 8000b94:	9f00      	ldr	r7, [sp, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	444d      	add	r5, r9
 8000b9a:	9305      	str	r3, [sp, #20]
 8000b9c:	454d      	cmp	r5, r9
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	46bc      	mov	ip, r7
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	4463      	add	r3, ip
 8000ba6:	18c0      	adds	r0, r0, r3
 8000ba8:	4287      	cmp	r7, r0
 8000baa:	d300      	bcc.n	8000bae <__aeabi_ddiv+0x326>
 8000bac:	e102      	b.n	8000db4 <__aeabi_ddiv+0x52c>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x32c>
 8000bb2:	e129      	b.n	8000e08 <__aeabi_ddiv+0x580>
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_ddiv+0x330>
 8000bb6:	e124      	b.n	8000e02 <__aeabi_ddiv+0x57a>
 8000bb8:	9b05      	ldr	r3, [sp, #20]
 8000bba:	469b      	mov	fp, r3
 8000bbc:	1b2c      	subs	r4, r5, r4
 8000bbe:	42a5      	cmp	r5, r4
 8000bc0:	41ad      	sbcs	r5, r5
 8000bc2:	9b00      	ldr	r3, [sp, #0]
 8000bc4:	1a80      	subs	r0, r0, r2
 8000bc6:	426d      	negs	r5, r5
 8000bc8:	1b40      	subs	r0, r0, r5
 8000bca:	4283      	cmp	r3, r0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_ddiv+0x348>
 8000bce:	e10f      	b.n	8000df0 <__aeabi_ddiv+0x568>
 8000bd0:	9902      	ldr	r1, [sp, #8]
 8000bd2:	f7ff fb1f 	bl	8000214 <__aeabi_uidivmod>
 8000bd6:	9a03      	ldr	r2, [sp, #12]
 8000bd8:	040b      	lsls	r3, r1, #16
 8000bda:	4342      	muls	r2, r0
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	0005      	movs	r5, r0
 8000be0:	4319      	orrs	r1, r3
 8000be2:	428a      	cmp	r2, r1
 8000be4:	d900      	bls.n	8000be8 <__aeabi_ddiv+0x360>
 8000be6:	e0cb      	b.n	8000d80 <__aeabi_ddiv+0x4f8>
 8000be8:	1a88      	subs	r0, r1, r2
 8000bea:	9902      	ldr	r1, [sp, #8]
 8000bec:	f7ff fb12 	bl	8000214 <__aeabi_uidivmod>
 8000bf0:	9a03      	ldr	r2, [sp, #12]
 8000bf2:	0424      	lsls	r4, r4, #16
 8000bf4:	4342      	muls	r2, r0
 8000bf6:	0409      	lsls	r1, r1, #16
 8000bf8:	0c24      	lsrs	r4, r4, #16
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	430c      	orrs	r4, r1
 8000bfe:	42a2      	cmp	r2, r4
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x37c>
 8000c02:	e0ca      	b.n	8000d9a <__aeabi_ddiv+0x512>
 8000c04:	4641      	mov	r1, r8
 8000c06:	1aa4      	subs	r4, r4, r2
 8000c08:	042a      	lsls	r2, r5, #16
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	9f04      	ldr	r7, [sp, #16]
 8000c0e:	0413      	lsls	r3, r2, #16
 8000c10:	0c1b      	lsrs	r3, r3, #16
 8000c12:	4359      	muls	r1, r3
 8000c14:	4640      	mov	r0, r8
 8000c16:	437b      	muls	r3, r7
 8000c18:	469c      	mov	ip, r3
 8000c1a:	0c15      	lsrs	r5, r2, #16
 8000c1c:	4368      	muls	r0, r5
 8000c1e:	0c0b      	lsrs	r3, r1, #16
 8000c20:	4484      	add	ip, r0
 8000c22:	4463      	add	r3, ip
 8000c24:	437d      	muls	r5, r7
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d903      	bls.n	8000c32 <__aeabi_ddiv+0x3aa>
 8000c2a:	2080      	movs	r0, #128	@ 0x80
 8000c2c:	0240      	lsls	r0, r0, #9
 8000c2e:	4684      	mov	ip, r0
 8000c30:	4465      	add	r5, ip
 8000c32:	0c18      	lsrs	r0, r3, #16
 8000c34:	0409      	lsls	r1, r1, #16
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	0c09      	lsrs	r1, r1, #16
 8000c3a:	1940      	adds	r0, r0, r5
 8000c3c:	185b      	adds	r3, r3, r1
 8000c3e:	4284      	cmp	r4, r0
 8000c40:	d327      	bcc.n	8000c92 <__aeabi_ddiv+0x40a>
 8000c42:	d023      	beq.n	8000c8c <__aeabi_ddiv+0x404>
 8000c44:	2301      	movs	r3, #1
 8000c46:	0035      	movs	r5, r6
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	4b94      	ldr	r3, [pc, #592]	@ (8000e9c <__aeabi_ddiv+0x614>)
 8000c4c:	4453      	add	r3, sl
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dd60      	ble.n	8000d14 <__aeabi_ddiv+0x48c>
 8000c52:	0751      	lsls	r1, r2, #29
 8000c54:	d000      	beq.n	8000c58 <__aeabi_ddiv+0x3d0>
 8000c56:	e086      	b.n	8000d66 <__aeabi_ddiv+0x4de>
 8000c58:	002e      	movs	r6, r5
 8000c5a:	08d1      	lsrs	r1, r2, #3
 8000c5c:	465a      	mov	r2, fp
 8000c5e:	01d2      	lsls	r2, r2, #7
 8000c60:	d506      	bpl.n	8000c70 <__aeabi_ddiv+0x3e8>
 8000c62:	465a      	mov	r2, fp
 8000c64:	4b8e      	ldr	r3, [pc, #568]	@ (8000ea0 <__aeabi_ddiv+0x618>)
 8000c66:	401a      	ands	r2, r3
 8000c68:	2380      	movs	r3, #128	@ 0x80
 8000c6a:	4693      	mov	fp, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4453      	add	r3, sl
 8000c70:	4a8c      	ldr	r2, [pc, #560]	@ (8000ea4 <__aeabi_ddiv+0x61c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	dd00      	ble.n	8000c78 <__aeabi_ddiv+0x3f0>
 8000c76:	e680      	b.n	800097a <__aeabi_ddiv+0xf2>
 8000c78:	465a      	mov	r2, fp
 8000c7a:	0752      	lsls	r2, r2, #29
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	4690      	mov	r8, r2
 8000c80:	465a      	mov	r2, fp
 8000c82:	055b      	lsls	r3, r3, #21
 8000c84:	0254      	lsls	r4, r2, #9
 8000c86:	0b24      	lsrs	r4, r4, #12
 8000c88:	0d5b      	lsrs	r3, r3, #21
 8000c8a:	e669      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000c8c:	0035      	movs	r5, r6
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0db      	beq.n	8000c4a <__aeabi_ddiv+0x3c2>
 8000c92:	9d00      	ldr	r5, [sp, #0]
 8000c94:	1e51      	subs	r1, r2, #1
 8000c96:	46ac      	mov	ip, r5
 8000c98:	4464      	add	r4, ip
 8000c9a:	42ac      	cmp	r4, r5
 8000c9c:	d200      	bcs.n	8000ca0 <__aeabi_ddiv+0x418>
 8000c9e:	e09e      	b.n	8000dde <__aeabi_ddiv+0x556>
 8000ca0:	4284      	cmp	r4, r0
 8000ca2:	d200      	bcs.n	8000ca6 <__aeabi_ddiv+0x41e>
 8000ca4:	e0e1      	b.n	8000e6a <__aeabi_ddiv+0x5e2>
 8000ca6:	d100      	bne.n	8000caa <__aeabi_ddiv+0x422>
 8000ca8:	e0ee      	b.n	8000e88 <__aeabi_ddiv+0x600>
 8000caa:	000a      	movs	r2, r1
 8000cac:	e7ca      	b.n	8000c44 <__aeabi_ddiv+0x3bc>
 8000cae:	4542      	cmp	r2, r8
 8000cb0:	d900      	bls.n	8000cb4 <__aeabi_ddiv+0x42c>
 8000cb2:	e708      	b.n	8000ac6 <__aeabi_ddiv+0x23e>
 8000cb4:	464b      	mov	r3, r9
 8000cb6:	07dc      	lsls	r4, r3, #31
 8000cb8:	0858      	lsrs	r0, r3, #1
 8000cba:	4643      	mov	r3, r8
 8000cbc:	085b      	lsrs	r3, r3, #1
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	07dd      	lsls	r5, r3, #31
 8000cc4:	e706      	b.n	8000ad4 <__aeabi_ddiv+0x24c>
 8000cc6:	f000 f957 	bl	8000f78 <__clzsi2>
 8000cca:	2315      	movs	r3, #21
 8000ccc:	469c      	mov	ip, r3
 8000cce:	4484      	add	ip, r0
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	3220      	adds	r2, #32
 8000cd6:	2b1c      	cmp	r3, #28
 8000cd8:	dc00      	bgt.n	8000cdc <__aeabi_ddiv+0x454>
 8000cda:	e692      	b.n	8000a02 <__aeabi_ddiv+0x17a>
 8000cdc:	0023      	movs	r3, r4
 8000cde:	3808      	subs	r0, #8
 8000ce0:	4083      	lsls	r3, r0
 8000ce2:	4699      	mov	r9, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4698      	mov	r8, r3
 8000ce8:	e69a      	b.n	8000a20 <__aeabi_ddiv+0x198>
 8000cea:	f000 f945 	bl	8000f78 <__clzsi2>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	3215      	adds	r2, #21
 8000cf4:	3320      	adds	r3, #32
 8000cf6:	2a1c      	cmp	r2, #28
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_ddiv+0x474>
 8000cfa:	e65f      	b.n	80009bc <__aeabi_ddiv+0x134>
 8000cfc:	9900      	ldr	r1, [sp, #0]
 8000cfe:	3808      	subs	r0, #8
 8000d00:	4081      	lsls	r1, r0
 8000d02:	2200      	movs	r2, #0
 8000d04:	468b      	mov	fp, r1
 8000d06:	e666      	b.n	80009d6 <__aeabi_ddiv+0x14e>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	002e      	movs	r6, r5
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	4690      	mov	r8, r2
 8000d10:	4b65      	ldr	r3, [pc, #404]	@ (8000ea8 <__aeabi_ddiv+0x620>)
 8000d12:	e625      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000d14:	002e      	movs	r6, r5
 8000d16:	2101      	movs	r1, #1
 8000d18:	1ac9      	subs	r1, r1, r3
 8000d1a:	2938      	cmp	r1, #56	@ 0x38
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_ddiv+0x498>
 8000d1e:	e61b      	b.n	8000958 <__aeabi_ddiv+0xd0>
 8000d20:	291f      	cmp	r1, #31
 8000d22:	dc7e      	bgt.n	8000e22 <__aeabi_ddiv+0x59a>
 8000d24:	4861      	ldr	r0, [pc, #388]	@ (8000eac <__aeabi_ddiv+0x624>)
 8000d26:	0014      	movs	r4, r2
 8000d28:	4450      	add	r0, sl
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	4082      	lsls	r2, r0
 8000d2e:	4083      	lsls	r3, r0
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	1e50      	subs	r0, r2, #1
 8000d34:	4182      	sbcs	r2, r0
 8000d36:	4323      	orrs	r3, r4
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	465b      	mov	r3, fp
 8000d3c:	40cb      	lsrs	r3, r1
 8000d3e:	0751      	lsls	r1, r2, #29
 8000d40:	d009      	beq.n	8000d56 <__aeabi_ddiv+0x4ce>
 8000d42:	210f      	movs	r1, #15
 8000d44:	4011      	ands	r1, r2
 8000d46:	2904      	cmp	r1, #4
 8000d48:	d005      	beq.n	8000d56 <__aeabi_ddiv+0x4ce>
 8000d4a:	1d11      	adds	r1, r2, #4
 8000d4c:	4291      	cmp	r1, r2
 8000d4e:	4192      	sbcs	r2, r2
 8000d50:	4252      	negs	r2, r2
 8000d52:	189b      	adds	r3, r3, r2
 8000d54:	000a      	movs	r2, r1
 8000d56:	0219      	lsls	r1, r3, #8
 8000d58:	d400      	bmi.n	8000d5c <__aeabi_ddiv+0x4d4>
 8000d5a:	e09b      	b.n	8000e94 <__aeabi_ddiv+0x60c>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2301      	movs	r3, #1
 8000d60:	2400      	movs	r4, #0
 8000d62:	4690      	mov	r8, r2
 8000d64:	e5fc      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000d66:	210f      	movs	r1, #15
 8000d68:	4011      	ands	r1, r2
 8000d6a:	2904      	cmp	r1, #4
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_ddiv+0x4e8>
 8000d6e:	e773      	b.n	8000c58 <__aeabi_ddiv+0x3d0>
 8000d70:	1d11      	adds	r1, r2, #4
 8000d72:	4291      	cmp	r1, r2
 8000d74:	4192      	sbcs	r2, r2
 8000d76:	4252      	negs	r2, r2
 8000d78:	002e      	movs	r6, r5
 8000d7a:	08c9      	lsrs	r1, r1, #3
 8000d7c:	4493      	add	fp, r2
 8000d7e:	e76d      	b.n	8000c5c <__aeabi_ddiv+0x3d4>
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3d01      	subs	r5, #1
 8000d84:	469c      	mov	ip, r3
 8000d86:	4461      	add	r1, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d900      	bls.n	8000d8e <__aeabi_ddiv+0x506>
 8000d8c:	e72c      	b.n	8000be8 <__aeabi_ddiv+0x360>
 8000d8e:	428a      	cmp	r2, r1
 8000d90:	d800      	bhi.n	8000d94 <__aeabi_ddiv+0x50c>
 8000d92:	e729      	b.n	8000be8 <__aeabi_ddiv+0x360>
 8000d94:	1e85      	subs	r5, r0, #2
 8000d96:	4461      	add	r1, ip
 8000d98:	e726      	b.n	8000be8 <__aeabi_ddiv+0x360>
 8000d9a:	9900      	ldr	r1, [sp, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	468c      	mov	ip, r1
 8000da0:	4464      	add	r4, ip
 8000da2:	42a1      	cmp	r1, r4
 8000da4:	d900      	bls.n	8000da8 <__aeabi_ddiv+0x520>
 8000da6:	e72d      	b.n	8000c04 <__aeabi_ddiv+0x37c>
 8000da8:	42a2      	cmp	r2, r4
 8000daa:	d800      	bhi.n	8000dae <__aeabi_ddiv+0x526>
 8000dac:	e72a      	b.n	8000c04 <__aeabi_ddiv+0x37c>
 8000dae:	1e83      	subs	r3, r0, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	e727      	b.n	8000c04 <__aeabi_ddiv+0x37c>
 8000db4:	4287      	cmp	r7, r0
 8000db6:	d000      	beq.n	8000dba <__aeabi_ddiv+0x532>
 8000db8:	e6fe      	b.n	8000bb8 <__aeabi_ddiv+0x330>
 8000dba:	45a9      	cmp	r9, r5
 8000dbc:	d900      	bls.n	8000dc0 <__aeabi_ddiv+0x538>
 8000dbe:	e6fb      	b.n	8000bb8 <__aeabi_ddiv+0x330>
 8000dc0:	e6f5      	b.n	8000bae <__aeabi_ddiv+0x326>
 8000dc2:	42a2      	cmp	r2, r4
 8000dc4:	d800      	bhi.n	8000dc8 <__aeabi_ddiv+0x540>
 8000dc6:	e6b9      	b.n	8000b3c <__aeabi_ddiv+0x2b4>
 8000dc8:	1e83      	subs	r3, r0, #2
 8000dca:	4464      	add	r4, ip
 8000dcc:	e6b6      	b.n	8000b3c <__aeabi_ddiv+0x2b4>
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	d800      	bhi.n	8000dd4 <__aeabi_ddiv+0x54c>
 8000dd2:	e69f      	b.n	8000b14 <__aeabi_ddiv+0x28c>
 8000dd4:	46bc      	mov	ip, r7
 8000dd6:	1e83      	subs	r3, r0, #2
 8000dd8:	4698      	mov	r8, r3
 8000dda:	4461      	add	r1, ip
 8000ddc:	e69a      	b.n	8000b14 <__aeabi_ddiv+0x28c>
 8000dde:	000a      	movs	r2, r1
 8000de0:	4284      	cmp	r4, r0
 8000de2:	d000      	beq.n	8000de6 <__aeabi_ddiv+0x55e>
 8000de4:	e72e      	b.n	8000c44 <__aeabi_ddiv+0x3bc>
 8000de6:	454b      	cmp	r3, r9
 8000de8:	d000      	beq.n	8000dec <__aeabi_ddiv+0x564>
 8000dea:	e72b      	b.n	8000c44 <__aeabi_ddiv+0x3bc>
 8000dec:	0035      	movs	r5, r6
 8000dee:	e72c      	b.n	8000c4a <__aeabi_ddiv+0x3c2>
 8000df0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <__aeabi_ddiv+0x614>)
 8000df2:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb0 <__aeabi_ddiv+0x628>)
 8000df4:	4453      	add	r3, sl
 8000df6:	4592      	cmp	sl, r2
 8000df8:	db43      	blt.n	8000e82 <__aeabi_ddiv+0x5fa>
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4493      	add	fp, r2
 8000e00:	e72c      	b.n	8000c5c <__aeabi_ddiv+0x3d4>
 8000e02:	42ac      	cmp	r4, r5
 8000e04:	d800      	bhi.n	8000e08 <__aeabi_ddiv+0x580>
 8000e06:	e6d7      	b.n	8000bb8 <__aeabi_ddiv+0x330>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	9900      	ldr	r1, [sp, #0]
 8000e10:	444d      	add	r5, r9
 8000e12:	454d      	cmp	r5, r9
 8000e14:	419b      	sbcs	r3, r3
 8000e16:	44e3      	add	fp, ip
 8000e18:	468c      	mov	ip, r1
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	4463      	add	r3, ip
 8000e1e:	18c0      	adds	r0, r0, r3
 8000e20:	e6cc      	b.n	8000bbc <__aeabi_ddiv+0x334>
 8000e22:	201f      	movs	r0, #31
 8000e24:	4240      	negs	r0, r0
 8000e26:	1ac3      	subs	r3, r0, r3
 8000e28:	4658      	mov	r0, fp
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	2920      	cmp	r1, #32
 8000e2e:	d004      	beq.n	8000e3a <__aeabi_ddiv+0x5b2>
 8000e30:	4659      	mov	r1, fp
 8000e32:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <__aeabi_ddiv+0x62c>)
 8000e34:	4453      	add	r3, sl
 8000e36:	4099      	lsls	r1, r3
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	1e53      	subs	r3, r2, #1
 8000e3c:	419a      	sbcs	r2, r3
 8000e3e:	2307      	movs	r3, #7
 8000e40:	0019      	movs	r1, r3
 8000e42:	4302      	orrs	r2, r0
 8000e44:	2400      	movs	r4, #0
 8000e46:	4011      	ands	r1, r2
 8000e48:	4213      	tst	r3, r2
 8000e4a:	d009      	beq.n	8000e60 <__aeabi_ddiv+0x5d8>
 8000e4c:	3308      	adds	r3, #8
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d01d      	beq.n	8000e90 <__aeabi_ddiv+0x608>
 8000e54:	1d13      	adds	r3, r2, #4
 8000e56:	4293      	cmp	r3, r2
 8000e58:	4189      	sbcs	r1, r1
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	4249      	negs	r1, r1
 8000e5e:	0749      	lsls	r1, r1, #29
 8000e60:	08d2      	lsrs	r2, r2, #3
 8000e62:	430a      	orrs	r2, r1
 8000e64:	4690      	mov	r8, r2
 8000e66:	2300      	movs	r3, #0
 8000e68:	e57a      	b.n	8000960 <__aeabi_ddiv+0xd8>
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	9f00      	ldr	r7, [sp, #0]
 8000e6e:	004d      	lsls	r5, r1, #1
 8000e70:	454d      	cmp	r5, r9
 8000e72:	4189      	sbcs	r1, r1
 8000e74:	46bc      	mov	ip, r7
 8000e76:	4249      	negs	r1, r1
 8000e78:	4461      	add	r1, ip
 8000e7a:	46a9      	mov	r9, r5
 8000e7c:	3a02      	subs	r2, #2
 8000e7e:	1864      	adds	r4, r4, r1
 8000e80:	e7ae      	b.n	8000de0 <__aeabi_ddiv+0x558>
 8000e82:	2201      	movs	r2, #1
 8000e84:	4252      	negs	r2, r2
 8000e86:	e746      	b.n	8000d16 <__aeabi_ddiv+0x48e>
 8000e88:	4599      	cmp	r9, r3
 8000e8a:	d3ee      	bcc.n	8000e6a <__aeabi_ddiv+0x5e2>
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	e7aa      	b.n	8000de6 <__aeabi_ddiv+0x55e>
 8000e90:	2100      	movs	r1, #0
 8000e92:	e7e5      	b.n	8000e60 <__aeabi_ddiv+0x5d8>
 8000e94:	0759      	lsls	r1, r3, #29
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	0b1c      	lsrs	r4, r3, #12
 8000e9a:	e7e1      	b.n	8000e60 <__aeabi_ddiv+0x5d8>
 8000e9c:	000003ff 	.word	0x000003ff
 8000ea0:	feffffff 	.word	0xfeffffff
 8000ea4:	000007fe 	.word	0x000007fe
 8000ea8:	000007ff 	.word	0x000007ff
 8000eac:	0000041e 	.word	0x0000041e
 8000eb0:	fffffc02 	.word	0xfffffc02
 8000eb4:	0000043e 	.word	0x0000043e

08000eb8 <__aeabi_d2iz>:
 8000eb8:	000b      	movs	r3, r1
 8000eba:	0002      	movs	r2, r0
 8000ebc:	b570      	push	{r4, r5, r6, lr}
 8000ebe:	4d16      	ldr	r5, [pc, #88]	@ (8000f18 <__aeabi_d2iz+0x60>)
 8000ec0:	030c      	lsls	r4, r1, #12
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	0049      	lsls	r1, r1, #1
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	9200      	str	r2, [sp, #0]
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d49      	lsrs	r1, r1, #21
 8000ed0:	0fde      	lsrs	r6, r3, #31
 8000ed2:	42a9      	cmp	r1, r5
 8000ed4:	dd04      	ble.n	8000ee0 <__aeabi_d2iz+0x28>
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <__aeabi_d2iz+0x64>)
 8000ed8:	4281      	cmp	r1, r0
 8000eda:	dd03      	ble.n	8000ee4 <__aeabi_d2iz+0x2c>
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <__aeabi_d2iz+0x68>)
 8000ede:	18f0      	adds	r0, r6, r3
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	2080      	movs	r0, #128	@ 0x80
 8000ee6:	0340      	lsls	r0, r0, #13
 8000ee8:	4320      	orrs	r0, r4
 8000eea:	4c0e      	ldr	r4, [pc, #56]	@ (8000f24 <__aeabi_d2iz+0x6c>)
 8000eec:	1a64      	subs	r4, r4, r1
 8000eee:	2c1f      	cmp	r4, #31
 8000ef0:	dd08      	ble.n	8000f04 <__aeabi_d2iz+0x4c>
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <__aeabi_d2iz+0x70>)
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	0003      	movs	r3, r0
 8000efa:	4258      	negs	r0, r3
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d1ef      	bne.n	8000ee0 <__aeabi_d2iz+0x28>
 8000f00:	0018      	movs	r0, r3
 8000f02:	e7ed      	b.n	8000ee0 <__aeabi_d2iz+0x28>
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <__aeabi_d2iz+0x74>)
 8000f06:	9a00      	ldr	r2, [sp, #0]
 8000f08:	469c      	mov	ip, r3
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	4461      	add	r1, ip
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	40e2      	lsrs	r2, r4
 8000f12:	4313      	orrs	r3, r2
 8000f14:	e7f1      	b.n	8000efa <__aeabi_d2iz+0x42>
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	000003fe 	.word	0x000003fe
 8000f1c:	0000041d 	.word	0x0000041d
 8000f20:	7fffffff 	.word	0x7fffffff
 8000f24:	00000433 	.word	0x00000433
 8000f28:	00000413 	.word	0x00000413
 8000f2c:	fffffbed 	.word	0xfffffbed

08000f30 <__aeabi_ui2d>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	1e04      	subs	r4, r0, #0
 8000f34:	d010      	beq.n	8000f58 <__aeabi_ui2d+0x28>
 8000f36:	f000 f81f 	bl	8000f78 <__clzsi2>
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <__aeabi_ui2d+0x44>)
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	055b      	lsls	r3, r3, #21
 8000f40:	0d5b      	lsrs	r3, r3, #21
 8000f42:	280a      	cmp	r0, #10
 8000f44:	dc0f      	bgt.n	8000f66 <__aeabi_ui2d+0x36>
 8000f46:	220b      	movs	r2, #11
 8000f48:	0021      	movs	r1, r4
 8000f4a:	1a12      	subs	r2, r2, r0
 8000f4c:	40d1      	lsrs	r1, r2
 8000f4e:	3015      	adds	r0, #21
 8000f50:	030a      	lsls	r2, r1, #12
 8000f52:	4084      	lsls	r4, r0
 8000f54:	0b12      	lsrs	r2, r2, #12
 8000f56:	e001      	b.n	8000f5c <__aeabi_ui2d+0x2c>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	051b      	lsls	r3, r3, #20
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	0020      	movs	r0, r4
 8000f62:	0019      	movs	r1, r3
 8000f64:	bd10      	pop	{r4, pc}
 8000f66:	0022      	movs	r2, r4
 8000f68:	380b      	subs	r0, #11
 8000f6a:	4082      	lsls	r2, r0
 8000f6c:	0312      	lsls	r2, r2, #12
 8000f6e:	2400      	movs	r4, #0
 8000f70:	0b12      	lsrs	r2, r2, #12
 8000f72:	e7f3      	b.n	8000f5c <__aeabi_ui2d+0x2c>
 8000f74:	0000041e 	.word	0x0000041e

08000f78 <__clzsi2>:
 8000f78:	211c      	movs	r1, #28
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	041b      	lsls	r3, r3, #16
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d301      	bcc.n	8000f86 <__clzsi2+0xe>
 8000f82:	0c00      	lsrs	r0, r0, #16
 8000f84:	3910      	subs	r1, #16
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	4298      	cmp	r0, r3
 8000f8a:	d301      	bcc.n	8000f90 <__clzsi2+0x18>
 8000f8c:	0a00      	lsrs	r0, r0, #8
 8000f8e:	3908      	subs	r1, #8
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	4298      	cmp	r0, r3
 8000f94:	d301      	bcc.n	8000f9a <__clzsi2+0x22>
 8000f96:	0900      	lsrs	r0, r0, #4
 8000f98:	3904      	subs	r1, #4
 8000f9a:	a202      	add	r2, pc, #8	@ (adr r2, 8000fa4 <__clzsi2+0x2c>)
 8000f9c:	5c10      	ldrb	r0, [r2, r0]
 8000f9e:	1840      	adds	r0, r0, r1
 8000fa0:	4770      	bx	lr
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	02020304 	.word	0x02020304
 8000fa8:	01010101 	.word	0x01010101
	...

08000fb4 <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM22_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if(&htim6 == htim){
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d11e      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x4e>
		SEG++;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fd4:	701a      	strb	r2, [r3, #0]
		if(SEG >= 60) SEG = 0;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fde:	dd02      	ble.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x32>
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]

		if (FLAG_TO_COUNT){
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x4e>
			COUNT_FLAG++;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001000:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	200000c4 	.word	0x200000c4
 8001010:	20000164 	.word	0x20000164
 8001014:	20000165 	.word	0x20000165
 8001018:	20000166 	.word	0x20000166

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f001 f86c 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f844 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 fa2c 	bl	8001484 <MX_GPIO_Init>
  MX_ADC_Init();
 800102c:	f000 f890 	bl	8001150 <MX_ADC_Init>
  MX_TIM2_Init();
 8001030:	f000 f8f4 	bl	800121c <MX_TIM2_Init>
  MX_TIM22_Init();
 8001034:	f000 f9c2 	bl	80013bc <MX_TIM22_Init>
  MX_TIM6_Init();
 8001038:	f000 f982 	bl	8001340 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <main+0x84>)
 800103e:	2100      	movs	r1, #0
 8001040:	0018      	movs	r0, r3
 8001042:	f002 ff4d 	bl	8003ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001046:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <main+0x84>)
 8001048:	2108      	movs	r1, #8
 800104a:	0018      	movs	r0, r3
 800104c:	f002 ff48 	bl	8003ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <main+0x84>)
 8001052:	210c      	movs	r1, #12
 8001054:	0018      	movs	r0, r3
 8001056:	f002 ff43 	bl	8003ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim22, TIM_CHANNEL_ALL);
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <main+0x88>)
 800105c:	213c      	movs	r1, #60	@ 0x3c
 800105e:	0018      	movs	r0, r3
 8001060:	f003 f86a 	bl	8004138 <HAL_TIM_Encoder_Start>

  TIM2->CCR1 = 0;
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	@ 0x34

  TIM2->CCR3 = TIM21->ARR / 2;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <main+0x8c>)
 800106e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	05db      	lsls	r3, r3, #23
 8001074:	0852      	lsrs	r2, r2, #1
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = 0;
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	2200      	movs	r2, #0
 800107e:	641a      	str	r2, [r3, #64]	@ 0x40

  STARTUP_LCD();
 8001080:	f000 fcac 	bl	80019dc <STARTUP_LCD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  KEYBOARD_CHECK(PRESS_GPIO_Port, PRESS_Pin);
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <main+0x90>)
 800108a:	0019      	movs	r1, r3
 800108c:	0010      	movs	r0, r2
 800108e:	f000 fe27 	bl	8001ce0 <KEYBOARD_CHECK>

	  MENU_CONTROL();
 8001092:	f000 fa91 	bl	80015b8 <MENU_CONTROL>
	  ENCODER_READER();
 8001096:	f000 fc39 	bl	800190c <ENCODER_READER>
	  KEYBOARD_CHECK(PRESS_GPIO_Port, PRESS_Pin);
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	e7f2      	b.n	8001084 <main+0x68>
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	20000084 	.word	0x20000084
 80010a4:	20000104 	.word	0x20000104
 80010a8:	40010800 	.word	0x40010800
 80010ac:	50000400 	.word	0x50000400

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b095      	sub	sp, #84	@ 0x54
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	2418      	movs	r4, #24
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	0018      	movs	r0, r3
 80010bc:	2338      	movs	r3, #56	@ 0x38
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f003 fda9 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	0018      	movs	r0, r3
 80010ca:	2314      	movs	r3, #20
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f003 fda2 	bl	8004c18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <SystemClock_Config+0x98>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <SystemClock_Config+0x9c>)
 80010da:	401a      	ands	r2, r3
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <SystemClock_Config+0x98>)
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	0109      	lsls	r1, r1, #4
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	0021      	movs	r1, r4
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2202      	movs	r2, #2
 80010ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2210      	movs	r2, #16
 80010f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	187b      	adds	r3, r7, r1
 8001102:	0018      	movs	r0, r3
 8001104:	f002 f886 	bl	8003214 <HAL_RCC_OscConfig>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800110c:	f000 fe40 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	220f      	movs	r2, #15
 8001114:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2280      	movs	r2, #128	@ 0x80
 8001120:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2100      	movs	r1, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f002 fc32 	bl	800399c <HAL_RCC_ClockConfig>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800113c:	f000 fe28 	bl	8001d90 <Error_Handler>
  }
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b015      	add	sp, #84	@ 0x54
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	40007000 	.word	0x40007000
 800114c:	ffffe7ff 	.word	0xffffe7ff

08001150 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	003b      	movs	r3, r7
 8001158:	0018      	movs	r0, r3
 800115a:	2308      	movs	r3, #8
 800115c:	001a      	movs	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	f003 fd5a 	bl	8004c18 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <MX_ADC_Init+0xc0>)
 8001166:	4a2b      	ldr	r2, [pc, #172]	@ (8001214 <MX_ADC_Init+0xc4>)
 8001168:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_ADC_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <MX_ADC_Init+0xc0>)
 8001172:	2280      	movs	r2, #128	@ 0x80
 8001174:	05d2      	lsls	r2, r2, #23
 8001176:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <MX_ADC_Init+0xc0>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_ADC_Init+0xc0>)
 8001180:	2207      	movs	r2, #7
 8001182:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_ADC_Init+0xc0>)
 8001186:	2201      	movs	r2, #1
 8001188:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_ADC_Init+0xc0>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_ADC_Init+0xc0>)
 8001192:	2220      	movs	r2, #32
 8001194:	2101      	movs	r1, #1
 8001196:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_ADC_Init+0xc0>)
 800119a:	2221      	movs	r2, #33	@ 0x21
 800119c:	2100      	movs	r1, #0
 800119e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011a8:	22c2      	movs	r2, #194	@ 0xc2
 80011aa:	32ff      	adds	r2, #255	@ 0xff
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011b0:	222c      	movs	r2, #44	@ 0x2c
 80011b2:	2100      	movs	r1, #0
 80011b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 f824 	bl	8002224 <HAL_ADC_Init>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80011e0:	f000 fdd6 	bl	8001d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e4:	003b      	movs	r3, r7
 80011e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <MX_ADC_Init+0xc8>)
 80011e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80011ea:	003b      	movs	r3, r7
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	0152      	lsls	r2, r2, #5
 80011f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011f2:	003a      	movs	r2, r7
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_ADC_Init+0xc0>)
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 fb85 	bl	8002908 <HAL_ADC_ConfigChannel>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001202:	f000 fdc5 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	20000028 	.word	0x20000028
 8001214:	40012400 	.word	0x40012400
 8001218:	04000002 	.word	0x04000002

0800121c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	2318      	movs	r3, #24
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	0018      	movs	r0, r3
 8001228:	2310      	movs	r3, #16
 800122a:	001a      	movs	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f003 fcf3 	bl	8004c18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	2310      	movs	r3, #16
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	0018      	movs	r0, r3
 8001238:	2308      	movs	r3, #8
 800123a:	001a      	movs	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f003 fceb 	bl	8004c18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	003b      	movs	r3, r7
 8001244:	0018      	movs	r0, r3
 8001246:	2310      	movs	r3, #16
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f003 fce4 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <MX_TIM2_Init+0x120>)
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	05d2      	lsls	r2, r2, #23
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001258:	4b38      	ldr	r3, [pc, #224]	@ (800133c <MX_TIM2_Init+0x120>)
 800125a:	2207      	movs	r2, #7
 800125c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b37      	ldr	r3, [pc, #220]	@ (800133c <MX_TIM2_Init+0x120>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001264:	4b35      	ldr	r3, [pc, #212]	@ (800133c <MX_TIM2_Init+0x120>)
 8001266:	22f4      	movs	r2, #244	@ 0xf4
 8001268:	32ff      	adds	r2, #255	@ 0xff
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <MX_TIM2_Init+0x120>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001272:	4b32      	ldr	r3, [pc, #200]	@ (800133c <MX_TIM2_Init+0x120>)
 8001274:	2280      	movs	r2, #128	@ 0x80
 8001276:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001278:	4b30      	ldr	r3, [pc, #192]	@ (800133c <MX_TIM2_Init+0x120>)
 800127a:	0018      	movs	r0, r3
 800127c:	f002 fd5c 	bl	8003d38 <HAL_TIM_Base_Init>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001284:	f000 fd84 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	2118      	movs	r1, #24
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2280      	movs	r2, #128	@ 0x80
 800128e:	0152      	lsls	r2, r2, #5
 8001290:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001292:	187a      	adds	r2, r7, r1
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_TIM2_Init+0x120>)
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f003 f955 	bl	8004548 <HAL_TIM_ConfigClockSource>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80012a2:	f000 fd75 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <MX_TIM2_Init+0x120>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f002 fdd1 	bl	8003e50 <HAL_TIM_PWM_Init>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012b2:	f000 fd6d 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2110      	movs	r1, #16
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c4:	187a      	adds	r2, r7, r1
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_TIM2_Init+0x120>)
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f003 fc4c 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80012d4:	f000 fd5c 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	003b      	movs	r3, r7
 80012da:	2260      	movs	r2, #96	@ 0x60
 80012dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012de:	003b      	movs	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	003b      	movs	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	0039      	movs	r1, r7
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_TIM2_Init+0x120>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f003 f860 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001300:	f000 fd46 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001304:	0039      	movs	r1, r7
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <MX_TIM2_Init+0x120>)
 8001308:	2208      	movs	r2, #8
 800130a:	0018      	movs	r0, r3
 800130c:	f003 f856 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001314:	f000 fd3c 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001318:	0039      	movs	r1, r7
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_TIM2_Init+0x120>)
 800131c:	220c      	movs	r2, #12
 800131e:	0018      	movs	r0, r3
 8001320:	f003 f84c 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001328:	f000 fd32 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <MX_TIM2_Init+0x120>)
 800132e:	0018      	movs	r0, r3
 8001330:	f000 fe0a 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b00a      	add	sp, #40	@ 0x28
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000084 	.word	0x20000084

08001340 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	003b      	movs	r3, r7
 8001348:	0018      	movs	r0, r3
 800134a:	2308      	movs	r3, #8
 800134c:	001a      	movs	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	f003 fc62 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_TIM6_Init+0x6c>)
 8001356:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <MX_TIM6_Init+0x70>)
 8001358:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_TIM6_Init+0x6c>)
 800135c:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <MX_TIM6_Init+0x74>)
 800135e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_TIM6_Init+0x6c>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_TIM6_Init+0x6c>)
 8001368:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <MX_TIM6_Init+0x78>)
 800136a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_TIM6_Init+0x6c>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_TIM6_Init+0x6c>)
 8001374:	0018      	movs	r0, r3
 8001376:	f002 fcdf 	bl	8003d38 <HAL_TIM_Base_Init>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800137e:	f000 fd07 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	003b      	movs	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	003b      	movs	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800138e:	003a      	movs	r2, r7
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_TIM6_Init+0x6c>)
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f003 fbe7 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800139e:	f000 fcf7 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	200000c4 	.word	0x200000c4
 80013b0:	40001000 	.word	0x40001000
 80013b4:	00001f3f 	.word	0x00001f3f
 80013b8:	000003e7 	.word	0x000003e7

080013bc <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08d      	sub	sp, #52	@ 0x34
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c2:	240c      	movs	r4, #12
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	0018      	movs	r0, r3
 80013c8:	2324      	movs	r3, #36	@ 0x24
 80013ca:	001a      	movs	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f003 fc23 	bl	8004c18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	0018      	movs	r0, r3
 80013d6:	2308      	movs	r3, #8
 80013d8:	001a      	movs	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	f003 fc1c 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <MX_TIM22_Init+0xbc>)
 80013e2:	4a26      	ldr	r2, [pc, #152]	@ (800147c <MX_TIM22_Init+0xc0>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <MX_TIM22_Init+0xbc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_TIM22_Init+0xbc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0xFFFF;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_TIM22_Init+0xbc>)
 80013f4:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <MX_TIM22_Init+0xc4>)
 80013f6:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM22_Init+0xbc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM22_Init+0xbc>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001404:	0021      	movs	r1, r4
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2203      	movs	r2, #3
 800140a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800140c:	187b      	adds	r3, r7, r1
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2201      	movs	r2, #1
 8001416:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 8;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2208      	movs	r2, #8
 8001422:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2201      	movs	r2, #1
 800142e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 8;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2208      	movs	r2, #8
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim22, &sConfig) != HAL_OK)
 800143c:	187a      	adds	r2, r7, r1
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_TIM22_Init+0xbc>)
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f002 fdd8 	bl	8003ff8 <HAL_TIM_Encoder_Init>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM22_Init+0x94>
  {
    Error_Handler();
 800144c:	f000 fca0 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_TIM22_Init+0xbc>)
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f003 fb80 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM22_Init+0xb4>
  {
    Error_Handler();
 800146c:	f000 fc90 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b00d      	add	sp, #52	@ 0x34
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	20000104 	.word	0x20000104
 800147c:	40011400 	.word	0x40011400
 8001480:	0000ffff 	.word	0x0000ffff

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	@ 0x24
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	240c      	movs	r4, #12
 800148c:	193b      	adds	r3, r7, r4
 800148e:	0018      	movs	r0, r3
 8001490:	2314      	movs	r3, #20
 8001492:	001a      	movs	r2, r3
 8001494:	2100      	movs	r1, #0
 8001496:	f003 fbbf 	bl	8004c18 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b44      	ldr	r3, [pc, #272]	@ (80015ac <MX_GPIO_Init+0x128>)
 800149c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800149e:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014a6:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014b8:	2102      	movs	r1, #2
 80014ba:	430a      	orrs	r2, r1
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014be:	4b3b      	ldr	r3, [pc, #236]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4b38      	ldr	r3, [pc, #224]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014d0:	2104      	movs	r1, #4
 80014d2:	430a      	orrs	r2, r1
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014d6:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <MX_GPIO_Init+0x128>)
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	2204      	movs	r2, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|D4_Pin|EN_Pin, GPIO_PIN_RESET);
 80014e2:	23c8      	movs	r3, #200	@ 0xc8
 80014e4:	0099      	lsls	r1, r3, #2
 80014e6:	23a0      	movs	r3, #160	@ 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	2200      	movs	r2, #0
 80014ec:	0018      	movs	r0, r3
 80014ee:	f001 fe58 	bl	80031a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <MX_GPIO_Init+0x12c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	2180      	movs	r1, #128	@ 0x80
 80014f8:	0018      	movs	r0, r3
 80014fa:	f001 fe52 	bl	80031a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_ENGINE_Pin|D7_Pin|RS_Pin|D5_Pin, GPIO_PIN_RESET);
 80014fe:	239a      	movs	r3, #154	@ 0x9a
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	482c      	ldr	r0, [pc, #176]	@ (80015b4 <MX_GPIO_Init+0x130>)
 8001504:	2200      	movs	r2, #0
 8001506:	0019      	movs	r1, r3
 8001508:	f001 fe4b 	bl	80031a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D6_Pin D4_Pin EN_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D4_Pin|EN_Pin;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	22c8      	movs	r2, #200	@ 0xc8
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	193b      	adds	r3, r7, r4
 8001516:	2201      	movs	r2, #1
 8001518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	193b      	adds	r3, r7, r4
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	193b      	adds	r3, r7, r4
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	193a      	adds	r2, r7, r4
 8001528:	23a0      	movs	r3, #160	@ 0xa0
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f001 fca4 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RW_Pin */
  GPIO_InitStruct.Pin = RW_Pin;
 8001534:	193b      	adds	r3, r7, r4
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	193b      	adds	r3, r7, r4
 800153c:	2201      	movs	r2, #1
 800153e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	193b      	adds	r3, r7, r4
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	193b      	adds	r3, r7, r4
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 800154c:	193b      	adds	r3, r7, r4
 800154e:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <MX_GPIO_Init+0x12c>)
 8001550:	0019      	movs	r1, r3
 8001552:	0010      	movs	r0, r2
 8001554:	f001 fc92 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_ENGINE_Pin D7_Pin RS_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_ENGINE_Pin|D7_Pin|RS_Pin|D5_Pin;
 8001558:	0021      	movs	r1, r4
 800155a:	187b      	adds	r3, r7, r1
 800155c:	229a      	movs	r2, #154	@ 0x9a
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	000c      	movs	r4, r1
 8001564:	193b      	adds	r3, r7, r4
 8001566:	2201      	movs	r2, #1
 8001568:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	193b      	adds	r3, r7, r4
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	193b      	adds	r3, r7, r4
 8001578:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <MX_GPIO_Init+0x130>)
 800157a:	0019      	movs	r1, r3
 800157c:	0010      	movs	r0, r2
 800157e:	f001 fc7d 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PRESS_Pin */
  GPIO_InitStruct.Pin = PRESS_Pin;
 8001582:	0021      	movs	r1, r4
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2280      	movs	r2, #128	@ 0x80
 8001588:	0052      	lsls	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2201      	movs	r2, #1
 8001596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PRESS_GPIO_Port, &GPIO_InitStruct);
 8001598:	187b      	adds	r3, r7, r1
 800159a:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <MX_GPIO_Init+0x130>)
 800159c:	0019      	movs	r1, r3
 800159e:	0010      	movs	r0, r2
 80015a0:	f001 fc6c 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b009      	add	sp, #36	@ 0x24
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	50000800 	.word	0x50000800
 80015b4:	50000400 	.word	0x50000400

080015b8 <MENU_CONTROL>:

/* USER CODE BEGIN 4 */

void MENU_CONTROL(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	MANAGER_LCD(0x80, INSTRUCTION);
 80015bc:	2100      	movs	r1, #0
 80015be:	2080      	movs	r0, #128	@ 0x80
 80015c0:	f000 fa4e 	bl	8001a60 <MANAGER_LCD>

	switch(ATUAL_MENU){
 80015c4:	4bab      	ldr	r3, [pc, #684]	@ (8001874 <MENU_CONTROL+0x2bc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d100      	bne.n	80015d0 <MENU_CONTROL+0x18>
 80015ce:	e12a      	b.n	8001826 <MENU_CONTROL+0x26e>
 80015d0:	dd00      	ble.n	80015d4 <MENU_CONTROL+0x1c>
 80015d2:	e14c      	b.n	800186e <MENU_CONTROL+0x2b6>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d100      	bne.n	80015da <MENU_CONTROL+0x22>
 80015d8:	e102      	b.n	80017e0 <MENU_CONTROL+0x228>
 80015da:	dd00      	ble.n	80015de <MENU_CONTROL+0x26>
 80015dc:	e147      	b.n	800186e <MENU_CONTROL+0x2b6>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <MENU_CONTROL+0x32>
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d100      	bne.n	80015e8 <MENU_CONTROL+0x30>
 80015e6:	e0c4      	b.n	8001772 <MENU_CONTROL+0x1ba>
			HAL_ADC_Stop(&hadc);

			TIM2->CCR4 = VALUE;
			break;
	}
}
 80015e8:	e141      	b.n	800186e <MENU_CONTROL+0x2b6>
			if (CTR == 1 || CTR == -1)  OP_CONTROL += CTR;
 80015ea:	4ba3      	ldr	r3, [pc, #652]	@ (8001878 <MENU_CONTROL+0x2c0>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d004      	beq.n	80015fe <MENU_CONTROL+0x46>
 80015f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001878 <MENU_CONTROL+0x2c0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	d10c      	bne.n	8001618 <MENU_CONTROL+0x60>
 80015fe:	4b9f      	ldr	r3, [pc, #636]	@ (800187c <MENU_CONTROL+0x2c4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b9c      	ldr	r3, [pc, #624]	@ (8001878 <MENU_CONTROL+0x2c0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b25b      	sxtb	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	18d3      	adds	r3, r2, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b25a      	sxtb	r2, r3
 8001614:	4b99      	ldr	r3, [pc, #612]	@ (800187c <MENU_CONTROL+0x2c4>)
 8001616:	701a      	strb	r2, [r3, #0]
			if(OP_CONTROL < 0) OP_CONTROL = 0;
 8001618:	4b98      	ldr	r3, [pc, #608]	@ (800187c <MENU_CONTROL+0x2c4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b25b      	sxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	da02      	bge.n	8001628 <MENU_CONTROL+0x70>
 8001622:	4b96      	ldr	r3, [pc, #600]	@ (800187c <MENU_CONTROL+0x2c4>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
			switch(OP_CONTROL){
 8001628:	4b94      	ldr	r3, [pc, #592]	@ (800187c <MENU_CONTROL+0x2c4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	2b03      	cmp	r3, #3
 8001630:	d035      	beq.n	800169e <MENU_CONTROL+0xe6>
 8001632:	dc43      	bgt.n	80016bc <MENU_CONTROL+0x104>
 8001634:	2b02      	cmp	r3, #2
 8001636:	d023      	beq.n	8001680 <MENU_CONTROL+0xc8>
 8001638:	dc40      	bgt.n	80016bc <MENU_CONTROL+0x104>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <MENU_CONTROL+0x8c>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00f      	beq.n	8001662 <MENU_CONTROL+0xaa>
 8001642:	e03b      	b.n	80016bc <MENU_CONTROL+0x104>
					DRAW_CHAR_LCD(DARW, 0x80);
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	207e      	movs	r0, #126	@ 0x7e
 8001648:	f000 f946 	bl	80018d8 <DRAW_CHAR_LCD>
					SEND_MESSAGE(" OP. 01        ", 0x81);
 800164c:	4b8c      	ldr	r3, [pc, #560]	@ (8001880 <MENU_CONTROL+0x2c8>)
 800164e:	2181      	movs	r1, #129	@ 0x81
 8001650:	0018      	movs	r0, r3
 8001652:	f000 f9df 	bl	8001a14 <SEND_MESSAGE>
					SEND_MESSAGE("  OP. 02       ", 0xC0);
 8001656:	4b8b      	ldr	r3, [pc, #556]	@ (8001884 <MENU_CONTROL+0x2cc>)
 8001658:	21c0      	movs	r1, #192	@ 0xc0
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f9da 	bl	8001a14 <SEND_MESSAGE>
					break;
 8001660:	e02c      	b.n	80016bc <MENU_CONTROL+0x104>
					DRAW_CHAR_LCD(DARW, 0xC0);
 8001662:	21c0      	movs	r1, #192	@ 0xc0
 8001664:	207e      	movs	r0, #126	@ 0x7e
 8001666:	f000 f937 	bl	80018d8 <DRAW_CHAR_LCD>
					SEND_MESSAGE("  OP. 01       ", 0x80);
 800166a:	4b87      	ldr	r3, [pc, #540]	@ (8001888 <MENU_CONTROL+0x2d0>)
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	0018      	movs	r0, r3
 8001670:	f000 f9d0 	bl	8001a14 <SEND_MESSAGE>
					SEND_MESSAGE(" OP. 02        ", 0xC1);
 8001674:	4b85      	ldr	r3, [pc, #532]	@ (800188c <MENU_CONTROL+0x2d4>)
 8001676:	21c1      	movs	r1, #193	@ 0xc1
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f9cb 	bl	8001a14 <SEND_MESSAGE>
					break;
 800167e:	e01d      	b.n	80016bc <MENU_CONTROL+0x104>
					DRAW_CHAR_LCD(DARW, 0x80);
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	207e      	movs	r0, #126	@ 0x7e
 8001684:	f000 f928 	bl	80018d8 <DRAW_CHAR_LCD>
					SEND_MESSAGE(" CTR. BRILHO    ", 0x81);
 8001688:	4b81      	ldr	r3, [pc, #516]	@ (8001890 <MENU_CONTROL+0x2d8>)
 800168a:	2181      	movs	r1, #129	@ 0x81
 800168c:	0018      	movs	r0, r3
 800168e:	f000 f9c1 	bl	8001a14 <SEND_MESSAGE>
					SEND_MESSAGE("  CTR. PONTE H  ", 0xC0);
 8001692:	4b80      	ldr	r3, [pc, #512]	@ (8001894 <MENU_CONTROL+0x2dc>)
 8001694:	21c0      	movs	r1, #192	@ 0xc0
 8001696:	0018      	movs	r0, r3
 8001698:	f000 f9bc 	bl	8001a14 <SEND_MESSAGE>
					break;
 800169c:	e00e      	b.n	80016bc <MENU_CONTROL+0x104>
					DRAW_CHAR_LCD(DARW, 0xC0);
 800169e:	21c0      	movs	r1, #192	@ 0xc0
 80016a0:	207e      	movs	r0, #126	@ 0x7e
 80016a2:	f000 f919 	bl	80018d8 <DRAW_CHAR_LCD>
					SEND_MESSAGE("  CTR. BRILHO   ", 0x80);
 80016a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001898 <MENU_CONTROL+0x2e0>)
 80016a8:	2180      	movs	r1, #128	@ 0x80
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 f9b2 	bl	8001a14 <SEND_MESSAGE>
					SEND_MESSAGE(" CTR. PONTE H   ", 0xC1);
 80016b0:	4b7a      	ldr	r3, [pc, #488]	@ (800189c <MENU_CONTROL+0x2e4>)
 80016b2:	21c1      	movs	r1, #193	@ 0xc1
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f9ad 	bl	8001a14 <SEND_MESSAGE>
					break;
 80016ba:	46c0      	nop			@ (mov r8, r8)
			if(OP_CONTROL >= 4) OP_CONTROL = 3;
 80016bc:	4b6f      	ldr	r3, [pc, #444]	@ (800187c <MENU_CONTROL+0x2c4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	dd02      	ble.n	80016cc <MENU_CONTROL+0x114>
 80016c6:	4b6d      	ldr	r3, [pc, #436]	@ (800187c <MENU_CONTROL+0x2c4>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	701a      	strb	r2, [r3, #0]
			if((OP_CONTROL == 2) && PRESSED == 1){
 80016cc:	4b6b      	ldr	r3, [pc, #428]	@ (800187c <MENU_CONTROL+0x2c4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d120      	bne.n	8001718 <MENU_CONTROL+0x160>
 80016d6:	4b72      	ldr	r3, [pc, #456]	@ (80018a0 <MENU_CONTROL+0x2e8>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d11b      	bne.n	8001718 <MENU_CONTROL+0x160>
				ATUAL_MENU = 1;
 80016e0:	4b64      	ldr	r3, [pc, #400]	@ (8001874 <MENU_CONTROL+0x2bc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
				SEND_MESSAGE("   CONTROLE DE   ", 0x80);
 80016e6:	4b6f      	ldr	r3, [pc, #444]	@ (80018a4 <MENU_CONTROL+0x2ec>)
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 f992 	bl	8001a14 <SEND_MESSAGE>
				SEND_MESSAGE("     BRILHO      ", 0xC0);
 80016f0:	4b6d      	ldr	r3, [pc, #436]	@ (80018a8 <MENU_CONTROL+0x2f0>)
 80016f2:	21c0      	movs	r1, #192	@ 0xc0
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f98d 	bl	8001a14 <SEND_MESSAGE>
				HAL_Delay(2000);
 80016fa:	23fa      	movs	r3, #250	@ 0xfa
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	0018      	movs	r0, r3
 8001700:	f000 fd6c 	bl	80021dc <HAL_Delay>
				SEND_MESSAGE("   MANIPULE O  ", 0x80);
 8001704:	4b69      	ldr	r3, [pc, #420]	@ (80018ac <MENU_CONTROL+0x2f4>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	0018      	movs	r0, r3
 800170a:	f000 f983 	bl	8001a14 <SEND_MESSAGE>
				SEND_MESSAGE("  POTENCIOMETRO ", 0xC0);
 800170e:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <MENU_CONTROL+0x2f8>)
 8001710:	21c0      	movs	r1, #192	@ 0xc0
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f97e 	bl	8001a14 <SEND_MESSAGE>
			if((OP_CONTROL == 3) && PRESSED == 1){
 8001718:	4b58      	ldr	r3, [pc, #352]	@ (800187c <MENU_CONTROL+0x2c4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b25b      	sxtb	r3, r3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d000      	beq.n	8001724 <MENU_CONTROL+0x16c>
 8001722:	e0a3      	b.n	800186c <MENU_CONTROL+0x2b4>
 8001724:	4b5e      	ldr	r3, [pc, #376]	@ (80018a0 <MENU_CONTROL+0x2e8>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d000      	beq.n	8001730 <MENU_CONTROL+0x178>
 800172e:	e09d      	b.n	800186c <MENU_CONTROL+0x2b4>
				ATUAL_MENU = 2;
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <MENU_CONTROL+0x2bc>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
				SEND_MESSAGE("   CONTROLE DA  ", 0x80);
 8001736:	4b5f      	ldr	r3, [pc, #380]	@ (80018b4 <MENU_CONTROL+0x2fc>)
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	0018      	movs	r0, r3
 800173c:	f000 f96a 	bl	8001a14 <SEND_MESSAGE>
				SEND_MESSAGE("     PONTE H      ", 0xC0);
 8001740:	4b5d      	ldr	r3, [pc, #372]	@ (80018b8 <MENU_CONTROL+0x300>)
 8001742:	21c0      	movs	r1, #192	@ 0xc0
 8001744:	0018      	movs	r0, r3
 8001746:	f000 f965 	bl	8001a14 <SEND_MESSAGE>
				HAL_Delay(2000);
 800174a:	23fa      	movs	r3, #250	@ 0xfa
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	0018      	movs	r0, r3
 8001750:	f000 fd44 	bl	80021dc <HAL_Delay>
				SEND_MESSAGE("   MANIPULE O  ", 0x80);
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <MENU_CONTROL+0x2f4>)
 8001756:	2180      	movs	r1, #128	@ 0x80
 8001758:	0018      	movs	r0, r3
 800175a:	f000 f95b 	bl	8001a14 <SEND_MESSAGE>
				SEND_MESSAGE("  POTENCIOMETRO ", 0xC0);
 800175e:	4b54      	ldr	r3, [pc, #336]	@ (80018b0 <MENU_CONTROL+0x2f8>)
 8001760:	21c0      	movs	r1, #192	@ 0xc0
 8001762:	0018      	movs	r0, r3
 8001764:	f000 f956 	bl	8001a14 <SEND_MESSAGE>
				HAL_TIM_Base_Start_IT(&htim6);
 8001768:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <MENU_CONTROL+0x304>)
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fb24 	bl	8003db8 <HAL_TIM_Base_Start_IT>
			break;
 8001770:	e07c      	b.n	800186c <MENU_CONTROL+0x2b4>
			HAL_ADC_Start(&hadc);
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001774:	0018      	movs	r0, r3
 8001776:	f000 fec9 	bl	800250c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 100);
 800177a:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <MENU_CONTROL+0x308>)
 800177c:	2164      	movs	r1, #100	@ 0x64
 800177e:	0018      	movs	r0, r3
 8001780:	f000 ff58 	bl	8002634 <HAL_ADC_PollForConversion>
			VALUE = HAL_ADC_GetValue(&hadc) / 40.95;
 8001784:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001786:	0018      	movs	r0, r3
 8001788:	f000 fff0 	bl	800276c <HAL_ADC_GetValue>
 800178c:	0003      	movs	r3, r0
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff fbce 	bl	8000f30 <__aeabi_ui2d>
 8001794:	4a4b      	ldr	r2, [pc, #300]	@ (80018c4 <MENU_CONTROL+0x30c>)
 8001796:	4b4c      	ldr	r3, [pc, #304]	@ (80018c8 <MENU_CONTROL+0x310>)
 8001798:	f7ff f876 	bl	8000888 <__aeabi_ddiv>
 800179c:	0002      	movs	r2, r0
 800179e:	000b      	movs	r3, r1
 80017a0:	0010      	movs	r0, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	f7ff fb88 	bl	8000eb8 <__aeabi_d2iz>
 80017a8:	0003      	movs	r3, r0
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <MENU_CONTROL+0x314>)
 80017ae:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Stop(&hadc);
 80017b0:	4b43      	ldr	r3, [pc, #268]	@ (80018c0 <MENU_CONTROL+0x308>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 fefe 	bl	80025b4 <HAL_ADC_Stop>
			PWM_CONTROL = VALUE;
 80017b8:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <MENU_CONTROL+0x314>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	5e9a      	ldrsh	r2, [r3, r2]
 80017be:	4b44      	ldr	r3, [pc, #272]	@ (80018d0 <MENU_CONTROL+0x318>)
 80017c0:	801a      	strh	r2, [r3, #0]
			if(PWM_CONTROL <= 1) PWM_CONTROL = 0;
 80017c2:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <MENU_CONTROL+0x318>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	5e9b      	ldrsh	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	dc02      	bgt.n	80017d2 <MENU_CONTROL+0x21a>
 80017cc:	4b40      	ldr	r3, [pc, #256]	@ (80018d0 <MENU_CONTROL+0x318>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
			TIM2->CCR1 = PWM_CONTROL;
 80017d2:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <MENU_CONTROL+0x318>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	5e9a      	ldrsh	r2, [r3, r2]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	05db      	lsls	r3, r3, #23
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80017de:	e046      	b.n	800186e <MENU_CONTROL+0x2b6>
			KEYBOARD_CHECK(PRESS_GPIO_Port, PRESS_Pin);
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4a3b      	ldr	r2, [pc, #236]	@ (80018d4 <MENU_CONTROL+0x31c>)
 80017e6:	0019      	movs	r1, r3
 80017e8:	0010      	movs	r0, r2
 80017ea:	f000 fa79 	bl	8001ce0 <KEYBOARD_CHECK>
			HAL_ADC_Start(&hadc);
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <MENU_CONTROL+0x308>)
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 fe8b 	bl	800250c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 100);
 80017f6:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <MENU_CONTROL+0x308>)
 80017f8:	2164      	movs	r1, #100	@ 0x64
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 ff1a 	bl	8002634 <HAL_ADC_PollForConversion>
			VALUE = HAL_ADC_GetValue(&hadc);
 8001800:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001802:	0018      	movs	r0, r3
 8001804:	f000 ffb2 	bl	800276c <HAL_ADC_GetValue>
 8001808:	0003      	movs	r3, r0
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <MENU_CONTROL+0x314>)
 800180e:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Stop(&hadc);
 8001810:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fece 	bl	80025b4 <HAL_ADC_Stop>
			TIM2->CCR3 = VALUE;
 8001818:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <MENU_CONTROL+0x314>)
 800181a:	2200      	movs	r2, #0
 800181c:	5e9a      	ldrsh	r2, [r3, r2]
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	05db      	lsls	r3, r3, #23
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001824:	e023      	b.n	800186e <MENU_CONTROL+0x2b6>
			KEYBOARD_CHECK(PRESS_GPIO_Port, PRESS_Pin);
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <MENU_CONTROL+0x31c>)
 800182c:	0019      	movs	r1, r3
 800182e:	0010      	movs	r0, r2
 8001830:	f000 fa56 	bl	8001ce0 <KEYBOARD_CHECK>
			HAL_ADC_Start(&hadc);
 8001834:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001836:	0018      	movs	r0, r3
 8001838:	f000 fe68 	bl	800250c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 100);
 800183c:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <MENU_CONTROL+0x308>)
 800183e:	2164      	movs	r1, #100	@ 0x64
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fef7 	bl	8002634 <HAL_ADC_PollForConversion>
			VALUE = HAL_ADC_GetValue(&hadc);
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001848:	0018      	movs	r0, r3
 800184a:	f000 ff8f 	bl	800276c <HAL_ADC_GetValue>
 800184e:	0003      	movs	r3, r0
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <MENU_CONTROL+0x314>)
 8001854:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Stop(&hadc);
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <MENU_CONTROL+0x308>)
 8001858:	0018      	movs	r0, r3
 800185a:	f000 feab 	bl	80025b4 <HAL_ADC_Stop>
			TIM2->CCR4 = VALUE;
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <MENU_CONTROL+0x314>)
 8001860:	2200      	movs	r2, #0
 8001862:	5e9a      	ldrsh	r2, [r3, r2]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	05db      	lsls	r3, r3, #23
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800186a:	e000      	b.n	800186e <MENU_CONTROL+0x2b6>
			break;
 800186c:	46c0      	nop			@ (mov r8, r8)
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000162 	.word	0x20000162
 8001878:	20000160 	.word	0x20000160
 800187c:	20000161 	.word	0x20000161
 8001880:	08004c88 	.word	0x08004c88
 8001884:	08004c98 	.word	0x08004c98
 8001888:	08004ca8 	.word	0x08004ca8
 800188c:	08004cb8 	.word	0x08004cb8
 8001890:	08004cc8 	.word	0x08004cc8
 8001894:	08004cdc 	.word	0x08004cdc
 8001898:	08004cf0 	.word	0x08004cf0
 800189c:	08004d04 	.word	0x08004d04
 80018a0:	20000163 	.word	0x20000163
 80018a4:	08004d18 	.word	0x08004d18
 80018a8:	08004d2c 	.word	0x08004d2c
 80018ac:	08004d40 	.word	0x08004d40
 80018b0:	08004d50 	.word	0x08004d50
 80018b4:	08004d64 	.word	0x08004d64
 80018b8:	08004d78 	.word	0x08004d78
 80018bc:	200000c4 	.word	0x200000c4
 80018c0:	20000028 	.word	0x20000028
 80018c4:	9999999a 	.word	0x9999999a
 80018c8:	40447999 	.word	0x40447999
 80018cc:	2000014c 	.word	0x2000014c
 80018d0:	2000014a 	.word	0x2000014a
 80018d4:	50000400 	.word	0x50000400

080018d8 <DRAW_CHAR_LCD>:

void DRAW_CHAR_LCD(uint8_t character, uint8_t locale){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	0002      	movs	r2, r0
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	1dbb      	adds	r3, r7, #6
 80018e6:	1c0a      	adds	r2, r1, #0
 80018e8:	701a      	strb	r2, [r3, #0]
	MANAGER_LCD(locale, INSTRUCTION);
 80018ea:	1dbb      	adds	r3, r7, #6
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2100      	movs	r1, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 f8b5 	bl	8001a60 <MANAGER_LCD>
	MANAGER_LCD(character, DATA);
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2101      	movs	r1, #1
 80018fc:	0018      	movs	r0, r3
 80018fe:	f000 f8af 	bl	8001a60 <MANAGER_LCD>
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <ENCODER_READER>:

void ENCODER_READER(void){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	ATUAL_COUNTER = TIM22->CNT; // Puxando contagem precisa do timer
 8001910:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <ENCODER_READER+0xb4>)
 8001912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001914:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <ENCODER_READER+0xb8>)
 8001916:	601a      	str	r2, [r3, #0]

	if (ATUAL_COUNTER > PASS_COUNTER) {
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <ENCODER_READER+0xb8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <ENCODER_READER+0xbc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d904      	bls.n	800192e <ENCODER_READER+0x22>
		FLAG_COUNTER = -1;
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <ENCODER_READER+0xc0>)
 8001926:	2201      	movs	r2, #1
 8001928:	4252      	negs	r2, r2
 800192a:	801a      	strh	r2, [r3, #0]
 800192c:	e00c      	b.n	8001948 <ENCODER_READER+0x3c>
	}
	else if (ATUAL_COUNTER < PASS_COUNTER){
 800192e:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <ENCODER_READER+0xb8>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <ENCODER_READER+0xbc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d203      	bcs.n	8001942 <ENCODER_READER+0x36>
		FLAG_COUNTER = 1;
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <ENCODER_READER+0xc0>)
 800193c:	2201      	movs	r2, #1
 800193e:	801a      	strh	r2, [r3, #0]
 8001940:	e002      	b.n	8001948 <ENCODER_READER+0x3c>
	}
	else FLAG_COUNTER = 0;
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <ENCODER_READER+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]

	PASS_COUNTER = ATUAL_COUNTER;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <ENCODER_READER+0xb8>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <ENCODER_READER+0xbc>)
 800194e:	601a      	str	r2, [r3, #0]
	ANG += FLAG_COUNTER * 10;
 8001950:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <ENCODER_READER+0xc0>)
 8001952:	2200      	movs	r2, #0
 8001954:	5e9b      	ldrsh	r3, [r3, r2]
 8001956:	001a      	movs	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	189b      	adds	r3, r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe ff41 	bl	80007e8 <__aeabi_i2f>
 8001966:	1c02      	adds	r2, r0, #0
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <ENCODER_READER+0xc4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1c19      	adds	r1, r3, #0
 800196e:	1c10      	adds	r0, r2, #0
 8001970:	f7fe fc90 	bl	8000294 <__aeabi_fadd>
 8001974:	1c03      	adds	r3, r0, #0
 8001976:	1c1a      	adds	r2, r3, #0
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <ENCODER_READER+0xc4>)
 800197a:	601a      	str	r2, [r3, #0]
	CTR = FLAG_COUNTER;
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <ENCODER_READER+0xc0>)
 800197e:	2200      	movs	r2, #0
 8001980:	5e9b      	ldrsh	r3, [r3, r2]
 8001982:	b25a      	sxtb	r2, r3
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <ENCODER_READER+0xc8>)
 8001986:	701a      	strb	r2, [r3, #0]

	if(ANG > 360) ANG = 0;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <ENCODER_READER+0xc4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4912      	ldr	r1, [pc, #72]	@ (80019d8 <ENCODER_READER+0xcc>)
 800198e:	1c18      	adds	r0, r3, #0
 8001990:	f7fe fc6c 	bl	800026c <__aeabi_fcmpgt>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d003      	beq.n	80019a0 <ENCODER_READER+0x94>
 8001998:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <ENCODER_READER+0xc4>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
	else if(ANG < 1) ANG = 360;
}
 800199e:	e00c      	b.n	80019ba <ENCODER_READER+0xae>
	else if(ANG < 1) ANG = 360;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <ENCODER_READER+0xc4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	21fe      	movs	r1, #254	@ 0xfe
 80019a6:	0589      	lsls	r1, r1, #22
 80019a8:	1c18      	adds	r0, r3, #0
 80019aa:	f7fe fc4b 	bl	8000244 <__aeabi_fcmplt>
 80019ae:	1e03      	subs	r3, r0, #0
 80019b0:	d100      	bne.n	80019b4 <ENCODER_READER+0xa8>
}
 80019b2:	e002      	b.n	80019ba <ENCODER_READER+0xae>
	else if(ANG < 1) ANG = 360;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <ENCODER_READER+0xc4>)
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <ENCODER_READER+0xcc>)
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40011400 	.word	0x40011400
 80019c4:	20000150 	.word	0x20000150
 80019c8:	20000154 	.word	0x20000154
 80019cc:	20000148 	.word	0x20000148
 80019d0:	20000144 	.word	0x20000144
 80019d4:	20000160 	.word	0x20000160
 80019d8:	43b40000 	.word	0x43b40000

080019dc <STARTUP_LCD>:
void STARTUP_LCD(void){
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	MANAGER_LCD(0x33, INSTRUCTION);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2033      	movs	r0, #51	@ 0x33
 80019e4:	f000 f83c 	bl	8001a60 <MANAGER_LCD>
	MANAGER_LCD(0x32, INSTRUCTION);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2032      	movs	r0, #50	@ 0x32
 80019ec:	f000 f838 	bl	8001a60 <MANAGER_LCD>
	MANAGER_LCD(0x28, INSTRUCTION);
 80019f0:	2100      	movs	r1, #0
 80019f2:	2028      	movs	r0, #40	@ 0x28
 80019f4:	f000 f834 	bl	8001a60 <MANAGER_LCD>
	MANAGER_LCD(0x0C, INSTRUCTION);
 80019f8:	2100      	movs	r1, #0
 80019fa:	200c      	movs	r0, #12
 80019fc:	f000 f830 	bl	8001a60 <MANAGER_LCD>
	MANAGER_LCD(0x01, INSTRUCTION);
 8001a00:	2100      	movs	r1, #0
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 f82c 	bl	8001a60 <MANAGER_LCD>
	HAL_Delay(2);
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f000 fbe7 	bl	80021dc <HAL_Delay>
}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <SEND_MESSAGE>:
void SEND_MESSAGE(char *message, uint8_t locale){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	000a      	movs	r2, r1
 8001a1e:	1cfb      	adds	r3, r7, #3
 8001a20:	701a      	strb	r2, [r3, #0]
	MANAGER_LCD(locale, INSTRUCTION);
 8001a22:	1cfb      	adds	r3, r7, #3
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2100      	movs	r1, #0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 f819 	bl	8001a60 <MANAGER_LCD>

	for(int i = 0; message[i] != '\0'; ++i){
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e00a      	b.n	8001a4a <SEND_MESSAGE+0x36>
		MANAGER_LCD(message[i], DATA);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f80e 	bl	8001a60 <MANAGER_LCD>
	for(int i = 0; message[i] != '\0'; ++i){
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	18d3      	adds	r3, r2, r3
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ee      	bne.n	8001a34 <SEND_MESSAGE+0x20>
	}
}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <MANAGER_LCD>:
void MANAGER_LCD(uint8_t data, uint8_t state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	1dbb      	adds	r3, r7, #6
 8001a6e:	1c0a      	adds	r2, r1, #0
 8001a70:	701a      	strb	r2, [r3, #0]
	BIT.P0 = (data >> 0) & 1;
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b95      	ldr	r3, [pc, #596]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	400a      	ands	r2, r1
 8001a82:	0010      	movs	r0, r2
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	2101      	movs	r1, #1
 8001a88:	438a      	bics	r2, r1
 8001a8a:	1c11      	adds	r1, r2, #0
 8001a8c:	1c02      	adds	r2, r0, #0
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
	BIT.P1 = (data >> 1) & 1;
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	1c1a      	adds	r2, r3, #0
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	1890      	adds	r0, r2, r2
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	2102      	movs	r1, #2
 8001aae:	438a      	bics	r2, r1
 8001ab0:	1c11      	adds	r1, r2, #0
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
	BIT.P2 = (data >> 2) & 1;
 8001ab8:	1dfb      	adds	r3, r7, #7
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	1c1a      	adds	r2, r3, #0
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b82      	ldr	r3, [pc, #520]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	400a      	ands	r2, r1
 8001ace:	0090      	lsls	r0, r2, #2
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	1c11      	adds	r1, r2, #0
 8001ad8:	1c02      	adds	r2, r0, #0
 8001ada:	430a      	orrs	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
	BIT.P3 = (data >> 3) & 1;
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	1c1a      	adds	r2, r3, #0
 8001ae8:	2301      	movs	r3, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b79      	ldr	r3, [pc, #484]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	400a      	ands	r2, r1
 8001af4:	00d0      	lsls	r0, r2, #3
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	2108      	movs	r1, #8
 8001afa:	438a      	bics	r2, r1
 8001afc:	1c11      	adds	r1, r2, #0
 8001afe:	1c02      	adds	r2, r0, #0
 8001b00:	430a      	orrs	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
	BIT.P4 = (data >> 4) & 1;
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	1c1a      	adds	r2, r3, #0
 8001b0e:	2301      	movs	r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	400a      	ands	r2, r1
 8001b1a:	0110      	lsls	r0, r2, #4
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	2110      	movs	r1, #16
 8001b20:	438a      	bics	r2, r1
 8001b22:	1c11      	adds	r1, r2, #0
 8001b24:	1c02      	adds	r2, r0, #0
 8001b26:	430a      	orrs	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
	BIT.P5 = (data >> 5) & 1;
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	1c1a      	adds	r2, r3, #0
 8001b34:	2301      	movs	r3, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b66      	ldr	r3, [pc, #408]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	400a      	ands	r2, r1
 8001b40:	0150      	lsls	r0, r2, #5
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	2120      	movs	r1, #32
 8001b46:	438a      	bics	r2, r1
 8001b48:	1c11      	adds	r1, r2, #0
 8001b4a:	1c02      	adds	r2, r0, #0
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
	BIT.P6 = (data >> 6) & 1;
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	1c1a      	adds	r2, r3, #0
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	400a      	ands	r2, r1
 8001b66:	0190      	lsls	r0, r2, #6
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	2140      	movs	r1, #64	@ 0x40
 8001b6c:	438a      	bics	r2, r1
 8001b6e:	1c11      	adds	r1, r2, #0
 8001b70:	1c02      	adds	r2, r0, #0
 8001b72:	430a      	orrs	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
	BIT.P7 = (data >> 7) & 1;
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	09db      	lsrs	r3, r3, #7
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	1c1a      	adds	r2, r3, #0
 8001b80:	2301      	movs	r3, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b53      	ldr	r3, [pc, #332]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001b88:	01d0      	lsls	r0, r2, #7
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	217f      	movs	r1, #127	@ 0x7f
 8001b8e:	400a      	ands	r2, r1
 8001b90:	1c11      	adds	r1, r2, #0
 8001b92:	1c02      	adds	r2, r0, #0
 8001b94:	430a      	orrs	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	484e      	ldr	r0, [pc, #312]	@ (8001cd8 <MANAGER_LCD+0x278>)
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2140      	movs	r1, #64	@ 0x40
 8001ba2:	f001 fafe 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <MANAGER_LCD+0x27c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	0018      	movs	r0, r3
 8001bae:	f001 faf8 	bl	80031a2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, BIT.P4);
 8001bb2:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	06db      	lsls	r3, r3, #27
 8001bb8:	0fdb      	lsrs	r3, r3, #31
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	0059      	lsls	r1, r3, #1
 8001bc2:	23a0      	movs	r3, #160	@ 0xa0
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f001 faeb 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, BIT.P5);
 8001bcc:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	069b      	lsls	r3, r3, #26
 8001bd2:	0fdb      	lsrs	r3, r3, #31
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	483e      	ldr	r0, [pc, #248]	@ (8001cd8 <MANAGER_LCD+0x278>)
 8001bde:	0019      	movs	r1, r3
 8001be0:	f001 fadf 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, BIT.P6);
 8001be4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	065b      	lsls	r3, r3, #25
 8001bea:	0fdb      	lsrs	r3, r3, #31
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	001a      	movs	r2, r3
 8001bf0:	23a0      	movs	r3, #160	@ 0xa0
 8001bf2:	05db      	lsls	r3, r3, #23
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f001 fad3 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, BIT.P7);
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	0fdb      	lsrs	r3, r3, #31
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	001a      	movs	r2, r3
 8001c08:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <MANAGER_LCD+0x278>)
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 fac8 	bl	80031a2 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	23a0      	movs	r3, #160	@ 0xa0
 8001c18:	05db      	lsls	r3, r3, #23
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f001 fadd 	bl	80031dc <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 fada 	bl	80021dc <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	009a      	lsls	r2, r3, #2
 8001c2c:	23a0      	movs	r3, #160	@ 0xa0
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	0011      	movs	r1, r2
 8001c32:	0018      	movs	r0, r3
 8001c34:	f001 fad2 	bl	80031dc <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f000 facf 	bl	80021dc <HAL_Delay>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, BIT.P0);
 8001c3e:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	07db      	lsls	r3, r3, #31
 8001c44:	0fdb      	lsrs	r3, r3, #31
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	0059      	lsls	r1, r3, #1
 8001c4e:	23a0      	movs	r3, #160	@ 0xa0
 8001c50:	05db      	lsls	r3, r3, #23
 8001c52:	0018      	movs	r0, r3
 8001c54:	f001 faa5 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, BIT.P1);
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	079b      	lsls	r3, r3, #30
 8001c5e:	0fdb      	lsrs	r3, r3, #31
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	001a      	movs	r2, r3
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	481b      	ldr	r0, [pc, #108]	@ (8001cd8 <MANAGER_LCD+0x278>)
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	f001 fa99 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, BIT.P2);
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	075b      	lsls	r3, r3, #29
 8001c76:	0fdb      	lsrs	r3, r3, #31
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	23a0      	movs	r3, #160	@ 0xa0
 8001c7e:	05db      	lsls	r3, r3, #23
 8001c80:	2120      	movs	r1, #32
 8001c82:	0018      	movs	r0, r3
 8001c84:	f001 fa8d 	bl	80031a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, BIT.P3);
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <MANAGER_LCD+0x274>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	071b      	lsls	r3, r3, #28
 8001c8e:	0fdb      	lsrs	r3, r3, #31
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	001a      	movs	r2, r3
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <MANAGER_LCD+0x278>)
 8001c96:	2120      	movs	r1, #32
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f001 fa82 	bl	80031a2 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	009a      	lsls	r2, r3, #2
 8001ca2:	23a0      	movs	r3, #160	@ 0xa0
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f001 fa97 	bl	80031dc <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 fa94 	bl	80021dc <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	009a      	lsls	r2, r3, #2
 8001cb8:	23a0      	movs	r3, #160	@ 0xa0
 8001cba:	05db      	lsls	r3, r3, #23
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f001 fa8c 	bl	80031dc <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f000 fa89 	bl	80021dc <HAL_Delay>
}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	20000168 	.word	0x20000168
 8001cd8:	50000400 	.word	0x50000400
 8001cdc:	50000800 	.word	0x50000800

08001ce0 <KEYBOARD_CHECK>:
void KEYBOARD_CHECK(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	000a      	movs	r2, r1
 8001cea:	1cbb      	adds	r3, r7, #2
 8001cec:	801a      	strh	r2, [r3, #0]
	ATUAL_TICK = HAL_GetTick();
 8001cee:	f000 fa6b 	bl	80021c8 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <KEYBOARD_CHECK+0x94>)
 8001cf6:	601a      	str	r2, [r3, #0]

	if ((ATUAL_TICK - PASS_TICK) > 20){
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <KEYBOARD_CHECK+0x94>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <KEYBOARD_CHECK+0x98>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b14      	cmp	r3, #20
 8001d04:	d915      	bls.n	8001d32 <KEYBOARD_CHECK+0x52>
		uint8_t press = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001d06:	250f      	movs	r5, #15
 8001d08:	197c      	adds	r4, r7, r5
 8001d0a:	1cbb      	adds	r3, r7, #2
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0011      	movs	r1, r2
 8001d12:	0018      	movs	r0, r3
 8001d14:	f001 fa28 	bl	8003168 <HAL_GPIO_ReadPin>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	7023      	strb	r3, [r4, #0]
		if(!press) {
 8001d1c:	197b      	adds	r3, r7, r5
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <KEYBOARD_CHECK+0x4c>
			PRESSED = 1;
 8001d24:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <KEYBOARD_CHECK+0x9c>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e002      	b.n	8001d32 <KEYBOARD_CHECK+0x52>
		}
		else PRESSED = 0;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <KEYBOARD_CHECK+0x9c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
	}

	if(ATUAL_MENU == 2 && PRESSED) {
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <KEYBOARD_CHECK+0xa0>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d117      	bne.n	8001d6c <KEYBOARD_CHECK+0x8c>
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <KEYBOARD_CHECK+0x9c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <KEYBOARD_CHECK+0x8c>
		FLAG_TO_COUNT = PRESSED;
 8001d46:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <KEYBOARD_CHECK+0x9c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	569a      	ldrsb	r2, [r3, r2]
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <KEYBOARD_CHECK+0xa4>)
 8001d4e:	701a      	strb	r2, [r3, #0]

		if(COUNT_FLAG >= 2){
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <KEYBOARD_CHECK+0xa8>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	dd08      	ble.n	8001d6c <KEYBOARD_CHECK+0x8c>
			COUNT_FLAG = 0;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <KEYBOARD_CHECK+0xa8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
			ATUAL_MENU = 3;
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <KEYBOARD_CHECK+0xa0>)
 8001d62:	2203      	movs	r2, #3
 8001d64:	701a      	strb	r2, [r3, #0]
			SEG = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <KEYBOARD_CHECK+0xac>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bdb0      	pop	{r4, r5, r7, pc}
 8001d74:	2000015c 	.word	0x2000015c
 8001d78:	20000158 	.word	0x20000158
 8001d7c:	20000163 	.word	0x20000163
 8001d80:	20000162 	.word	0x20000162
 8001d84:	20000165 	.word	0x20000165
 8001d88:	20000166 	.word	0x20000166
 8001d8c:	20000164 	.word	0x20000164

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	e7fd      	b.n	8001d98 <Error_Handler+0x8>

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <HAL_MspInit+0x24>)
 8001da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_MspInit+0x24>)
 8001da6:	2101      	movs	r1, #1
 8001da8:	430a      	orrs	r2, r1
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <HAL_MspInit+0x24>)
 8001dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_MspInit+0x24>)
 8001db2:	2180      	movs	r1, #128	@ 0x80
 8001db4:	0549      	lsls	r1, r1, #21
 8001db6:	430a      	orrs	r2, r1
 8001db8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	240c      	movs	r4, #12
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	2314      	movs	r3, #20
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f002 ff1e 	bl	8004c18 <memset>
  if(hadc->Instance==ADC1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a18      	ldr	r2, [pc, #96]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12a      	bne.n	8001e3c <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_ADC_MspInit+0x84>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_ADC_MspInit+0x84>)
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0089      	lsls	r1, r1, #2
 8001df0:	430a      	orrs	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_ADC_MspInit+0x84>)
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_ADC_MspInit+0x84>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_ADC_MspInit+0x84>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e0c:	193b      	adds	r3, r7, r4
 8001e0e:	2202      	movs	r2, #2
 8001e10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	2203      	movs	r2, #3
 8001e16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	193a      	adds	r2, r7, r4
 8001e20:	23a0      	movs	r3, #160	@ 0xa0
 8001e22:	05db      	lsls	r3, r3, #23
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f001 f828 	bl	8002e7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	200c      	movs	r0, #12
 8001e32:	f000 fff1 	bl	8002e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001e36:	200c      	movs	r0, #12
 8001e38:	f001 f803 	bl	8002e42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b009      	add	sp, #36	@ 0x24
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	40012400 	.word	0x40012400
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	05db      	lsls	r3, r3, #23
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d10e      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_TIM_Base_MspInit+0x60>)
 8001e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_TIM_Base_MspInit+0x60>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	200f      	movs	r0, #15
 8001e72:	f000 ffd1 	bl	8002e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f000 ffe3 	bl	8002e42 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e7c:	e012      	b.n	8001ea4 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM6)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10d      	bne.n	8001ea4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_TIM_Base_MspInit+0x60>)
 8001e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <HAL_TIM_Base_MspInit+0x60>)
 8001e8e:	2110      	movs	r1, #16
 8001e90:	430a      	orrs	r2, r1
 8001e92:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2011      	movs	r0, #17
 8001e9a:	f000 ffbd 	bl	8002e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e9e:	2011      	movs	r0, #17
 8001ea0:	f000 ffcf 	bl	8002e42 <HAL_NVIC_EnableIRQ>
}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40001000 	.word	0x40001000

08001eb4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	240c      	movs	r4, #12
 8001ebe:	193b      	adds	r3, r7, r4
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	2314      	movs	r3, #20
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f002 fea6 	bl	8004c18 <memset>
  if(htim_encoder->Instance==TIM22)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f40 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d130      	bne.n	8001f38 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM22_MspInit 0 */

    /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x90>)
 8001edc:	2120      	movs	r1, #32
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration
    PA6     ------> TIM22_CH1
    PA7     ------> TIM22_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001efa:	0021      	movs	r1, r4
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	22c0      	movs	r2, #192	@ 0xc0
 8001f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2202      	movs	r2, #2
 8001f06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	2205      	movs	r2, #5
 8001f18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	187a      	adds	r2, r7, r1
 8001f1c:	23a0      	movs	r3, #160	@ 0xa0
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 ffaa 	bl	8002e7c <HAL_GPIO_Init>

    /* TIM22 interrupt Init */
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2016      	movs	r0, #22
 8001f2e:	f000 ff73 	bl	8002e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8001f32:	2016      	movs	r0, #22
 8001f34:	f000 ff85 	bl	8002e42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM22_MspInit 1 */

  }

}
 8001f38:	46c0      	nop			@ (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b009      	add	sp, #36	@ 0x24
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	40011400 	.word	0x40011400
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08b      	sub	sp, #44	@ 0x2c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	2414      	movs	r4, #20
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	0018      	movs	r0, r3
 8001f56:	2314      	movs	r3, #20
 8001f58:	001a      	movs	r2, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f002 fe5c 	bl	8004c18 <memset>
  if(htim->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	05db      	lsls	r3, r3, #23
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d144      	bne.n	8001ff6 <HAL_TIM_MspPostInit+0xae>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f78:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b1e      	ldr	r3, [pc, #120]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	2202      	movs	r2, #2
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f9c:	193b      	adds	r3, r7, r4
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	193b      	adds	r3, r7, r4
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	193a      	adds	r2, r7, r4
 8001fbc:	23a0      	movs	r3, #160	@ 0xa0
 8001fbe:	05db      	lsls	r3, r3, #23
 8001fc0:	0011      	movs	r1, r2
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 ff5a 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fc8:	0021      	movs	r1, r4
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	22c0      	movs	r2, #192	@ 0xc0
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f000 ff43 	bl	8002e7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b00b      	add	sp, #44	@ 0x2c
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	40021000 	.word	0x40021000
 8002004:	50000400 	.word	0x50000400

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002030:	f000 f8b8 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002034:	46c0      	nop			@ (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <ADC1_COMP_IRQHandler+0x14>)
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fb9e 	bl	8002784 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	20000028 	.word	0x20000028

08002054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002058:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <TIM2_IRQHandler+0x14>)
 800205a:	0018      	movs	r0, r3
 800205c:	f002 f8e1 	bl	8004222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	20000084 	.word	0x20000084

0800206c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <TIM6_DAC_IRQHandler+0x14>)
 8002072:	0018      	movs	r0, r3
 8002074:	f002 f8d5 	bl	8004222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	200000c4 	.word	0x200000c4

08002084 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <TIM22_IRQHandler+0x14>)
 800208a:	0018      	movs	r0, r3
 800208c:	f002 f8c9 	bl	8004222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	20000104 	.word	0x20000104

0800209c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80020a8:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020ac:	f7ff fff6 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b2:	490d      	ldr	r1, [pc, #52]	@ (80020e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <LoopForever+0xe>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c8:	4c0a      	ldr	r4, [pc, #40]	@ (80020f4 <LoopForever+0x16>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f002 fda7 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7fe ff9f 	bl	800101c <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   r0, =_estack
 80020e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020ec:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 80020f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020f4:	20000170 	.word	0x20000170

080020f8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <DMA1_Channel1_IRQHandler>
	...

080020fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_Init+0x3c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_Init+0x3c>)
 800210e:	2140      	movs	r1, #64	@ 0x40
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002114:	2000      	movs	r0, #0
 8002116:	f000 f811 	bl	800213c <HAL_InitTick>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d003      	beq.n	8002126 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e001      	b.n	800212a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002126:	f7ff fe39 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	40022000 	.word	0x40022000

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_InitTick+0x5c>)
 8002146:	681c      	ldr	r4, [r3, #0]
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_InitTick+0x60>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	0019      	movs	r1, r3
 800214e:	23fa      	movs	r3, #250	@ 0xfa
 8002150:	0098      	lsls	r0, r3, #2
 8002152:	f7fd ffd9 	bl	8000108 <__udivsi3>
 8002156:	0003      	movs	r3, r0
 8002158:	0019      	movs	r1, r3
 800215a:	0020      	movs	r0, r4
 800215c:	f7fd ffd4 	bl	8000108 <__udivsi3>
 8002160:	0003      	movs	r3, r0
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fe7d 	bl	8002e62 <HAL_SYSTICK_Config>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d001      	beq.n	8002170 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e00f      	b.n	8002190 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d80b      	bhi.n	800218e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	2301      	movs	r3, #1
 800217a:	425b      	negs	r3, r3
 800217c:	2200      	movs	r2, #0
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fe4a 	bl	8002e18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_InitTick+0x64>)
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b003      	add	sp, #12
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	20000000 	.word	0x20000000
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_IncTick+0x1c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_IncTick+0x20>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	18d2      	adds	r2, r2, r3
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_IncTick+0x20>)
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	20000008 	.word	0x20000008
 80021c4:	2000016c 	.word	0x2000016c

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b02      	ldr	r3, [pc, #8]	@ (80021d8 <HAL_GetTick+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	2000016c 	.word	0x2000016c

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3301      	adds	r3, #1
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	001a      	movs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	f7ff ffe0 	bl	80021c8 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	46c0      	nop			@ (mov r8, r8)
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	20000008 	.word	0x20000008

08002224 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e159      	b.n	80024ea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10a      	bne.n	8002254 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2250      	movs	r2, #80	@ 0x50
 8002248:	2100      	movs	r1, #0
 800224a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff fdb8 	bl	8001dc4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	2b10      	cmp	r3, #16
 800225e:	d005      	beq.n	800226c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800226a:	d00b      	beq.n	8002284 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	2210      	movs	r2, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2250      	movs	r2, #80	@ 0x50
 800227c:	2100      	movs	r1, #0
 800227e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e132      	b.n	80024ea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	4a9a      	ldr	r2, [pc, #616]	@ (80024f4 <HAL_ADC_Init+0x2d0>)
 800228a:	4013      	ands	r3, r2
 800228c:	2202      	movs	r2, #2
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2203      	movs	r2, #3
 800229c:	4013      	ands	r3, r2
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d108      	bne.n	80022b4 <HAL_ADC_Init+0x90>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_Init+0x90>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_Init+0x92>
 80022b4:	2300      	movs	r3, #0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d149      	bne.n	800234e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	23c0      	movs	r3, #192	@ 0xc0
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d00b      	beq.n	80022de <HAL_ADC_Init+0xba>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	05db      	lsls	r3, r3, #23
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d005      	beq.n	80022de <HAL_ADC_Init+0xba>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	429a      	cmp	r2, r3
 80022dc:	d111      	bne.n	8002302 <HAL_ADC_Init+0xde>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	0892      	lsrs	r2, r2, #2
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	e014      	b.n	800232c <HAL_ADC_Init+0x108>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	0892      	lsrs	r2, r2, #2
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	4b79      	ldr	r3, [pc, #484]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b78      	ldr	r3, [pc, #480]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002318:	4978      	ldr	r1, [pc, #480]	@ (80024fc <HAL_ADC_Init+0x2d8>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	4b76      	ldr	r3, [pc, #472]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4b74      	ldr	r3, [pc, #464]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2118      	movs	r1, #24
 8002338:	438a      	bics	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800234e:	4b6a      	ldr	r3, [pc, #424]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b69      	ldr	r3, [pc, #420]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002354:	496a      	ldr	r1, [pc, #424]	@ (8002500 <HAL_ADC_Init+0x2dc>)
 8002356:	400a      	ands	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800235a:	4b67      	ldr	r3, [pc, #412]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002362:	065a      	lsls	r2, r3, #25
 8002364:	4b64      	ldr	r3, [pc, #400]	@ (80024f8 <HAL_ADC_Init+0x2d4>)
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	055b      	lsls	r3, r3, #21
 8002374:	4013      	ands	r3, r2
 8002376:	d108      	bne.n	800238a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	0549      	lsls	r1, r1, #21
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	495b      	ldr	r1, [pc, #364]	@ (8002504 <HAL_ADC_Init+0x2e0>)
 8002396:	400a      	ands	r2, r1
 8002398:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_Init+0x18c>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_Init+0x18e>
 80023b0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80023b2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2020      	movs	r0, #32
 80023b8:	5c1b      	ldrb	r3, [r3, r0]
 80023ba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80023bc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	202c      	movs	r0, #44	@ 0x2c
 80023c2:	5c1b      	ldrb	r3, [r3, r0]
 80023c4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023c6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80023d4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80023dc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ea:	23c2      	movs	r3, #194	@ 0xc2
 80023ec:	33ff      	adds	r3, #255	@ 0xff
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d00b      	beq.n	800240a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2221      	movs	r2, #33	@ 0x21
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d11a      	bne.n	800244a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	5c9b      	ldrb	r3, [r3, r2]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	0249      	lsls	r1, r1, #9
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e00b      	b.n	800244a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002436:	2220      	movs	r2, #32
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	2201      	movs	r2, #1
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d11f      	bne.n	8002492 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	492a      	ldr	r1, [pc, #168]	@ (8002508 <HAL_ADC_Init+0x2e4>)
 800245e:	400a      	ands	r2, r1
 8002460:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6919      	ldr	r1, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002470:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002476:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2101      	movs	r1, #1
 800248c:	430a      	orrs	r2, r1
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	e00e      	b.n	80024b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	438a      	bics	r2, r1
 80024ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2107      	movs	r1, #7
 80024bc:	438a      	bics	r2, r1
 80024be:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6959      	ldr	r1, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024dc:	2203      	movs	r2, #3
 80024de:	4393      	bics	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b002      	add	sp, #8
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	fffffefd 	.word	0xfffffefd
 80024f8:	40012708 	.word	0x40012708
 80024fc:	ffc3ffff 	.word	0xffc3ffff
 8002500:	fdffffff 	.word	0xfdffffff
 8002504:	fffe0219 	.word	0xfffe0219
 8002508:	fffffc03 	.word	0xfffffc03

0800250c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2204      	movs	r2, #4
 8002524:	4013      	ands	r3, r2
 8002526:	d138      	bne.n	800259a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2250      	movs	r2, #80	@ 0x50
 800252c:	5c9b      	ldrb	r3, [r3, r2]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Start+0x2a>
 8002532:	2302      	movs	r3, #2
 8002534:	e038      	b.n	80025a8 <HAL_ADC_Start+0x9c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2250      	movs	r2, #80	@ 0x50
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d007      	beq.n	8002556 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002546:	230f      	movs	r3, #15
 8002548:	18fc      	adds	r4, r7, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fa7b 	bl	8002a48 <ADC_Enable>
 8002552:	0003      	movs	r3, r0
 8002554:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002556:	230f      	movs	r3, #15
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d120      	bne.n	80025a2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <HAL_ADC_Start+0xa4>)
 8002566:	4013      	ands	r3, r2
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	0052      	lsls	r2, r2, #1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2250      	movs	r2, #80	@ 0x50
 800257c:	2100      	movs	r1, #0
 800257e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	221c      	movs	r2, #28
 8002586:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2104      	movs	r1, #4
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	e003      	b.n	80025a2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800259a:	230f      	movs	r3, #15
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a2:	230f      	movs	r3, #15
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b005      	add	sp, #20
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	fffff0fe 	.word	0xfffff0fe

080025b4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025bc:	230f      	movs	r3, #15
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2250      	movs	r2, #80	@ 0x50
 80025c8:	5c9b      	ldrb	r3, [r3, r2]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_Stop+0x1e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e029      	b.n	8002626 <HAL_ADC_Stop+0x72>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2250      	movs	r2, #80	@ 0x50
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80025da:	250f      	movs	r5, #15
 80025dc:	197c      	adds	r4, r7, r5
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fb00 	bl	8002be6 <ADC_ConversionStop>
 80025e6:	0003      	movs	r3, r0
 80025e8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025ea:	197b      	adds	r3, r7, r5
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d112      	bne.n	8002618 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80025f2:	197c      	adds	r4, r7, r5
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fa8e 	bl	8002b18 <ADC_Disable>
 80025fc:	0003      	movs	r3, r0
 80025fe:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002600:	197b      	adds	r3, r7, r5
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	4a08      	ldr	r2, [pc, #32]	@ (8002630 <HAL_ADC_Stop+0x7c>)
 800260e:	4013      	ands	r3, r2
 8002610:	2201      	movs	r2, #1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2250      	movs	r2, #80	@ 0x50
 800261c:	2100      	movs	r1, #0
 800261e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002620:	230f      	movs	r3, #15
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	781b      	ldrb	r3, [r3, #0]
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b004      	add	sp, #16
 800262c:	bdb0      	pop	{r4, r5, r7, pc}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	fffffefe 	.word	0xfffffefe

08002634 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b08      	cmp	r3, #8
 800264c:	d102      	bne.n	8002654 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800264e:	2308      	movs	r3, #8
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e014      	b.n	800267e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10b      	bne.n	800267a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002666:	2220      	movs	r2, #32
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2250      	movs	r2, #80	@ 0x50
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e072      	b.n	8002760 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800267a:	230c      	movs	r3, #12
 800267c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800267e:	f7ff fda3 	bl	80021c8 <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002686:	e01f      	b.n	80026c8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	d01c      	beq.n	80026c8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x70>
 8002694:	f7ff fd98 	bl	80021c8 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d211      	bcs.n	80026c8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	d10b      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	2204      	movs	r2, #4
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2250      	movs	r2, #80	@ 0x50
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e04b      	b.n	8002760 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0d9      	beq.n	8002688 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	2280      	movs	r2, #128	@ 0x80
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	23c0      	movs	r3, #192	@ 0xc0
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	d12e      	bne.n	800274e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d129      	bne.n	800274e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	4013      	ands	r3, r2
 8002704:	2b08      	cmp	r3, #8
 8002706:	d122      	bne.n	800274e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	d110      	bne.n	8002736 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	210c      	movs	r1, #12
 8002720:	438a      	bics	r2, r1
 8002722:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <HAL_ADC_PollForConversion+0x134>)
 800272a:	4013      	ands	r3, r2
 800272c:	2201      	movs	r2, #1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
 8002734:	e00b      	b.n	800274e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	2220      	movs	r2, #32
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	2201      	movs	r2, #1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}
 8002768:	fffffefe 	.word	0xfffffefe

0800276c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2204      	movs	r2, #4
 80027a0:	4013      	ands	r3, r2
 80027a2:	d003      	beq.n	80027ac <HAL_ADC_IRQHandler+0x28>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2208      	movs	r2, #8
 80027b0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027b2:	d04e      	beq.n	8002852 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2208      	movs	r2, #8
 80027b8:	4013      	ands	r3, r2
 80027ba:	d04a      	beq.n	8002852 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	2210      	movs	r2, #16
 80027c2:	4013      	ands	r3, r2
 80027c4:	d106      	bne.n	80027d4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	23c0      	movs	r3, #192	@ 0xc0
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	d12b      	bne.n	800283a <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d126      	bne.n	800283a <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2208      	movs	r2, #8
 80027f0:	4013      	ands	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d110      	bne.n	8002822 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	210c      	movs	r1, #12
 800280c:	438a      	bics	r2, r1
 800280e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002814:	4a2f      	ldr	r2, [pc, #188]	@ (80028d4 <HAL_ADC_IRQHandler+0x150>)
 8002816:	4013      	ands	r3, r2
 8002818:	2201      	movs	r2, #1
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002820:	e00b      	b.n	800283a <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	2220      	movs	r2, #32
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	2201      	movs	r2, #1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f84b 	bl	80028d8 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d003      	beq.n	8002852 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2280      	movs	r2, #128	@ 0x80
 8002856:	4013      	ands	r3, r2
 8002858:	d012      	beq.n	8002880 <HAL_ADC_IRQHandler+0xfc>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2280      	movs	r2, #128	@ 0x80
 800285e:	4013      	ands	r3, r2
 8002860:	d00e      	beq.n	8002880 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	2280      	movs	r2, #128	@ 0x80
 8002868:	0252      	lsls	r2, r2, #9
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f838 	bl	80028e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2280      	movs	r2, #128	@ 0x80
 800287e:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2210      	movs	r2, #16
 8002884:	4013      	ands	r3, r2
 8002886:	d020      	beq.n	80028ca <HAL_ADC_IRQHandler+0x146>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2210      	movs	r2, #16
 800288c:	4013      	ands	r3, r2
 800288e:	d01c      	beq.n	80028ca <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d10d      	bne.n	80028c2 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	2202      	movs	r2, #2
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2210      	movs	r2, #16
 80028b8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f81b 	bl	80028f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2210      	movs	r2, #16
 80028c8:	601a      	str	r2, [r3, #0]
  }

}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	fffffefe 	.word	0xfffffefe

080028d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028e0:	46c0      	nop			@ (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2250      	movs	r2, #80	@ 0x50
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e085      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x124>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2250      	movs	r2, #80	@ 0x50
 8002924:	2101      	movs	r1, #1
 8002926:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2204      	movs	r2, #4
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	2220      	movs	r2, #32
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2250      	movs	r2, #80	@ 0x50
 8002944:	2100      	movs	r1, #0
 8002946:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e06f      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a38      	ldr	r2, [pc, #224]	@ (8002a34 <HAL_ADC_ConfigChannel+0x12c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d035      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	035b      	lsls	r3, r3, #13
 8002962:	0b5a      	lsrs	r2, r3, #13
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	02db      	lsls	r3, r3, #11
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002978:	4b2f      	ldr	r3, [pc, #188]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 800297e:	2180      	movs	r1, #128	@ 0x80
 8002980:	0409      	lsls	r1, r1, #16
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002986:	200a      	movs	r0, #10
 8002988:	f000 f97a 	bl	8002c80 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	4013      	ands	r3, r2
 8002996:	d006      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 800299e:	2180      	movs	r1, #128	@ 0x80
 80029a0:	03c9      	lsls	r1, r1, #15
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	4013      	ands	r3, r2
 80029b0:	d037      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80029b2:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	0449      	lsls	r1, r1, #17
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e02f      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	035b      	lsls	r3, r3, #13
 80029ce:	0b5b      	lsrs	r3, r3, #13
 80029d0:	43d9      	mvns	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	400a      	ands	r2, r1
 80029d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	02db      	lsls	r3, r3, #11
 80029e2:	4013      	ands	r3, r2
 80029e4:	d005      	beq.n	80029f2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 80029ec:	4913      	ldr	r1, [pc, #76]	@ (8002a3c <HAL_ADC_ConfigChannel+0x134>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	029b      	lsls	r3, r3, #10
 80029fa:	4013      	ands	r3, r2
 80029fc:	d005      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 8002a04:	490e      	ldr	r1, [pc, #56]	@ (8002a40 <HAL_ADC_ConfigChannel+0x138>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	025b      	lsls	r3, r3, #9
 8002a12:	4013      	ands	r3, r2
 8002a14:	d005      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <HAL_ADC_ConfigChannel+0x130>)
 8002a1c:	4909      	ldr	r1, [pc, #36]	@ (8002a44 <HAL_ADC_ConfigChannel+0x13c>)
 8002a1e:	400a      	ands	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2250      	movs	r2, #80	@ 0x50
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	00001001 	.word	0x00001001
 8002a38:	40012708 	.word	0x40012708
 8002a3c:	ff7fffff 	.word	0xff7fffff
 8002a40:	ffbfffff 	.word	0xffbfffff
 8002a44:	feffffff 	.word	0xfeffffff

08002a48 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d108      	bne.n	8002a74 <ADC_Enable+0x2c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <ADC_Enable+0x2c>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <ADC_Enable+0x2e>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d146      	bne.n	8002b08 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a24      	ldr	r2, [pc, #144]	@ (8002b14 <ADC_Enable+0xcc>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	2201      	movs	r2, #1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e033      	b.n	8002b0a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f000 f8e4 	bl	8002c80 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ab8:	f7ff fb86 	bl	80021c8 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ac0:	e01b      	b.n	8002afa <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ac2:	f7ff fb81 	bl	80021c8 <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b0a      	cmp	r3, #10
 8002ace:	d914      	bls.n	8002afa <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d00d      	beq.n	8002afa <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	2201      	movs	r2, #1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e007      	b.n	8002b0a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d1dc      	bne.n	8002ac2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	80000017 	.word	0x80000017

08002b18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <ADC_Disable+0x2c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <ADC_Disable+0x2c>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <ADC_Disable+0x2e>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d048      	beq.n	8002bdc <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2205      	movs	r2, #5
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d110      	bne.n	8002b7a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2102      	movs	r1, #2
 8002b64:	430a      	orrs	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b70:	f7ff fb2a 	bl	80021c8 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b78:	e029      	b.n	8002bce <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	2210      	movs	r2, #16
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e023      	b.n	8002bde <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b96:	f7ff fb17 	bl	80021c8 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b0a      	cmp	r3, #10
 8002ba2:	d914      	bls.n	8002bce <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10d      	bne.n	8002bce <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e007      	b.n	8002bde <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d0dc      	beq.n	8002b96 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d03a      	beq.n	8002c74 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d10d      	bne.n	8002c28 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002c16:	d107      	bne.n	8002c28 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2110      	movs	r1, #16
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c28:	f7ff face 	bl	80021c8 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002c30:	e01a      	b.n	8002c68 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c32:	f7ff fac9 	bl	80021c8 <HAL_GetTick>
 8002c36:	0002      	movs	r2, r0
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	d913      	bls.n	8002c68 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2204      	movs	r2, #4
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d00d      	beq.n	8002c68 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	2210      	movs	r2, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e006      	b.n	8002c76 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	4013      	ands	r3, r2
 8002c72:	d1de      	bne.n	8002c32 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <ADC_DelayMicroSecond+0x38>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	490b      	ldr	r1, [pc, #44]	@ (8002cbc <ADC_DelayMicroSecond+0x3c>)
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7fd fa3a 	bl	8000108 <__udivsi3>
 8002c94:	0003      	movs	r3, r0
 8002c96:	001a      	movs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4353      	muls	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002c9e:	e002      	b.n	8002ca6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f9      	bne.n	8002ca0 <ADC_DelayMicroSecond+0x20>
  }
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	000f4240 	.word	0x000f4240

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	1dfb      	adds	r3, r7, #7
 8002cca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cd2:	d809      	bhi.n	8002ce8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	001a      	movs	r2, r3
 8002cda:	231f      	movs	r3, #31
 8002cdc:	401a      	ands	r2, r3
 8002cde:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <__NVIC_EnableIRQ+0x30>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4091      	lsls	r1, r2
 8002ce4:	000a      	movs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
  }
}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d08:	d828      	bhi.n	8002d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc8 <__NVIC_SetPriority+0xd4>)
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	33c0      	adds	r3, #192	@ 0xc0
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	589b      	ldr	r3, [r3, r2]
 8002d1a:	1dfa      	adds	r2, r7, #7
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	0011      	movs	r1, r2
 8002d20:	2203      	movs	r2, #3
 8002d22:	400a      	ands	r2, r1
 8002d24:	00d2      	lsls	r2, r2, #3
 8002d26:	21ff      	movs	r1, #255	@ 0xff
 8002d28:	4091      	lsls	r1, r2
 8002d2a:	000a      	movs	r2, r1
 8002d2c:	43d2      	mvns	r2, r2
 8002d2e:	401a      	ands	r2, r3
 8002d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	22ff      	movs	r2, #255	@ 0xff
 8002d38:	401a      	ands	r2, r3
 8002d3a:	1dfb      	adds	r3, r7, #7
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	2303      	movs	r3, #3
 8002d42:	4003      	ands	r3, r0
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d48:	481f      	ldr	r0, [pc, #124]	@ (8002dc8 <__NVIC_SetPriority+0xd4>)
 8002d4a:	1dfb      	adds	r3, r7, #7
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	430a      	orrs	r2, r1
 8002d54:	33c0      	adds	r3, #192	@ 0xc0
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d5a:	e031      	b.n	8002dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dcc <__NVIC_SetPriority+0xd8>)
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	0019      	movs	r1, r3
 8002d64:	230f      	movs	r3, #15
 8002d66:	400b      	ands	r3, r1
 8002d68:	3b08      	subs	r3, #8
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3306      	adds	r3, #6
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	18d3      	adds	r3, r2, r3
 8002d72:	3304      	adds	r3, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1dfa      	adds	r2, r7, #7
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	400a      	ands	r2, r1
 8002d80:	00d2      	lsls	r2, r2, #3
 8002d82:	21ff      	movs	r1, #255	@ 0xff
 8002d84:	4091      	lsls	r1, r2
 8002d86:	000a      	movs	r2, r1
 8002d88:	43d2      	mvns	r2, r2
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	22ff      	movs	r2, #255	@ 0xff
 8002d94:	401a      	ands	r2, r3
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	4003      	ands	r3, r0
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da4:	4809      	ldr	r0, [pc, #36]	@ (8002dcc <__NVIC_SetPriority+0xd8>)
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	001c      	movs	r4, r3
 8002dac:	230f      	movs	r3, #15
 8002dae:	4023      	ands	r3, r4
 8002db0:	3b08      	subs	r3, #8
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	430a      	orrs	r2, r1
 8002db6:	3306      	adds	r3, #6
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	18c3      	adds	r3, r0, r3
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b003      	add	sp, #12
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	1e5a      	subs	r2, r3, #1
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	045b      	lsls	r3, r3, #17
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d301      	bcc.n	8002de8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de4:	2301      	movs	r3, #1
 8002de6:	e010      	b.n	8002e0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <SysTick_Config+0x44>)
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	3a01      	subs	r2, #1
 8002dee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df0:	2301      	movs	r3, #1
 8002df2:	425b      	negs	r3, r3
 8002df4:	2103      	movs	r1, #3
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff ff7c 	bl	8002cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <SysTick_Config+0x44>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <SysTick_Config+0x44>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	210f      	movs	r1, #15
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	1c02      	adds	r2, r0, #0
 8002e28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	0011      	movs	r1, r2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff ff5d 	bl	8002cf4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	0002      	movs	r2, r0
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff ff33 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff ffaf 	bl	8002dd0 <SysTick_Config>
 8002e72:	0003      	movs	r3, r0
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e92:	e14f      	b.n	8003134 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4091      	lsls	r1, r2
 8002e9e:	000a      	movs	r2, r1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d100      	bne.n	8002eac <HAL_GPIO_Init+0x30>
 8002eaa:	e140      	b.n	800312e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d005      	beq.n	8002ec4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	0013      	movs	r3, r2
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	0013      	movs	r3, r2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
 8002f00:	0013      	movs	r3, r2
 8002f02:	43da      	mvns	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	2201      	movs	r2, #1
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
 8002f18:	0013      	movs	r3, r2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d017      	beq.n	8002f62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	0013      	movs	r3, r2
 8002f42:	43da      	mvns	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2203      	movs	r2, #3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d123      	bne.n	8002fb6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	58d3      	ldr	r3, [r2, r3]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2207      	movs	r2, #7
 8002f80:	4013      	ands	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	409a      	lsls	r2, r3
 8002f88:	0013      	movs	r3, r2
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2107      	movs	r1, #7
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	0013      	movs	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	23c0      	movs	r3, #192	@ 0xc0
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d100      	bne.n	8002ff8 <HAL_GPIO_Init+0x17c>
 8002ff6:	e09a      	b.n	800312e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff8:	4b54      	ldr	r3, [pc, #336]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 8002ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 8002ffe:	2101      	movs	r1, #1
 8003000:	430a      	orrs	r2, r1
 8003002:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003004:	4a52      	ldr	r2, [pc, #328]	@ (8003150 <HAL_GPIO_Init+0x2d4>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	589b      	ldr	r3, [r3, r2]
 8003010:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2203      	movs	r2, #3
 8003016:	4013      	ands	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	409a      	lsls	r2, r3
 800301e:	0013      	movs	r3, r2
 8003020:	43da      	mvns	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	23a0      	movs	r3, #160	@ 0xa0
 800302c:	05db      	lsls	r3, r3, #23
 800302e:	429a      	cmp	r2, r3
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x1ea>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a47      	ldr	r2, [pc, #284]	@ (8003154 <HAL_GPIO_Init+0x2d8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x1e6>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a46      	ldr	r2, [pc, #280]	@ (8003158 <HAL_GPIO_Init+0x2dc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x1e2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a45      	ldr	r2, [pc, #276]	@ (800315c <HAL_GPIO_Init+0x2e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x1de>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a44      	ldr	r2, [pc, #272]	@ (8003160 <HAL_GPIO_Init+0x2e4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x1da>
 8003052:	2305      	movs	r3, #5
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x1ec>
 8003056:	2306      	movs	r3, #6
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x1ec>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x1ec>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x1ec>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x1ec>
 8003066:	2300      	movs	r3, #0
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	2103      	movs	r1, #3
 800306c:	400a      	ands	r2, r1
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	@ (8003150 <HAL_GPIO_Init+0x2d4>)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b37      	ldr	r3, [pc, #220]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43da      	mvns	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	035b      	lsls	r3, r3, #13
 800309e:	4013      	ands	r3, r2
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80030b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	039b      	lsls	r3, r3, #14
 80030c8:	4013      	ands	r3, r2
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030d4:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80030da:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43da      	mvns	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	4013      	ands	r3, r2
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	43da      	mvns	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	025b      	lsls	r3, r3, #9
 800311c:	4013      	ands	r3, r2
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003128:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_GPIO_Init+0x2e8>)
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	40da      	lsrs	r2, r3
 800313c:	1e13      	subs	r3, r2, #0
 800313e:	d000      	beq.n	8003142 <HAL_GPIO_Init+0x2c6>
 8003140:	e6a8      	b.n	8002e94 <HAL_GPIO_Init+0x18>
  }
}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b006      	add	sp, #24
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	50000400 	.word	0x50000400
 8003158:	50000800 	.word	0x50000800
 800315c:	50000c00 	.word	0x50000c00
 8003160:	50001c00 	.word	0x50001c00
 8003164:	40010400 	.word	0x40010400

08003168 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	000a      	movs	r2, r1
 8003172:	1cbb      	adds	r3, r7, #2
 8003174:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	1cba      	adds	r2, r7, #2
 800317c:	8812      	ldrh	r2, [r2, #0]
 800317e:	4013      	ands	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003182:	230f      	movs	r3, #15
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e003      	b.n	8003194 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800318c:	230f      	movs	r3, #15
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003194:	230f      	movs	r3, #15
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	0008      	movs	r0, r1
 80031ac:	0011      	movs	r1, r2
 80031ae:	1cbb      	adds	r3, r7, #2
 80031b0:	1c02      	adds	r2, r0, #0
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	1c7b      	adds	r3, r7, #1
 80031b6:	1c0a      	adds	r2, r1, #0
 80031b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ba:	1c7b      	adds	r3, r7, #1
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c2:	1cbb      	adds	r3, r7, #2
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80031ca:	e003      	b.n	80031d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80031cc:	1cbb      	adds	r3, r7, #2
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	000a      	movs	r2, r1
 80031e6:	1cbb      	adds	r3, r7, #2
 80031e8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031f0:	1cbb      	adds	r3, r7, #2
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	041a      	lsls	r2, r3, #16
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	1cb9      	adds	r1, r7, #2
 8003200:	8809      	ldrh	r1, [r1, #0]
 8003202:	400b      	ands	r3, r1
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	619a      	str	r2, [r3, #24]
}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f000 fbaf 	bl	8003986 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003228:	4bcf      	ldr	r3, [pc, #828]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	220c      	movs	r2, #12
 800322e:	4013      	ands	r3, r2
 8003230:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003232:	4bcd      	ldr	r3, [pc, #820]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	4013      	ands	r3, r2
 800323c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	4013      	ands	r3, r2
 8003246:	d100      	bne.n	800324a <HAL_RCC_OscConfig+0x36>
 8003248:	e07e      	b.n	8003348 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d007      	beq.n	8003260 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d112      	bne.n	800327c <HAL_RCC_OscConfig+0x68>
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	429a      	cmp	r2, r3
 800325e:	d10d      	bne.n	800327c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	4bc1      	ldr	r3, [pc, #772]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	029b      	lsls	r3, r3, #10
 8003268:	4013      	ands	r3, r2
 800326a:	d100      	bne.n	800326e <HAL_RCC_OscConfig+0x5a>
 800326c:	e06b      	b.n	8003346 <HAL_RCC_OscConfig+0x132>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d167      	bne.n	8003346 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f000 fb85 	bl	8003986 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	025b      	lsls	r3, r3, #9
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x84>
 8003288:	4bb7      	ldr	r3, [pc, #732]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4bb6      	ldr	r3, [pc, #728]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800328e:	2180      	movs	r1, #128	@ 0x80
 8003290:	0249      	lsls	r1, r1, #9
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e027      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	23a0      	movs	r3, #160	@ 0xa0
 800329e:	02db      	lsls	r3, r3, #11
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d10e      	bne.n	80032c2 <HAL_RCC_OscConfig+0xae>
 80032a4:	4bb0      	ldr	r3, [pc, #704]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4baf      	ldr	r3, [pc, #700]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032aa:	2180      	movs	r1, #128	@ 0x80
 80032ac:	02c9      	lsls	r1, r1, #11
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4bad      	ldr	r3, [pc, #692]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4bac      	ldr	r3, [pc, #688]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032b8:	2180      	movs	r1, #128	@ 0x80
 80032ba:	0249      	lsls	r1, r1, #9
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e012      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 80032c2:	4ba9      	ldr	r3, [pc, #676]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032c8:	49a8      	ldr	r1, [pc, #672]	@ (800356c <HAL_RCC_OscConfig+0x358>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	4ba6      	ldr	r3, [pc, #664]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4ba2      	ldr	r3, [pc, #648]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80032e2:	49a3      	ldr	r1, [pc, #652]	@ (8003570 <HAL_RCC_OscConfig+0x35c>)
 80032e4:	400a      	ands	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe ff6a 	bl	80021c8 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032f8:	e009      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fa:	f7fe ff65 	bl	80021c8 <HAL_GetTick>
 80032fe:	0002      	movs	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	@ 0x64
 8003306:	d902      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	f000 fb3c 	bl	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330e:	4b96      	ldr	r3, [pc, #600]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	029b      	lsls	r3, r3, #10
 8003316:	4013      	ands	r3, r2
 8003318:	d0ef      	beq.n	80032fa <HAL_RCC_OscConfig+0xe6>
 800331a:	e015      	b.n	8003348 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe ff54 	bl	80021c8 <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003326:	f7fe ff4f 	bl	80021c8 <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	@ 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e326      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003338:	4b8b      	ldr	r3, [pc, #556]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	029b      	lsls	r3, r3, #10
 8003340:	4013      	ands	r3, r2
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x112>
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d100      	bne.n	8003354 <HAL_RCC_OscConfig+0x140>
 8003352:	e08b      	b.n	800346c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d005      	beq.n	800336c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d13e      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1d0>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d13b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800336c:	4b7e      	ldr	r3, [pc, #504]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2204      	movs	r2, #4
 8003372:	4013      	ands	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_RCC_OscConfig+0x16c>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e302      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a7b      	ldr	r2, [pc, #492]	@ (8003574 <HAL_RCC_OscConfig+0x360>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	4b75      	ldr	r3, [pc, #468]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003396:	4b74      	ldr	r3, [pc, #464]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2209      	movs	r2, #9
 800339c:	4393      	bics	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	4b71      	ldr	r3, [pc, #452]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a8:	f000 fc40 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 80033ac:	0001      	movs	r1, r0
 80033ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	220f      	movs	r2, #15
 80033b6:	4013      	ands	r3, r2
 80033b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003578 <HAL_RCC_OscConfig+0x364>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	000a      	movs	r2, r1
 80033be:	40da      	lsrs	r2, r3
 80033c0:	4b6e      	ldr	r3, [pc, #440]	@ (800357c <HAL_RCC_OscConfig+0x368>)
 80033c2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80033c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003580 <HAL_RCC_OscConfig+0x36c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2513      	movs	r5, #19
 80033ca:	197c      	adds	r4, r7, r5
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fe feb5 	bl	800213c <HAL_InitTick>
 80033d2:	0003      	movs	r3, r0
 80033d4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80033d6:	197b      	adds	r3, r7, r5
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d046      	beq.n	800346c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80033de:	197b      	adds	r3, r7, r5
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	e2d0      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d027      	beq.n	800343a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80033ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2209      	movs	r2, #9
 80033f0:	4393      	bics	r3, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fee4 	bl	80021c8 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fedf 	bl	80021c8 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e2b6      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003418:	4b53      	ldr	r3, [pc, #332]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2204      	movs	r2, #4
 800341e:	4013      	ands	r3, r2
 8003420:	d0f1      	beq.n	8003406 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b51      	ldr	r3, [pc, #324]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a53      	ldr	r2, [pc, #332]	@ (8003574 <HAL_RCC_OscConfig+0x360>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	021a      	lsls	r2, r3, #8
 8003432:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	e018      	b.n	800346c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b4b      	ldr	r3, [pc, #300]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003440:	2101      	movs	r1, #1
 8003442:	438a      	bics	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fe febf 	bl	80021c8 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe feba 	bl	80021c8 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e291      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003462:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2204      	movs	r2, #4
 8003468:	4013      	ands	r3, r2
 800346a:	d1f1      	bne.n	8003450 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2210      	movs	r2, #16
 8003472:	4013      	ands	r3, r2
 8003474:	d100      	bne.n	8003478 <HAL_RCC_OscConfig+0x264>
 8003476:	e0a1      	b.n	80035bc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d140      	bne.n	8003500 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800347e:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4013      	ands	r3, r2
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x282>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e277      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003496:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a3a      	ldr	r2, [pc, #232]	@ (8003584 <HAL_RCC_OscConfig+0x370>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034a4:	4b30      	ldr	r3, [pc, #192]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	0a19      	lsrs	r1, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	061a      	lsls	r2, r3, #24
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	3301      	adds	r3, #1
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0212      	lsls	r2, r2, #8
 80034ca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034cc:	4b26      	ldr	r3, [pc, #152]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	210f      	movs	r1, #15
 80034d4:	400b      	ands	r3, r1
 80034d6:	4928      	ldr	r1, [pc, #160]	@ (8003578 <HAL_RCC_OscConfig+0x364>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_RCC_OscConfig+0x368>)
 80034de:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80034e0:	4b27      	ldr	r3, [pc, #156]	@ (8003580 <HAL_RCC_OscConfig+0x36c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2513      	movs	r5, #19
 80034e6:	197c      	adds	r4, r7, r5
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe fe27 	bl	800213c <HAL_InitTick>
 80034ee:	0003      	movs	r3, r0
 80034f0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80034f2:	197b      	adds	r3, r7, r5
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d060      	beq.n	80035bc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80034fa:	197b      	adds	r3, r7, r5
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	e242      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03f      	beq.n	8003588 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003508:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	0049      	lsls	r1, r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe fe57 	bl	80021c8 <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003520:	f7fe fe52 	bl	80021c8 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e229      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a10      	ldr	r2, [pc, #64]	@ (8003584 <HAL_RCC_OscConfig+0x370>)
 8003544:	4013      	ands	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	0a19      	lsrs	r1, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	061a      	lsls	r2, r3, #24
 8003560:	4b01      	ldr	r3, [pc, #4]	@ (8003568 <HAL_RCC_OscConfig+0x354>)
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	e029      	b.n	80035bc <HAL_RCC_OscConfig+0x3a8>
 8003568:	40021000 	.word	0x40021000
 800356c:	fffeffff 	.word	0xfffeffff
 8003570:	fffbffff 	.word	0xfffbffff
 8003574:	ffffe0ff 	.word	0xffffe0ff
 8003578:	08004dcc 	.word	0x08004dcc
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004
 8003584:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003588:	4bbd      	ldr	r3, [pc, #756]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4bbc      	ldr	r3, [pc, #752]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800358e:	49bd      	ldr	r1, [pc, #756]	@ (8003884 <HAL_RCC_OscConfig+0x670>)
 8003590:	400a      	ands	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fe18 	bl	80021c8 <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800359e:	f7fe fe13 	bl	80021c8 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e1ea      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80035b0:	4bb3      	ldr	r3, [pc, #716]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	4013      	ands	r3, r2
 80035c4:	d036      	beq.n	8003634 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4bac      	ldr	r3, [pc, #688]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80035d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035d2:	4bab      	ldr	r3, [pc, #684]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe fdf5 	bl	80021c8 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe fdf0 	bl	80021c8 <HAL_GetTick>
 80035e8:	0002      	movs	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1c7      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035f6:	4ba2      	ldr	r3, [pc, #648]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80035f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d0f1      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3d0>
 8003600:	e018      	b.n	8003634 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003602:	4b9f      	ldr	r3, [pc, #636]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003606:	4b9e      	ldr	r3, [pc, #632]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003608:	2101      	movs	r1, #1
 800360a:	438a      	bics	r2, r1
 800360c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7fe fddb 	bl	80021c8 <HAL_GetTick>
 8003612:	0003      	movs	r3, r0
 8003614:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003618:	f7fe fdd6 	bl	80021c8 <HAL_GetTick>
 800361c:	0002      	movs	r2, r0
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1ad      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800362a:	4b95      	ldr	r3, [pc, #596]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362e:	2202      	movs	r2, #2
 8003630:	4013      	ands	r3, r2
 8003632:	d1f1      	bne.n	8003618 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2204      	movs	r2, #4
 800363a:	4013      	ands	r3, r2
 800363c:	d100      	bne.n	8003640 <HAL_RCC_OscConfig+0x42c>
 800363e:	e0ae      	b.n	800379e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003640:	2027      	movs	r0, #39	@ 0x27
 8003642:	183b      	adds	r3, r7, r0
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003648:	4b8d      	ldr	r3, [pc, #564]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800364a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	055b      	lsls	r3, r3, #21
 8003650:	4013      	ands	r3, r2
 8003652:	d109      	bne.n	8003668 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003654:	4b8a      	ldr	r3, [pc, #552]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003658:	4b89      	ldr	r3, [pc, #548]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800365a:	2180      	movs	r1, #128	@ 0x80
 800365c:	0549      	lsls	r1, r1, #21
 800365e:	430a      	orrs	r2, r1
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003662:	183b      	adds	r3, r7, r0
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b87      	ldr	r3, [pc, #540]	@ (8003888 <HAL_RCC_OscConfig+0x674>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	@ 0x80
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d11a      	bne.n	80036aa <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003674:	4b84      	ldr	r3, [pc, #528]	@ (8003888 <HAL_RCC_OscConfig+0x674>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b83      	ldr	r3, [pc, #524]	@ (8003888 <HAL_RCC_OscConfig+0x674>)
 800367a:	2180      	movs	r1, #128	@ 0x80
 800367c:	0049      	lsls	r1, r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe fda1 	bl	80021c8 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fe fd9c 	bl	80021c8 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e173      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <HAL_RCC_OscConfig+0x674>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4b2>
 80036b6:	4b72      	ldr	r3, [pc, #456]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ba:	4b71      	ldr	r3, [pc, #452]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036bc:	2180      	movs	r1, #128	@ 0x80
 80036be:	0049      	lsls	r1, r1, #1
 80036c0:	430a      	orrs	r2, r1
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80036c4:	e031      	b.n	800372a <HAL_RCC_OscConfig+0x516>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4d4>
 80036ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036d4:	496b      	ldr	r1, [pc, #428]	@ (8003884 <HAL_RCC_OscConfig+0x670>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80036da:	4b69      	ldr	r3, [pc, #420]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036de:	4b68      	ldr	r3, [pc, #416]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036e0:	496a      	ldr	r1, [pc, #424]	@ (800388c <HAL_RCC_OscConfig+0x678>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80036e6:	e020      	b.n	800372a <HAL_RCC_OscConfig+0x516>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	23a0      	movs	r3, #160	@ 0xa0
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d10e      	bne.n	8003712 <HAL_RCC_OscConfig+0x4fe>
 80036f4:	4b62      	ldr	r3, [pc, #392]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036f8:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80036fa:	2180      	movs	r1, #128	@ 0x80
 80036fc:	00c9      	lsls	r1, r1, #3
 80036fe:	430a      	orrs	r2, r1
 8003700:	651a      	str	r2, [r3, #80]	@ 0x50
 8003702:	4b5f      	ldr	r3, [pc, #380]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003706:	4b5e      	ldr	r3, [pc, #376]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003708:	2180      	movs	r1, #128	@ 0x80
 800370a:	0049      	lsls	r1, r1, #1
 800370c:	430a      	orrs	r2, r1
 800370e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x516>
 8003712:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003716:	4b5a      	ldr	r3, [pc, #360]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003718:	495a      	ldr	r1, [pc, #360]	@ (8003884 <HAL_RCC_OscConfig+0x670>)
 800371a:	400a      	ands	r2, r1
 800371c:	651a      	str	r2, [r3, #80]	@ 0x50
 800371e:	4b58      	ldr	r3, [pc, #352]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003722:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003724:	4959      	ldr	r1, [pc, #356]	@ (800388c <HAL_RCC_OscConfig+0x678>)
 8003726:	400a      	ands	r2, r1
 8003728:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fe fd49 	bl	80021c8 <HAL_GetTick>
 8003736:	0003      	movs	r3, r0
 8003738:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800373a:	e009      	b.n	8003750 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fe fd44 	bl	80021c8 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	4a52      	ldr	r2, [pc, #328]	@ (8003890 <HAL_RCC_OscConfig+0x67c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e11a      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003750:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003752:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4013      	ands	r3, r2
 800375a:	d0ef      	beq.n	800373c <HAL_RCC_OscConfig+0x528>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7fe fd33 	bl	80021c8 <HAL_GetTick>
 8003762:	0003      	movs	r3, r0
 8003764:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003766:	e009      	b.n	800377c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7fe fd2e 	bl	80021c8 <HAL_GetTick>
 800376c:	0002      	movs	r2, r0
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	4a47      	ldr	r2, [pc, #284]	@ (8003890 <HAL_RCC_OscConfig+0x67c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e104      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800377c:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800377e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d1ef      	bne.n	8003768 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003788:	2327      	movs	r3, #39	@ 0x27
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003796:	4b3a      	ldr	r3, [pc, #232]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003798:	493e      	ldr	r1, [pc, #248]	@ (8003894 <HAL_RCC_OscConfig+0x680>)
 800379a:	400a      	ands	r2, r1
 800379c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2220      	movs	r2, #32
 80037a4:	4013      	ands	r3, r2
 80037a6:	d049      	beq.n	800383c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d026      	beq.n	80037fe <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80037b0:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80037b6:	2101      	movs	r1, #1
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80037be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80037c8:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <HAL_RCC_OscConfig+0x684>)
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_RCC_OscConfig+0x684>)
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	0189      	lsls	r1, r1, #6
 80037d2:	430a      	orrs	r2, r1
 80037d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe fcf7 	bl	80021c8 <HAL_GetTick>
 80037da:	0003      	movs	r3, r0
 80037dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e0:	f7fe fcf2 	bl	80021c8 <HAL_GetTick>
 80037e4:	0002      	movs	r2, r0
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0c9      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037f2:	4b23      	ldr	r3, [pc, #140]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2202      	movs	r2, #2
 80037f8:	4013      	ands	r3, r2
 80037fa:	d0f1      	beq.n	80037e0 <HAL_RCC_OscConfig+0x5cc>
 80037fc:	e01e      	b.n	800383c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	4b1f      	ldr	r3, [pc, #124]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003804:	2101      	movs	r1, #1
 8003806:	438a      	bics	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	4b23      	ldr	r3, [pc, #140]	@ (8003898 <HAL_RCC_OscConfig+0x684>)
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_RCC_OscConfig+0x684>)
 8003810:	4922      	ldr	r1, [pc, #136]	@ (800389c <HAL_RCC_OscConfig+0x688>)
 8003812:	400a      	ands	r2, r1
 8003814:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7fe fcd7 	bl	80021c8 <HAL_GetTick>
 800381a:	0003      	movs	r3, r0
 800381c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003820:	f7fe fcd2 	bl	80021c8 <HAL_GetTick>
 8003824:	0002      	movs	r2, r0
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0a9      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003832:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2202      	movs	r2, #2
 8003838:	4013      	ands	r3, r2
 800383a:	d1f1      	bne.n	8003820 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d100      	bne.n	8003846 <HAL_RCC_OscConfig+0x632>
 8003844:	e09e      	b.n	8003984 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d100      	bne.n	800384e <HAL_RCC_OscConfig+0x63a>
 800384c:	e077      	b.n	800393e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	2b02      	cmp	r3, #2
 8003854:	d158      	bne.n	8003908 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003856:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_OscConfig+0x66c>)
 800385c:	4910      	ldr	r1, [pc, #64]	@ (80038a0 <HAL_RCC_OscConfig+0x68c>)
 800385e:	400a      	ands	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fcb1 	bl	80021c8 <HAL_GetTick>
 8003866:	0003      	movs	r3, r0
 8003868:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800386a:	e01b      	b.n	80038a4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe fcac 	bl	80021c8 <HAL_GetTick>
 8003870:	0002      	movs	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d914      	bls.n	80038a4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e083      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	40021000 	.word	0x40021000
 8003884:	fffffeff 	.word	0xfffffeff
 8003888:	40007000 	.word	0x40007000
 800388c:	fffffbff 	.word	0xfffffbff
 8003890:	00001388 	.word	0x00001388
 8003894:	efffffff 	.word	0xefffffff
 8003898:	40010000 	.word	0x40010000
 800389c:	ffffdfff 	.word	0xffffdfff
 80038a0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	049b      	lsls	r3, r3, #18
 80038ac:	4013      	ands	r3, r2
 80038ae:	d1dd      	bne.n	800386c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b0:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a37      	ldr	r2, [pc, #220]	@ (8003994 <HAL_RCC_OscConfig+0x780>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	431a      	orrs	r2, r3
 80038ca:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 80038cc:	430a      	orrs	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 80038d6:	2180      	movs	r1, #128	@ 0x80
 80038d8:	0449      	lsls	r1, r1, #17
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fe fc73 	bl	80021c8 <HAL_GetTick>
 80038e2:	0003      	movs	r3, r0
 80038e4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe fc6e 	bl	80021c8 <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e045      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038fa:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	049b      	lsls	r3, r3, #18
 8003902:	4013      	ands	r3, r2
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x6d4>
 8003906:	e03d      	b.n	8003984 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b21      	ldr	r3, [pc, #132]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 800390e:	4922      	ldr	r1, [pc, #136]	@ (8003998 <HAL_RCC_OscConfig+0x784>)
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fc58 	bl	80021c8 <HAL_GetTick>
 8003918:	0003      	movs	r3, r0
 800391a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fc53 	bl	80021c8 <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e02a      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003930:	4b17      	ldr	r3, [pc, #92]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	049b      	lsls	r3, r3, #18
 8003938:	4013      	ands	r3, r2
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x70a>
 800393c:	e022      	b.n	8003984 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01d      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_RCC_OscConfig+0x77c>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	2380      	movs	r3, #128	@ 0x80
 8003954:	025b      	lsls	r3, r3, #9
 8003956:	401a      	ands	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	429a      	cmp	r2, r3
 800395e:	d10f      	bne.n	8003980 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	23f0      	movs	r3, #240	@ 0xf0
 8003964:	039b      	lsls	r3, r3, #14
 8003966:	401a      	ands	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	23c0      	movs	r3, #192	@ 0xc0
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b00a      	add	sp, #40	@ 0x28
 800398c:	bdb0      	pop	{r4, r5, r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	40021000 	.word	0x40021000
 8003994:	ff02ffff 	.word	0xff02ffff
 8003998:	feffffff 	.word	0xfeffffff

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e128      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b96      	ldr	r3, [pc, #600]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d91e      	bls.n	80039fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b93      	ldr	r3, [pc, #588]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	4393      	bics	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	4b90      	ldr	r3, [pc, #576]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fbfa 	bl	80021c8 <HAL_GetTick>
 80039d4:	0003      	movs	r3, r0
 80039d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d8:	e009      	b.n	80039ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039da:	f7fe fbf5 	bl	80021c8 <HAL_GetTick>
 80039de:	0002      	movs	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e109      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b87      	ldr	r3, [pc, #540]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	4013      	ands	r3, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1ee      	bne.n	80039da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2202      	movs	r2, #2
 8003a02:	4013      	ands	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a06:	4b83      	ldr	r3, [pc, #524]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	22f0      	movs	r2, #240	@ 0xf0
 8003a0c:	4393      	bics	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b7f      	ldr	r3, [pc, #508]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	d100      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
 8003a24:	e089      	b.n	8003b3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a2e:	4b79      	ldr	r3, [pc, #484]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	4013      	ands	r3, r2
 8003a38:	d120      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0e1      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a46:	4b73      	ldr	r3, [pc, #460]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	049b      	lsls	r3, r3, #18
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d114      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0d5      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2204      	movs	r2, #4
 8003a64:	4013      	ands	r3, r2
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0ca      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a6c:	4b69      	ldr	r3, [pc, #420]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0c2      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7c:	4b65      	ldr	r3, [pc, #404]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2203      	movs	r2, #3
 8003a82:	4393      	bics	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4b62      	ldr	r3, [pc, #392]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a90:	f7fe fb9a 	bl	80021c8 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d111      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa0:	e009      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa2:	f7fe fb91 	bl	80021c8 <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	4a58      	ldr	r2, [pc, #352]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0a5      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab6:	4b57      	ldr	r3, [pc, #348]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	220c      	movs	r2, #12
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d1ef      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0x106>
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d111      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003acc:	e009      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ace:	f7fe fb7b 	bl	80021c8 <HAL_GetTick>
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e08f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d1ef      	bne.n	8003ace <HAL_RCC_ClockConfig+0x132>
 8003aee:	e024      	b.n	8003b3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11b      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af8:	e009      	b.n	8003b0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f7fe fb65 	bl	80021c8 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e079      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b0e:	4b41      	ldr	r3, [pc, #260]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	220c      	movs	r2, #12
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d1ef      	bne.n	8003afa <HAL_RCC_ClockConfig+0x15e>
 8003b1a:	e00e      	b.n	8003b3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fe fb54 	bl	80021c8 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	4a3a      	ldr	r2, [pc, #232]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e068      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b30:	4b38      	ldr	r3, [pc, #224]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	220c      	movs	r2, #12
 8003b36:	4013      	ands	r3, r2
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3a:	4b34      	ldr	r3, [pc, #208]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d21e      	bcs.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b48:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4393      	bics	r3, r2
 8003b50:	0019      	movs	r1, r3
 8003b52:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b5a:	f7fe fb35 	bl	80021c8 <HAL_GetTick>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	e009      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fe fb30 	bl	80021c8 <HAL_GetTick>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a28      	ldr	r2, [pc, #160]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e044      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b78:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4013      	ands	r3, r2
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d1ee      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a20      	ldr	r2, [pc, #128]	@ (8003c18 <HAL_RCC_ClockConfig+0x27c>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	4013      	ands	r3, r2
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bae:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c1c <HAL_RCC_ClockConfig+0x280>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	00da      	lsls	r2, r3, #3
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc4:	f000 f832 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bc8:	0001      	movs	r1, r0
 8003bca:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <HAL_RCC_ClockConfig+0x284>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	000a      	movs	r2, r1
 8003bda:	40da      	lsrs	r2, r3
 8003bdc:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <HAL_RCC_ClockConfig+0x288>)
 8003bde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003be0:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <HAL_RCC_ClockConfig+0x28c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	250b      	movs	r5, #11
 8003be6:	197c      	adds	r4, r7, r5
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7fe faa7 	bl	800213c <HAL_InitTick>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003bf2:	197b      	adds	r3, r7, r5
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003bfa:	197b      	adds	r3, r7, r5
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b004      	add	sp, #16
 8003c08:	bdb0      	pop	{r4, r5, r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	40022000 	.word	0x40022000
 8003c10:	00001388 	.word	0x00001388
 8003c14:	40021000 	.word	0x40021000
 8003c18:	fffff8ff 	.word	0xfffff8ff
 8003c1c:	ffffc7ff 	.word	0xffffc7ff
 8003c20:	08004dcc 	.word	0x08004dcc
 8003c24:	20000000 	.word	0x20000000
 8003c28:	20000004 	.word	0x20000004

08003c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d013      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x3e>
 8003c42:	d85c      	bhi.n	8003cfe <HAL_RCC_GetSysClockFreq+0xd2>
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d002      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x22>
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d00b      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x38>
 8003c4c:	e057      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c4e:	4b35      	ldr	r3, [pc, #212]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	4013      	ands	r3, r2
 8003c56:	d002      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003c58:	4b33      	ldr	r3, [pc, #204]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c5a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003c5c:	e05d      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003c5e:	4b33      	ldr	r3, [pc, #204]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x100>)
 8003c60:	613b      	str	r3, [r7, #16]
      break;
 8003c62:	e05a      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c64:	4b32      	ldr	r3, [pc, #200]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c66:	613b      	str	r3, [r7, #16]
      break;
 8003c68:	e057      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0c9b      	lsrs	r3, r3, #18
 8003c6e:	220f      	movs	r2, #15
 8003c70:	4013      	ands	r3, r2
 8003c72:	4a30      	ldr	r2, [pc, #192]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	0d9b      	lsrs	r3, r3, #22
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	4013      	ands	r3, r2
 8003c80:	3301      	adds	r3, #1
 8003c82:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	000a      	movs	r2, r1
 8003c94:	0152      	lsls	r2, r2, #5
 8003c96:	1a52      	subs	r2, r2, r1
 8003c98:	0193      	lsls	r3, r2, #6
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	185b      	adds	r3, r3, r1
 8003ca0:	025b      	lsls	r3, r3, #9
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fc fa2f 	bl	8000108 <__udivsi3>
 8003caa:	0003      	movs	r3, r0
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e023      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	000a      	movs	r2, r1
 8003cbe:	0152      	lsls	r2, r2, #5
 8003cc0:	1a52      	subs	r2, r2, r1
 8003cc2:	0193      	lsls	r3, r2, #6
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	185b      	adds	r3, r3, r1
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fc fa1a 	bl	8000108 <__udivsi3>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e00e      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	000a      	movs	r2, r1
 8003cde:	0152      	lsls	r2, r2, #5
 8003ce0:	1a52      	subs	r2, r2, r1
 8003ce2:	0193      	lsls	r3, r2, #6
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	185b      	adds	r3, r3, r1
 8003cea:	029b      	lsls	r3, r3, #10
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7fc fa0a 	bl	8000108 <__udivsi3>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	613b      	str	r3, [r7, #16]
      break;
 8003cfc:	e00d      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0b5b      	lsrs	r3, r3, #13
 8003d04:	2207      	movs	r2, #7
 8003d06:	4013      	ands	r3, r2
 8003d08:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	2280      	movs	r2, #128	@ 0x80
 8003d10:	0212      	lsls	r2, r2, #8
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
      break;
 8003d18:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d1a:	693b      	ldr	r3, [r7, #16]
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b006      	add	sp, #24
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	003d0900 	.word	0x003d0900
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200
 8003d34:	08004ddc 	.word	0x08004ddc

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e032      	b.n	8003db0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2239      	movs	r2, #57	@ 0x39
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2238      	movs	r2, #56	@ 0x38
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fe f873 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2239      	movs	r2, #57	@ 0x39
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	0019      	movs	r1, r3
 8003d78:	0010      	movs	r0, r2
 8003d7a:	f000 fcd9 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223e      	movs	r2, #62	@ 0x3e
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	223a      	movs	r2, #58	@ 0x3a
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223b      	movs	r2, #59	@ 0x3b
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223c      	movs	r2, #60	@ 0x3c
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223d      	movs	r2, #61	@ 0x3d
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2239      	movs	r2, #57	@ 0x39
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2239      	movs	r2, #57	@ 0x39
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e036      	b.n	8003e3e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2239      	movs	r2, #57	@ 0x39
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2101      	movs	r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	05db      	lsls	r3, r3, #23
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d009      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x50>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a13      	ldr	r2, [pc, #76]	@ (8003e48 <HAL_TIM_Base_Start_IT+0x90>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x50>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <HAL_TIM_Base_Start_IT+0x94>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d111      	bne.n	8003e2c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2207      	movs	r2, #7
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d010      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	e007      	b.n	8003e3c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b004      	add	sp, #16
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	40010800 	.word	0x40010800
 8003e4c:	40011400 	.word	0x40011400

08003e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e032      	b.n	8003ec8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2239      	movs	r2, #57	@ 0x39
 8003e66:	5c9b      	ldrb	r3, [r3, r2]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d107      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2238      	movs	r2, #56	@ 0x38
 8003e72:	2100      	movs	r1, #0
 8003e74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f829 	bl	8003ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2239      	movs	r2, #57	@ 0x39
 8003e82:	2102      	movs	r1, #2
 8003e84:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f000 fc4d 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	223e      	movs	r2, #62	@ 0x3e
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	223a      	movs	r2, #58	@ 0x3a
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223b      	movs	r2, #59	@ 0x3b
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223c      	movs	r2, #60	@ 0x3c
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	223d      	movs	r2, #61	@ 0x3d
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2239      	movs	r2, #57	@ 0x39
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x22>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	223a      	movs	r2, #58	@ 0x3a
 8003ef4:	5c9b      	ldrb	r3, [r3, r2]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	4193      	sbcs	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e01f      	b.n	8003f42 <HAL_TIM_PWM_Start+0x62>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d108      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x3a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	223b      	movs	r2, #59	@ 0x3b
 8003f0c:	5c9b      	ldrb	r3, [r3, r2]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	4193      	sbcs	r3, r2
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e013      	b.n	8003f42 <HAL_TIM_PWM_Start+0x62>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d108      	bne.n	8003f32 <HAL_TIM_PWM_Start+0x52>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	223c      	movs	r2, #60	@ 0x3c
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	4193      	sbcs	r3, r2
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e007      	b.n	8003f42 <HAL_TIM_PWM_Start+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223d      	movs	r2, #61	@ 0x3d
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	1e5a      	subs	r2, r3, #1
 8003f3e:	4193      	sbcs	r3, r2
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e04d      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_PWM_Start+0x7a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	223a      	movs	r2, #58	@ 0x3a
 8003f54:	2102      	movs	r1, #2
 8003f56:	5499      	strb	r1, [r3, r2]
 8003f58:	e013      	b.n	8003f82 <HAL_TIM_PWM_Start+0xa2>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start+0x8a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	223b      	movs	r2, #59	@ 0x3b
 8003f64:	2102      	movs	r1, #2
 8003f66:	5499      	strb	r1, [r3, r2]
 8003f68:	e00b      	b.n	8003f82 <HAL_TIM_PWM_Start+0xa2>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0x9a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	223c      	movs	r2, #60	@ 0x3c
 8003f74:	2102      	movs	r1, #2
 8003f76:	5499      	strb	r1, [r3, r2]
 8003f78:	e003      	b.n	8003f82 <HAL_TIM_PWM_Start+0xa2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	223d      	movs	r2, #61	@ 0x3d
 8003f7e:	2102      	movs	r1, #2
 8003f80:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fdc8 	bl	8004b20 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2380      	movs	r3, #128	@ 0x80
 8003f96:	05db      	lsls	r3, r3, #23
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d009      	beq.n	8003fb0 <HAL_TIM_PWM_Start+0xd0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <HAL_TIM_PWM_Start+0x110>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_TIM_PWM_Start+0xd0>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <HAL_TIM_PWM_Start+0x114>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d010      	beq.n	8003fe4 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	e007      	b.n	8003fe4 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b004      	add	sp, #16
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	40010800 	.word	0x40010800
 8003ff4:	40011400 	.word	0x40011400

08003ff8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e088      	b.n	800411e <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2239      	movs	r2, #57	@ 0x39
 8004010:	5c9b      	ldrb	r3, [r3, r2]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2238      	movs	r2, #56	@ 0x38
 800401c:	2100      	movs	r1, #0
 800401e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f7fd ff46 	bl	8001eb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2239      	movs	r2, #57	@ 0x39
 800402c:	2102      	movs	r1, #2
 800402e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	493b      	ldr	r1, [pc, #236]	@ (8004128 <HAL_TIM_Encoder_Init+0x130>)
 800403c:	400a      	ands	r2, r1
 800403e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	0019      	movs	r1, r3
 800404a:	0010      	movs	r0, r2
 800404c:	f000 fb70 	bl	8004730 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <HAL_TIM_Encoder_Init+0x134>)
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4313      	orrs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4a28      	ldr	r2, [pc, #160]	@ (8004130 <HAL_TIM_Encoder_Init+0x138>)
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4a27      	ldr	r2, [pc, #156]	@ (8004134 <HAL_TIM_Encoder_Init+0x13c>)
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	4313      	orrs	r3, r2
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	011a      	lsls	r2, r3, #4
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	4313      	orrs	r3, r2
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2222      	movs	r2, #34	@ 0x22
 80040c6:	4393      	bics	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2288      	movs	r2, #136	@ 0x88
 80040ce:	4393      	bics	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4313      	orrs	r3, r2
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	223e      	movs	r2, #62	@ 0x3e
 8004100:	2101      	movs	r1, #1
 8004102:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	223a      	movs	r2, #58	@ 0x3a
 8004108:	2101      	movs	r1, #1
 800410a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	223b      	movs	r2, #59	@ 0x3b
 8004110:	2101      	movs	r1, #1
 8004112:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2239      	movs	r2, #57	@ 0x39
 8004118:	2101      	movs	r1, #1
 800411a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b006      	add	sp, #24
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	ffffbff8 	.word	0xffffbff8
 800412c:	fffffcfc 	.word	0xfffffcfc
 8004130:	fffff3f3 	.word	0xfffff3f3
 8004134:	ffff0f0f 	.word	0xffff0f0f

08004138 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004142:	200f      	movs	r0, #15
 8004144:	183b      	adds	r3, r7, r0
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	213a      	movs	r1, #58	@ 0x3a
 800414a:	5c52      	ldrb	r2, [r2, r1]
 800414c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800414e:	230e      	movs	r3, #14
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	213b      	movs	r1, #59	@ 0x3b
 8004156:	5c52      	ldrb	r2, [r2, r1]
 8004158:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_TIM_Encoder_Start+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004160:	183b      	adds	r3, r7, r0
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d001      	beq.n	800416c <HAL_TIM_Encoder_Start+0x34>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e056      	b.n	800421a <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	223a      	movs	r2, #58	@ 0x3a
 8004170:	2102      	movs	r1, #2
 8004172:	5499      	strb	r1, [r3, r2]
 8004174:	e022      	b.n	80041bc <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d10b      	bne.n	8004194 <HAL_TIM_Encoder_Start+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800417c:	230e      	movs	r3, #14
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_TIM_Encoder_Start+0x52>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e047      	b.n	800421a <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	223b      	movs	r2, #59	@ 0x3b
 800418e:	2102      	movs	r1, #2
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	e013      	b.n	80041bc <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004194:	230f      	movs	r3, #15
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d104      	bne.n	80041a8 <HAL_TIM_Encoder_Start+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800419e:	230e      	movs	r3, #14
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Encoder_Start+0x74>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e036      	b.n	800421a <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	223a      	movs	r2, #58	@ 0x3a
 80041b0:	2102      	movs	r1, #2
 80041b2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223b      	movs	r2, #59	@ 0x3b
 80041b8:	2102      	movs	r1, #2
 80041ba:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_Encoder_Start+0x92>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d008      	beq.n	80041da <HAL_TIM_Encoder_Start+0xa2>
 80041c8:	e00f      	b.n	80041ea <HAL_TIM_Encoder_Start+0xb2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2201      	movs	r2, #1
 80041d0:	2100      	movs	r1, #0
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fca4 	bl	8004b20 <TIM_CCxChannelCmd>
      break;
 80041d8:	e016      	b.n	8004208 <HAL_TIM_Encoder_Start+0xd0>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	2104      	movs	r1, #4
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 fc9c 	bl	8004b20 <TIM_CCxChannelCmd>
      break;
 80041e8:	e00e      	b.n	8004208 <HAL_TIM_Encoder_Start+0xd0>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	2100      	movs	r1, #0
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 fc94 	bl	8004b20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	2104      	movs	r1, #4
 8004200:	0018      	movs	r0, r3
 8004202:	f000 fc8d 	bl	8004b20 <TIM_CCxChannelCmd>
      break;
 8004206:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b004      	add	sp, #16
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2202      	movs	r2, #2
 800423e:	4013      	ands	r3, r2
 8004240:	d021      	beq.n	8004286 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	4013      	ands	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2203      	movs	r2, #3
 8004250:	4252      	negs	r2, r2
 8004252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2203      	movs	r2, #3
 8004262:	4013      	ands	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0018      	movs	r0, r3
 800426a:	f000 fa49 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 800426e:	e007      	b.n	8004280 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fa3c 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	0018      	movs	r0, r3
 800427c:	f000 fa48 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2204      	movs	r2, #4
 800428a:	4013      	ands	r3, r2
 800428c:	d022      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2204      	movs	r2, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d01e      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2205      	movs	r2, #5
 800429c:	4252      	negs	r2, r2
 800429e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	23c0      	movs	r3, #192	@ 0xc0
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4013      	ands	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 fa22 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e007      	b.n	80042ce <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 fa15 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 fa21 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2208      	movs	r2, #8
 80042d8:	4013      	ands	r3, r2
 80042da:	d021      	beq.n	8004320 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2208      	movs	r2, #8
 80042e0:	4013      	ands	r3, r2
 80042e2:	d01d      	beq.n	8004320 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2209      	movs	r2, #9
 80042ea:	4252      	negs	r2, r2
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	2203      	movs	r2, #3
 80042fc:	4013      	ands	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	0018      	movs	r0, r3
 8004304:	f000 f9fc 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 8004308:	e007      	b.n	800431a <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0018      	movs	r0, r3
 800430e:	f000 f9ef 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0018      	movs	r0, r3
 8004316:	f000 f9fb 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2210      	movs	r2, #16
 8004324:	4013      	ands	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2210      	movs	r2, #16
 800432c:	4013      	ands	r3, r2
 800432e:	d01e      	beq.n	800436e <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2211      	movs	r2, #17
 8004336:	4252      	negs	r2, r2
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2208      	movs	r2, #8
 800433e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	23c0      	movs	r3, #192	@ 0xc0
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4013      	ands	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f9d5 	bl	8004700 <HAL_TIM_IC_CaptureCallback>
 8004356:	e007      	b.n	8004368 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f9c8 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0018      	movs	r0, r3
 8004364:	f000 f9d4 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2201      	movs	r2, #1
 8004372:	4013      	ands	r3, r2
 8004374:	d00c      	beq.n	8004390 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d008      	beq.n	8004390 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2202      	movs	r2, #2
 8004384:	4252      	negs	r2, r2
 8004386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0018      	movs	r0, r3
 800438c:	f7fc fe12 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	4013      	ands	r3, r2
 8004396:	d00c      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	4013      	ands	r3, r2
 800439e:	d008      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2241      	movs	r2, #65	@ 0x41
 80043a6:	4252      	negs	r2, r2
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f9b7 	bl	8004720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b004      	add	sp, #16
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2317      	movs	r3, #23
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2238      	movs	r2, #56	@ 0x38
 80043d4:	5c9b      	ldrb	r3, [r3, r2]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_TIM_PWM_ConfigChannel+0x22>
 80043da:	2302      	movs	r3, #2
 80043dc:	e0ad      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2238      	movs	r2, #56	@ 0x38
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d100      	bne.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80043ec:	e076      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x120>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d900      	bls.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043f4:	e095      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d04e      	beq.n	800449a <HAL_TIM_PWM_ConfigChannel+0xde>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d900      	bls.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004402:	e08e      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_PWM_ConfigChannel+0x56>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d021      	beq.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004410:	e087      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f000 f9e2 	bl	80047e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2108      	movs	r1, #8
 800442c:	430a      	orrs	r2, r1
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2104      	movs	r1, #4
 800443c:	438a      	bics	r2, r1
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	619a      	str	r2, [r3, #24]
      break;
 8004452:	e06b      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	0011      	movs	r1, r2
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f9fd 	bl	800485c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	0109      	lsls	r1, r1, #4
 8004470:	430a      	orrs	r2, r1
 8004472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4931      	ldr	r1, [pc, #196]	@ (8004544 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004480:	400a      	ands	r2, r1
 8004482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6999      	ldr	r1, [r3, #24]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	619a      	str	r2, [r3, #24]
      break;
 8004498:	e048      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0011      	movs	r1, r2
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 fa1c 	bl	80048e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2108      	movs	r1, #8
 80044b4:	430a      	orrs	r2, r1
 80044b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2104      	movs	r1, #4
 80044c4:	438a      	bics	r2, r1
 80044c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69d9      	ldr	r1, [r3, #28]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	61da      	str	r2, [r3, #28]
      break;
 80044da:	e027      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 fa3b 	bl	8004960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2180      	movs	r1, #128	@ 0x80
 80044f6:	0109      	lsls	r1, r1, #4
 80044f8:	430a      	orrs	r2, r1
 80044fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	490f      	ldr	r1, [pc, #60]	@ (8004544 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004508:	400a      	ands	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69d9      	ldr	r1, [r3, #28]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	61da      	str	r2, [r3, #28]
      break;
 8004520:	e004      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004522:	2317      	movs	r3, #23
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
      break;
 800452a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2238      	movs	r2, #56	@ 0x38
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

  return status;
 8004534:	2317      	movs	r3, #23
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	781b      	ldrb	r3, [r3, #0]
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b006      	add	sp, #24
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	fffffbff 	.word	0xfffffbff

08004548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	230f      	movs	r3, #15
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2238      	movs	r2, #56	@ 0x38
 800455e:	5c9b      	ldrb	r3, [r3, r2]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIM_ConfigClockSource+0x20>
 8004564:	2302      	movs	r3, #2
 8004566:	e0bc      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x19a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2238      	movs	r2, #56	@ 0x38
 800456c:	2101      	movs	r1, #1
 800456e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2239      	movs	r2, #57	@ 0x39
 8004574:	2102      	movs	r1, #2
 8004576:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2277      	movs	r2, #119	@ 0x77
 8004584:	4393      	bics	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a58      	ldr	r2, [pc, #352]	@ (80046ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2280      	movs	r2, #128	@ 0x80
 800459e:	0192      	lsls	r2, r2, #6
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d040      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xde>
 80045a4:	2280      	movs	r2, #128	@ 0x80
 80045a6:	0192      	lsls	r2, r2, #6
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d900      	bls.n	80045ae <HAL_TIM_ConfigClockSource+0x66>
 80045ac:	e088      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045ae:	2280      	movs	r2, #128	@ 0x80
 80045b0:	0152      	lsls	r2, r2, #5
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d100      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x70>
 80045b6:	e088      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x182>
 80045b8:	2280      	movs	r2, #128	@ 0x80
 80045ba:	0152      	lsls	r2, r2, #5
 80045bc:	4293      	cmp	r3, r2
 80045be:	d900      	bls.n	80045c2 <HAL_TIM_ConfigClockSource+0x7a>
 80045c0:	e07e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045c2:	2b70      	cmp	r3, #112	@ 0x70
 80045c4:	d018      	beq.n	80045f8 <HAL_TIM_ConfigClockSource+0xb0>
 80045c6:	d900      	bls.n	80045ca <HAL_TIM_ConfigClockSource+0x82>
 80045c8:	e07a      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045ca:	2b60      	cmp	r3, #96	@ 0x60
 80045cc:	d04f      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x126>
 80045ce:	d900      	bls.n	80045d2 <HAL_TIM_ConfigClockSource+0x8a>
 80045d0:	e076      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045d2:	2b50      	cmp	r3, #80	@ 0x50
 80045d4:	d03b      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x106>
 80045d6:	d900      	bls.n	80045da <HAL_TIM_ConfigClockSource+0x92>
 80045d8:	e072      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045da:	2b40      	cmp	r3, #64	@ 0x40
 80045dc:	d057      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x146>
 80045de:	d900      	bls.n	80045e2 <HAL_TIM_ConfigClockSource+0x9a>
 80045e0:	e06e      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045e2:	2b30      	cmp	r3, #48	@ 0x30
 80045e4:	d063      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045e6:	d86b      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d060      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045ec:	d868      	bhi.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d05d      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d05b      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x166>
 80045f6:	e063      	b.n	80046c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	f000 fa6a 	bl	8004ae0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2277      	movs	r2, #119	@ 0x77
 8004618:	4313      	orrs	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	609a      	str	r2, [r3, #8]
      break;
 8004624:	e052      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004636:	f000 fa53 	bl	8004ae0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2180      	movs	r1, #128	@ 0x80
 8004646:	01c9      	lsls	r1, r1, #7
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
      break;
 800464c:	e03e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	001a      	movs	r2, r3
 800465c:	f000 f9c6 	bl	80049ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2150      	movs	r1, #80	@ 0x50
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fa20 	bl	8004aac <TIM_ITRx_SetConfig>
      break;
 800466c:	e02e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800467a:	001a      	movs	r2, r3
 800467c:	f000 f9e4 	bl	8004a48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2160      	movs	r1, #96	@ 0x60
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fa10 	bl	8004aac <TIM_ITRx_SetConfig>
      break;
 800468c:	e01e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	001a      	movs	r2, r3
 800469c:	f000 f9a6 	bl	80049ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2140      	movs	r1, #64	@ 0x40
 80046a6:	0018      	movs	r0, r3
 80046a8:	f000 fa00 	bl	8004aac <TIM_ITRx_SetConfig>
      break;
 80046ac:	e00e      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0019      	movs	r1, r3
 80046b8:	0010      	movs	r0, r2
 80046ba:	f000 f9f7 	bl	8004aac <TIM_ITRx_SetConfig>
      break;
 80046be:	e005      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046c0:	230f      	movs	r3, #15
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
      break;
 80046c8:	e000      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046ca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2239      	movs	r2, #57	@ 0x39
 80046d0:	2101      	movs	r1, #1
 80046d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2238      	movs	r2, #56	@ 0x38
 80046d8:	2100      	movs	r1, #0
 80046da:	5499      	strb	r1, [r3, r2]

  return status;
 80046dc:	230f      	movs	r3, #15
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	781b      	ldrb	r3, [r3, #0]
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	ffff00ff 	.word	0xffff00ff

080046f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004708:	46c0      	nop			@ (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004718:	46c0      	nop			@ (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	b002      	add	sp, #8
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004728:	46c0      	nop			@ (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	05db      	lsls	r3, r3, #23
 8004746:	429a      	cmp	r2, r3
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0x2a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a22      	ldr	r2, [pc, #136]	@ (80047d8 <TIM_Base_SetConfig+0xa8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0x2a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a21      	ldr	r2, [pc, #132]	@ (80047dc <TIM_Base_SetConfig+0xac>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2270      	movs	r2, #112	@ 0x70
 800475e:	4393      	bics	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	2380      	movs	r3, #128	@ 0x80
 8004770:	05db      	lsls	r3, r3, #23
 8004772:	429a      	cmp	r2, r3
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x56>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <TIM_Base_SetConfig+0xa8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x56>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a16      	ldr	r2, [pc, #88]	@ (80047dc <TIM_Base_SetConfig+0xac>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a15      	ldr	r2, [pc, #84]	@ (80047e0 <TIM_Base_SetConfig+0xb0>)
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2280      	movs	r2, #128	@ 0x80
 800479c:	4393      	bics	r3, r2
 800479e:	001a      	movs	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2204      	movs	r2, #4
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]
}
 80047d0:	46c0      	nop			@ (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b004      	add	sp, #16
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40010800 	.word	0x40010800
 80047dc:	40011400 	.word	0x40011400
 80047e0:	fffffcff 	.word	0xfffffcff

080047e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	2201      	movs	r2, #1
 80047fa:	4393      	bics	r3, r2
 80047fc:	001a      	movs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2270      	movs	r2, #112	@ 0x70
 8004812:	4393      	bics	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2203      	movs	r2, #3
 800481a:	4393      	bics	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2202      	movs	r2, #2
 800482c:	4393      	bics	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	46c0      	nop			@ (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b006      	add	sp, #24
 800485a:	bd80      	pop	{r7, pc}

0800485c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	2210      	movs	r2, #16
 8004872:	4393      	bics	r3, r2
 8004874:	001a      	movs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <TIM_OC2_SetConfig+0x7c>)
 800488a:	4013      	ands	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a12      	ldr	r2, [pc, #72]	@ (80048dc <TIM_OC2_SetConfig+0x80>)
 8004892:	4013      	ands	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2220      	movs	r2, #32
 80048a6:	4393      	bics	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b006      	add	sp, #24
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	ffff8fff 	.word	0xffff8fff
 80048dc:	fffffcff 	.word	0xfffffcff

080048e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a18      	ldr	r2, [pc, #96]	@ (8004958 <TIM_OC3_SetConfig+0x78>)
 80048f6:	401a      	ands	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2270      	movs	r2, #112	@ 0x70
 800490c:	4393      	bics	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2203      	movs	r2, #3
 8004914:	4393      	bics	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <TIM_OC3_SetConfig+0x7c>)
 8004926:	4013      	ands	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b006      	add	sp, #24
 8004956:	bd80      	pop	{r7, pc}
 8004958:	fffffeff 	.word	0xfffffeff
 800495c:	fffffdff 	.word	0xfffffdff

08004960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4a19      	ldr	r2, [pc, #100]	@ (80049dc <TIM_OC4_SetConfig+0x7c>)
 8004976:	401a      	ands	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a15      	ldr	r2, [pc, #84]	@ (80049e0 <TIM_OC4_SetConfig+0x80>)
 800498c:	4013      	ands	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a14      	ldr	r2, [pc, #80]	@ (80049e4 <TIM_OC4_SetConfig+0x84>)
 8004994:	4013      	ands	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4a10      	ldr	r2, [pc, #64]	@ (80049e8 <TIM_OC4_SetConfig+0x88>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	031b      	lsls	r3, r3, #12
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b006      	add	sp, #24
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	ffffefff 	.word	0xffffefff
 80049e0:	ffff8fff 	.word	0xffff8fff
 80049e4:	fffffcff 	.word	0xfffffcff
 80049e8:	ffffdfff 	.word	0xffffdfff

080049ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	2201      	movs	r2, #1
 8004a04:	4393      	bics	r3, r2
 8004a06:	001a      	movs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	22f0      	movs	r2, #240	@ 0xf0
 8004a16:	4393      	bics	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	220a      	movs	r2, #10
 8004a28:	4393      	bics	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	46c0      	nop			@ (mov r8, r8)
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b006      	add	sp, #24
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	4393      	bics	r3, r2
 8004a62:	001a      	movs	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <TIM_TI2_ConfigInputStage+0x60>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	031b      	lsls	r3, r3, #12
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	22a0      	movs	r2, #160	@ 0xa0
 8004a84:	4393      	bics	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b006      	add	sp, #24
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	ffff0fff 	.word	0xffff0fff

08004aac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2270      	movs	r2, #112	@ 0x70
 8004ac0:	4393      	bics	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	2207      	movs	r2, #7
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b004      	add	sp, #16
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	4a09      	ldr	r2, [pc, #36]	@ (8004b1c <TIM_ETR_SetConfig+0x3c>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	46c0      	nop			@ (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b006      	add	sp, #24
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	ffff00ff 	.word	0xffff00ff

08004b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	221f      	movs	r2, #31
 8004b30:	4013      	ands	r3, r2
 8004b32:	2201      	movs	r2, #1
 8004b34:	409a      	lsls	r2, r3
 8004b36:	0013      	movs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	43d2      	mvns	r2, r2
 8004b42:	401a      	ands	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	211f      	movs	r1, #31
 8004b50:	400b      	ands	r3, r1
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4099      	lsls	r1, r3
 8004b56:	000b      	movs	r3, r1
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b006      	add	sp, #24
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2238      	movs	r2, #56	@ 0x38
 8004b76:	5c9b      	ldrb	r3, [r3, r2]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e042      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2238      	movs	r2, #56	@ 0x38
 8004b84:	2101      	movs	r1, #1
 8004b86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2239      	movs	r2, #57	@ 0x39
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2270      	movs	r2, #112	@ 0x70
 8004ba4:	4393      	bics	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	05db      	lsls	r3, r3, #23
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d009      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a11      	ldr	r2, [pc, #68]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2280      	movs	r2, #128	@ 0x80
 8004bde:	4393      	bics	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2239      	movs	r2, #57	@ 0x39
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2238      	movs	r2, #56	@ 0x38
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b004      	add	sp, #16
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	40010800 	.word	0x40010800
 8004c14:	40011400 	.word	0x40011400

08004c18 <memset>:
 8004c18:	0003      	movs	r3, r0
 8004c1a:	1882      	adds	r2, r0, r2
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	7019      	strb	r1, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	4c0c      	ldr	r4, [pc, #48]	@ (8004c60 <__libc_init_array+0x38>)
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c64 <__libc_init_array+0x3c>)
 8004c30:	1b64      	subs	r4, r4, r5
 8004c32:	10a4      	asrs	r4, r4, #2
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	2600      	movs	r6, #0
 8004c3a:	f000 f819 	bl	8004c70 <_init>
 8004c3e:	4c0a      	ldr	r4, [pc, #40]	@ (8004c68 <__libc_init_array+0x40>)
 8004c40:	4d0a      	ldr	r5, [pc, #40]	@ (8004c6c <__libc_init_array+0x44>)
 8004c42:	1b64      	subs	r4, r4, r5
 8004c44:	10a4      	asrs	r4, r4, #2
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	00b3      	lsls	r3, r6, #2
 8004c4e:	58eb      	ldr	r3, [r5, r3]
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	00b3      	lsls	r3, r6, #2
 8004c58:	58eb      	ldr	r3, [r5, r3]
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08004de8 	.word	0x08004de8
 8004c64:	08004de8 	.word	0x08004de8
 8004c68:	08004dec 	.word	0x08004dec
 8004c6c:	08004de8 	.word	0x08004de8

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr


Projeto LCD com Teclado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000264c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800270c  0800270c  0000370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002798  08002798  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  08002798  08002798  00003798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027a0  080027a0  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a0  080027a0  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027a4  080027a4  000037a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080027a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  080027c4  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080027c4  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007088  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000150b  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0000c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000615  00000000  00000000  0000cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135ec  00000000  00000000  0000d3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cf3  00000000  00000000  000209d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079550  00000000  00000000  000296cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c9c  00000000  00000000  000a2c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000a48fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026f4 	.word	0x080026f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080026f4 	.word	0x080026f4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fdd8 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f816 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8aa 	bl	8000620 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004cc:	f000 f86c 	bl	80005a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <main+0x34>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fee2 	bl	800229c <HAL_TIM_Base_Start_IT>
  HAL_Delay(DELAY_TIME);
 80004d8:	2014      	movs	r0, #20
 80004da:	f000 fe3b 	bl	8001154 <HAL_Delay>
  Start_LCD();
 80004de:	f000 f96d 	bl	80007bc <Start_LCD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  Keyboard_check();
 80004e2:	f000 f989 	bl	80007f8 <Keyboard_check>
	  Menu_system();
 80004e6:	f000 fc6b 	bl	8000dc0 <Menu_system>
	  Keyboard_check();
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	e7f9      	b.n	80004e2 <main+0x26>
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	20000038 	.word	0x20000038

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b095      	sub	sp, #84	@ 0x54
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	2418      	movs	r4, #24
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2338      	movs	r3, #56	@ 0x38
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 f8c9 	bl	800269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	2314      	movs	r3, #20
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f002 f8c2 	bl	800269c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <SystemClock_Config+0xac>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a21      	ldr	r2, [pc, #132]	@ (80005a4 <SystemClock_Config+0xb0>)
 800051e:	401a      	ands	r2, r3
 8000520:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <SystemClock_Config+0xac>)
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	0109      	lsls	r1, r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	0021      	movs	r1, r4
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2210      	movs	r2, #16
 800053c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2202      	movs	r2, #2
 8000542:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	03d2      	lsls	r2, r2, #15
 8000556:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	187b      	adds	r3, r7, r1
 800055a:	0018      	movs	r0, r3
 800055c:	f001 f8ac 	bl	80016b8 <HAL_RCC_OscConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000564:	f000 fcf6 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	220f      	movs	r2, #15
 800056c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2203      	movs	r2, #3
 8000572:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fc58 	bl	8001e40 <HAL_RCC_ClockConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000594:	f000 fcde 	bl	8000f54 <Error_Handler>
  }
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b015      	add	sp, #84	@ 0x54
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	40007000 	.word	0x40007000
 80005a4:	ffffe7ff 	.word	0xffffe7ff

080005a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	2308      	movs	r3, #8
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f002 f870 	bl	800269c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005be:	4a16      	ldr	r2, [pc, #88]	@ (8000618 <MX_TIM6_Init+0x70>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12000;
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <MX_TIM6_Init+0x74>)
 80005c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fe1d 	bl	800221c <HAL_TIM_Base_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80005e6:	f000 fcb5 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ea:	003b      	movs	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	003b      	movs	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005f6:	003a      	movs	r2, r7
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_TIM6_Init+0x6c>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fff5 	bl	80025ec <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000606:	f000 fca5 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	20000038 	.word	0x20000038
 8000618:	40001000 	.word	0x40001000
 800061c:	00002ee0 	.word	0x00002ee0

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	@ 0x24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	240c      	movs	r4, #12
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f002 f833 	bl	800269c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b5a      	ldr	r3, [pc, #360]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800063a:	4b59      	ldr	r3, [pc, #356]	@ (80007a0 <MX_GPIO_Init+0x180>)
 800063c:	2104      	movs	r1, #4
 800063e:	430a      	orrs	r2, r1
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000642:	4b57      	ldr	r3, [pc, #348]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000646:	2204      	movs	r2, #4
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b54      	ldr	r3, [pc, #336]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000652:	4b53      	ldr	r3, [pc, #332]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000654:	2102      	movs	r1, #2
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800065a:	4b51      	ldr	r3, [pc, #324]	@ (80007a0 <MX_GPIO_Init+0x180>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	2202      	movs	r2, #2
 8000660:	4013      	ands	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b4e      	ldr	r3, [pc, #312]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800066a:	4b4d      	ldr	r3, [pc, #308]	@ (80007a0 <MX_GPIO_Init+0x180>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000672:	4b4b      	ldr	r3, [pc, #300]	@ (80007a0 <MX_GPIO_Init+0x180>)
 8000674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_Pin|RW_Pin|DB1_Pin|RS_Pin
 800067e:	23f8      	movs	r3, #248	@ 0xf8
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4848      	ldr	r0, [pc, #288]	@ (80007a4 <MX_GPIO_Init+0x184>)
 8000684:	2200      	movs	r2, #0
 8000686:	0019      	movs	r1, r3
 8000688:	f000 fff9 	bl	800167e <HAL_GPIO_WritePin>
                          |COLUMN_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB4_Pin|DB7_Pin|DB5_Pin|DB6_Pin
 800068c:	23ef      	movs	r3, #239	@ 0xef
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	4845      	ldr	r0, [pc, #276]	@ (80007a8 <MX_GPIO_Init+0x188>)
 8000692:	2200      	movs	r2, #0
 8000694:	0019      	movs	r1, r3
 8000696:	f000 fff2 	bl	800167e <HAL_GPIO_WritePin>
                          |DB0_Pin|COLUMN_02_Pin|COLUMN_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB3_Pin|DB2_Pin, GPIO_PIN_RESET);
 800069a:	23c0      	movs	r3, #192	@ 0xc0
 800069c:	0099      	lsls	r1, r3, #2
 800069e:	23a0      	movs	r3, #160	@ 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	2200      	movs	r2, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 ffea 	bl	800167e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RW_Pin|RS_Pin;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	22b0      	movs	r2, #176	@ 0xb0
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	4a37      	ldr	r2, [pc, #220]	@ (80007a4 <MX_GPIO_Init+0x184>)
 80006c8:	0019      	movs	r1, r3
 80006ca:	0010      	movs	r0, r2
 80006cc:	f000 fe44 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin DB7_Pin DB5_Pin DB6_Pin
                           DB0_Pin COLUMN_02_Pin COLUMN_03_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|DB7_Pin|DB5_Pin|DB6_Pin
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	22ef      	movs	r2, #239	@ 0xef
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	601a      	str	r2, [r3, #0]
                          |DB0_Pin|COLUMN_02_Pin|COLUMN_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	000c      	movs	r4, r1
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2203      	movs	r2, #3
 80006ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a2d      	ldr	r2, [pc, #180]	@ (80007a8 <MX_GPIO_Init+0x188>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f000 fe2f 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_04_Pin LINE_03_Pin */
  GPIO_InitStruct.Pin = LINE_04_Pin|LINE_03_Pin;
 80006fa:	0021      	movs	r1, r4
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	22c0      	movs	r2, #192	@ 0xc0
 8000700:	0152      	lsls	r2, r2, #5
 8000702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	000c      	movs	r4, r1
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2201      	movs	r2, #1
 8000710:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a24      	ldr	r2, [pc, #144]	@ (80007a8 <MX_GPIO_Init+0x188>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f000 fe1d 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB1_Pin COLUMN_01_Pin */
  GPIO_InitStruct.Pin = DB1_Pin|COLUMN_01_Pin;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	22a0      	movs	r2, #160	@ 0xa0
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	000c      	movs	r4, r1
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2201      	movs	r2, #1
 800072e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2203      	movs	r2, #3
 800073a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073c:	193b      	adds	r3, r7, r4
 800073e:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <MX_GPIO_Init+0x184>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f000 fe08 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB3_Pin DB2_Pin */
  GPIO_InitStruct.Pin = DB3_Pin|DB2_Pin;
 8000748:	0021      	movs	r1, r4
 800074a:	187b      	adds	r3, r7, r1
 800074c:	22c0      	movs	r2, #192	@ 0xc0
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	000c      	movs	r4, r1
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2203      	movs	r2, #3
 8000764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	193a      	adds	r2, r7, r4
 8000768:	23a0      	movs	r3, #160	@ 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fdf2 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_02_Pin LINE_01_Pin */
  GPIO_InitStruct.Pin = LINE_02_Pin|LINE_01_Pin;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	22c0      	movs	r2, #192	@ 0xc0
 800077a:	0152      	lsls	r2, r2, #5
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	187a      	adds	r2, r7, r1
 800078c:	23a0      	movs	r3, #160	@ 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fde0 	bl	8001358 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b009      	add	sp, #36	@ 0x24
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	50000800 	.word	0x50000800
 80007a8:	50000400 	.word	0x50000400

080007ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}

080007bc <Start_LCD>:

// Funções para o LCD
void Start_LCD(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	Controler_LCD(0x33, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2033      	movs	r0, #51	@ 0x33
 80007c4:	f000 f9a6 	bl	8000b14 <Controler_LCD>
	Controler_LCD(0x32, 0);
 80007c8:	2100      	movs	r1, #0
 80007ca:	2032      	movs	r0, #50	@ 0x32
 80007cc:	f000 f9a2 	bl	8000b14 <Controler_LCD>
	Controler_LCD(0x28, 0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2028      	movs	r0, #40	@ 0x28
 80007d4:	f000 f99e 	bl	8000b14 <Controler_LCD>

//	Controler_LCD(0x0F, 0); // 0x0D
	Controler_LCD(0x0C, 0);
 80007d8:	2100      	movs	r1, #0
 80007da:	200c      	movs	r0, #12
 80007dc:	f000 f99a 	bl	8000b14 <Controler_LCD>
	Controler_LCD(0x06, 0);
 80007e0:	2100      	movs	r1, #0
 80007e2:	2006      	movs	r0, #6
 80007e4:	f000 f996 	bl	8000b14 <Controler_LCD>
	Controler_LCD(0x01, 0);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 f992 	bl	8000b14 <Controler_LCD>
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <Keyboard_check>:

// Funções para o teclado
void Keyboard_check(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	switch(atualColumn){
 80007fc:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <Keyboard_check+0xc8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d03d      	beq.n	8000880 <Keyboard_check+0x88>
 8000804:	dc58      	bgt.n	80008b8 <Keyboard_check+0xc0>
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <Keyboard_check+0x18>
 800080a:	2b01      	cmp	r3, #1
 800080c:	d01c      	beq.n	8000848 <Keyboard_check+0x50>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 0);
			Line_verify(2);
			atualColumn = 0;
			break;
	}
}
 800080e:	e053      	b.n	80008b8 <Keyboard_check+0xc0>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 0);
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	482b      	ldr	r0, [pc, #172]	@ (80008c4 <Keyboard_check+0xcc>)
 8000816:	2200      	movs	r2, #0
 8000818:	0019      	movs	r1, r3
 800081a:	f000 ff30 	bl	800167e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4829      	ldr	r0, [pc, #164]	@ (80008c8 <Keyboard_check+0xd0>)
 8000824:	2201      	movs	r2, #1
 8000826:	0019      	movs	r1, r3
 8000828:	f000 ff29 	bl	800167e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);
 800082c:	2380      	movs	r3, #128	@ 0x80
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4825      	ldr	r0, [pc, #148]	@ (80008c8 <Keyboard_check+0xd0>)
 8000832:	2201      	movs	r2, #1
 8000834:	0019      	movs	r1, r3
 8000836:	f000 ff22 	bl	800167e <HAL_GPIO_WritePin>
			Line_verify(0);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f846 	bl	80008cc <Line_verify>
			atualColumn = 1;
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <Keyboard_check+0xc8>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
			break;
 8000846:	e037      	b.n	80008b8 <Keyboard_check+0xc0>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	481d      	ldr	r0, [pc, #116]	@ (80008c4 <Keyboard_check+0xcc>)
 800084e:	2201      	movs	r2, #1
 8000850:	0019      	movs	r1, r3
 8000852:	f000 ff14 	bl	800167e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 0);
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	481b      	ldr	r0, [pc, #108]	@ (80008c8 <Keyboard_check+0xd0>)
 800085c:	2200      	movs	r2, #0
 800085e:	0019      	movs	r1, r3
 8000860:	f000 ff0d 	bl	800167e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <Keyboard_check+0xd0>)
 800086a:	2201      	movs	r2, #1
 800086c:	0019      	movs	r1, r3
 800086e:	f000 ff06 	bl	800167e <HAL_GPIO_WritePin>
			Line_verify(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f000 f82a 	bl	80008cc <Line_verify>
			atualColumn = 2;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <Keyboard_check+0xc8>)
 800087a:	2202      	movs	r2, #2
 800087c:	701a      	strb	r2, [r3, #0]
			break;
 800087e:	e01b      	b.n	80008b8 <Keyboard_check+0xc0>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	480f      	ldr	r0, [pc, #60]	@ (80008c4 <Keyboard_check+0xcc>)
 8000886:	2201      	movs	r2, #1
 8000888:	0019      	movs	r1, r3
 800088a:	f000 fef8 	bl	800167e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <Keyboard_check+0xd0>)
 8000894:	2201      	movs	r2, #1
 8000896:	0019      	movs	r1, r3
 8000898:	f000 fef1 	bl	800167e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 0);
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <Keyboard_check+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	0019      	movs	r1, r3
 80008a6:	f000 feea 	bl	800167e <HAL_GPIO_WritePin>
			Line_verify(2);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 f80e 	bl	80008cc <Line_verify>
			atualColumn = 0;
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <Keyboard_check+0xc8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
			break;
 80008b6:	46c0      	nop			@ (mov r8, r8)
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	2000007c 	.word	0x2000007c
 80008c4:	50000800 	.word	0x50000800
 80008c8:	50000400 	.word	0x50000400

080008cc <Line_verify>:

// Verificando botão precionado
void Line_verify(uint8_t atual_column) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	701a      	strb	r2, [r3, #0]
	bline_1 = HAL_GPIO_ReadPin(LINE_01_GPIO_Port, LINE_01_Pin);
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	015a      	lsls	r2, r3, #5
 80008dc:	23a0      	movs	r3, #160	@ 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 feae 	bl	8001644 <HAL_GPIO_ReadPin>
 80008e8:	0003      	movs	r3, r0
 80008ea:	001a      	movs	r2, r3
 80008ec:	4b35      	ldr	r3, [pc, #212]	@ (80009c4 <Line_verify+0xf8>)
 80008ee:	701a      	strb	r2, [r3, #0]
	bline_2 = HAL_GPIO_ReadPin(LINE_02_GPIO_Port, LINE_02_Pin);
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	011a      	lsls	r2, r3, #4
 80008f4:	23a0      	movs	r3, #160	@ 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fea2 	bl	8001644 <HAL_GPIO_ReadPin>
 8000900:	0003      	movs	r3, r0
 8000902:	001a      	movs	r2, r3
 8000904:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <Line_verify+0xfc>)
 8000906:	701a      	strb	r2, [r3, #0]
	bline_3 = HAL_GPIO_ReadPin(LINE_03_GPIO_Port, LINE_03_Pin);
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	015b      	lsls	r3, r3, #5
 800090c:	4a2f      	ldr	r2, [pc, #188]	@ (80009cc <Line_verify+0x100>)
 800090e:	0019      	movs	r1, r3
 8000910:	0010      	movs	r0, r2
 8000912:	f000 fe97 	bl	8001644 <HAL_GPIO_ReadPin>
 8000916:	0003      	movs	r3, r0
 8000918:	001a      	movs	r2, r3
 800091a:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <Line_verify+0x104>)
 800091c:	701a      	strb	r2, [r3, #0]
	bline_4 = HAL_GPIO_ReadPin(LINE_04_GPIO_Port, LINE_04_Pin);
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <Line_verify+0x100>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 fe8c 	bl	8001644 <HAL_GPIO_ReadPin>
 800092c:	0003      	movs	r3, r0
 800092e:	001a      	movs	r2, r3
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <Line_verify+0x108>)
 8000932:	701a      	strb	r2, [r3, #0]

    if (!bline_1){
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <Line_verify+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <Line_verify+0x84>
    	response = tmap[0][atual_column];
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <Line_verify+0x10c>)
 8000942:	5cd2      	ldrb	r2, [r2, r3]
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <Line_verify+0x110>)
 8000946:	701a      	strb	r2, [r3, #0]
    	logonAble = 1;
 8000948:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <Line_verify+0x114>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e02f      	b.n	80009b0 <Line_verify+0xe4>
    }
    else if (!bline_2) {
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <Line_verify+0xfc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <Line_verify+0xa2>
    	response = tmap[1][atual_column];
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <Line_verify+0x10c>)
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	78da      	ldrb	r2, [r3, #3]
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <Line_verify+0x110>)
 8000964:	701a      	strb	r2, [r3, #0]
       	logonAble = 1;
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <Line_verify+0x114>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e020      	b.n	80009b0 <Line_verify+0xe4>
    }
    else if (!bline_3){
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <Line_verify+0x104>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10a      	bne.n	800098c <Line_verify+0xc0>
    	response = tmap[2][atual_column];
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <Line_verify+0x10c>)
 800097c:	18d3      	adds	r3, r2, r3
 800097e:	799a      	ldrb	r2, [r3, #6]
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <Line_verify+0x110>)
 8000982:	701a      	strb	r2, [r3, #0]
       	logonAble = 1;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <Line_verify+0x114>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	e011      	b.n	80009b0 <Line_verify+0xe4>
    }
    else if (!bline_4) {
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <Line_verify+0x108>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10a      	bne.n	80009aa <Line_verify+0xde>
    	response = tmap[3][atual_column];
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <Line_verify+0x10c>)
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	7a5a      	ldrb	r2, [r3, #9]
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <Line_verify+0x110>)
 80009a0:	701a      	strb	r2, [r3, #0]
       	logonAble = 1;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <Line_verify+0x114>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e002      	b.n	80009b0 <Line_verify+0xe4>
    }

    else logonAble = 0;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <Line_verify+0x114>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
    if (logonAble) Process_Password();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <Line_verify+0x114>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <Line_verify+0xf0>
 80009b8:	f000 f814 	bl	80009e4 <Process_Password>
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000007d 	.word	0x2000007d
 80009c8:	2000007e 	.word	0x2000007e
 80009cc:	50000400 	.word	0x50000400
 80009d0:	2000007f 	.word	0x2000007f
 80009d4:	20000080 	.word	0x20000080
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000083 	.word	0x20000083
 80009e0:	20000082 	.word	0x20000082

080009e4 <Process_Password>:

// Função para processar a entrada da senha
void Process_Password(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	if (!flag){
 80009ea:	4b40      	ldr	r3, [pc, #256]	@ (8000aec <Process_Password+0x108>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d000      	beq.n	80009f4 <Process_Password+0x10>
 80009f2:	e074      	b.n	8000ade <Process_Password+0xfa>
		if (logonAble && word_count < 4) {  // Limite de 4 caracteres
 80009f4:	4b3e      	ldr	r3, [pc, #248]	@ (8000af0 <Process_Password+0x10c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d02c      	beq.n	8000a56 <Process_Password+0x72>
 80009fc:	4b3d      	ldr	r3, [pc, #244]	@ (8000af4 <Process_Password+0x110>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d828      	bhi.n	8000a56 <Process_Password+0x72>
			password[word_count] = response;
 8000a04:	4b3b      	ldr	r3, [pc, #236]	@ (8000af4 <Process_Password+0x110>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <Process_Password+0x114>)
 8000a0c:	7819      	ldrb	r1, [r3, #0]
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000afc <Process_Password+0x118>)
 8000a10:	5499      	strb	r1, [r3, r2]
			word_count++;
 8000a12:	4b38      	ldr	r3, [pc, #224]	@ (8000af4 <Process_Password+0x110>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b36      	ldr	r3, [pc, #216]	@ (8000af4 <Process_Password+0x110>)
 8000a1c:	701a      	strb	r2, [r3, #0]
			password[word_count] = '\0';  // Adiciona o terminador de string
 8000a1e:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <Process_Password+0x110>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	001a      	movs	r2, r3
 8000a24:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <Process_Password+0x118>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	5499      	strb	r1, [r3, r2]

			for (uint8_t i = 0; i < word_count; i++) {
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e00b      	b.n	8000a4a <Process_Password+0x66>
				Mensage_LCD("*");  // Exibe um asterisco para cada caractere digitado
 8000a32:	4b33      	ldr	r3, [pc, #204]	@ (8000b00 <Process_Password+0x11c>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f9a5 	bl	8000d84 <Mensage_LCD>
				HAL_Delay(50);
 8000a3a:	2032      	movs	r0, #50	@ 0x32
 8000a3c:	f000 fb8a 	bl	8001154 <HAL_Delay>
			for (uint8_t i = 0; i < word_count; i++) {
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	3201      	adds	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <Process_Password+0x110>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	1dfa      	adds	r2, r7, #7
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3ed      	bcc.n	8000a32 <Process_Password+0x4e>
			}
		}


		if (word_count == 4) {  // Após 4 caracteres, verifica a senha
 8000a56:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <Process_Password+0x110>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d142      	bne.n	8000ae4 <Process_Password+0x100>
			if (login == '1') {
 8000a5e:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <Process_Password+0x120>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b31      	cmp	r3, #49	@ 0x31
 8000a64:	d10e      	bne.n	8000a84 <Process_Password+0xa0>
				if (strcmp(password, "8922") == 0) atualMenu = 3;
 8000a66:	4a28      	ldr	r2, [pc, #160]	@ (8000b08 <Process_Password+0x124>)
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <Process_Password+0x118>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fb4b 	bl	8000108 <strcmp>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d103      	bne.n	8000a7e <Process_Password+0x9a>
 8000a76:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <Process_Password+0x128>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e002      	b.n	8000a84 <Process_Password+0xa0>
				else atualMenu = 4;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <Process_Password+0x128>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	701a      	strb	r2, [r3, #0]
			}

			if (login == '2') {
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <Process_Password+0x120>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b32      	cmp	r3, #50	@ 0x32
 8000a8a:	d10e      	bne.n	8000aaa <Process_Password+0xc6>
				if (strcmp(password, "1698") == 0) atualMenu = 3;
 8000a8c:	4a20      	ldr	r2, [pc, #128]	@ (8000b10 <Process_Password+0x12c>)
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <Process_Password+0x118>)
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fb38 	bl	8000108 <strcmp>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d103      	bne.n	8000aa4 <Process_Password+0xc0>
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <Process_Password+0x128>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e002      	b.n	8000aaa <Process_Password+0xc6>
				else atualMenu = 4;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <Process_Password+0x128>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	701a      	strb	r2, [r3, #0]
			}

			// Resetando variáveis
			flag = 1;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <Process_Password+0x108>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
			word_count = 0;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <Process_Password+0x110>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
			logonAble = 0;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <Process_Password+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
			response = ' ';
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <Process_Password+0x114>)
 8000abe:	2220      	movs	r2, #32
 8000ac0:	701a      	strb	r2, [r3, #0]
			login = '0';
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <Process_Password+0x120>)
 8000ac4:	2230      	movs	r2, #48	@ 0x30
 8000ac6:	701a      	strb	r2, [r3, #0]
			memset(password, 0, sizeof(password));
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <Process_Password+0x118>)
 8000aca:	2205      	movs	r2, #5
 8000acc:	2100      	movs	r1, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 fde4 	bl	800269c <memset>
			Controler_LCD(0x01, 0);  // Limpa a tela
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 f81c 	bl	8000b14 <Controler_LCD>
		}
	} else {
		flag = 0;
	}
}
 8000adc:	e002      	b.n	8000ae4 <Process_Password+0x100>
		flag = 0;
 8000ade:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <Process_Password+0x108>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
}
 8000ae4:	46c0      	nop			@ (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000001 	.word	0x20000001
 8000af0:	20000082 	.word	0x20000082
 8000af4:	20000081 	.word	0x20000081
 8000af8:	20000083 	.word	0x20000083
 8000afc:	20000088 	.word	0x20000088
 8000b00:	0800270c 	.word	0x0800270c
 8000b04:	20000084 	.word	0x20000084
 8000b08:	08002710 	.word	0x08002710
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	08002718 	.word	0x08002718

08000b14 <Controler_LCD>:

// Controle para exibição de informações unarias no LCD
void Controler_LCD(uint8_t data, uint8_t gate){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	1c0a      	adds	r2, r1, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	port.P0 = (data >> 0) & 1;
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b91      	ldr	r3, [pc, #580]	@ (8000d78 <Controler_LCD+0x264>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	400a      	ands	r2, r1
 8000b36:	0010      	movs	r0, r2
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	438a      	bics	r2, r1
 8000b3e:	1c11      	adds	r1, r2, #0
 8000b40:	1c02      	adds	r2, r0, #0
 8000b42:	430a      	orrs	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
	port.P1 = (data >> 1) & 1;
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	085b      	lsrs	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	1c1a      	adds	r2, r3, #0
 8000b50:	2301      	movs	r3, #1
 8000b52:	4013      	ands	r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b88      	ldr	r3, [pc, #544]	@ (8000d78 <Controler_LCD+0x264>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	1890      	adds	r0, r2, r2
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	2102      	movs	r1, #2
 8000b62:	438a      	bics	r2, r1
 8000b64:	1c11      	adds	r1, r2, #0
 8000b66:	1c02      	adds	r2, r0, #0
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
	port.P2 = (data >> 2) & 1;
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	1c1a      	adds	r2, r3, #0
 8000b76:	2301      	movs	r3, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d78 <Controler_LCD+0x264>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	400a      	ands	r2, r1
 8000b82:	0090      	lsls	r0, r2, #2
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	2104      	movs	r1, #4
 8000b88:	438a      	bics	r2, r1
 8000b8a:	1c11      	adds	r1, r2, #0
 8000b8c:	1c02      	adds	r2, r0, #0
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
	port.P3 = (data >> 3) & 1;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	1c1a      	adds	r2, r3, #0
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b75      	ldr	r3, [pc, #468]	@ (8000d78 <Controler_LCD+0x264>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	00d0      	lsls	r0, r2, #3
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	2108      	movs	r1, #8
 8000bae:	438a      	bics	r2, r1
 8000bb0:	1c11      	adds	r1, r2, #0
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
	port.P4 = (data >> 4) & 1;
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	1c1a      	adds	r2, r3, #0
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d78 <Controler_LCD+0x264>)
 8000bca:	2101      	movs	r1, #1
 8000bcc:	400a      	ands	r2, r1
 8000bce:	0110      	lsls	r0, r2, #4
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	1c11      	adds	r1, r2, #0
 8000bd8:	1c02      	adds	r2, r0, #0
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
	port.P5 = (data >> 5) & 1;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	1c1a      	adds	r2, r3, #0
 8000be8:	2301      	movs	r3, #1
 8000bea:	4013      	ands	r3, r2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b62      	ldr	r3, [pc, #392]	@ (8000d78 <Controler_LCD+0x264>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	0150      	lsls	r0, r2, #5
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	1c11      	adds	r1, r2, #0
 8000bfe:	1c02      	adds	r2, r0, #0
 8000c00:	430a      	orrs	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
	port.P6 = (data >> 6) & 1;
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	099b      	lsrs	r3, r3, #6
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	1c1a      	adds	r2, r3, #0
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4013      	ands	r3, r2
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b58      	ldr	r3, [pc, #352]	@ (8000d78 <Controler_LCD+0x264>)
 8000c16:	2101      	movs	r1, #1
 8000c18:	400a      	ands	r2, r1
 8000c1a:	0190      	lsls	r0, r2, #6
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	2140      	movs	r1, #64	@ 0x40
 8000c20:	438a      	bics	r2, r1
 8000c22:	1c11      	adds	r1, r2, #0
 8000c24:	1c02      	adds	r2, r0, #0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
	port.P7 = (data >> 7) & 1;
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	09db      	lsrs	r3, r3, #7
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	1c1a      	adds	r2, r3, #0
 8000c34:	2301      	movs	r3, #1
 8000c36:	4013      	ands	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d78 <Controler_LCD+0x264>)
 8000c3c:	01d0      	lsls	r0, r2, #7
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	217f      	movs	r1, #127	@ 0x7f
 8000c42:	400a      	ands	r2, r1
 8000c44:	1c11      	adds	r1, r2, #0
 8000c46:	1c02      	adds	r2, r0, #0
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]

	if (gate){
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <Controler_LCD+0x150>
		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4848      	ldr	r0, [pc, #288]	@ (8000d7c <Controler_LCD+0x268>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	f000 fd0e 	bl	800167e <HAL_GPIO_WritePin>
 8000c62:	e006      	b.n	8000c72 <Controler_LCD+0x15e>
	} else {
		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4844      	ldr	r0, [pc, #272]	@ (8000d7c <Controler_LCD+0x268>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	f000 fd06 	bl	800167e <HAL_GPIO_WritePin>
	}


	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, port.P4);
 8000c72:	4b41      	ldr	r3, [pc, #260]	@ (8000d78 <Controler_LCD+0x264>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	06db      	lsls	r3, r3, #27
 8000c78:	0fdb      	lsrs	r3, r3, #31
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	483f      	ldr	r0, [pc, #252]	@ (8000d80 <Controler_LCD+0x26c>)
 8000c84:	0019      	movs	r1, r3
 8000c86:	f000 fcfa 	bl	800167e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, port.P5);
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d78 <Controler_LCD+0x264>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	069b      	lsls	r3, r3, #26
 8000c90:	0fdb      	lsrs	r3, r3, #31
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	001a      	movs	r2, r3
 8000c96:	4b3a      	ldr	r3, [pc, #232]	@ (8000d80 <Controler_LCD+0x26c>)
 8000c98:	2110      	movs	r1, #16
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fcef 	bl	800167e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, port.P6);
 8000ca0:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <Controler_LCD+0x264>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	065b      	lsls	r3, r3, #25
 8000ca6:	0fdb      	lsrs	r3, r3, #31
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	001a      	movs	r2, r3
 8000cac:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <Controler_LCD+0x26c>)
 8000cae:	2120      	movs	r1, #32
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 fce4 	bl	800167e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, port.P7);
 8000cb6:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <Controler_LCD+0x264>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	061b      	lsls	r3, r3, #24
 8000cbc:	0fdb      	lsrs	r3, r3, #31
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <Controler_LCD+0x26c>)
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fcd9 	bl	800167e <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f000 fa41 	bl	8001154 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <Controler_LCD+0x268>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fcd0 	bl	800167e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fa38 	bl	8001154 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000ce4:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <Controler_LCD+0x268>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2120      	movs	r1, #32
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fcc7 	bl	800167e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, port.P0);
 8000cf0:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <Controler_LCD+0x264>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	07db      	lsls	r3, r3, #31
 8000cf6:	0fdb      	lsrs	r3, r3, #31
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	481f      	ldr	r0, [pc, #124]	@ (8000d80 <Controler_LCD+0x26c>)
 8000d02:	0019      	movs	r1, r3
 8000d04:	f000 fcbb 	bl	800167e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, port.P1);
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <Controler_LCD+0x264>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	079b      	lsls	r3, r3, #30
 8000d0e:	0fdb      	lsrs	r3, r3, #31
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	001a      	movs	r2, r3
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <Controler_LCD+0x26c>)
 8000d16:	2110      	movs	r1, #16
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fcb0 	bl	800167e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, port.P2);
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <Controler_LCD+0x264>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	075b      	lsls	r3, r3, #29
 8000d24:	0fdb      	lsrs	r3, r3, #31
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <Controler_LCD+0x26c>)
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fca5 	bl	800167e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, port.P3);
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <Controler_LCD+0x264>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	071b      	lsls	r3, r3, #28
 8000d3a:	0fdb      	lsrs	r3, r3, #31
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	001a      	movs	r2, r3
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <Controler_LCD+0x26c>)
 8000d42:	2108      	movs	r1, #8
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 fc9a 	bl	800167e <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 fa02 	bl	8001154 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <Controler_LCD+0x268>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	2120      	movs	r1, #32
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fc91 	bl	800167e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 f9f9 	bl	8001154 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <Controler_LCD+0x268>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	2120      	movs	r1, #32
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fc88 	bl	800167e <HAL_GPIO_WritePin>

}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	20000078 	.word	0x20000078
 8000d7c:	50000800 	.word	0x50000800
 8000d80:	50000400 	.word	0x50000400

08000d84 <Mensage_LCD>:

// Exibindo informações compostas no LCD
void Mensage_LCD(char *mensage){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	for (int i = 0; mensage[i] != '\0'; ++i){
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e00a      	b.n	8000da8 <Mensage_LCD+0x24>
		Controler_LCD(mensage[i], 1);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff feb9 	bl	8000b14 <Controler_LCD>
	for (int i = 0; mensage[i] != '\0'; ++i){
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ee      	bne.n	8000d92 <Mensage_LCD+0xe>
	}
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <Menu_system>:

// Sistema de menu e paginação
void Menu_system(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	switch(atualMenu){
 8000dc6:	4b55      	ldr	r3, [pc, #340]	@ (8000f1c <Menu_system+0x15c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d100      	bne.n	8000dd0 <Menu_system+0x10>
 8000dce:	e086      	b.n	8000ede <Menu_system+0x11e>
 8000dd0:	dd00      	ble.n	8000dd4 <Menu_system+0x14>
 8000dd2:	e09e      	b.n	8000f12 <Menu_system+0x152>
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d066      	beq.n	8000ea6 <Menu_system+0xe6>
 8000dd8:	dd00      	ble.n	8000ddc <Menu_system+0x1c>
 8000dda:	e09a      	b.n	8000f12 <Menu_system+0x152>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d002      	beq.n	8000de6 <Menu_system+0x26>
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d037      	beq.n	8000e54 <Menu_system+0x94>
            Controler_LCD(0x01, 0);
            atualMenu = 1;

			break;
	}
}
 8000de4:	e095      	b.n	8000f12 <Menu_system+0x152>
			Keyboard_check();
 8000de6:	f7ff fd07 	bl	80007f8 <Keyboard_check>
			Controler_LCD(0x80, 0);
 8000dea:	2100      	movs	r1, #0
 8000dec:	2080      	movs	r0, #128	@ 0x80
 8000dee:	f7ff fe91 	bl	8000b14 <Controler_LCD>
			Mensage_LCD("Informe o login");
 8000df2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <Menu_system+0x160>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ffc5 	bl	8000d84 <Mensage_LCD>
			Controler_LCD(0xC0, 0);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	20c0      	movs	r0, #192	@ 0xc0
 8000dfe:	f7ff fe89 	bl	8000b14 <Controler_LCD>
			Mensage_LCD(">> ");
 8000e02:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <Menu_system+0x164>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ffbd 	bl	8000d84 <Mensage_LCD>
			login = response;
 8000e0a:	4b47      	ldr	r3, [pc, #284]	@ (8000f28 <Menu_system+0x168>)
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	4b47      	ldr	r3, [pc, #284]	@ (8000f2c <Menu_system+0x16c>)
 8000e10:	701a      	strb	r2, [r3, #0]
			char login_str[2] = {login, '\0'};
 8000e12:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <Menu_system+0x16c>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	705a      	strb	r2, [r3, #1]
			Mensage_LCD(login_str);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff ffae 	bl	8000d84 <Mensage_LCD>
			HAL_Delay(50);
 8000e28:	2032      	movs	r0, #50	@ 0x32
 8000e2a:	f000 f993 	bl	8001154 <HAL_Delay>
			if (login == '1' || login == '2') {
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <Menu_system+0x16c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b31      	cmp	r3, #49	@ 0x31
 8000e34:	d003      	beq.n	8000e3e <Menu_system+0x7e>
 8000e36:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <Menu_system+0x16c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b32      	cmp	r3, #50	@ 0x32
 8000e3c:	d168      	bne.n	8000f10 <Menu_system+0x150>
				atualMenu = 2;
 8000e3e:	4b37      	ldr	r3, [pc, #220]	@ (8000f1c <Menu_system+0x15c>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	701a      	strb	r2, [r3, #0]
				logonAble = 1;
 8000e44:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <Menu_system+0x170>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
				Controler_LCD(0x01, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fe61 	bl	8000b14 <Controler_LCD>
			break;
 8000e52:	e05d      	b.n	8000f10 <Menu_system+0x150>
			if (login == '1'){
 8000e54:	4b35      	ldr	r3, [pc, #212]	@ (8000f2c <Menu_system+0x16c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b31      	cmp	r3, #49	@ 0x31
 8000e5a:	d10b      	bne.n	8000e74 <Menu_system+0xb4>
				Controler_LCD(0x80, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2080      	movs	r0, #128	@ 0x80
 8000e60:	f7ff fe58 	bl	8000b14 <Controler_LCD>
				Mensage_LCD("Login: ");
 8000e64:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <Menu_system+0x174>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff8c 	bl	8000d84 <Mensage_LCD>
				Mensage_LCD("Guto");
 8000e6c:	4b32      	ldr	r3, [pc, #200]	@ (8000f38 <Menu_system+0x178>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff88 	bl	8000d84 <Mensage_LCD>
			if (login == '2'){
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <Menu_system+0x16c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b32      	cmp	r3, #50	@ 0x32
 8000e7a:	d10b      	bne.n	8000e94 <Menu_system+0xd4>
				Controler_LCD(0x80, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2080      	movs	r0, #128	@ 0x80
 8000e80:	f7ff fe48 	bl	8000b14 <Controler_LCD>
				Mensage_LCD("Login: ");
 8000e84:	4b2b      	ldr	r3, [pc, #172]	@ (8000f34 <Menu_system+0x174>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff ff7c 	bl	8000d84 <Mensage_LCD>
				Mensage_LCD("Jhon");
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <Menu_system+0x17c>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff ff78 	bl	8000d84 <Mensage_LCD>
		    Controler_LCD(0xC0, 0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	20c0      	movs	r0, #192	@ 0xc0
 8000e98:	f7ff fe3c 	bl	8000b14 <Controler_LCD>
		    Mensage_LCD("Senha: ");
 8000e9c:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <Menu_system+0x180>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff70 	bl	8000d84 <Mensage_LCD>
			break;
 8000ea4:	e035      	b.n	8000f12 <Menu_system+0x152>
			Controler_LCD(0x80, 0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2080      	movs	r0, #128	@ 0x80
 8000eaa:	f7ff fe33 	bl	8000b14 <Controler_LCD>
			Mensage_LCD("Sucesso!!!");
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <Menu_system+0x184>)
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ff67 	bl	8000d84 <Mensage_LCD>
			Controler_LCD(0xC0, 0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	20c0      	movs	r0, #192	@ 0xc0
 8000eba:	f7ff fe2b 	bl	8000b14 <Controler_LCD>
			Mensage_LCD("Bem-Vindo");
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <Menu_system+0x188>)
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ff5f 	bl	8000d84 <Mensage_LCD>
            HAL_Delay(5000);
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <Menu_system+0x18c>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 f943 	bl	8001154 <HAL_Delay>
            Controler_LCD(0x01, 0);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff fe1f 	bl	8000b14 <Controler_LCD>
            atualMenu = 1;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <Menu_system+0x15c>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
			break;
 8000edc:	e019      	b.n	8000f12 <Menu_system+0x152>
            Controler_LCD(0x01, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fe17 	bl	8000b14 <Controler_LCD>
            Controler_LCD(0x80, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2080      	movs	r0, #128	@ 0x80
 8000eea:	f7ff fe13 	bl	8000b14 <Controler_LCD>
            Mensage_LCD("Senha incorreta");
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <Menu_system+0x190>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ff47 	bl	8000d84 <Mensage_LCD>
            HAL_Delay(2000);
 8000ef6:	23fa      	movs	r3, #250	@ 0xfa
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f92a 	bl	8001154 <HAL_Delay>
            Controler_LCD(0x01, 0);
 8000f00:	2100      	movs	r1, #0
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff fe06 	bl	8000b14 <Controler_LCD>
            atualMenu = 1;
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <Menu_system+0x15c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
			break;
 8000f0e:	e000      	b.n	8000f12 <Menu_system+0x152>
			break;
 8000f10:	46c0      	nop			@ (mov r8, r8)
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	08002720 	.word	0x08002720
 8000f24:	08002730 	.word	0x08002730
 8000f28:	20000083 	.word	0x20000083
 8000f2c:	20000084 	.word	0x20000084
 8000f30:	20000082 	.word	0x20000082
 8000f34:	08002734 	.word	0x08002734
 8000f38:	0800273c 	.word	0x0800273c
 8000f3c:	08002744 	.word	0x08002744
 8000f40:	0800274c 	.word	0x0800274c
 8000f44:	08002754 	.word	0x08002754
 8000f48:	08002760 	.word	0x08002760
 8000f4c:	00001388 	.word	0x00001388
 8000f50:	0800276c 	.word	0x0800276c

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <HAL_MspInit+0x24>)
 8000f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_MspInit+0x24>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <HAL_MspInit+0x24>)
 8000f72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <HAL_MspInit+0x24>)
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	0549      	lsls	r1, r1, #21
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x38>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10d      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2011      	movs	r0, #17
 8000fac:	f000 f9a2 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb0:	2011      	movs	r0, #17
 8000fb2:	f000 f9b4 	bl	800131e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	40001000 	.word	0x40001000
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f894 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <TIM6_DAC_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f001 f996 	bl	8002334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	20000038 	.word	0x20000038

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001022:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001024:	f7ff fff6 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f001 fb2d 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff fa33 	bl	80004bc <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   r0, =_estack
 8001058:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001064:	080027a8 	.word	0x080027a8
  ldr r2, =_sbss
 8001068:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800106c:	20000094 	.word	0x20000094

08001070 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_COMP_IRQHandler>
	...

08001074 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_Init+0x3c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Init+0x3c>)
 8001086:	2140      	movs	r1, #64	@ 0x40
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108c:	2000      	movs	r0, #0
 800108e:	f000 f811 	bl	80010b4 <HAL_InitTick>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d003      	beq.n	800109e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e001      	b.n	80010a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800109e:	f7ff ff5f 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_InitTick+0x5c>)
 80010be:	681c      	ldr	r4, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0019      	movs	r1, r3
 80010c6:	23fa      	movs	r3, #250	@ 0xfa
 80010c8:	0098      	lsls	r0, r3, #2
 80010ca:	f7ff f827 	bl	800011c <__udivsi3>
 80010ce:	0003      	movs	r3, r0
 80010d0:	0019      	movs	r1, r3
 80010d2:	0020      	movs	r0, r4
 80010d4:	f7ff f822 	bl	800011c <__udivsi3>
 80010d8:	0003      	movs	r3, r0
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f92f 	bl	800133e <HAL_SYSTICK_Config>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e00f      	b.n	8001108 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80b      	bhi.n	8001106 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	2301      	movs	r3, #1
 80010f2:	425b      	negs	r3, r3
 80010f4:	2200      	movs	r2, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f8fc 	bl	80012f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_InitTick+0x64>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b003      	add	sp, #12
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	20000010 	.word	0x20000010
 8001114:	20000018 	.word	0x20000018
 8001118:	20000014 	.word	0x20000014

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	18d2      	adds	r2, r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_IncTick+0x20>)
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	20000018 	.word	0x20000018
 800113c:	20000090 	.word	0x20000090

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	20000090 	.word	0x20000090

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff0 	bl	8001140 <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	001a      	movs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	189b      	adds	r3, r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	f7ff ffe0 	bl	8001140 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000018 	.word	0x20000018

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	0002      	movs	r2, r0
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80011ae:	d809      	bhi.n	80011c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	001a      	movs	r2, r3
 80011b6:	231f      	movs	r3, #31
 80011b8:	401a      	ands	r2, r3
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_EnableIRQ+0x30>)
 80011bc:	2101      	movs	r1, #1
 80011be:	4091      	lsls	r1, r2
 80011c0:	000a      	movs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
  }
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80011e4:	d828      	bhi.n	8001238 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e6:	4a2f      	ldr	r2, [pc, #188]	@ (80012a4 <__NVIC_SetPriority+0xd4>)
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	33c0      	adds	r3, #192	@ 0xc0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	589b      	ldr	r3, [r3, r2]
 80011f6:	1dfa      	adds	r2, r7, #7
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	0011      	movs	r1, r2
 80011fc:	2203      	movs	r2, #3
 80011fe:	400a      	ands	r2, r1
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	21ff      	movs	r1, #255	@ 0xff
 8001204:	4091      	lsls	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	43d2      	mvns	r2, r2
 800120a:	401a      	ands	r2, r3
 800120c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	019b      	lsls	r3, r3, #6
 8001212:	22ff      	movs	r2, #255	@ 0xff
 8001214:	401a      	ands	r2, r3
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0018      	movs	r0, r3
 800121c:	2303      	movs	r3, #3
 800121e:	4003      	ands	r3, r0
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	481f      	ldr	r0, [pc, #124]	@ (80012a4 <__NVIC_SetPriority+0xd4>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	430a      	orrs	r2, r1
 8001230:	33c0      	adds	r3, #192	@ 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001236:	e031      	b.n	800129c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	0019      	movs	r1, r3
 8001240:	230f      	movs	r3, #15
 8001242:	400b      	ands	r3, r1
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3306      	adds	r3, #6
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	2203      	movs	r2, #3
 800125a:	400a      	ands	r2, r1
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	21ff      	movs	r1, #255	@ 0xff
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	43d2      	mvns	r2, r2
 8001266:	401a      	ands	r2, r3
 8001268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	22ff      	movs	r2, #255	@ 0xff
 8001270:	401a      	ands	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	2303      	movs	r3, #3
 800127a:	4003      	ands	r3, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <__NVIC_SetPriority+0xd8>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	001c      	movs	r4, r3
 8001288:	230f      	movs	r3, #15
 800128a:	4023      	ands	r3, r4
 800128c:	3b08      	subs	r3, #8
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	430a      	orrs	r2, r1
 8001292:	3306      	adds	r3, #6
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	18c3      	adds	r3, r0, r3
 8001298:	3304      	adds	r3, #4
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b003      	add	sp, #12
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	045b      	lsls	r3, r3, #17
 80012bc:	429a      	cmp	r2, r3
 80012be:	d301      	bcc.n	80012c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c0:	2301      	movs	r3, #1
 80012c2:	e010      	b.n	80012e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <SysTick_Config+0x44>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	3a01      	subs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2103      	movs	r1, #3
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff7c 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x44>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x44>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	210f      	movs	r1, #15
 8001300:	187b      	adds	r3, r7, r1
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	187b      	adds	r3, r7, r1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	0002      	movs	r2, r0
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff ff33 	bl	800119c <__NVIC_EnableIRQ>
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff ffaf 	bl	80012ac <SysTick_Config>
 800134e:	0003      	movs	r3, r0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800136e:	e14f      	b.n	8001610 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4091      	lsls	r1, r2
 800137a:	000a      	movs	r2, r1
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <HAL_GPIO_Init+0x30>
 8001386:	e140      	b.n	800160a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2203      	movs	r2, #3
 800138e:	4013      	ands	r3, r2
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2203      	movs	r2, #3
 800139a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800139c:	2b02      	cmp	r3, #2
 800139e:	d130      	bne.n	8001402 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	409a      	lsls	r2, r3
 80013ae:	0013      	movs	r3, r2
 80013b0:	43da      	mvns	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	409a      	lsls	r2, r3
 80013c2:	0013      	movs	r3, r2
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d6:	2201      	movs	r2, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	2201      	movs	r2, #1
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2203      	movs	r2, #3
 8001408:	4013      	ands	r3, r2
 800140a:	2b03      	cmp	r3, #3
 800140c:	d017      	beq.n	800143e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	43da      	mvns	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	4013      	ands	r3, r2
 8001446:	2b02      	cmp	r3, #2
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	58d3      	ldr	r3, [r2, r3]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2207      	movs	r2, #7
 800145c:	4013      	ands	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2107      	movs	r1, #7
 8001476:	400b      	ands	r3, r1
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	6939      	ldr	r1, [r7, #16]
 8001490:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2203      	movs	r2, #3
 80014b0:	401a      	ands	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	029b      	lsls	r3, r3, #10
 80014ce:	4013      	ands	r3, r2
 80014d0:	d100      	bne.n	80014d4 <HAL_GPIO_Init+0x17c>
 80014d2:	e09a      	b.n	800160a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b54      	ldr	r3, [pc, #336]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80014d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014d8:	4b53      	ldr	r3, [pc, #332]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80014da:	2101      	movs	r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e0:	4a52      	ldr	r2, [pc, #328]	@ (800162c <HAL_GPIO_Init+0x2d4>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	589b      	ldr	r3, [r3, r2]
 80014ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2203      	movs	r2, #3
 80014f2:	4013      	ands	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	23a0      	movs	r3, #160	@ 0xa0
 8001508:	05db      	lsls	r3, r3, #23
 800150a:	429a      	cmp	r2, r3
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x1ea>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a47      	ldr	r2, [pc, #284]	@ (8001630 <HAL_GPIO_Init+0x2d8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x1e6>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a46      	ldr	r2, [pc, #280]	@ (8001634 <HAL_GPIO_Init+0x2dc>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x1e2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a45      	ldr	r2, [pc, #276]	@ (8001638 <HAL_GPIO_Init+0x2e0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x1de>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a44      	ldr	r2, [pc, #272]	@ (800163c <HAL_GPIO_Init+0x2e4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x1da>
 800152e:	2305      	movs	r3, #5
 8001530:	e008      	b.n	8001544 <HAL_GPIO_Init+0x1ec>
 8001532:	2306      	movs	r3, #6
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x1ec>
 8001536:	2303      	movs	r3, #3
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x1ec>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x1ec>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x1ec>
 8001542:	2300      	movs	r3, #0
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	2103      	movs	r1, #3
 8001548:	400a      	ands	r2, r1
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4093      	lsls	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001554:	4935      	ldr	r1, [pc, #212]	@ (800162c <HAL_GPIO_Init+0x2d4>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	035b      	lsls	r3, r3, #13
 800157a:	4013      	ands	r3, r2
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800158c:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43da      	mvns	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	039b      	lsls	r3, r3, #14
 80015a4:	4013      	ands	r3, r2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	4013      	ands	r3, r2
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	40da      	lsrs	r2, r3
 8001618:	1e13      	subs	r3, r2, #0
 800161a:	d000      	beq.n	800161e <HAL_GPIO_Init+0x2c6>
 800161c:	e6a8      	b.n	8001370 <HAL_GPIO_Init+0x18>
  }
}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000
 8001630:	50000400 	.word	0x50000400
 8001634:	50000800 	.word	0x50000800
 8001638:	50000c00 	.word	0x50000c00
 800163c:	50001c00 	.word	0x50001c00
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	000a      	movs	r2, r1
 800164e:	1cbb      	adds	r3, r7, #2
 8001650:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	1cba      	adds	r2, r7, #2
 8001658:	8812      	ldrh	r2, [r2, #0]
 800165a:	4013      	ands	r3, r2
 800165c:	d004      	beq.n	8001668 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800165e:	230f      	movs	r3, #15
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e003      	b.n	8001670 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001668:	230f      	movs	r3, #15
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001670:	230f      	movs	r3, #15
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	781b      	ldrb	r3, [r3, #0]
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	0008      	movs	r0, r1
 8001688:	0011      	movs	r1, r2
 800168a:	1cbb      	adds	r3, r7, #2
 800168c:	1c02      	adds	r2, r0, #0
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	1c7b      	adds	r3, r7, #1
 8001692:	1c0a      	adds	r2, r1, #0
 8001694:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001696:	1c7b      	adds	r3, r7, #1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169e:	1cbb      	adds	r3, r7, #2
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80016a6:	e003      	b.n	80016b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80016a8:	1cbb      	adds	r3, r7, #2
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f000 fbaf 	bl	8001e2a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016cc:	4bcf      	ldr	r3, [pc, #828]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	220c      	movs	r2, #12
 80016d2:	4013      	ands	r3, r2
 80016d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d6:	4bcd      	ldr	r3, [pc, #820]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	025b      	lsls	r3, r3, #9
 80016de:	4013      	ands	r3, r2
 80016e0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d100      	bne.n	80016ee <HAL_RCC_OscConfig+0x36>
 80016ec:	e07e      	b.n	80017ec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d007      	beq.n	8001704 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x68>
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	429a      	cmp	r2, r3
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4bc1      	ldr	r3, [pc, #772]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x5a>
 8001710:	e06b      	b.n	80017ea <HAL_RCC_OscConfig+0x132>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d167      	bne.n	80017ea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	f000 fb85 	bl	8001e2a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	025b      	lsls	r3, r3, #9
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x84>
 800172c:	4bb7      	ldr	r3, [pc, #732]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4bb6      	ldr	r3, [pc, #728]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	0249      	lsls	r1, r1, #9
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e027      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	23a0      	movs	r3, #160	@ 0xa0
 8001742:	02db      	lsls	r3, r3, #11
 8001744:	429a      	cmp	r2, r3
 8001746:	d10e      	bne.n	8001766 <HAL_RCC_OscConfig+0xae>
 8001748:	4bb0      	ldr	r3, [pc, #704]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4baf      	ldr	r3, [pc, #700]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800174e:	2180      	movs	r1, #128	@ 0x80
 8001750:	02c9      	lsls	r1, r1, #11
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	4bad      	ldr	r3, [pc, #692]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4bac      	ldr	r3, [pc, #688]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	0249      	lsls	r1, r1, #9
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e012      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001766:	4ba9      	ldr	r3, [pc, #676]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800176c:	49a8      	ldr	r1, [pc, #672]	@ (8001a10 <HAL_RCC_OscConfig+0x358>)
 800176e:	400a      	ands	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	4ba6      	ldr	r3, [pc, #664]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	@ 0x80
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4ba2      	ldr	r3, [pc, #648]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4ba1      	ldr	r3, [pc, #644]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001786:	49a3      	ldr	r1, [pc, #652]	@ (8001a14 <HAL_RCC_OscConfig+0x35c>)
 8001788:	400a      	ands	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d015      	beq.n	80017c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fcd4 	bl	8001140 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fccf 	bl	8001140 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	@ 0x64
 80017aa:	d902      	bls.n	80017b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f000 fb3c 	bl	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b2:	4b96      	ldr	r3, [pc, #600]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0ef      	beq.n	800179e <HAL_RCC_OscConfig+0xe6>
 80017be:	e015      	b.n	80017ec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcbe 	bl	8001140 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ca:	f7ff fcb9 	bl	8001140 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	@ 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e326      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017dc:	4b8b      	ldr	r3, [pc, #556]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	4013      	ands	r3, r2
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x112>
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d100      	bne.n	80017f8 <HAL_RCC_OscConfig+0x140>
 80017f6:	e08b      	b.n	8001910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d13e      	bne.n	8001888 <HAL_RCC_OscConfig+0x1d0>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d13b      	bne.n	8001888 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001810:	4b7e      	ldr	r3, [pc, #504]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_RCC_OscConfig+0x16c>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e302      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b79      	ldr	r3, [pc, #484]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a7b      	ldr	r2, [pc, #492]	@ (8001a18 <HAL_RCC_OscConfig+0x360>)
 800182a:	4013      	ands	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	021a      	lsls	r2, r3, #8
 8001834:	4b75      	ldr	r3, [pc, #468]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800183a:	4b74      	ldr	r3, [pc, #464]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2209      	movs	r2, #9
 8001840:	4393      	bics	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4b71      	ldr	r3, [pc, #452]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184c:	f000 fc40 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8001850:	0001      	movs	r1, r0
 8001852:	4b6e      	ldr	r3, [pc, #440]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	220f      	movs	r2, #15
 800185a:	4013      	ands	r3, r2
 800185c:	4a6f      	ldr	r2, [pc, #444]	@ (8001a1c <HAL_RCC_OscConfig+0x364>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	000a      	movs	r2, r1
 8001862:	40da      	lsrs	r2, r3
 8001864:	4b6e      	ldr	r3, [pc, #440]	@ (8001a20 <HAL_RCC_OscConfig+0x368>)
 8001866:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001868:	4b6e      	ldr	r3, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x36c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2513      	movs	r5, #19
 800186e:	197c      	adds	r4, r7, r5
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fc1f 	bl	80010b4 <HAL_InitTick>
 8001876:	0003      	movs	r3, r0
 8001878:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d046      	beq.n	8001910 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001882:	197b      	adds	r3, r7, r5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	e2d0      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d027      	beq.n	80018de <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800188e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2209      	movs	r2, #9
 8001894:	4393      	bics	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	4b5c      	ldr	r3, [pc, #368]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc4e 	bl	8001140 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc49 	bl	8001140 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e2b6      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018bc:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2204      	movs	r2, #4
 80018c2:	4013      	ands	r3, r2
 80018c4:	d0f1      	beq.n	80018aa <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a53      	ldr	r2, [pc, #332]	@ (8001a18 <HAL_RCC_OscConfig+0x360>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	021a      	lsls	r2, r3, #8
 80018d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b4b      	ldr	r3, [pc, #300]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b4a      	ldr	r3, [pc, #296]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	438a      	bics	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fc29 	bl	8001140 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fc24 	bl	8001140 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e291      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001906:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2204      	movs	r2, #4
 800190c:	4013      	ands	r3, r2
 800190e:	d1f1      	bne.n	80018f4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2210      	movs	r2, #16
 8001916:	4013      	ands	r3, r2
 8001918:	d100      	bne.n	800191c <HAL_RCC_OscConfig+0x264>
 800191a:	e0a1      	b.n	8001a60 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d140      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x282>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e277      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a28 <HAL_RCC_OscConfig+0x370>)
 8001940:	4013      	ands	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	0a19      	lsrs	r1, r3, #8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	061a      	lsls	r2, r3, #24
 800195c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	0b5b      	lsrs	r3, r3, #13
 8001968:	3301      	adds	r3, #1
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	0212      	lsls	r2, r2, #8
 800196e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	210f      	movs	r1, #15
 8001978:	400b      	ands	r3, r1
 800197a:	4928      	ldr	r1, [pc, #160]	@ (8001a1c <HAL_RCC_OscConfig+0x364>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_OscConfig+0x368>)
 8001982:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_RCC_OscConfig+0x36c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2513      	movs	r5, #19
 800198a:	197c      	adds	r4, r7, r5
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fb91 	bl	80010b4 <HAL_InitTick>
 8001992:	0003      	movs	r3, r0
 8001994:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001996:	197b      	adds	r3, r7, r5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d060      	beq.n	8001a60 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800199e:	197b      	adds	r3, r7, r5
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	e242      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03f      	beq.n	8001a2c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80019b2:	2180      	movs	r1, #128	@ 0x80
 80019b4:	0049      	lsls	r1, r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fbc1 	bl	8001140 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c4:	f7ff fbbc 	bl	8001140 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e229      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	@ 0x80
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_RCC_OscConfig+0x370>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	0a19      	lsrs	r1, r3, #8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	061a      	lsls	r2, r3, #24
 8001a04:	4b01      	ldr	r3, [pc, #4]	@ (8001a0c <HAL_RCC_OscConfig+0x354>)
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	e029      	b.n	8001a60 <HAL_RCC_OscConfig+0x3a8>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	fffeffff 	.word	0xfffeffff
 8001a14:	fffbffff 	.word	0xfffbffff
 8001a18:	ffffe0ff 	.word	0xffffe0ff
 8001a1c:	0800277c 	.word	0x0800277c
 8001a20:	20000010 	.word	0x20000010
 8001a24:	20000014 	.word	0x20000014
 8001a28:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a2c:	4bbd      	ldr	r3, [pc, #756]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4bbc      	ldr	r3, [pc, #752]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001a32:	49bd      	ldr	r1, [pc, #756]	@ (8001d28 <HAL_RCC_OscConfig+0x670>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb82 	bl	8001140 <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a42:	f7ff fb7d 	bl	8001140 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1ea      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a54:	4bb3      	ldr	r3, [pc, #716]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2208      	movs	r2, #8
 8001a66:	4013      	ands	r3, r2
 8001a68:	d036      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d019      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4bac      	ldr	r3, [pc, #688]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a76:	4bab      	ldr	r3, [pc, #684]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fb5f 	bl	8001140 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fb5a 	bl	8001140 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1c7      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a9a:	4ba2      	ldr	r3, [pc, #648]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d0f1      	beq.n	8001a88 <HAL_RCC_OscConfig+0x3d0>
 8001aa4:	e018      	b.n	8001ad8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	438a      	bics	r2, r1
 8001ab0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb45 	bl	8001140 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fb40 	bl	8001140 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1ad      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ace:	4b95      	ldr	r3, [pc, #596]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d1f1      	bne.n	8001abc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2204      	movs	r2, #4
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x42c>
 8001ae2:	e0ae      	b.n	8001c42 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	2027      	movs	r0, #39	@ 0x27
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aec:	4b8d      	ldr	r3, [pc, #564]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	055b      	lsls	r3, r3, #21
 8001af4:	4013      	ands	r3, r2
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b8a      	ldr	r3, [pc, #552]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001afc:	4b89      	ldr	r3, [pc, #548]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001afe:	2180      	movs	r1, #128	@ 0x80
 8001b00:	0549      	lsls	r1, r1, #21
 8001b02:	430a      	orrs	r2, r1
 8001b04:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001b06:	183b      	adds	r3, r7, r0
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b87      	ldr	r3, [pc, #540]	@ (8001d2c <HAL_RCC_OscConfig+0x674>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d11a      	bne.n	8001b4e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b18:	4b84      	ldr	r3, [pc, #528]	@ (8001d2c <HAL_RCC_OscConfig+0x674>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b83      	ldr	r3, [pc, #524]	@ (8001d2c <HAL_RCC_OscConfig+0x674>)
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	0049      	lsls	r1, r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fb0b 	bl	8001140 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b30:	f7ff fb06 	bl	8001140 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e173      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b7a      	ldr	r3, [pc, #488]	@ (8001d2c <HAL_RCC_OscConfig+0x674>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4b2>
 8001b5a:	4b72      	ldr	r3, [pc, #456]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b5e:	4b71      	ldr	r3, [pc, #452]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	0049      	lsls	r1, r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b68:	e031      	b.n	8001bce <HAL_RCC_OscConfig+0x516>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4d4>
 8001b72:	4b6c      	ldr	r3, [pc, #432]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b76:	4b6b      	ldr	r3, [pc, #428]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b78:	496b      	ldr	r1, [pc, #428]	@ (8001d28 <HAL_RCC_OscConfig+0x670>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b7e:	4b69      	ldr	r3, [pc, #420]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b82:	4b68      	ldr	r3, [pc, #416]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b84:	496a      	ldr	r1, [pc, #424]	@ (8001d30 <HAL_RCC_OscConfig+0x678>)
 8001b86:	400a      	ands	r2, r1
 8001b88:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b8a:	e020      	b.n	8001bce <HAL_RCC_OscConfig+0x516>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	23a0      	movs	r3, #160	@ 0xa0
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10e      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x4fe>
 8001b98:	4b62      	ldr	r3, [pc, #392]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b9c:	4b61      	ldr	r3, [pc, #388]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001b9e:	2180      	movs	r1, #128	@ 0x80
 8001ba0:	00c9      	lsls	r1, r1, #3
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001baa:	4b5e      	ldr	r3, [pc, #376]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	0049      	lsls	r1, r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x516>
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bba:	4b5a      	ldr	r3, [pc, #360]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001bbc:	495a      	ldr	r1, [pc, #360]	@ (8001d28 <HAL_RCC_OscConfig+0x670>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bc2:	4b58      	ldr	r3, [pc, #352]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bc6:	4b57      	ldr	r3, [pc, #348]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001bc8:	4959      	ldr	r1, [pc, #356]	@ (8001d30 <HAL_RCC_OscConfig+0x678>)
 8001bca:	400a      	ands	r2, r1
 8001bcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fab3 	bl	8001140 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff faae 	bl	8001140 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4a52      	ldr	r2, [pc, #328]	@ (8001d34 <HAL_RCC_OscConfig+0x67c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e11a      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001bf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d0ef      	beq.n	8001be0 <HAL_RCC_OscConfig+0x528>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa9d 	bl	8001140 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c0a:	e009      	b.n	8001c20 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa98 	bl	8001140 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	4a47      	ldr	r2, [pc, #284]	@ (8001d34 <HAL_RCC_OscConfig+0x67c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e104      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c20:	4b40      	ldr	r3, [pc, #256]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d1ef      	bne.n	8001c0c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c2c:	2327      	movs	r3, #39	@ 0x27
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c36:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c3c:	493e      	ldr	r1, [pc, #248]	@ (8001d38 <HAL_RCC_OscConfig+0x680>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2220      	movs	r2, #32
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d049      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d026      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c54:	4b33      	ldr	r3, [pc, #204]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4b32      	ldr	r3, [pc, #200]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	4b30      	ldr	r3, [pc, #192]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c64:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c6c:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_RCC_OscConfig+0x684>)
 8001c6e:	6a1a      	ldr	r2, [r3, #32]
 8001c70:	4b32      	ldr	r3, [pc, #200]	@ (8001d3c <HAL_RCC_OscConfig+0x684>)
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	0189      	lsls	r1, r1, #6
 8001c76:	430a      	orrs	r2, r1
 8001c78:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fa61 	bl	8001140 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c84:	f7ff fa5c 	bl	8001140 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0c9      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d0f1      	beq.n	8001c84 <HAL_RCC_OscConfig+0x5cc>
 8001ca0:	e01e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	438a      	bics	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_RCC_OscConfig+0x684>)
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <HAL_RCC_OscConfig+0x684>)
 8001cb4:	4922      	ldr	r1, [pc, #136]	@ (8001d40 <HAL_RCC_OscConfig+0x688>)
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fa41 	bl	8001140 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc4:	f7ff fa3c 	bl	8001140 <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0a9      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d1f1      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x632>
 8001ce8:	e09e      	b.n	8001e28 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x63a>
 8001cf0:	e077      	b.n	8001de2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d158      	bne.n	8001dac <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_RCC_OscConfig+0x66c>)
 8001d00:	4910      	ldr	r1, [pc, #64]	@ (8001d44 <HAL_RCC_OscConfig+0x68c>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa1b 	bl	8001140 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d0e:	e01b      	b.n	8001d48 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff fa16 	bl	8001140 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d914      	bls.n	8001d48 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e083      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	fffffeff 	.word	0xfffffeff
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	fffffbff 	.word	0xfffffbff
 8001d34:	00001388 	.word	0x00001388
 8001d38:	efffffff 	.word	0xefffffff
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	ffffdfff 	.word	0xffffdfff
 8001d44:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d48:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	049b      	lsls	r3, r3, #18
 8001d50:	4013      	ands	r3, r2
 8001d52:	d1dd      	bne.n	8001d10 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b37      	ldr	r3, [pc, #220]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a37      	ldr	r2, [pc, #220]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	0449      	lsls	r1, r1, #17
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff f9dd 	bl	8001140 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f9d8 	bl	8001140 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e045      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d9e:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	@ 0x80
 8001da4:	049b      	lsls	r3, r3, #18
 8001da6:	4013      	ands	r3, r2
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x6d4>
 8001daa:	e03d      	b.n	8001e28 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001db2:	4922      	ldr	r1, [pc, #136]	@ (8001e3c <HAL_RCC_OscConfig+0x784>)
 8001db4:	400a      	ands	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff f9c2 	bl	8001140 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff f9bd 	bl	8001140 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e02a      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	049b      	lsls	r3, r3, #18
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x70a>
 8001de0:	e022      	b.n	8001e28 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e01d      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_RCC_OscConfig+0x77c>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d10f      	bne.n	8001e24 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	23f0      	movs	r3, #240	@ 0xf0
 8001e08:	039b      	lsls	r3, r3, #14
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	23c0      	movs	r3, #192	@ 0xc0
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b00a      	add	sp, #40	@ 0x28
 8001e30:	bdb0      	pop	{r4, r5, r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	40021000 	.word	0x40021000
 8001e38:	ff02ffff 	.word	0xff02ffff
 8001e3c:	feffffff 	.word	0xfeffffff

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e128      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d91e      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b93      	ldr	r3, [pc, #588]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4393      	bics	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	4b90      	ldr	r3, [pc, #576]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e74:	f7ff f964 	bl	8001140 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7e:	f7ff f95f 	bl	8001140 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a8a      	ldr	r2, [pc, #552]	@ (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e109      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b87      	ldr	r3, [pc, #540]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eaa:	4b83      	ldr	r3, [pc, #524]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	22f0      	movs	r2, #240	@ 0xf0
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_ClockConfig+0x8a>
 8001ec8:	e089      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed2:	4b79      	ldr	r3, [pc, #484]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	d120      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e1      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eea:	4b73      	ldr	r3, [pc, #460]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	049b      	lsls	r3, r3, #18
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d114      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0d5      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f02:	4b6d      	ldr	r3, [pc, #436]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d109      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ca      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f10:	4b69      	ldr	r3, [pc, #420]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0c2      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f20:	4b65      	ldr	r3, [pc, #404]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4b62      	ldr	r3, [pc, #392]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f904 	bl	8001140 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f46:	f7ff f8fb 	bl	8001140 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4a58      	ldr	r2, [pc, #352]	@ (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0a5      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5a:	4b57      	ldr	r3, [pc, #348]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d1ef      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x106>
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d111      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7ff f8e5 	bl	8001140 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e08f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f86:	4b4c      	ldr	r3, [pc, #304]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d1ef      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x132>
 8001f92:	e024      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7ff f8cf 	bl	8001140 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a42      	ldr	r2, [pc, #264]	@ (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e079      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b41      	ldr	r3, [pc, #260]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d1ef      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x15e>
 8001fbe:	e00e      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff f8be 	bl	8001140 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	4a3a      	ldr	r2, [pc, #232]	@ (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e068      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fd4:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fde:	4b34      	ldr	r3, [pc, #208]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d21e      	bcs.n	800202a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ffe:	f7ff f89f 	bl	8001140 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	e009      	b.n	800201c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f7ff f89a 	bl	8001140 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4a28      	ldr	r2, [pc, #160]	@ (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e044      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <HAL_RCC_ClockConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d1ee      	bne.n	8002008 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a20      	ldr	r2, [pc, #128]	@ (80020bc <HAL_RCC_ClockConfig+0x27c>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2208      	movs	r2, #8
 800204e:	4013      	ands	r3, r2
 8002050:	d00a      	beq.n	8002068 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <HAL_RCC_ClockConfig+0x280>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00da      	lsls	r2, r3, #3
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002068:	f000 f832 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800206c:	0001      	movs	r1, r0
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	220f      	movs	r2, #15
 8002076:	4013      	ands	r3, r2
 8002078:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <HAL_RCC_ClockConfig+0x284>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	000a      	movs	r2, r1
 800207e:	40da      	lsrs	r2, r3
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_RCC_ClockConfig+0x288>)
 8002082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_ClockConfig+0x28c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	250b      	movs	r5, #11
 800208a:	197c      	adds	r4, r7, r5
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff f811 	bl	80010b4 <HAL_InitTick>
 8002092:	0003      	movs	r3, r0
 8002094:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002096:	197b      	adds	r3, r7, r5
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800209e:	197b      	adds	r3, r7, r5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40022000 	.word	0x40022000
 80020b4:	00001388 	.word	0x00001388
 80020b8:	40021000 	.word	0x40021000
 80020bc:	fffff8ff 	.word	0xfffff8ff
 80020c0:	ffffc7ff 	.word	0xffffc7ff
 80020c4:	0800277c 	.word	0x0800277c
 80020c8:	20000010 	.word	0x20000010
 80020cc:	20000014 	.word	0x20000014

080020d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b08e      	sub	sp, #56	@ 0x38
 80020d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80020d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020de:	230c      	movs	r3, #12
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d014      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x40>
 80020e6:	d900      	bls.n	80020ea <HAL_RCC_GetSysClockFreq+0x1a>
 80020e8:	e07b      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x112>
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x24>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x3a>
 80020f2:	e076      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020f4:	4b44      	ldr	r3, [pc, #272]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2210      	movs	r2, #16
 80020fa:	4013      	ands	r3, r2
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020fe:	4b43      	ldr	r3, [pc, #268]	@ (800220c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002100:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002102:	e07c      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002104:	4b42      	ldr	r3, [pc, #264]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x140>)
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002108:	e079      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210a:	4b42      	ldr	r3, [pc, #264]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x144>)
 800210c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800210e:	e076      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002112:	0c9a      	lsrs	r2, r3, #18
 8002114:	230f      	movs	r3, #15
 8002116:	401a      	ands	r2, r3
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x148>)
 800211a:	5c9b      	ldrb	r3, [r3, r2]
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800211e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002120:	0d9a      	lsrs	r2, r3, #22
 8002122:	2303      	movs	r3, #3
 8002124:	4013      	ands	r3, r2
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	4013      	ands	r3, r2
 8002134:	d01a      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	4a35      	ldr	r2, [pc, #212]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x144>)
 8002140:	2300      	movs	r3, #0
 8002142:	69b8      	ldr	r0, [r7, #24]
 8002144:	69f9      	ldr	r1, [r7, #28]
 8002146:	f7fe f895 	bl	8000274 <__aeabi_lmul>
 800214a:	0002      	movs	r2, r0
 800214c:	000b      	movs	r3, r1
 800214e:	0010      	movs	r0, r2
 8002150:	0019      	movs	r1, r3
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f7fe f869 	bl	8000234 <__aeabi_uldivmod>
 8002162:	0002      	movs	r2, r0
 8002164:	000b      	movs	r3, r1
 8002166:	0013      	movs	r3, r2
 8002168:	637b      	str	r3, [r7, #52]	@ 0x34
 800216a:	e037      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800216c:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d01a      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4a23      	ldr	r2, [pc, #140]	@ (800220c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002180:	2300      	movs	r3, #0
 8002182:	68b8      	ldr	r0, [r7, #8]
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	f7fe f875 	bl	8000274 <__aeabi_lmul>
 800218a:	0002      	movs	r2, r0
 800218c:	000b      	movs	r3, r1
 800218e:	0010      	movs	r0, r2
 8002190:	0019      	movs	r1, r3
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f7fe f849 	bl	8000234 <__aeabi_uldivmod>
 80021a2:	0002      	movs	r2, r0
 80021a4:	000b      	movs	r3, r1
 80021a6:	0013      	movs	r3, r2
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021aa:	e017      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ae:	0018      	movs	r0, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	0019      	movs	r1, r3
 80021b4:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x140>)
 80021b6:	2300      	movs	r3, #0
 80021b8:	f7fe f85c 	bl	8000274 <__aeabi_lmul>
 80021bc:	0002      	movs	r2, r0
 80021be:	000b      	movs	r3, r1
 80021c0:	0010      	movs	r0, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	001c      	movs	r4, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	001d      	movs	r5, r3
 80021cc:	0022      	movs	r2, r4
 80021ce:	002b      	movs	r3, r5
 80021d0:	f7fe f830 	bl	8000234 <__aeabi_uldivmod>
 80021d4:	0002      	movs	r2, r0
 80021d6:	000b      	movs	r3, r1
 80021d8:	0013      	movs	r3, r2
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80021dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80021e0:	e00d      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0b5b      	lsrs	r3, r3, #13
 80021e8:	2207      	movs	r2, #7
 80021ea:	4013      	ands	r3, r2
 80021ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	3301      	adds	r3, #1
 80021f2:	2280      	movs	r2, #128	@ 0x80
 80021f4:	0212      	lsls	r2, r2, #8
 80021f6:	409a      	lsls	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80021fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b00e      	add	sp, #56	@ 0x38
 8002206:	bdb0      	pop	{r4, r5, r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	003d0900 	.word	0x003d0900
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200
 8002218:	0800278c 	.word	0x0800278c

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e032      	b.n	8002294 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2239      	movs	r2, #57	@ 0x39
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2238      	movs	r2, #56	@ 0x38
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f7fe fe9f 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2239      	movs	r2, #57	@ 0x39
 800224e:	2102      	movs	r1, #2
 8002250:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	0019      	movs	r1, r3
 800225c:	0010      	movs	r0, r2
 800225e:	f000 f971 	bl	8002544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223e      	movs	r2, #62	@ 0x3e
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223a      	movs	r2, #58	@ 0x3a
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	223b      	movs	r2, #59	@ 0x3b
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223c      	movs	r2, #60	@ 0x3c
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223d      	movs	r2, #61	@ 0x3d
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2239      	movs	r2, #57	@ 0x39
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2239      	movs	r2, #57	@ 0x39
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e036      	b.n	8002322 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2239      	movs	r2, #57	@ 0x39
 80022b8:	2102      	movs	r1, #2
 80022ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	05db      	lsls	r3, r3, #23
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d009      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x50>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a13      	ldr	r2, [pc, #76]	@ (800232c <HAL_TIM_Base_Start_IT+0x90>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x50>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <HAL_TIM_Base_Start_IT+0x94>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d111      	bne.n	8002310 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2207      	movs	r2, #7
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d010      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	e007      	b.n	8002320 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2101      	movs	r1, #1
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b004      	add	sp, #16
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	40010800 	.word	0x40010800
 8002330:	40011400 	.word	0x40011400

08002334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d124      	bne.n	8002394 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d11d      	bne.n	8002394 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2203      	movs	r2, #3
 800235e:	4252      	negs	r2, r2
 8002360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2203      	movs	r2, #3
 8002370:	4013      	ands	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f8cc 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 800237c:	e007      	b.n	800238e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f8bf 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f8cb 	bl	8002524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2204      	movs	r2, #4
 800239c:	4013      	ands	r3, r2
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d125      	bne.n	80023ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2204      	movs	r2, #4
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11e      	bne.n	80023ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2205      	movs	r2, #5
 80023b6:	4252      	negs	r2, r2
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	23c0      	movs	r3, #192	@ 0xc0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f89f 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 80023d6:	e007      	b.n	80023e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 f892 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f89e 	bl	8002524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2208      	movs	r2, #8
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d124      	bne.n	8002446 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2208      	movs	r2, #8
 8002404:	4013      	ands	r3, r2
 8002406:	2b08      	cmp	r3, #8
 8002408:	d11d      	bne.n	8002446 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2209      	movs	r2, #9
 8002410:	4252      	negs	r2, r2
 8002412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2203      	movs	r2, #3
 8002422:	4013      	ands	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f873 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 800242e:	e007      	b.n	8002440 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f866 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f872 	bl	8002524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2210      	movs	r2, #16
 800244e:	4013      	ands	r3, r2
 8002450:	2b10      	cmp	r3, #16
 8002452:	d125      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2210      	movs	r2, #16
 800245c:	4013      	ands	r3, r2
 800245e:	2b10      	cmp	r3, #16
 8002460:	d11e      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2211      	movs	r2, #17
 8002468:	4252      	negs	r2, r2
 800246a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2208      	movs	r2, #8
 8002470:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	23c0      	movs	r3, #192	@ 0xc0
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f846 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002488:	e007      	b.n	800249a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 f839 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f845 	bl	8002524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10f      	bne.n	80024ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d108      	bne.n	80024ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2202      	movs	r2, #2
 80024c2:	4252      	negs	r2, r2
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe f96f 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b40      	cmp	r3, #64	@ 0x40
 80024da:	d10f      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2240      	movs	r2, #64	@ 0x40
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b40      	cmp	r3, #64	@ 0x40
 80024e8:	d108      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2241      	movs	r2, #65	@ 0x41
 80024f0:	4252      	negs	r2, r2
 80024f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f81c 	bl	8002534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fc:	46c0      	nop			@ (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}

08002544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	429a      	cmp	r2, r3
 800255c:	d007      	beq.n	800256e <TIM_Base_SetConfig+0x2a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <TIM_Base_SetConfig+0x9c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <TIM_Base_SetConfig+0x2a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <TIM_Base_SetConfig+0xa0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2270      	movs	r2, #112	@ 0x70
 8002572:	4393      	bics	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	429a      	cmp	r2, r3
 8002588:	d007      	beq.n	800259a <TIM_Base_SetConfig+0x56>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a14      	ldr	r2, [pc, #80]	@ (80025e0 <TIM_Base_SetConfig+0x9c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d003      	beq.n	800259a <TIM_Base_SetConfig+0x56>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a13      	ldr	r2, [pc, #76]	@ (80025e4 <TIM_Base_SetConfig+0xa0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d108      	bne.n	80025ac <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a12      	ldr	r2, [pc, #72]	@ (80025e8 <TIM_Base_SetConfig+0xa4>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	4393      	bics	r3, r2
 80025b2:	001a      	movs	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	615a      	str	r2, [r3, #20]
}
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40010800 	.word	0x40010800
 80025e4:	40011400 	.word	0x40011400
 80025e8:	fffffcff 	.word	0xfffffcff

080025ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2238      	movs	r2, #56	@ 0x38
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002600:	2302      	movs	r3, #2
 8002602:	e042      	b.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2238      	movs	r2, #56	@ 0x38
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2239      	movs	r2, #57	@ 0x39
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2270      	movs	r2, #112	@ 0x70
 8002628:	4393      	bics	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	429a      	cmp	r2, r3
 8002648:	d009      	beq.n	800265e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10c      	bne.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2280      	movs	r2, #128	@ 0x80
 8002662:	4393      	bics	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2239      	movs	r2, #57	@ 0x39
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2238      	movs	r2, #56	@ 0x38
 8002684:	2100      	movs	r1, #0
 8002686:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40010800 	.word	0x40010800
 8002698:	40011400 	.word	0x40011400

0800269c <memset>:
 800269c:	0003      	movs	r3, r0
 800269e:	1882      	adds	r2, r0, r2
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d100      	bne.n	80026a6 <memset+0xa>
 80026a4:	4770      	bx	lr
 80026a6:	7019      	strb	r1, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	e7f9      	b.n	80026a0 <memset+0x4>

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2600      	movs	r6, #0
 80026b0:	4c0c      	ldr	r4, [pc, #48]	@ (80026e4 <__libc_init_array+0x38>)
 80026b2:	4d0d      	ldr	r5, [pc, #52]	@ (80026e8 <__libc_init_array+0x3c>)
 80026b4:	1b64      	subs	r4, r4, r5
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	2600      	movs	r6, #0
 80026be:	f000 f819 	bl	80026f4 <_init>
 80026c2:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <__libc_init_array+0x40>)
 80026c4:	4d0a      	ldr	r5, [pc, #40]	@ (80026f0 <__libc_init_array+0x44>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	00b3      	lsls	r3, r6, #2
 80026d2:	58eb      	ldr	r3, [r5, r3]
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	00b3      	lsls	r3, r6, #2
 80026dc:	58eb      	ldr	r3, [r5, r3]
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	080027a0 	.word	0x080027a0
 80026e8:	080027a0 	.word	0x080027a0
 80026ec:	080027a4 	.word	0x080027a4
 80026f0:	080027a0 	.word	0x080027a0

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

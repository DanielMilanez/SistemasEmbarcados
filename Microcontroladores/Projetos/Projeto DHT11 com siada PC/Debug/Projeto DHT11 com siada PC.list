
Projeto DHT11 com siada PC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f1c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007fe0  08007fe0  00008fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800841c  0800841c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800841c  0800841c  0000941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008424  08008424  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008424  08008424  00009424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008428  08008428  00009428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800842c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001d4  08008600  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08008600  0000a424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be42  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd1  00000000  00000000  0001603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00017c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090f  00000000  00000000  000187c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015444  00000000  00000000  000190d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da25  00000000  00000000  0002e51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081abc  00000000  00000000  0003bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd9fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  000bda40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000c15ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007fc4 	.word	0x08007fc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08007fc4 	.word	0x08007fc4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8f7 	bl	8001630 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f83b 	bl	80014c8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8e9 	bl	8001630 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8df 	bl	8001630 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f865 	bl	8001550 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f85b 	bl	8001550 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f906 	bl	8002718 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f901 	bl	8002718 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_ui2f>:
 8000680:	b510      	push	{r4, lr}
 8000682:	1e04      	subs	r4, r0, #0
 8000684:	d00d      	beq.n	80006a2 <__aeabi_ui2f+0x22>
 8000686:	f002 f829 	bl	80026dc <__clzsi2>
 800068a:	239e      	movs	r3, #158	@ 0x9e
 800068c:	1a1b      	subs	r3, r3, r0
 800068e:	2b96      	cmp	r3, #150	@ 0x96
 8000690:	dc0c      	bgt.n	80006ac <__aeabi_ui2f+0x2c>
 8000692:	2808      	cmp	r0, #8
 8000694:	d034      	beq.n	8000700 <__aeabi_ui2f+0x80>
 8000696:	3808      	subs	r0, #8
 8000698:	4084      	lsls	r4, r0
 800069a:	0264      	lsls	r4, r4, #9
 800069c:	0a64      	lsrs	r4, r4, #9
 800069e:	b2d8      	uxtb	r0, r3
 80006a0:	e001      	b.n	80006a6 <__aeabi_ui2f+0x26>
 80006a2:	2000      	movs	r0, #0
 80006a4:	2400      	movs	r4, #0
 80006a6:	05c0      	lsls	r0, r0, #23
 80006a8:	4320      	orrs	r0, r4
 80006aa:	bd10      	pop	{r4, pc}
 80006ac:	2b99      	cmp	r3, #153	@ 0x99
 80006ae:	dc13      	bgt.n	80006d8 <__aeabi_ui2f+0x58>
 80006b0:	1f42      	subs	r2, r0, #5
 80006b2:	4094      	lsls	r4, r2
 80006b4:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <__aeabi_ui2f+0x88>)
 80006b6:	4022      	ands	r2, r4
 80006b8:	0761      	lsls	r1, r4, #29
 80006ba:	d01c      	beq.n	80006f6 <__aeabi_ui2f+0x76>
 80006bc:	210f      	movs	r1, #15
 80006be:	4021      	ands	r1, r4
 80006c0:	2904      	cmp	r1, #4
 80006c2:	d018      	beq.n	80006f6 <__aeabi_ui2f+0x76>
 80006c4:	3204      	adds	r2, #4
 80006c6:	08d4      	lsrs	r4, r2, #3
 80006c8:	0152      	lsls	r2, r2, #5
 80006ca:	d515      	bpl.n	80006f8 <__aeabi_ui2f+0x78>
 80006cc:	239f      	movs	r3, #159	@ 0x9f
 80006ce:	0264      	lsls	r4, r4, #9
 80006d0:	1a18      	subs	r0, r3, r0
 80006d2:	0a64      	lsrs	r4, r4, #9
 80006d4:	b2c0      	uxtb	r0, r0
 80006d6:	e7e6      	b.n	80006a6 <__aeabi_ui2f+0x26>
 80006d8:	0002      	movs	r2, r0
 80006da:	0021      	movs	r1, r4
 80006dc:	321b      	adds	r2, #27
 80006de:	4091      	lsls	r1, r2
 80006e0:	000a      	movs	r2, r1
 80006e2:	1e51      	subs	r1, r2, #1
 80006e4:	418a      	sbcs	r2, r1
 80006e6:	2105      	movs	r1, #5
 80006e8:	1a09      	subs	r1, r1, r0
 80006ea:	40cc      	lsrs	r4, r1
 80006ec:	4314      	orrs	r4, r2
 80006ee:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <__aeabi_ui2f+0x88>)
 80006f0:	4022      	ands	r2, r4
 80006f2:	0761      	lsls	r1, r4, #29
 80006f4:	d1e2      	bne.n	80006bc <__aeabi_ui2f+0x3c>
 80006f6:	08d4      	lsrs	r4, r2, #3
 80006f8:	0264      	lsls	r4, r4, #9
 80006fa:	0a64      	lsrs	r4, r4, #9
 80006fc:	b2d8      	uxtb	r0, r3
 80006fe:	e7d2      	b.n	80006a6 <__aeabi_ui2f+0x26>
 8000700:	0264      	lsls	r4, r4, #9
 8000702:	0a64      	lsrs	r4, r4, #9
 8000704:	308e      	adds	r0, #142	@ 0x8e
 8000706:	e7ce      	b.n	80006a6 <__aeabi_ui2f+0x26>
 8000708:	fbffffff 	.word	0xfbffffff

0800070c <__aeabi_dadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	464f      	mov	r7, r9
 8000710:	4646      	mov	r6, r8
 8000712:	46d6      	mov	lr, sl
 8000714:	b5c0      	push	{r6, r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	9000      	str	r0, [sp, #0]
 800071a:	9101      	str	r1, [sp, #4]
 800071c:	030e      	lsls	r6, r1, #12
 800071e:	004c      	lsls	r4, r1, #1
 8000720:	0fcd      	lsrs	r5, r1, #31
 8000722:	0a71      	lsrs	r1, r6, #9
 8000724:	9e00      	ldr	r6, [sp, #0]
 8000726:	005f      	lsls	r7, r3, #1
 8000728:	0f76      	lsrs	r6, r6, #29
 800072a:	430e      	orrs	r6, r1
 800072c:	9900      	ldr	r1, [sp, #0]
 800072e:	9200      	str	r2, [sp, #0]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	00c9      	lsls	r1, r1, #3
 8000734:	4689      	mov	r9, r1
 8000736:	0319      	lsls	r1, r3, #12
 8000738:	0d7b      	lsrs	r3, r7, #21
 800073a:	4698      	mov	r8, r3
 800073c:	9b01      	ldr	r3, [sp, #4]
 800073e:	0a49      	lsrs	r1, r1, #9
 8000740:	0fdb      	lsrs	r3, r3, #31
 8000742:	469c      	mov	ip, r3
 8000744:	9b00      	ldr	r3, [sp, #0]
 8000746:	9a00      	ldr	r2, [sp, #0]
 8000748:	0f5b      	lsrs	r3, r3, #29
 800074a:	430b      	orrs	r3, r1
 800074c:	4641      	mov	r1, r8
 800074e:	0d64      	lsrs	r4, r4, #21
 8000750:	00d2      	lsls	r2, r2, #3
 8000752:	1a61      	subs	r1, r4, r1
 8000754:	4565      	cmp	r5, ip
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x4e>
 8000758:	e0a6      	b.n	80008a8 <__aeabi_dadd+0x19c>
 800075a:	2900      	cmp	r1, #0
 800075c:	dd72      	ble.n	8000844 <__aeabi_dadd+0x138>
 800075e:	4647      	mov	r7, r8
 8000760:	2f00      	cmp	r7, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x5a>
 8000764:	e0dd      	b.n	8000922 <__aeabi_dadd+0x216>
 8000766:	4fcc      	ldr	r7, [pc, #816]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000768:	42bc      	cmp	r4, r7
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x62>
 800076c:	e19a      	b.n	8000aa4 <__aeabi_dadd+0x398>
 800076e:	2701      	movs	r7, #1
 8000770:	2938      	cmp	r1, #56	@ 0x38
 8000772:	dc17      	bgt.n	80007a4 <__aeabi_dadd+0x98>
 8000774:	2780      	movs	r7, #128	@ 0x80
 8000776:	043f      	lsls	r7, r7, #16
 8000778:	433b      	orrs	r3, r7
 800077a:	291f      	cmp	r1, #31
 800077c:	dd00      	ble.n	8000780 <__aeabi_dadd+0x74>
 800077e:	e1dd      	b.n	8000b3c <__aeabi_dadd+0x430>
 8000780:	2720      	movs	r7, #32
 8000782:	1a78      	subs	r0, r7, r1
 8000784:	001f      	movs	r7, r3
 8000786:	4087      	lsls	r7, r0
 8000788:	46ba      	mov	sl, r7
 800078a:	0017      	movs	r7, r2
 800078c:	40cf      	lsrs	r7, r1
 800078e:	4684      	mov	ip, r0
 8000790:	0038      	movs	r0, r7
 8000792:	4657      	mov	r7, sl
 8000794:	4307      	orrs	r7, r0
 8000796:	4660      	mov	r0, ip
 8000798:	4082      	lsls	r2, r0
 800079a:	40cb      	lsrs	r3, r1
 800079c:	1e50      	subs	r0, r2, #1
 800079e:	4182      	sbcs	r2, r0
 80007a0:	1af6      	subs	r6, r6, r3
 80007a2:	4317      	orrs	r7, r2
 80007a4:	464b      	mov	r3, r9
 80007a6:	1bdf      	subs	r7, r3, r7
 80007a8:	45b9      	cmp	r9, r7
 80007aa:	4180      	sbcs	r0, r0
 80007ac:	4240      	negs	r0, r0
 80007ae:	1a36      	subs	r6, r6, r0
 80007b0:	0233      	lsls	r3, r6, #8
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dadd+0xaa>
 80007b4:	e0ff      	b.n	80009b6 <__aeabi_dadd+0x2aa>
 80007b6:	0276      	lsls	r6, r6, #9
 80007b8:	0a76      	lsrs	r6, r6, #9
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0xb4>
 80007be:	e13c      	b.n	8000a3a <__aeabi_dadd+0x32e>
 80007c0:	0030      	movs	r0, r6
 80007c2:	f001 ff8b 	bl	80026dc <__clzsi2>
 80007c6:	0003      	movs	r3, r0
 80007c8:	3b08      	subs	r3, #8
 80007ca:	2120      	movs	r1, #32
 80007cc:	0038      	movs	r0, r7
 80007ce:	1aca      	subs	r2, r1, r3
 80007d0:	40d0      	lsrs	r0, r2
 80007d2:	409e      	lsls	r6, r3
 80007d4:	0002      	movs	r2, r0
 80007d6:	409f      	lsls	r7, r3
 80007d8:	4332      	orrs	r2, r6
 80007da:	429c      	cmp	r4, r3
 80007dc:	dd00      	ble.n	80007e0 <__aeabi_dadd+0xd4>
 80007de:	e1a6      	b.n	8000b2e <__aeabi_dadd+0x422>
 80007e0:	1b18      	subs	r0, r3, r4
 80007e2:	3001      	adds	r0, #1
 80007e4:	1a09      	subs	r1, r1, r0
 80007e6:	003e      	movs	r6, r7
 80007e8:	408f      	lsls	r7, r1
 80007ea:	40c6      	lsrs	r6, r0
 80007ec:	1e7b      	subs	r3, r7, #1
 80007ee:	419f      	sbcs	r7, r3
 80007f0:	0013      	movs	r3, r2
 80007f2:	408b      	lsls	r3, r1
 80007f4:	4337      	orrs	r7, r6
 80007f6:	431f      	orrs	r7, r3
 80007f8:	40c2      	lsrs	r2, r0
 80007fa:	003b      	movs	r3, r7
 80007fc:	0016      	movs	r6, r2
 80007fe:	2400      	movs	r4, #0
 8000800:	4313      	orrs	r3, r2
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0xfa>
 8000804:	e1df      	b.n	8000bc6 <__aeabi_dadd+0x4ba>
 8000806:	077b      	lsls	r3, r7, #29
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x100>
 800080a:	e332      	b.n	8000e72 <__aeabi_dadd+0x766>
 800080c:	230f      	movs	r3, #15
 800080e:	003a      	movs	r2, r7
 8000810:	403b      	ands	r3, r7
 8000812:	2b04      	cmp	r3, #4
 8000814:	d004      	beq.n	8000820 <__aeabi_dadd+0x114>
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	42ba      	cmp	r2, r7
 800081a:	41bf      	sbcs	r7, r7
 800081c:	427f      	negs	r7, r7
 800081e:	19f6      	adds	r6, r6, r7
 8000820:	0233      	lsls	r3, r6, #8
 8000822:	d400      	bmi.n	8000826 <__aeabi_dadd+0x11a>
 8000824:	e323      	b.n	8000e6e <__aeabi_dadd+0x762>
 8000826:	4b9c      	ldr	r3, [pc, #624]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000828:	3401      	adds	r4, #1
 800082a:	429c      	cmp	r4, r3
 800082c:	d100      	bne.n	8000830 <__aeabi_dadd+0x124>
 800082e:	e0b4      	b.n	800099a <__aeabi_dadd+0x28e>
 8000830:	4b9a      	ldr	r3, [pc, #616]	@ (8000a9c <__aeabi_dadd+0x390>)
 8000832:	0564      	lsls	r4, r4, #21
 8000834:	401e      	ands	r6, r3
 8000836:	0d64      	lsrs	r4, r4, #21
 8000838:	0777      	lsls	r7, r6, #29
 800083a:	08d2      	lsrs	r2, r2, #3
 800083c:	0276      	lsls	r6, r6, #9
 800083e:	4317      	orrs	r7, r2
 8000840:	0b36      	lsrs	r6, r6, #12
 8000842:	e0ac      	b.n	800099e <__aeabi_dadd+0x292>
 8000844:	2900      	cmp	r1, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x13e>
 8000848:	e07e      	b.n	8000948 <__aeabi_dadd+0x23c>
 800084a:	4641      	mov	r1, r8
 800084c:	1b09      	subs	r1, r1, r4
 800084e:	2c00      	cmp	r4, #0
 8000850:	d000      	beq.n	8000854 <__aeabi_dadd+0x148>
 8000852:	e160      	b.n	8000b16 <__aeabi_dadd+0x40a>
 8000854:	0034      	movs	r4, r6
 8000856:	4648      	mov	r0, r9
 8000858:	4304      	orrs	r4, r0
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x152>
 800085c:	e1c9      	b.n	8000bf2 <__aeabi_dadd+0x4e6>
 800085e:	1e4c      	subs	r4, r1, #1
 8000860:	2901      	cmp	r1, #1
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x15a>
 8000864:	e22e      	b.n	8000cc4 <__aeabi_dadd+0x5b8>
 8000866:	4d8c      	ldr	r5, [pc, #560]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000868:	42a9      	cmp	r1, r5
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x162>
 800086c:	e224      	b.n	8000cb8 <__aeabi_dadd+0x5ac>
 800086e:	2701      	movs	r7, #1
 8000870:	2c38      	cmp	r4, #56	@ 0x38
 8000872:	dc11      	bgt.n	8000898 <__aeabi_dadd+0x18c>
 8000874:	0021      	movs	r1, r4
 8000876:	291f      	cmp	r1, #31
 8000878:	dd00      	ble.n	800087c <__aeabi_dadd+0x170>
 800087a:	e20b      	b.n	8000c94 <__aeabi_dadd+0x588>
 800087c:	2420      	movs	r4, #32
 800087e:	0037      	movs	r7, r6
 8000880:	4648      	mov	r0, r9
 8000882:	1a64      	subs	r4, r4, r1
 8000884:	40a7      	lsls	r7, r4
 8000886:	40c8      	lsrs	r0, r1
 8000888:	4307      	orrs	r7, r0
 800088a:	4648      	mov	r0, r9
 800088c:	40a0      	lsls	r0, r4
 800088e:	40ce      	lsrs	r6, r1
 8000890:	1e44      	subs	r4, r0, #1
 8000892:	41a0      	sbcs	r0, r4
 8000894:	1b9b      	subs	r3, r3, r6
 8000896:	4307      	orrs	r7, r0
 8000898:	1bd7      	subs	r7, r2, r7
 800089a:	42ba      	cmp	r2, r7
 800089c:	4192      	sbcs	r2, r2
 800089e:	4252      	negs	r2, r2
 80008a0:	4665      	mov	r5, ip
 80008a2:	4644      	mov	r4, r8
 80008a4:	1a9e      	subs	r6, r3, r2
 80008a6:	e783      	b.n	80007b0 <__aeabi_dadd+0xa4>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	dc00      	bgt.n	80008ae <__aeabi_dadd+0x1a2>
 80008ac:	e09c      	b.n	80009e8 <__aeabi_dadd+0x2dc>
 80008ae:	4647      	mov	r7, r8
 80008b0:	2f00      	cmp	r7, #0
 80008b2:	d167      	bne.n	8000984 <__aeabi_dadd+0x278>
 80008b4:	001f      	movs	r7, r3
 80008b6:	4317      	orrs	r7, r2
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x1b0>
 80008ba:	e0e4      	b.n	8000a86 <__aeabi_dadd+0x37a>
 80008bc:	1e48      	subs	r0, r1, #1
 80008be:	2901      	cmp	r1, #1
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x1b8>
 80008c2:	e19b      	b.n	8000bfc <__aeabi_dadd+0x4f0>
 80008c4:	4f74      	ldr	r7, [pc, #464]	@ (8000a98 <__aeabi_dadd+0x38c>)
 80008c6:	42b9      	cmp	r1, r7
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x1c0>
 80008ca:	e0eb      	b.n	8000aa4 <__aeabi_dadd+0x398>
 80008cc:	2701      	movs	r7, #1
 80008ce:	0001      	movs	r1, r0
 80008d0:	2838      	cmp	r0, #56	@ 0x38
 80008d2:	dc11      	bgt.n	80008f8 <__aeabi_dadd+0x1ec>
 80008d4:	291f      	cmp	r1, #31
 80008d6:	dd00      	ble.n	80008da <__aeabi_dadd+0x1ce>
 80008d8:	e1c7      	b.n	8000c6a <__aeabi_dadd+0x55e>
 80008da:	2720      	movs	r7, #32
 80008dc:	1a78      	subs	r0, r7, r1
 80008de:	001f      	movs	r7, r3
 80008e0:	4684      	mov	ip, r0
 80008e2:	4087      	lsls	r7, r0
 80008e4:	0010      	movs	r0, r2
 80008e6:	40c8      	lsrs	r0, r1
 80008e8:	4307      	orrs	r7, r0
 80008ea:	4660      	mov	r0, ip
 80008ec:	4082      	lsls	r2, r0
 80008ee:	40cb      	lsrs	r3, r1
 80008f0:	1e50      	subs	r0, r2, #1
 80008f2:	4182      	sbcs	r2, r0
 80008f4:	18f6      	adds	r6, r6, r3
 80008f6:	4317      	orrs	r7, r2
 80008f8:	444f      	add	r7, r9
 80008fa:	454f      	cmp	r7, r9
 80008fc:	4180      	sbcs	r0, r0
 80008fe:	4240      	negs	r0, r0
 8000900:	1836      	adds	r6, r6, r0
 8000902:	0233      	lsls	r3, r6, #8
 8000904:	d557      	bpl.n	80009b6 <__aeabi_dadd+0x2aa>
 8000906:	4b64      	ldr	r3, [pc, #400]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000908:	3401      	adds	r4, #1
 800090a:	429c      	cmp	r4, r3
 800090c:	d045      	beq.n	800099a <__aeabi_dadd+0x28e>
 800090e:	2101      	movs	r1, #1
 8000910:	4b62      	ldr	r3, [pc, #392]	@ (8000a9c <__aeabi_dadd+0x390>)
 8000912:	087a      	lsrs	r2, r7, #1
 8000914:	401e      	ands	r6, r3
 8000916:	4039      	ands	r1, r7
 8000918:	430a      	orrs	r2, r1
 800091a:	07f7      	lsls	r7, r6, #31
 800091c:	4317      	orrs	r7, r2
 800091e:	0876      	lsrs	r6, r6, #1
 8000920:	e771      	b.n	8000806 <__aeabi_dadd+0xfa>
 8000922:	001f      	movs	r7, r3
 8000924:	4317      	orrs	r7, r2
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x21e>
 8000928:	e0ad      	b.n	8000a86 <__aeabi_dadd+0x37a>
 800092a:	1e4f      	subs	r7, r1, #1
 800092c:	46bc      	mov	ip, r7
 800092e:	2901      	cmp	r1, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x228>
 8000932:	e182      	b.n	8000c3a <__aeabi_dadd+0x52e>
 8000934:	4f58      	ldr	r7, [pc, #352]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000936:	42b9      	cmp	r1, r7
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x230>
 800093a:	e190      	b.n	8000c5e <__aeabi_dadd+0x552>
 800093c:	4661      	mov	r1, ip
 800093e:	2701      	movs	r7, #1
 8000940:	2938      	cmp	r1, #56	@ 0x38
 8000942:	dd00      	ble.n	8000946 <__aeabi_dadd+0x23a>
 8000944:	e72e      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000946:	e718      	b.n	800077a <__aeabi_dadd+0x6e>
 8000948:	4f55      	ldr	r7, [pc, #340]	@ (8000aa0 <__aeabi_dadd+0x394>)
 800094a:	1c61      	adds	r1, r4, #1
 800094c:	4239      	tst	r1, r7
 800094e:	d000      	beq.n	8000952 <__aeabi_dadd+0x246>
 8000950:	e0d0      	b.n	8000af4 <__aeabi_dadd+0x3e8>
 8000952:	0031      	movs	r1, r6
 8000954:	4648      	mov	r0, r9
 8000956:	001f      	movs	r7, r3
 8000958:	4301      	orrs	r1, r0
 800095a:	4317      	orrs	r7, r2
 800095c:	2c00      	cmp	r4, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x256>
 8000960:	e13d      	b.n	8000bde <__aeabi_dadd+0x4d2>
 8000962:	2900      	cmp	r1, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x25c>
 8000966:	e1bc      	b.n	8000ce2 <__aeabi_dadd+0x5d6>
 8000968:	2f00      	cmp	r7, #0
 800096a:	d000      	beq.n	800096e <__aeabi_dadd+0x262>
 800096c:	e1bf      	b.n	8000cee <__aeabi_dadd+0x5e2>
 800096e:	464b      	mov	r3, r9
 8000970:	2100      	movs	r1, #0
 8000972:	08d8      	lsrs	r0, r3, #3
 8000974:	0777      	lsls	r7, r6, #29
 8000976:	4307      	orrs	r7, r0
 8000978:	08f0      	lsrs	r0, r6, #3
 800097a:	0306      	lsls	r6, r0, #12
 800097c:	054c      	lsls	r4, r1, #21
 800097e:	0b36      	lsrs	r6, r6, #12
 8000980:	0d64      	lsrs	r4, r4, #21
 8000982:	e00c      	b.n	800099e <__aeabi_dadd+0x292>
 8000984:	4f44      	ldr	r7, [pc, #272]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000986:	42bc      	cmp	r4, r7
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x280>
 800098a:	e08b      	b.n	8000aa4 <__aeabi_dadd+0x398>
 800098c:	2701      	movs	r7, #1
 800098e:	2938      	cmp	r1, #56	@ 0x38
 8000990:	dcb2      	bgt.n	80008f8 <__aeabi_dadd+0x1ec>
 8000992:	2780      	movs	r7, #128	@ 0x80
 8000994:	043f      	lsls	r7, r7, #16
 8000996:	433b      	orrs	r3, r7
 8000998:	e79c      	b.n	80008d4 <__aeabi_dadd+0x1c8>
 800099a:	2600      	movs	r6, #0
 800099c:	2700      	movs	r7, #0
 800099e:	0524      	lsls	r4, r4, #20
 80009a0:	4334      	orrs	r4, r6
 80009a2:	07ed      	lsls	r5, r5, #31
 80009a4:	432c      	orrs	r4, r5
 80009a6:	0038      	movs	r0, r7
 80009a8:	0021      	movs	r1, r4
 80009aa:	b002      	add	sp, #8
 80009ac:	bce0      	pop	{r5, r6, r7}
 80009ae:	46ba      	mov	sl, r7
 80009b0:	46b1      	mov	r9, r6
 80009b2:	46a8      	mov	r8, r5
 80009b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b6:	077b      	lsls	r3, r7, #29
 80009b8:	d004      	beq.n	80009c4 <__aeabi_dadd+0x2b8>
 80009ba:	230f      	movs	r3, #15
 80009bc:	403b      	ands	r3, r7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x2b8>
 80009c2:	e728      	b.n	8000816 <__aeabi_dadd+0x10a>
 80009c4:	08f8      	lsrs	r0, r7, #3
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <__aeabi_dadd+0x38c>)
 80009c8:	0777      	lsls	r7, r6, #29
 80009ca:	4307      	orrs	r7, r0
 80009cc:	08f0      	lsrs	r0, r6, #3
 80009ce:	429c      	cmp	r4, r3
 80009d0:	d000      	beq.n	80009d4 <__aeabi_dadd+0x2c8>
 80009d2:	e24a      	b.n	8000e6a <__aeabi_dadd+0x75e>
 80009d4:	003b      	movs	r3, r7
 80009d6:	4303      	orrs	r3, r0
 80009d8:	d059      	beq.n	8000a8e <__aeabi_dadd+0x382>
 80009da:	2680      	movs	r6, #128	@ 0x80
 80009dc:	0336      	lsls	r6, r6, #12
 80009de:	4306      	orrs	r6, r0
 80009e0:	0336      	lsls	r6, r6, #12
 80009e2:	4c2d      	ldr	r4, [pc, #180]	@ (8000a98 <__aeabi_dadd+0x38c>)
 80009e4:	0b36      	lsrs	r6, r6, #12
 80009e6:	e7da      	b.n	800099e <__aeabi_dadd+0x292>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d061      	beq.n	8000ab0 <__aeabi_dadd+0x3a4>
 80009ec:	4641      	mov	r1, r8
 80009ee:	1b09      	subs	r1, r1, r4
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x2ea>
 80009f4:	e0b9      	b.n	8000b6a <__aeabi_dadd+0x45e>
 80009f6:	4c28      	ldr	r4, [pc, #160]	@ (8000a98 <__aeabi_dadd+0x38c>)
 80009f8:	45a0      	cmp	r8, r4
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x2f2>
 80009fc:	e1a5      	b.n	8000d4a <__aeabi_dadd+0x63e>
 80009fe:	2701      	movs	r7, #1
 8000a00:	2938      	cmp	r1, #56	@ 0x38
 8000a02:	dc13      	bgt.n	8000a2c <__aeabi_dadd+0x320>
 8000a04:	2480      	movs	r4, #128	@ 0x80
 8000a06:	0424      	lsls	r4, r4, #16
 8000a08:	4326      	orrs	r6, r4
 8000a0a:	291f      	cmp	r1, #31
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_dadd+0x304>
 8000a0e:	e1c8      	b.n	8000da2 <__aeabi_dadd+0x696>
 8000a10:	2420      	movs	r4, #32
 8000a12:	0037      	movs	r7, r6
 8000a14:	4648      	mov	r0, r9
 8000a16:	1a64      	subs	r4, r4, r1
 8000a18:	40a7      	lsls	r7, r4
 8000a1a:	40c8      	lsrs	r0, r1
 8000a1c:	4307      	orrs	r7, r0
 8000a1e:	4648      	mov	r0, r9
 8000a20:	40a0      	lsls	r0, r4
 8000a22:	40ce      	lsrs	r6, r1
 8000a24:	1e44      	subs	r4, r0, #1
 8000a26:	41a0      	sbcs	r0, r4
 8000a28:	199b      	adds	r3, r3, r6
 8000a2a:	4307      	orrs	r7, r0
 8000a2c:	18bf      	adds	r7, r7, r2
 8000a2e:	4297      	cmp	r7, r2
 8000a30:	4192      	sbcs	r2, r2
 8000a32:	4252      	negs	r2, r2
 8000a34:	4644      	mov	r4, r8
 8000a36:	18d6      	adds	r6, r2, r3
 8000a38:	e763      	b.n	8000902 <__aeabi_dadd+0x1f6>
 8000a3a:	0038      	movs	r0, r7
 8000a3c:	f001 fe4e 	bl	80026dc <__clzsi2>
 8000a40:	0003      	movs	r3, r0
 8000a42:	3318      	adds	r3, #24
 8000a44:	2b1f      	cmp	r3, #31
 8000a46:	dc00      	bgt.n	8000a4a <__aeabi_dadd+0x33e>
 8000a48:	e6bf      	b.n	80007ca <__aeabi_dadd+0xbe>
 8000a4a:	003a      	movs	r2, r7
 8000a4c:	3808      	subs	r0, #8
 8000a4e:	4082      	lsls	r2, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	dd00      	ble.n	8000a56 <__aeabi_dadd+0x34a>
 8000a54:	e083      	b.n	8000b5e <__aeabi_dadd+0x452>
 8000a56:	1b1b      	subs	r3, r3, r4
 8000a58:	1c58      	adds	r0, r3, #1
 8000a5a:	281f      	cmp	r0, #31
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_dadd+0x354>
 8000a5e:	e1b4      	b.n	8000dca <__aeabi_dadd+0x6be>
 8000a60:	0017      	movs	r7, r2
 8000a62:	3b1f      	subs	r3, #31
 8000a64:	40df      	lsrs	r7, r3
 8000a66:	2820      	cmp	r0, #32
 8000a68:	d005      	beq.n	8000a76 <__aeabi_dadd+0x36a>
 8000a6a:	2340      	movs	r3, #64	@ 0x40
 8000a6c:	1a1b      	subs	r3, r3, r0
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	1e53      	subs	r3, r2, #1
 8000a72:	419a      	sbcs	r2, r3
 8000a74:	4317      	orrs	r7, r2
 8000a76:	2400      	movs	r4, #0
 8000a78:	2f00      	cmp	r7, #0
 8000a7a:	d00a      	beq.n	8000a92 <__aeabi_dadd+0x386>
 8000a7c:	077b      	lsls	r3, r7, #29
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dadd+0x376>
 8000a80:	e6c4      	b.n	800080c <__aeabi_dadd+0x100>
 8000a82:	0026      	movs	r6, r4
 8000a84:	e79e      	b.n	80009c4 <__aeabi_dadd+0x2b8>
 8000a86:	464b      	mov	r3, r9
 8000a88:	000c      	movs	r4, r1
 8000a8a:	08d8      	lsrs	r0, r3, #3
 8000a8c:	e79b      	b.n	80009c6 <__aeabi_dadd+0x2ba>
 8000a8e:	2700      	movs	r7, #0
 8000a90:	4c01      	ldr	r4, [pc, #4]	@ (8000a98 <__aeabi_dadd+0x38c>)
 8000a92:	2600      	movs	r6, #0
 8000a94:	e783      	b.n	800099e <__aeabi_dadd+0x292>
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	000007ff 	.word	0x000007ff
 8000a9c:	ff7fffff 	.word	0xff7fffff
 8000aa0:	000007fe 	.word	0x000007fe
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	0777      	lsls	r7, r6, #29
 8000aa8:	08d8      	lsrs	r0, r3, #3
 8000aaa:	4307      	orrs	r7, r0
 8000aac:	08f0      	lsrs	r0, r6, #3
 8000aae:	e791      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000ab0:	4fcd      	ldr	r7, [pc, #820]	@ (8000de8 <__aeabi_dadd+0x6dc>)
 8000ab2:	1c61      	adds	r1, r4, #1
 8000ab4:	4239      	tst	r1, r7
 8000ab6:	d16b      	bne.n	8000b90 <__aeabi_dadd+0x484>
 8000ab8:	0031      	movs	r1, r6
 8000aba:	4648      	mov	r0, r9
 8000abc:	4301      	orrs	r1, r0
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_dadd+0x3b8>
 8000ac2:	e14b      	b.n	8000d5c <__aeabi_dadd+0x650>
 8000ac4:	001f      	movs	r7, r3
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x3c2>
 8000acc:	e181      	b.n	8000dd2 <__aeabi_dadd+0x6c6>
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x3c8>
 8000ad2:	e74c      	b.n	800096e <__aeabi_dadd+0x262>
 8000ad4:	444a      	add	r2, r9
 8000ad6:	454a      	cmp	r2, r9
 8000ad8:	4180      	sbcs	r0, r0
 8000ada:	18f6      	adds	r6, r6, r3
 8000adc:	4240      	negs	r0, r0
 8000ade:	1836      	adds	r6, r6, r0
 8000ae0:	0233      	lsls	r3, r6, #8
 8000ae2:	d500      	bpl.n	8000ae6 <__aeabi_dadd+0x3da>
 8000ae4:	e1b0      	b.n	8000e48 <__aeabi_dadd+0x73c>
 8000ae6:	0017      	movs	r7, r2
 8000ae8:	4691      	mov	r9, r2
 8000aea:	4337      	orrs	r7, r6
 8000aec:	d000      	beq.n	8000af0 <__aeabi_dadd+0x3e4>
 8000aee:	e73e      	b.n	800096e <__aeabi_dadd+0x262>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e754      	b.n	800099e <__aeabi_dadd+0x292>
 8000af4:	4649      	mov	r1, r9
 8000af6:	1a89      	subs	r1, r1, r2
 8000af8:	4688      	mov	r8, r1
 8000afa:	45c1      	cmp	r9, r8
 8000afc:	41bf      	sbcs	r7, r7
 8000afe:	1af1      	subs	r1, r6, r3
 8000b00:	427f      	negs	r7, r7
 8000b02:	1bc9      	subs	r1, r1, r7
 8000b04:	020f      	lsls	r7, r1, #8
 8000b06:	d461      	bmi.n	8000bcc <__aeabi_dadd+0x4c0>
 8000b08:	4647      	mov	r7, r8
 8000b0a:	430f      	orrs	r7, r1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x404>
 8000b0e:	e0bd      	b.n	8000c8c <__aeabi_dadd+0x580>
 8000b10:	000e      	movs	r6, r1
 8000b12:	4647      	mov	r7, r8
 8000b14:	e651      	b.n	80007ba <__aeabi_dadd+0xae>
 8000b16:	4cb5      	ldr	r4, [pc, #724]	@ (8000dec <__aeabi_dadd+0x6e0>)
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x412>
 8000b1c:	e100      	b.n	8000d20 <__aeabi_dadd+0x614>
 8000b1e:	2701      	movs	r7, #1
 8000b20:	2938      	cmp	r1, #56	@ 0x38
 8000b22:	dd00      	ble.n	8000b26 <__aeabi_dadd+0x41a>
 8000b24:	e6b8      	b.n	8000898 <__aeabi_dadd+0x18c>
 8000b26:	2480      	movs	r4, #128	@ 0x80
 8000b28:	0424      	lsls	r4, r4, #16
 8000b2a:	4326      	orrs	r6, r4
 8000b2c:	e6a3      	b.n	8000876 <__aeabi_dadd+0x16a>
 8000b2e:	4eb0      	ldr	r6, [pc, #704]	@ (8000df0 <__aeabi_dadd+0x6e4>)
 8000b30:	1ae4      	subs	r4, r4, r3
 8000b32:	4016      	ands	r6, r2
 8000b34:	077b      	lsls	r3, r7, #29
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dadd+0x42e>
 8000b38:	e73f      	b.n	80009ba <__aeabi_dadd+0x2ae>
 8000b3a:	e743      	b.n	80009c4 <__aeabi_dadd+0x2b8>
 8000b3c:	000f      	movs	r7, r1
 8000b3e:	0018      	movs	r0, r3
 8000b40:	3f20      	subs	r7, #32
 8000b42:	40f8      	lsrs	r0, r7
 8000b44:	4684      	mov	ip, r0
 8000b46:	2920      	cmp	r1, #32
 8000b48:	d003      	beq.n	8000b52 <__aeabi_dadd+0x446>
 8000b4a:	2740      	movs	r7, #64	@ 0x40
 8000b4c:	1a79      	subs	r1, r7, r1
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	431a      	orrs	r2, r3
 8000b52:	1e53      	subs	r3, r2, #1
 8000b54:	419a      	sbcs	r2, r3
 8000b56:	4663      	mov	r3, ip
 8000b58:	0017      	movs	r7, r2
 8000b5a:	431f      	orrs	r7, r3
 8000b5c:	e622      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000b5e:	48a4      	ldr	r0, [pc, #656]	@ (8000df0 <__aeabi_dadd+0x6e4>)
 8000b60:	1ae1      	subs	r1, r4, r3
 8000b62:	4010      	ands	r0, r2
 8000b64:	0747      	lsls	r7, r0, #29
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e707      	b.n	800097a <__aeabi_dadd+0x26e>
 8000b6a:	0034      	movs	r4, r6
 8000b6c:	4648      	mov	r0, r9
 8000b6e:	4304      	orrs	r4, r0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x468>
 8000b72:	e0fa      	b.n	8000d6a <__aeabi_dadd+0x65e>
 8000b74:	1e4c      	subs	r4, r1, #1
 8000b76:	2901      	cmp	r1, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x470>
 8000b7a:	e0d7      	b.n	8000d2c <__aeabi_dadd+0x620>
 8000b7c:	4f9b      	ldr	r7, [pc, #620]	@ (8000dec <__aeabi_dadd+0x6e0>)
 8000b7e:	42b9      	cmp	r1, r7
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x478>
 8000b82:	e0e2      	b.n	8000d4a <__aeabi_dadd+0x63e>
 8000b84:	2701      	movs	r7, #1
 8000b86:	2c38      	cmp	r4, #56	@ 0x38
 8000b88:	dd00      	ble.n	8000b8c <__aeabi_dadd+0x480>
 8000b8a:	e74f      	b.n	8000a2c <__aeabi_dadd+0x320>
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	e73c      	b.n	8000a0a <__aeabi_dadd+0x2fe>
 8000b90:	4c96      	ldr	r4, [pc, #600]	@ (8000dec <__aeabi_dadd+0x6e0>)
 8000b92:	42a1      	cmp	r1, r4
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x48c>
 8000b96:	e0dd      	b.n	8000d54 <__aeabi_dadd+0x648>
 8000b98:	444a      	add	r2, r9
 8000b9a:	454a      	cmp	r2, r9
 8000b9c:	4180      	sbcs	r0, r0
 8000b9e:	18f3      	adds	r3, r6, r3
 8000ba0:	4240      	negs	r0, r0
 8000ba2:	1818      	adds	r0, r3, r0
 8000ba4:	07c7      	lsls	r7, r0, #31
 8000ba6:	0852      	lsrs	r2, r2, #1
 8000ba8:	4317      	orrs	r7, r2
 8000baa:	0846      	lsrs	r6, r0, #1
 8000bac:	0752      	lsls	r2, r2, #29
 8000bae:	d005      	beq.n	8000bbc <__aeabi_dadd+0x4b0>
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	000c      	movs	r4, r1
 8000bb4:	403a      	ands	r2, r7
 8000bb6:	2a04      	cmp	r2, #4
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_dadd+0x4b0>
 8000bba:	e62c      	b.n	8000816 <__aeabi_dadd+0x10a>
 8000bbc:	0776      	lsls	r6, r6, #29
 8000bbe:	08ff      	lsrs	r7, r7, #3
 8000bc0:	4337      	orrs	r7, r6
 8000bc2:	0900      	lsrs	r0, r0, #4
 8000bc4:	e6d9      	b.n	800097a <__aeabi_dadd+0x26e>
 8000bc6:	2700      	movs	r7, #0
 8000bc8:	2600      	movs	r6, #0
 8000bca:	e6e8      	b.n	800099e <__aeabi_dadd+0x292>
 8000bcc:	4649      	mov	r1, r9
 8000bce:	1a57      	subs	r7, r2, r1
 8000bd0:	42ba      	cmp	r2, r7
 8000bd2:	4192      	sbcs	r2, r2
 8000bd4:	1b9e      	subs	r6, r3, r6
 8000bd6:	4252      	negs	r2, r2
 8000bd8:	4665      	mov	r5, ip
 8000bda:	1ab6      	subs	r6, r6, r2
 8000bdc:	e5ed      	b.n	80007ba <__aeabi_dadd+0xae>
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_dadd+0x4d8>
 8000be2:	e0c6      	b.n	8000d72 <__aeabi_dadd+0x666>
 8000be4:	2f00      	cmp	r7, #0
 8000be6:	d167      	bne.n	8000cb8 <__aeabi_dadd+0x5ac>
 8000be8:	2680      	movs	r6, #128	@ 0x80
 8000bea:	2500      	movs	r5, #0
 8000bec:	4c7f      	ldr	r4, [pc, #508]	@ (8000dec <__aeabi_dadd+0x6e0>)
 8000bee:	0336      	lsls	r6, r6, #12
 8000bf0:	e6d5      	b.n	800099e <__aeabi_dadd+0x292>
 8000bf2:	4665      	mov	r5, ip
 8000bf4:	000c      	movs	r4, r1
 8000bf6:	001e      	movs	r6, r3
 8000bf8:	08d0      	lsrs	r0, r2, #3
 8000bfa:	e6e4      	b.n	80009c6 <__aeabi_dadd+0x2ba>
 8000bfc:	444a      	add	r2, r9
 8000bfe:	454a      	cmp	r2, r9
 8000c00:	4180      	sbcs	r0, r0
 8000c02:	18f3      	adds	r3, r6, r3
 8000c04:	4240      	negs	r0, r0
 8000c06:	1818      	adds	r0, r3, r0
 8000c08:	0011      	movs	r1, r2
 8000c0a:	0203      	lsls	r3, r0, #8
 8000c0c:	d400      	bmi.n	8000c10 <__aeabi_dadd+0x504>
 8000c0e:	e096      	b.n	8000d3e <__aeabi_dadd+0x632>
 8000c10:	4b77      	ldr	r3, [pc, #476]	@ (8000df0 <__aeabi_dadd+0x6e4>)
 8000c12:	0849      	lsrs	r1, r1, #1
 8000c14:	4018      	ands	r0, r3
 8000c16:	07c3      	lsls	r3, r0, #31
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	0844      	lsrs	r4, r0, #1
 8000c1c:	0749      	lsls	r1, r1, #29
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x516>
 8000c20:	e129      	b.n	8000e76 <__aeabi_dadd+0x76a>
 8000c22:	220f      	movs	r2, #15
 8000c24:	401a      	ands	r2, r3
 8000c26:	2a04      	cmp	r2, #4
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x520>
 8000c2a:	e0ea      	b.n	8000e02 <__aeabi_dadd+0x6f6>
 8000c2c:	1d1f      	adds	r7, r3, #4
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	41b6      	sbcs	r6, r6
 8000c32:	4276      	negs	r6, r6
 8000c34:	1936      	adds	r6, r6, r4
 8000c36:	2402      	movs	r4, #2
 8000c38:	e6c4      	b.n	80009c4 <__aeabi_dadd+0x2b8>
 8000c3a:	4649      	mov	r1, r9
 8000c3c:	1a8f      	subs	r7, r1, r2
 8000c3e:	45b9      	cmp	r9, r7
 8000c40:	4180      	sbcs	r0, r0
 8000c42:	1af6      	subs	r6, r6, r3
 8000c44:	4240      	negs	r0, r0
 8000c46:	1a36      	subs	r6, r6, r0
 8000c48:	0233      	lsls	r3, r6, #8
 8000c4a:	d406      	bmi.n	8000c5a <__aeabi_dadd+0x54e>
 8000c4c:	0773      	lsls	r3, r6, #29
 8000c4e:	08ff      	lsrs	r7, r7, #3
 8000c50:	2101      	movs	r1, #1
 8000c52:	431f      	orrs	r7, r3
 8000c54:	08f0      	lsrs	r0, r6, #3
 8000c56:	e690      	b.n	800097a <__aeabi_dadd+0x26e>
 8000c58:	4665      	mov	r5, ip
 8000c5a:	2401      	movs	r4, #1
 8000c5c:	e5ab      	b.n	80007b6 <__aeabi_dadd+0xaa>
 8000c5e:	464b      	mov	r3, r9
 8000c60:	0777      	lsls	r7, r6, #29
 8000c62:	08d8      	lsrs	r0, r3, #3
 8000c64:	4307      	orrs	r7, r0
 8000c66:	08f0      	lsrs	r0, r6, #3
 8000c68:	e6b4      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000c6a:	000f      	movs	r7, r1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	3f20      	subs	r7, #32
 8000c70:	40f8      	lsrs	r0, r7
 8000c72:	4684      	mov	ip, r0
 8000c74:	2920      	cmp	r1, #32
 8000c76:	d003      	beq.n	8000c80 <__aeabi_dadd+0x574>
 8000c78:	2740      	movs	r7, #64	@ 0x40
 8000c7a:	1a79      	subs	r1, r7, r1
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	1e53      	subs	r3, r2, #1
 8000c82:	419a      	sbcs	r2, r3
 8000c84:	4663      	mov	r3, ip
 8000c86:	0017      	movs	r7, r2
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e635      	b.n	80008f8 <__aeabi_dadd+0x1ec>
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	2400      	movs	r4, #0
 8000c90:	2600      	movs	r6, #0
 8000c92:	e684      	b.n	800099e <__aeabi_dadd+0x292>
 8000c94:	000c      	movs	r4, r1
 8000c96:	0035      	movs	r5, r6
 8000c98:	3c20      	subs	r4, #32
 8000c9a:	40e5      	lsrs	r5, r4
 8000c9c:	2920      	cmp	r1, #32
 8000c9e:	d005      	beq.n	8000cac <__aeabi_dadd+0x5a0>
 8000ca0:	2440      	movs	r4, #64	@ 0x40
 8000ca2:	1a61      	subs	r1, r4, r1
 8000ca4:	408e      	lsls	r6, r1
 8000ca6:	4649      	mov	r1, r9
 8000ca8:	4331      	orrs	r1, r6
 8000caa:	4689      	mov	r9, r1
 8000cac:	4648      	mov	r0, r9
 8000cae:	1e41      	subs	r1, r0, #1
 8000cb0:	4188      	sbcs	r0, r1
 8000cb2:	0007      	movs	r7, r0
 8000cb4:	432f      	orrs	r7, r5
 8000cb6:	e5ef      	b.n	8000898 <__aeabi_dadd+0x18c>
 8000cb8:	08d2      	lsrs	r2, r2, #3
 8000cba:	075f      	lsls	r7, r3, #29
 8000cbc:	4665      	mov	r5, ip
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	08d8      	lsrs	r0, r3, #3
 8000cc2:	e687      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000cc4:	1a17      	subs	r7, r2, r0
 8000cc6:	42ba      	cmp	r2, r7
 8000cc8:	4192      	sbcs	r2, r2
 8000cca:	1b9e      	subs	r6, r3, r6
 8000ccc:	4252      	negs	r2, r2
 8000cce:	1ab6      	subs	r6, r6, r2
 8000cd0:	0233      	lsls	r3, r6, #8
 8000cd2:	d4c1      	bmi.n	8000c58 <__aeabi_dadd+0x54c>
 8000cd4:	0773      	lsls	r3, r6, #29
 8000cd6:	08ff      	lsrs	r7, r7, #3
 8000cd8:	4665      	mov	r5, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	431f      	orrs	r7, r3
 8000cde:	08f0      	lsrs	r0, r6, #3
 8000ce0:	e64b      	b.n	800097a <__aeabi_dadd+0x26e>
 8000ce2:	2f00      	cmp	r7, #0
 8000ce4:	d07b      	beq.n	8000dde <__aeabi_dadd+0x6d2>
 8000ce6:	4665      	mov	r5, ip
 8000ce8:	001e      	movs	r6, r3
 8000cea:	4691      	mov	r9, r2
 8000cec:	e63f      	b.n	800096e <__aeabi_dadd+0x262>
 8000cee:	1a81      	subs	r1, r0, r2
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	45c1      	cmp	r9, r8
 8000cf4:	41a4      	sbcs	r4, r4
 8000cf6:	1af1      	subs	r1, r6, r3
 8000cf8:	4264      	negs	r4, r4
 8000cfa:	1b09      	subs	r1, r1, r4
 8000cfc:	2480      	movs	r4, #128	@ 0x80
 8000cfe:	0424      	lsls	r4, r4, #16
 8000d00:	4221      	tst	r1, r4
 8000d02:	d077      	beq.n	8000df4 <__aeabi_dadd+0x6e8>
 8000d04:	1a10      	subs	r0, r2, r0
 8000d06:	4282      	cmp	r2, r0
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	0007      	movs	r7, r0
 8000d0c:	1b9e      	subs	r6, r3, r6
 8000d0e:	4252      	negs	r2, r2
 8000d10:	1ab6      	subs	r6, r6, r2
 8000d12:	4337      	orrs	r7, r6
 8000d14:	d000      	beq.n	8000d18 <__aeabi_dadd+0x60c>
 8000d16:	e0a0      	b.n	8000e5a <__aeabi_dadd+0x74e>
 8000d18:	4665      	mov	r5, ip
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e63e      	b.n	800099e <__aeabi_dadd+0x292>
 8000d20:	075f      	lsls	r7, r3, #29
 8000d22:	08d2      	lsrs	r2, r2, #3
 8000d24:	4665      	mov	r5, ip
 8000d26:	4317      	orrs	r7, r2
 8000d28:	08d8      	lsrs	r0, r3, #3
 8000d2a:	e653      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000d2c:	1881      	adds	r1, r0, r2
 8000d2e:	4291      	cmp	r1, r2
 8000d30:	4192      	sbcs	r2, r2
 8000d32:	18f0      	adds	r0, r6, r3
 8000d34:	4252      	negs	r2, r2
 8000d36:	1880      	adds	r0, r0, r2
 8000d38:	0203      	lsls	r3, r0, #8
 8000d3a:	d500      	bpl.n	8000d3e <__aeabi_dadd+0x632>
 8000d3c:	e768      	b.n	8000c10 <__aeabi_dadd+0x504>
 8000d3e:	0747      	lsls	r7, r0, #29
 8000d40:	08c9      	lsrs	r1, r1, #3
 8000d42:	430f      	orrs	r7, r1
 8000d44:	08c0      	lsrs	r0, r0, #3
 8000d46:	2101      	movs	r1, #1
 8000d48:	e617      	b.n	800097a <__aeabi_dadd+0x26e>
 8000d4a:	08d2      	lsrs	r2, r2, #3
 8000d4c:	075f      	lsls	r7, r3, #29
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	08d8      	lsrs	r0, r3, #3
 8000d52:	e63f      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000d54:	000c      	movs	r4, r1
 8000d56:	2600      	movs	r6, #0
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e620      	b.n	800099e <__aeabi_dadd+0x292>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	d156      	bne.n	8000e0e <__aeabi_dadd+0x702>
 8000d60:	075f      	lsls	r7, r3, #29
 8000d62:	08d2      	lsrs	r2, r2, #3
 8000d64:	4317      	orrs	r7, r2
 8000d66:	08d8      	lsrs	r0, r3, #3
 8000d68:	e634      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	001e      	movs	r6, r3
 8000d6e:	08d0      	lsrs	r0, r2, #3
 8000d70:	e629      	b.n	80009c6 <__aeabi_dadd+0x2ba>
 8000d72:	08c1      	lsrs	r1, r0, #3
 8000d74:	0770      	lsls	r0, r6, #29
 8000d76:	4301      	orrs	r1, r0
 8000d78:	08f0      	lsrs	r0, r6, #3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d062      	beq.n	8000e44 <__aeabi_dadd+0x738>
 8000d7e:	2480      	movs	r4, #128	@ 0x80
 8000d80:	0324      	lsls	r4, r4, #12
 8000d82:	4220      	tst	r0, r4
 8000d84:	d007      	beq.n	8000d96 <__aeabi_dadd+0x68a>
 8000d86:	08de      	lsrs	r6, r3, #3
 8000d88:	4226      	tst	r6, r4
 8000d8a:	d104      	bne.n	8000d96 <__aeabi_dadd+0x68a>
 8000d8c:	4665      	mov	r5, ip
 8000d8e:	0030      	movs	r0, r6
 8000d90:	08d1      	lsrs	r1, r2, #3
 8000d92:	075b      	lsls	r3, r3, #29
 8000d94:	4319      	orrs	r1, r3
 8000d96:	0f4f      	lsrs	r7, r1, #29
 8000d98:	00c9      	lsls	r1, r1, #3
 8000d9a:	08c9      	lsrs	r1, r1, #3
 8000d9c:	077f      	lsls	r7, r7, #29
 8000d9e:	430f      	orrs	r7, r1
 8000da0:	e618      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000da2:	000c      	movs	r4, r1
 8000da4:	0030      	movs	r0, r6
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e0      	lsrs	r0, r4
 8000daa:	4684      	mov	ip, r0
 8000dac:	2920      	cmp	r1, #32
 8000dae:	d005      	beq.n	8000dbc <__aeabi_dadd+0x6b0>
 8000db0:	2440      	movs	r4, #64	@ 0x40
 8000db2:	1a61      	subs	r1, r4, r1
 8000db4:	408e      	lsls	r6, r1
 8000db6:	4649      	mov	r1, r9
 8000db8:	4331      	orrs	r1, r6
 8000dba:	4689      	mov	r9, r1
 8000dbc:	4648      	mov	r0, r9
 8000dbe:	1e41      	subs	r1, r0, #1
 8000dc0:	4188      	sbcs	r0, r1
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	0007      	movs	r7, r0
 8000dc6:	430f      	orrs	r7, r1
 8000dc8:	e630      	b.n	8000a2c <__aeabi_dadd+0x320>
 8000dca:	2120      	movs	r1, #32
 8000dcc:	2700      	movs	r7, #0
 8000dce:	1a09      	subs	r1, r1, r0
 8000dd0:	e50e      	b.n	80007f0 <__aeabi_dadd+0xe4>
 8000dd2:	001e      	movs	r6, r3
 8000dd4:	2f00      	cmp	r7, #0
 8000dd6:	d000      	beq.n	8000dda <__aeabi_dadd+0x6ce>
 8000dd8:	e522      	b.n	8000820 <__aeabi_dadd+0x114>
 8000dda:	2400      	movs	r4, #0
 8000ddc:	e758      	b.n	8000c90 <__aeabi_dadd+0x584>
 8000dde:	2500      	movs	r5, #0
 8000de0:	2400      	movs	r4, #0
 8000de2:	2600      	movs	r6, #0
 8000de4:	e5db      	b.n	800099e <__aeabi_dadd+0x292>
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	000007fe 	.word	0x000007fe
 8000dec:	000007ff 	.word	0x000007ff
 8000df0:	ff7fffff 	.word	0xff7fffff
 8000df4:	4647      	mov	r7, r8
 8000df6:	430f      	orrs	r7, r1
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dadd+0x6f0>
 8000dfa:	e747      	b.n	8000c8c <__aeabi_dadd+0x580>
 8000dfc:	000e      	movs	r6, r1
 8000dfe:	46c1      	mov	r9, r8
 8000e00:	e5b5      	b.n	800096e <__aeabi_dadd+0x262>
 8000e02:	08df      	lsrs	r7, r3, #3
 8000e04:	0764      	lsls	r4, r4, #29
 8000e06:	2102      	movs	r1, #2
 8000e08:	4327      	orrs	r7, r4
 8000e0a:	0900      	lsrs	r0, r0, #4
 8000e0c:	e5b5      	b.n	800097a <__aeabi_dadd+0x26e>
 8000e0e:	0019      	movs	r1, r3
 8000e10:	08c0      	lsrs	r0, r0, #3
 8000e12:	0777      	lsls	r7, r6, #29
 8000e14:	4307      	orrs	r7, r0
 8000e16:	4311      	orrs	r1, r2
 8000e18:	08f0      	lsrs	r0, r6, #3
 8000e1a:	2900      	cmp	r1, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x714>
 8000e1e:	e5d9      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	0309      	lsls	r1, r1, #12
 8000e24:	4208      	tst	r0, r1
 8000e26:	d007      	beq.n	8000e38 <__aeabi_dadd+0x72c>
 8000e28:	08dc      	lsrs	r4, r3, #3
 8000e2a:	420c      	tst	r4, r1
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_dadd+0x72c>
 8000e2e:	08d2      	lsrs	r2, r2, #3
 8000e30:	075b      	lsls	r3, r3, #29
 8000e32:	431a      	orrs	r2, r3
 8000e34:	0017      	movs	r7, r2
 8000e36:	0020      	movs	r0, r4
 8000e38:	0f7b      	lsrs	r3, r7, #29
 8000e3a:	00ff      	lsls	r7, r7, #3
 8000e3c:	08ff      	lsrs	r7, r7, #3
 8000e3e:	075b      	lsls	r3, r3, #29
 8000e40:	431f      	orrs	r7, r3
 8000e42:	e5c7      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000e44:	000f      	movs	r7, r1
 8000e46:	e5c5      	b.n	80009d4 <__aeabi_dadd+0x2c8>
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <__aeabi_dadd+0x788>)
 8000e4a:	08d2      	lsrs	r2, r2, #3
 8000e4c:	4033      	ands	r3, r6
 8000e4e:	075f      	lsls	r7, r3, #29
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	2401      	movs	r4, #1
 8000e54:	4317      	orrs	r7, r2
 8000e56:	0b1e      	lsrs	r6, r3, #12
 8000e58:	e5a1      	b.n	800099e <__aeabi_dadd+0x292>
 8000e5a:	4226      	tst	r6, r4
 8000e5c:	d012      	beq.n	8000e84 <__aeabi_dadd+0x778>
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <__aeabi_dadd+0x788>)
 8000e60:	4665      	mov	r5, ip
 8000e62:	0002      	movs	r2, r0
 8000e64:	2401      	movs	r4, #1
 8000e66:	401e      	ands	r6, r3
 8000e68:	e4e6      	b.n	8000838 <__aeabi_dadd+0x12c>
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	e585      	b.n	800097a <__aeabi_dadd+0x26e>
 8000e6e:	0017      	movs	r7, r2
 8000e70:	e5a8      	b.n	80009c4 <__aeabi_dadd+0x2b8>
 8000e72:	003a      	movs	r2, r7
 8000e74:	e4d4      	b.n	8000820 <__aeabi_dadd+0x114>
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0764      	lsls	r4, r4, #29
 8000e7a:	431c      	orrs	r4, r3
 8000e7c:	0027      	movs	r7, r4
 8000e7e:	2102      	movs	r1, #2
 8000e80:	0900      	lsrs	r0, r0, #4
 8000e82:	e57a      	b.n	800097a <__aeabi_dadd+0x26e>
 8000e84:	08c0      	lsrs	r0, r0, #3
 8000e86:	0777      	lsls	r7, r6, #29
 8000e88:	4307      	orrs	r7, r0
 8000e8a:	4665      	mov	r5, ip
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	08f0      	lsrs	r0, r6, #3
 8000e90:	e573      	b.n	800097a <__aeabi_dadd+0x26e>
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	ff7fffff 	.word	0xff7fffff

08000e98 <__aeabi_ddiv>:
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	46de      	mov	lr, fp
 8000e9c:	4645      	mov	r5, r8
 8000e9e:	4657      	mov	r7, sl
 8000ea0:	464e      	mov	r6, r9
 8000ea2:	b5e0      	push	{r5, r6, r7, lr}
 8000ea4:	b087      	sub	sp, #28
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	030b      	lsls	r3, r1, #12
 8000eac:	0b1b      	lsrs	r3, r3, #12
 8000eae:	469b      	mov	fp, r3
 8000eb0:	0fca      	lsrs	r2, r1, #31
 8000eb2:	004b      	lsls	r3, r1, #1
 8000eb4:	0004      	movs	r4, r0
 8000eb6:	4680      	mov	r8, r0
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	9202      	str	r2, [sp, #8]
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x28>
 8000ebe:	e098      	b.n	8000ff2 <__aeabi_ddiv+0x15a>
 8000ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80010b4 <__aeabi_ddiv+0x21c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d037      	beq.n	8000f36 <__aeabi_ddiv+0x9e>
 8000ec6:	4659      	mov	r1, fp
 8000ec8:	0f42      	lsrs	r2, r0, #29
 8000eca:	00c9      	lsls	r1, r1, #3
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0409      	lsls	r1, r1, #16
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	00c2      	lsls	r2, r0, #3
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	4a77      	ldr	r2, [pc, #476]	@ (80010b8 <__aeabi_ddiv+0x220>)
 8000eda:	4689      	mov	r9, r1
 8000edc:	4692      	mov	sl, r2
 8000ede:	449a      	add	sl, r3
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2400      	movs	r4, #0
 8000ee4:	9303      	str	r3, [sp, #12]
 8000ee6:	9e00      	ldr	r6, [sp, #0]
 8000ee8:	9f01      	ldr	r7, [sp, #4]
 8000eea:	033b      	lsls	r3, r7, #12
 8000eec:	0b1b      	lsrs	r3, r3, #12
 8000eee:	469b      	mov	fp, r3
 8000ef0:	007b      	lsls	r3, r7, #1
 8000ef2:	0030      	movs	r0, r6
 8000ef4:	0d5b      	lsrs	r3, r3, #21
 8000ef6:	0ffd      	lsrs	r5, r7, #31
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d059      	beq.n	8000fb0 <__aeabi_ddiv+0x118>
 8000efc:	4a6d      	ldr	r2, [pc, #436]	@ (80010b4 <__aeabi_ddiv+0x21c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d048      	beq.n	8000f94 <__aeabi_ddiv+0xfc>
 8000f02:	4659      	mov	r1, fp
 8000f04:	0f72      	lsrs	r2, r6, #29
 8000f06:	00c9      	lsls	r1, r1, #3
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	2180      	movs	r1, #128	@ 0x80
 8000f0c:	0409      	lsls	r1, r1, #16
 8000f0e:	4311      	orrs	r1, r2
 8000f10:	468b      	mov	fp, r1
 8000f12:	4969      	ldr	r1, [pc, #420]	@ (80010b8 <__aeabi_ddiv+0x220>)
 8000f14:	00f2      	lsls	r2, r6, #3
 8000f16:	468c      	mov	ip, r1
 8000f18:	4651      	mov	r1, sl
 8000f1a:	4463      	add	r3, ip
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	469a      	mov	sl, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	9e02      	ldr	r6, [sp, #8]
 8000f24:	406e      	eors	r6, r5
 8000f26:	b2f6      	uxtb	r6, r6
 8000f28:	2c0f      	cmp	r4, #15
 8000f2a:	d900      	bls.n	8000f2e <__aeabi_ddiv+0x96>
 8000f2c:	e0ce      	b.n	80010cc <__aeabi_ddiv+0x234>
 8000f2e:	4b63      	ldr	r3, [pc, #396]	@ (80010bc <__aeabi_ddiv+0x224>)
 8000f30:	00a4      	lsls	r4, r4, #2
 8000f32:	591b      	ldr	r3, [r3, r4]
 8000f34:	469f      	mov	pc, r3
 8000f36:	465a      	mov	r2, fp
 8000f38:	4302      	orrs	r2, r0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_ddiv+0xa8>
 8000f3e:	e090      	b.n	8001062 <__aeabi_ddiv+0x1ca>
 8000f40:	469a      	mov	sl, r3
 8000f42:	2302      	movs	r3, #2
 8000f44:	4690      	mov	r8, r2
 8000f46:	2408      	movs	r4, #8
 8000f48:	9303      	str	r3, [sp, #12]
 8000f4a:	e7cc      	b.n	8000ee6 <__aeabi_ddiv+0x4e>
 8000f4c:	46cb      	mov	fp, r9
 8000f4e:	4642      	mov	r2, r8
 8000f50:	9d02      	ldr	r5, [sp, #8]
 8000f52:	9903      	ldr	r1, [sp, #12]
 8000f54:	2902      	cmp	r1, #2
 8000f56:	d100      	bne.n	8000f5a <__aeabi_ddiv+0xc2>
 8000f58:	e1de      	b.n	8001318 <__aeabi_ddiv+0x480>
 8000f5a:	2903      	cmp	r1, #3
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0xc8>
 8000f5e:	e08d      	b.n	800107c <__aeabi_ddiv+0x1e4>
 8000f60:	2901      	cmp	r1, #1
 8000f62:	d000      	beq.n	8000f66 <__aeabi_ddiv+0xce>
 8000f64:	e179      	b.n	800125a <__aeabi_ddiv+0x3c2>
 8000f66:	002e      	movs	r6, r5
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	4690      	mov	r8, r2
 8000f70:	051b      	lsls	r3, r3, #20
 8000f72:	4323      	orrs	r3, r4
 8000f74:	07f6      	lsls	r6, r6, #31
 8000f76:	4333      	orrs	r3, r6
 8000f78:	4640      	mov	r0, r8
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	b007      	add	sp, #28
 8000f7e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f80:	46bb      	mov	fp, r7
 8000f82:	46b2      	mov	sl, r6
 8000f84:	46a9      	mov	r9, r5
 8000f86:	46a0      	mov	r8, r4
 8000f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	4690      	mov	r8, r2
 8000f90:	4b48      	ldr	r3, [pc, #288]	@ (80010b4 <__aeabi_ddiv+0x21c>)
 8000f92:	e7ed      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 8000f94:	465a      	mov	r2, fp
 8000f96:	9b00      	ldr	r3, [sp, #0]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	4b49      	ldr	r3, [pc, #292]	@ (80010c0 <__aeabi_ddiv+0x228>)
 8000f9c:	469c      	mov	ip, r3
 8000f9e:	44e2      	add	sl, ip
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d159      	bne.n	8001058 <__aeabi_ddiv+0x1c0>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	431c      	orrs	r4, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	469b      	mov	fp, r3
 8000fae:	e7b8      	b.n	8000f22 <__aeabi_ddiv+0x8a>
 8000fb0:	465a      	mov	r2, fp
 8000fb2:	9b00      	ldr	r3, [sp, #0]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	d049      	beq.n	800104c <__aeabi_ddiv+0x1b4>
 8000fb8:	465b      	mov	r3, fp
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_ddiv+0x128>
 8000fbe:	e19c      	b.n	80012fa <__aeabi_ddiv+0x462>
 8000fc0:	4658      	mov	r0, fp
 8000fc2:	f001 fb8b 	bl	80026dc <__clzsi2>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	0003      	movs	r3, r0
 8000fca:	3a0b      	subs	r2, #11
 8000fcc:	271d      	movs	r7, #29
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	1aba      	subs	r2, r7, r2
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	4658      	mov	r0, fp
 8000fd6:	40d6      	lsrs	r6, r2
 8000fd8:	3908      	subs	r1, #8
 8000fda:	4088      	lsls	r0, r1
 8000fdc:	0032      	movs	r2, r6
 8000fde:	4302      	orrs	r2, r0
 8000fe0:	4693      	mov	fp, r2
 8000fe2:	9a00      	ldr	r2, [sp, #0]
 8000fe4:	408a      	lsls	r2, r1
 8000fe6:	4937      	ldr	r1, [pc, #220]	@ (80010c4 <__aeabi_ddiv+0x22c>)
 8000fe8:	4453      	add	r3, sl
 8000fea:	468a      	mov	sl, r1
 8000fec:	2100      	movs	r1, #0
 8000fee:	449a      	add	sl, r3
 8000ff0:	e797      	b.n	8000f22 <__aeabi_ddiv+0x8a>
 8000ff2:	465b      	mov	r3, fp
 8000ff4:	4303      	orrs	r3, r0
 8000ff6:	4699      	mov	r9, r3
 8000ff8:	d021      	beq.n	800103e <__aeabi_ddiv+0x1a6>
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_ddiv+0x16a>
 8001000:	e169      	b.n	80012d6 <__aeabi_ddiv+0x43e>
 8001002:	4658      	mov	r0, fp
 8001004:	f001 fb6a 	bl	80026dc <__clzsi2>
 8001008:	230b      	movs	r3, #11
 800100a:	425b      	negs	r3, r3
 800100c:	469c      	mov	ip, r3
 800100e:	0002      	movs	r2, r0
 8001010:	4484      	add	ip, r0
 8001012:	4666      	mov	r6, ip
 8001014:	231d      	movs	r3, #29
 8001016:	1b9b      	subs	r3, r3, r6
 8001018:	0026      	movs	r6, r4
 800101a:	0011      	movs	r1, r2
 800101c:	4658      	mov	r0, fp
 800101e:	40de      	lsrs	r6, r3
 8001020:	3908      	subs	r1, #8
 8001022:	4088      	lsls	r0, r1
 8001024:	0033      	movs	r3, r6
 8001026:	4303      	orrs	r3, r0
 8001028:	4699      	mov	r9, r3
 800102a:	0023      	movs	r3, r4
 800102c:	408b      	lsls	r3, r1
 800102e:	4698      	mov	r8, r3
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <__aeabi_ddiv+0x230>)
 8001032:	2400      	movs	r4, #0
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	469a      	mov	sl, r3
 8001038:	2300      	movs	r3, #0
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	e753      	b.n	8000ee6 <__aeabi_ddiv+0x4e>
 800103e:	2300      	movs	r3, #0
 8001040:	4698      	mov	r8, r3
 8001042:	469a      	mov	sl, r3
 8001044:	3301      	adds	r3, #1
 8001046:	2404      	movs	r4, #4
 8001048:	9303      	str	r3, [sp, #12]
 800104a:	e74c      	b.n	8000ee6 <__aeabi_ddiv+0x4e>
 800104c:	2301      	movs	r3, #1
 800104e:	431c      	orrs	r4, r3
 8001050:	2300      	movs	r3, #0
 8001052:	2101      	movs	r1, #1
 8001054:	469b      	mov	fp, r3
 8001056:	e764      	b.n	8000f22 <__aeabi_ddiv+0x8a>
 8001058:	2303      	movs	r3, #3
 800105a:	0032      	movs	r2, r6
 800105c:	2103      	movs	r1, #3
 800105e:	431c      	orrs	r4, r3
 8001060:	e75f      	b.n	8000f22 <__aeabi_ddiv+0x8a>
 8001062:	469a      	mov	sl, r3
 8001064:	2303      	movs	r3, #3
 8001066:	46d9      	mov	r9, fp
 8001068:	240c      	movs	r4, #12
 800106a:	9303      	str	r3, [sp, #12]
 800106c:	e73b      	b.n	8000ee6 <__aeabi_ddiv+0x4e>
 800106e:	2300      	movs	r3, #0
 8001070:	2480      	movs	r4, #128	@ 0x80
 8001072:	4698      	mov	r8, r3
 8001074:	2600      	movs	r6, #0
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <__aeabi_ddiv+0x21c>)
 8001078:	0324      	lsls	r4, r4, #12
 800107a:	e779      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 800107c:	2480      	movs	r4, #128	@ 0x80
 800107e:	465b      	mov	r3, fp
 8001080:	0324      	lsls	r4, r4, #12
 8001082:	431c      	orrs	r4, r3
 8001084:	0324      	lsls	r4, r4, #12
 8001086:	002e      	movs	r6, r5
 8001088:	4690      	mov	r8, r2
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <__aeabi_ddiv+0x21c>)
 800108c:	0b24      	lsrs	r4, r4, #12
 800108e:	e76f      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 8001090:	2480      	movs	r4, #128	@ 0x80
 8001092:	464b      	mov	r3, r9
 8001094:	0324      	lsls	r4, r4, #12
 8001096:	4223      	tst	r3, r4
 8001098:	d002      	beq.n	80010a0 <__aeabi_ddiv+0x208>
 800109a:	465b      	mov	r3, fp
 800109c:	4223      	tst	r3, r4
 800109e:	d0f0      	beq.n	8001082 <__aeabi_ddiv+0x1ea>
 80010a0:	2480      	movs	r4, #128	@ 0x80
 80010a2:	464b      	mov	r3, r9
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	431c      	orrs	r4, r3
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	9e02      	ldr	r6, [sp, #8]
 80010ac:	4b01      	ldr	r3, [pc, #4]	@ (80010b4 <__aeabi_ddiv+0x21c>)
 80010ae:	0b24      	lsrs	r4, r4, #12
 80010b0:	e75e      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	000007ff 	.word	0x000007ff
 80010b8:	fffffc01 	.word	0xfffffc01
 80010bc:	08007ffc 	.word	0x08007ffc
 80010c0:	fffff801 	.word	0xfffff801
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	45cb      	cmp	fp, r9
 80010ce:	d200      	bcs.n	80010d2 <__aeabi_ddiv+0x23a>
 80010d0:	e0f8      	b.n	80012c4 <__aeabi_ddiv+0x42c>
 80010d2:	d100      	bne.n	80010d6 <__aeabi_ddiv+0x23e>
 80010d4:	e0f3      	b.n	80012be <__aeabi_ddiv+0x426>
 80010d6:	2301      	movs	r3, #1
 80010d8:	425b      	negs	r3, r3
 80010da:	469c      	mov	ip, r3
 80010dc:	4644      	mov	r4, r8
 80010de:	4648      	mov	r0, r9
 80010e0:	2500      	movs	r5, #0
 80010e2:	44e2      	add	sl, ip
 80010e4:	465b      	mov	r3, fp
 80010e6:	0e17      	lsrs	r7, r2, #24
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	431f      	orrs	r7, r3
 80010ec:	0c19      	lsrs	r1, r3, #16
 80010ee:	043b      	lsls	r3, r7, #16
 80010f0:	0212      	lsls	r2, r2, #8
 80010f2:	9700      	str	r7, [sp, #0]
 80010f4:	0c1f      	lsrs	r7, r3, #16
 80010f6:	4691      	mov	r9, r2
 80010f8:	9102      	str	r1, [sp, #8]
 80010fa:	9703      	str	r7, [sp, #12]
 80010fc:	f7ff f8a6 	bl	800024c <__aeabi_uidivmod>
 8001100:	0002      	movs	r2, r0
 8001102:	437a      	muls	r2, r7
 8001104:	040b      	lsls	r3, r1, #16
 8001106:	0c21      	lsrs	r1, r4, #16
 8001108:	4680      	mov	r8, r0
 800110a:	4319      	orrs	r1, r3
 800110c:	428a      	cmp	r2, r1
 800110e:	d909      	bls.n	8001124 <__aeabi_ddiv+0x28c>
 8001110:	9f00      	ldr	r7, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	46bc      	mov	ip, r7
 8001116:	425b      	negs	r3, r3
 8001118:	4461      	add	r1, ip
 800111a:	469c      	mov	ip, r3
 800111c:	44e0      	add	r8, ip
 800111e:	428f      	cmp	r7, r1
 8001120:	d800      	bhi.n	8001124 <__aeabi_ddiv+0x28c>
 8001122:	e15c      	b.n	80013de <__aeabi_ddiv+0x546>
 8001124:	1a88      	subs	r0, r1, r2
 8001126:	9902      	ldr	r1, [sp, #8]
 8001128:	f7ff f890 	bl	800024c <__aeabi_uidivmod>
 800112c:	9a03      	ldr	r2, [sp, #12]
 800112e:	0424      	lsls	r4, r4, #16
 8001130:	4342      	muls	r2, r0
 8001132:	0409      	lsls	r1, r1, #16
 8001134:	0c24      	lsrs	r4, r4, #16
 8001136:	0003      	movs	r3, r0
 8001138:	430c      	orrs	r4, r1
 800113a:	42a2      	cmp	r2, r4
 800113c:	d906      	bls.n	800114c <__aeabi_ddiv+0x2b4>
 800113e:	9900      	ldr	r1, [sp, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	468c      	mov	ip, r1
 8001144:	4464      	add	r4, ip
 8001146:	42a1      	cmp	r1, r4
 8001148:	d800      	bhi.n	800114c <__aeabi_ddiv+0x2b4>
 800114a:	e142      	b.n	80013d2 <__aeabi_ddiv+0x53a>
 800114c:	1aa0      	subs	r0, r4, r2
 800114e:	4642      	mov	r2, r8
 8001150:	0412      	lsls	r2, r2, #16
 8001152:	431a      	orrs	r2, r3
 8001154:	4693      	mov	fp, r2
 8001156:	464b      	mov	r3, r9
 8001158:	4659      	mov	r1, fp
 800115a:	0c1b      	lsrs	r3, r3, #16
 800115c:	001f      	movs	r7, r3
 800115e:	9304      	str	r3, [sp, #16]
 8001160:	040b      	lsls	r3, r1, #16
 8001162:	4649      	mov	r1, r9
 8001164:	0409      	lsls	r1, r1, #16
 8001166:	0c09      	lsrs	r1, r1, #16
 8001168:	000c      	movs	r4, r1
 800116a:	0c1b      	lsrs	r3, r3, #16
 800116c:	435c      	muls	r4, r3
 800116e:	0c12      	lsrs	r2, r2, #16
 8001170:	437b      	muls	r3, r7
 8001172:	4688      	mov	r8, r1
 8001174:	4351      	muls	r1, r2
 8001176:	437a      	muls	r2, r7
 8001178:	0c27      	lsrs	r7, r4, #16
 800117a:	46bc      	mov	ip, r7
 800117c:	185b      	adds	r3, r3, r1
 800117e:	4463      	add	r3, ip
 8001180:	4299      	cmp	r1, r3
 8001182:	d903      	bls.n	800118c <__aeabi_ddiv+0x2f4>
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	0249      	lsls	r1, r1, #9
 8001188:	468c      	mov	ip, r1
 800118a:	4462      	add	r2, ip
 800118c:	0c19      	lsrs	r1, r3, #16
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	0c24      	lsrs	r4, r4, #16
 8001194:	188a      	adds	r2, r1, r2
 8001196:	191c      	adds	r4, r3, r4
 8001198:	4290      	cmp	r0, r2
 800119a:	d302      	bcc.n	80011a2 <__aeabi_ddiv+0x30a>
 800119c:	d116      	bne.n	80011cc <__aeabi_ddiv+0x334>
 800119e:	42a5      	cmp	r5, r4
 80011a0:	d214      	bcs.n	80011cc <__aeabi_ddiv+0x334>
 80011a2:	465b      	mov	r3, fp
 80011a4:	9f00      	ldr	r7, [sp, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	444d      	add	r5, r9
 80011aa:	9305      	str	r3, [sp, #20]
 80011ac:	454d      	cmp	r5, r9
 80011ae:	419b      	sbcs	r3, r3
 80011b0:	46bc      	mov	ip, r7
 80011b2:	425b      	negs	r3, r3
 80011b4:	4463      	add	r3, ip
 80011b6:	18c0      	adds	r0, r0, r3
 80011b8:	4287      	cmp	r7, r0
 80011ba:	d300      	bcc.n	80011be <__aeabi_ddiv+0x326>
 80011bc:	e102      	b.n	80013c4 <__aeabi_ddiv+0x52c>
 80011be:	4282      	cmp	r2, r0
 80011c0:	d900      	bls.n	80011c4 <__aeabi_ddiv+0x32c>
 80011c2:	e129      	b.n	8001418 <__aeabi_ddiv+0x580>
 80011c4:	d100      	bne.n	80011c8 <__aeabi_ddiv+0x330>
 80011c6:	e124      	b.n	8001412 <__aeabi_ddiv+0x57a>
 80011c8:	9b05      	ldr	r3, [sp, #20]
 80011ca:	469b      	mov	fp, r3
 80011cc:	1b2c      	subs	r4, r5, r4
 80011ce:	42a5      	cmp	r5, r4
 80011d0:	41ad      	sbcs	r5, r5
 80011d2:	9b00      	ldr	r3, [sp, #0]
 80011d4:	1a80      	subs	r0, r0, r2
 80011d6:	426d      	negs	r5, r5
 80011d8:	1b40      	subs	r0, r0, r5
 80011da:	4283      	cmp	r3, r0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x348>
 80011de:	e10f      	b.n	8001400 <__aeabi_ddiv+0x568>
 80011e0:	9902      	ldr	r1, [sp, #8]
 80011e2:	f7ff f833 	bl	800024c <__aeabi_uidivmod>
 80011e6:	9a03      	ldr	r2, [sp, #12]
 80011e8:	040b      	lsls	r3, r1, #16
 80011ea:	4342      	muls	r2, r0
 80011ec:	0c21      	lsrs	r1, r4, #16
 80011ee:	0005      	movs	r5, r0
 80011f0:	4319      	orrs	r1, r3
 80011f2:	428a      	cmp	r2, r1
 80011f4:	d900      	bls.n	80011f8 <__aeabi_ddiv+0x360>
 80011f6:	e0cb      	b.n	8001390 <__aeabi_ddiv+0x4f8>
 80011f8:	1a88      	subs	r0, r1, r2
 80011fa:	9902      	ldr	r1, [sp, #8]
 80011fc:	f7ff f826 	bl	800024c <__aeabi_uidivmod>
 8001200:	9a03      	ldr	r2, [sp, #12]
 8001202:	0424      	lsls	r4, r4, #16
 8001204:	4342      	muls	r2, r0
 8001206:	0409      	lsls	r1, r1, #16
 8001208:	0c24      	lsrs	r4, r4, #16
 800120a:	0003      	movs	r3, r0
 800120c:	430c      	orrs	r4, r1
 800120e:	42a2      	cmp	r2, r4
 8001210:	d900      	bls.n	8001214 <__aeabi_ddiv+0x37c>
 8001212:	e0ca      	b.n	80013aa <__aeabi_ddiv+0x512>
 8001214:	4641      	mov	r1, r8
 8001216:	1aa4      	subs	r4, r4, r2
 8001218:	042a      	lsls	r2, r5, #16
 800121a:	431a      	orrs	r2, r3
 800121c:	9f04      	ldr	r7, [sp, #16]
 800121e:	0413      	lsls	r3, r2, #16
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	4359      	muls	r1, r3
 8001224:	4640      	mov	r0, r8
 8001226:	437b      	muls	r3, r7
 8001228:	469c      	mov	ip, r3
 800122a:	0c15      	lsrs	r5, r2, #16
 800122c:	4368      	muls	r0, r5
 800122e:	0c0b      	lsrs	r3, r1, #16
 8001230:	4484      	add	ip, r0
 8001232:	4463      	add	r3, ip
 8001234:	437d      	muls	r5, r7
 8001236:	4298      	cmp	r0, r3
 8001238:	d903      	bls.n	8001242 <__aeabi_ddiv+0x3aa>
 800123a:	2080      	movs	r0, #128	@ 0x80
 800123c:	0240      	lsls	r0, r0, #9
 800123e:	4684      	mov	ip, r0
 8001240:	4465      	add	r5, ip
 8001242:	0c18      	lsrs	r0, r3, #16
 8001244:	0409      	lsls	r1, r1, #16
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	0c09      	lsrs	r1, r1, #16
 800124a:	1940      	adds	r0, r0, r5
 800124c:	185b      	adds	r3, r3, r1
 800124e:	4284      	cmp	r4, r0
 8001250:	d327      	bcc.n	80012a2 <__aeabi_ddiv+0x40a>
 8001252:	d023      	beq.n	800129c <__aeabi_ddiv+0x404>
 8001254:	2301      	movs	r3, #1
 8001256:	0035      	movs	r5, r6
 8001258:	431a      	orrs	r2, r3
 800125a:	4b94      	ldr	r3, [pc, #592]	@ (80014ac <__aeabi_ddiv+0x614>)
 800125c:	4453      	add	r3, sl
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd60      	ble.n	8001324 <__aeabi_ddiv+0x48c>
 8001262:	0751      	lsls	r1, r2, #29
 8001264:	d000      	beq.n	8001268 <__aeabi_ddiv+0x3d0>
 8001266:	e086      	b.n	8001376 <__aeabi_ddiv+0x4de>
 8001268:	002e      	movs	r6, r5
 800126a:	08d1      	lsrs	r1, r2, #3
 800126c:	465a      	mov	r2, fp
 800126e:	01d2      	lsls	r2, r2, #7
 8001270:	d506      	bpl.n	8001280 <__aeabi_ddiv+0x3e8>
 8001272:	465a      	mov	r2, fp
 8001274:	4b8e      	ldr	r3, [pc, #568]	@ (80014b0 <__aeabi_ddiv+0x618>)
 8001276:	401a      	ands	r2, r3
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	4693      	mov	fp, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4453      	add	r3, sl
 8001280:	4a8c      	ldr	r2, [pc, #560]	@ (80014b4 <__aeabi_ddiv+0x61c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	dd00      	ble.n	8001288 <__aeabi_ddiv+0x3f0>
 8001286:	e680      	b.n	8000f8a <__aeabi_ddiv+0xf2>
 8001288:	465a      	mov	r2, fp
 800128a:	0752      	lsls	r2, r2, #29
 800128c:	430a      	orrs	r2, r1
 800128e:	4690      	mov	r8, r2
 8001290:	465a      	mov	r2, fp
 8001292:	055b      	lsls	r3, r3, #21
 8001294:	0254      	lsls	r4, r2, #9
 8001296:	0b24      	lsrs	r4, r4, #12
 8001298:	0d5b      	lsrs	r3, r3, #21
 800129a:	e669      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 800129c:	0035      	movs	r5, r6
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0db      	beq.n	800125a <__aeabi_ddiv+0x3c2>
 80012a2:	9d00      	ldr	r5, [sp, #0]
 80012a4:	1e51      	subs	r1, r2, #1
 80012a6:	46ac      	mov	ip, r5
 80012a8:	4464      	add	r4, ip
 80012aa:	42ac      	cmp	r4, r5
 80012ac:	d200      	bcs.n	80012b0 <__aeabi_ddiv+0x418>
 80012ae:	e09e      	b.n	80013ee <__aeabi_ddiv+0x556>
 80012b0:	4284      	cmp	r4, r0
 80012b2:	d200      	bcs.n	80012b6 <__aeabi_ddiv+0x41e>
 80012b4:	e0e1      	b.n	800147a <__aeabi_ddiv+0x5e2>
 80012b6:	d100      	bne.n	80012ba <__aeabi_ddiv+0x422>
 80012b8:	e0ee      	b.n	8001498 <__aeabi_ddiv+0x600>
 80012ba:	000a      	movs	r2, r1
 80012bc:	e7ca      	b.n	8001254 <__aeabi_ddiv+0x3bc>
 80012be:	4542      	cmp	r2, r8
 80012c0:	d900      	bls.n	80012c4 <__aeabi_ddiv+0x42c>
 80012c2:	e708      	b.n	80010d6 <__aeabi_ddiv+0x23e>
 80012c4:	464b      	mov	r3, r9
 80012c6:	07dc      	lsls	r4, r3, #31
 80012c8:	0858      	lsrs	r0, r3, #1
 80012ca:	4643      	mov	r3, r8
 80012cc:	085b      	lsrs	r3, r3, #1
 80012ce:	431c      	orrs	r4, r3
 80012d0:	4643      	mov	r3, r8
 80012d2:	07dd      	lsls	r5, r3, #31
 80012d4:	e706      	b.n	80010e4 <__aeabi_ddiv+0x24c>
 80012d6:	f001 fa01 	bl	80026dc <__clzsi2>
 80012da:	2315      	movs	r3, #21
 80012dc:	469c      	mov	ip, r3
 80012de:	4484      	add	ip, r0
 80012e0:	0002      	movs	r2, r0
 80012e2:	4663      	mov	r3, ip
 80012e4:	3220      	adds	r2, #32
 80012e6:	2b1c      	cmp	r3, #28
 80012e8:	dc00      	bgt.n	80012ec <__aeabi_ddiv+0x454>
 80012ea:	e692      	b.n	8001012 <__aeabi_ddiv+0x17a>
 80012ec:	0023      	movs	r3, r4
 80012ee:	3808      	subs	r0, #8
 80012f0:	4083      	lsls	r3, r0
 80012f2:	4699      	mov	r9, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	4698      	mov	r8, r3
 80012f8:	e69a      	b.n	8001030 <__aeabi_ddiv+0x198>
 80012fa:	f001 f9ef 	bl	80026dc <__clzsi2>
 80012fe:	0002      	movs	r2, r0
 8001300:	0003      	movs	r3, r0
 8001302:	3215      	adds	r2, #21
 8001304:	3320      	adds	r3, #32
 8001306:	2a1c      	cmp	r2, #28
 8001308:	dc00      	bgt.n	800130c <__aeabi_ddiv+0x474>
 800130a:	e65f      	b.n	8000fcc <__aeabi_ddiv+0x134>
 800130c:	9900      	ldr	r1, [sp, #0]
 800130e:	3808      	subs	r0, #8
 8001310:	4081      	lsls	r1, r0
 8001312:	2200      	movs	r2, #0
 8001314:	468b      	mov	fp, r1
 8001316:	e666      	b.n	8000fe6 <__aeabi_ddiv+0x14e>
 8001318:	2200      	movs	r2, #0
 800131a:	002e      	movs	r6, r5
 800131c:	2400      	movs	r4, #0
 800131e:	4690      	mov	r8, r2
 8001320:	4b65      	ldr	r3, [pc, #404]	@ (80014b8 <__aeabi_ddiv+0x620>)
 8001322:	e625      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 8001324:	002e      	movs	r6, r5
 8001326:	2101      	movs	r1, #1
 8001328:	1ac9      	subs	r1, r1, r3
 800132a:	2938      	cmp	r1, #56	@ 0x38
 800132c:	dd00      	ble.n	8001330 <__aeabi_ddiv+0x498>
 800132e:	e61b      	b.n	8000f68 <__aeabi_ddiv+0xd0>
 8001330:	291f      	cmp	r1, #31
 8001332:	dc7e      	bgt.n	8001432 <__aeabi_ddiv+0x59a>
 8001334:	4861      	ldr	r0, [pc, #388]	@ (80014bc <__aeabi_ddiv+0x624>)
 8001336:	0014      	movs	r4, r2
 8001338:	4450      	add	r0, sl
 800133a:	465b      	mov	r3, fp
 800133c:	4082      	lsls	r2, r0
 800133e:	4083      	lsls	r3, r0
 8001340:	40cc      	lsrs	r4, r1
 8001342:	1e50      	subs	r0, r2, #1
 8001344:	4182      	sbcs	r2, r0
 8001346:	4323      	orrs	r3, r4
 8001348:	431a      	orrs	r2, r3
 800134a:	465b      	mov	r3, fp
 800134c:	40cb      	lsrs	r3, r1
 800134e:	0751      	lsls	r1, r2, #29
 8001350:	d009      	beq.n	8001366 <__aeabi_ddiv+0x4ce>
 8001352:	210f      	movs	r1, #15
 8001354:	4011      	ands	r1, r2
 8001356:	2904      	cmp	r1, #4
 8001358:	d005      	beq.n	8001366 <__aeabi_ddiv+0x4ce>
 800135a:	1d11      	adds	r1, r2, #4
 800135c:	4291      	cmp	r1, r2
 800135e:	4192      	sbcs	r2, r2
 8001360:	4252      	negs	r2, r2
 8001362:	189b      	adds	r3, r3, r2
 8001364:	000a      	movs	r2, r1
 8001366:	0219      	lsls	r1, r3, #8
 8001368:	d400      	bmi.n	800136c <__aeabi_ddiv+0x4d4>
 800136a:	e09b      	b.n	80014a4 <__aeabi_ddiv+0x60c>
 800136c:	2200      	movs	r2, #0
 800136e:	2301      	movs	r3, #1
 8001370:	2400      	movs	r4, #0
 8001372:	4690      	mov	r8, r2
 8001374:	e5fc      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 8001376:	210f      	movs	r1, #15
 8001378:	4011      	ands	r1, r2
 800137a:	2904      	cmp	r1, #4
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x4e8>
 800137e:	e773      	b.n	8001268 <__aeabi_ddiv+0x3d0>
 8001380:	1d11      	adds	r1, r2, #4
 8001382:	4291      	cmp	r1, r2
 8001384:	4192      	sbcs	r2, r2
 8001386:	4252      	negs	r2, r2
 8001388:	002e      	movs	r6, r5
 800138a:	08c9      	lsrs	r1, r1, #3
 800138c:	4493      	add	fp, r2
 800138e:	e76d      	b.n	800126c <__aeabi_ddiv+0x3d4>
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	3d01      	subs	r5, #1
 8001394:	469c      	mov	ip, r3
 8001396:	4461      	add	r1, ip
 8001398:	428b      	cmp	r3, r1
 800139a:	d900      	bls.n	800139e <__aeabi_ddiv+0x506>
 800139c:	e72c      	b.n	80011f8 <__aeabi_ddiv+0x360>
 800139e:	428a      	cmp	r2, r1
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x50c>
 80013a2:	e729      	b.n	80011f8 <__aeabi_ddiv+0x360>
 80013a4:	1e85      	subs	r5, r0, #2
 80013a6:	4461      	add	r1, ip
 80013a8:	e726      	b.n	80011f8 <__aeabi_ddiv+0x360>
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	468c      	mov	ip, r1
 80013b0:	4464      	add	r4, ip
 80013b2:	42a1      	cmp	r1, r4
 80013b4:	d900      	bls.n	80013b8 <__aeabi_ddiv+0x520>
 80013b6:	e72d      	b.n	8001214 <__aeabi_ddiv+0x37c>
 80013b8:	42a2      	cmp	r2, r4
 80013ba:	d800      	bhi.n	80013be <__aeabi_ddiv+0x526>
 80013bc:	e72a      	b.n	8001214 <__aeabi_ddiv+0x37c>
 80013be:	1e83      	subs	r3, r0, #2
 80013c0:	4464      	add	r4, ip
 80013c2:	e727      	b.n	8001214 <__aeabi_ddiv+0x37c>
 80013c4:	4287      	cmp	r7, r0
 80013c6:	d000      	beq.n	80013ca <__aeabi_ddiv+0x532>
 80013c8:	e6fe      	b.n	80011c8 <__aeabi_ddiv+0x330>
 80013ca:	45a9      	cmp	r9, r5
 80013cc:	d900      	bls.n	80013d0 <__aeabi_ddiv+0x538>
 80013ce:	e6fb      	b.n	80011c8 <__aeabi_ddiv+0x330>
 80013d0:	e6f5      	b.n	80011be <__aeabi_ddiv+0x326>
 80013d2:	42a2      	cmp	r2, r4
 80013d4:	d800      	bhi.n	80013d8 <__aeabi_ddiv+0x540>
 80013d6:	e6b9      	b.n	800114c <__aeabi_ddiv+0x2b4>
 80013d8:	1e83      	subs	r3, r0, #2
 80013da:	4464      	add	r4, ip
 80013dc:	e6b6      	b.n	800114c <__aeabi_ddiv+0x2b4>
 80013de:	428a      	cmp	r2, r1
 80013e0:	d800      	bhi.n	80013e4 <__aeabi_ddiv+0x54c>
 80013e2:	e69f      	b.n	8001124 <__aeabi_ddiv+0x28c>
 80013e4:	46bc      	mov	ip, r7
 80013e6:	1e83      	subs	r3, r0, #2
 80013e8:	4698      	mov	r8, r3
 80013ea:	4461      	add	r1, ip
 80013ec:	e69a      	b.n	8001124 <__aeabi_ddiv+0x28c>
 80013ee:	000a      	movs	r2, r1
 80013f0:	4284      	cmp	r4, r0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_ddiv+0x55e>
 80013f4:	e72e      	b.n	8001254 <__aeabi_ddiv+0x3bc>
 80013f6:	454b      	cmp	r3, r9
 80013f8:	d000      	beq.n	80013fc <__aeabi_ddiv+0x564>
 80013fa:	e72b      	b.n	8001254 <__aeabi_ddiv+0x3bc>
 80013fc:	0035      	movs	r5, r6
 80013fe:	e72c      	b.n	800125a <__aeabi_ddiv+0x3c2>
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <__aeabi_ddiv+0x614>)
 8001402:	4a2f      	ldr	r2, [pc, #188]	@ (80014c0 <__aeabi_ddiv+0x628>)
 8001404:	4453      	add	r3, sl
 8001406:	4592      	cmp	sl, r2
 8001408:	db43      	blt.n	8001492 <__aeabi_ddiv+0x5fa>
 800140a:	2201      	movs	r2, #1
 800140c:	2100      	movs	r1, #0
 800140e:	4493      	add	fp, r2
 8001410:	e72c      	b.n	800126c <__aeabi_ddiv+0x3d4>
 8001412:	42ac      	cmp	r4, r5
 8001414:	d800      	bhi.n	8001418 <__aeabi_ddiv+0x580>
 8001416:	e6d7      	b.n	80011c8 <__aeabi_ddiv+0x330>
 8001418:	2302      	movs	r3, #2
 800141a:	425b      	negs	r3, r3
 800141c:	469c      	mov	ip, r3
 800141e:	9900      	ldr	r1, [sp, #0]
 8001420:	444d      	add	r5, r9
 8001422:	454d      	cmp	r5, r9
 8001424:	419b      	sbcs	r3, r3
 8001426:	44e3      	add	fp, ip
 8001428:	468c      	mov	ip, r1
 800142a:	425b      	negs	r3, r3
 800142c:	4463      	add	r3, ip
 800142e:	18c0      	adds	r0, r0, r3
 8001430:	e6cc      	b.n	80011cc <__aeabi_ddiv+0x334>
 8001432:	201f      	movs	r0, #31
 8001434:	4240      	negs	r0, r0
 8001436:	1ac3      	subs	r3, r0, r3
 8001438:	4658      	mov	r0, fp
 800143a:	40d8      	lsrs	r0, r3
 800143c:	2920      	cmp	r1, #32
 800143e:	d004      	beq.n	800144a <__aeabi_ddiv+0x5b2>
 8001440:	4659      	mov	r1, fp
 8001442:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <__aeabi_ddiv+0x62c>)
 8001444:	4453      	add	r3, sl
 8001446:	4099      	lsls	r1, r3
 8001448:	430a      	orrs	r2, r1
 800144a:	1e53      	subs	r3, r2, #1
 800144c:	419a      	sbcs	r2, r3
 800144e:	2307      	movs	r3, #7
 8001450:	0019      	movs	r1, r3
 8001452:	4302      	orrs	r2, r0
 8001454:	2400      	movs	r4, #0
 8001456:	4011      	ands	r1, r2
 8001458:	4213      	tst	r3, r2
 800145a:	d009      	beq.n	8001470 <__aeabi_ddiv+0x5d8>
 800145c:	3308      	adds	r3, #8
 800145e:	4013      	ands	r3, r2
 8001460:	2b04      	cmp	r3, #4
 8001462:	d01d      	beq.n	80014a0 <__aeabi_ddiv+0x608>
 8001464:	1d13      	adds	r3, r2, #4
 8001466:	4293      	cmp	r3, r2
 8001468:	4189      	sbcs	r1, r1
 800146a:	001a      	movs	r2, r3
 800146c:	4249      	negs	r1, r1
 800146e:	0749      	lsls	r1, r1, #29
 8001470:	08d2      	lsrs	r2, r2, #3
 8001472:	430a      	orrs	r2, r1
 8001474:	4690      	mov	r8, r2
 8001476:	2300      	movs	r3, #0
 8001478:	e57a      	b.n	8000f70 <__aeabi_ddiv+0xd8>
 800147a:	4649      	mov	r1, r9
 800147c:	9f00      	ldr	r7, [sp, #0]
 800147e:	004d      	lsls	r5, r1, #1
 8001480:	454d      	cmp	r5, r9
 8001482:	4189      	sbcs	r1, r1
 8001484:	46bc      	mov	ip, r7
 8001486:	4249      	negs	r1, r1
 8001488:	4461      	add	r1, ip
 800148a:	46a9      	mov	r9, r5
 800148c:	3a02      	subs	r2, #2
 800148e:	1864      	adds	r4, r4, r1
 8001490:	e7ae      	b.n	80013f0 <__aeabi_ddiv+0x558>
 8001492:	2201      	movs	r2, #1
 8001494:	4252      	negs	r2, r2
 8001496:	e746      	b.n	8001326 <__aeabi_ddiv+0x48e>
 8001498:	4599      	cmp	r9, r3
 800149a:	d3ee      	bcc.n	800147a <__aeabi_ddiv+0x5e2>
 800149c:	000a      	movs	r2, r1
 800149e:	e7aa      	b.n	80013f6 <__aeabi_ddiv+0x55e>
 80014a0:	2100      	movs	r1, #0
 80014a2:	e7e5      	b.n	8001470 <__aeabi_ddiv+0x5d8>
 80014a4:	0759      	lsls	r1, r3, #29
 80014a6:	025b      	lsls	r3, r3, #9
 80014a8:	0b1c      	lsrs	r4, r3, #12
 80014aa:	e7e1      	b.n	8001470 <__aeabi_ddiv+0x5d8>
 80014ac:	000003ff 	.word	0x000003ff
 80014b0:	feffffff 	.word	0xfeffffff
 80014b4:	000007fe 	.word	0x000007fe
 80014b8:	000007ff 	.word	0x000007ff
 80014bc:	0000041e 	.word	0x0000041e
 80014c0:	fffffc02 	.word	0xfffffc02
 80014c4:	0000043e 	.word	0x0000043e

080014c8 <__eqdf2>:
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	4657      	mov	r7, sl
 80014cc:	46de      	mov	lr, fp
 80014ce:	464e      	mov	r6, r9
 80014d0:	4645      	mov	r5, r8
 80014d2:	b5e0      	push	{r5, r6, r7, lr}
 80014d4:	000d      	movs	r5, r1
 80014d6:	0004      	movs	r4, r0
 80014d8:	0fe8      	lsrs	r0, r5, #31
 80014da:	4683      	mov	fp, r0
 80014dc:	0309      	lsls	r1, r1, #12
 80014de:	0fd8      	lsrs	r0, r3, #31
 80014e0:	0b09      	lsrs	r1, r1, #12
 80014e2:	4682      	mov	sl, r0
 80014e4:	4819      	ldr	r0, [pc, #100]	@ (800154c <__eqdf2+0x84>)
 80014e6:	468c      	mov	ip, r1
 80014e8:	031f      	lsls	r7, r3, #12
 80014ea:	0069      	lsls	r1, r5, #1
 80014ec:	005e      	lsls	r6, r3, #1
 80014ee:	0d49      	lsrs	r1, r1, #21
 80014f0:	0b3f      	lsrs	r7, r7, #12
 80014f2:	0d76      	lsrs	r6, r6, #21
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d018      	beq.n	800152a <__eqdf2+0x62>
 80014f8:	4286      	cmp	r6, r0
 80014fa:	d00f      	beq.n	800151c <__eqdf2+0x54>
 80014fc:	2001      	movs	r0, #1
 80014fe:	42b1      	cmp	r1, r6
 8001500:	d10d      	bne.n	800151e <__eqdf2+0x56>
 8001502:	45bc      	cmp	ip, r7
 8001504:	d10b      	bne.n	800151e <__eqdf2+0x56>
 8001506:	4294      	cmp	r4, r2
 8001508:	d109      	bne.n	800151e <__eqdf2+0x56>
 800150a:	45d3      	cmp	fp, sl
 800150c:	d01c      	beq.n	8001548 <__eqdf2+0x80>
 800150e:	2900      	cmp	r1, #0
 8001510:	d105      	bne.n	800151e <__eqdf2+0x56>
 8001512:	4660      	mov	r0, ip
 8001514:	4320      	orrs	r0, r4
 8001516:	1e43      	subs	r3, r0, #1
 8001518:	4198      	sbcs	r0, r3
 800151a:	e000      	b.n	800151e <__eqdf2+0x56>
 800151c:	2001      	movs	r0, #1
 800151e:	bcf0      	pop	{r4, r5, r6, r7}
 8001520:	46bb      	mov	fp, r7
 8001522:	46b2      	mov	sl, r6
 8001524:	46a9      	mov	r9, r5
 8001526:	46a0      	mov	r8, r4
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	2001      	movs	r0, #1
 800152c:	428e      	cmp	r6, r1
 800152e:	d1f6      	bne.n	800151e <__eqdf2+0x56>
 8001530:	4661      	mov	r1, ip
 8001532:	4339      	orrs	r1, r7
 8001534:	000f      	movs	r7, r1
 8001536:	4317      	orrs	r7, r2
 8001538:	4327      	orrs	r7, r4
 800153a:	d1f0      	bne.n	800151e <__eqdf2+0x56>
 800153c:	465b      	mov	r3, fp
 800153e:	4652      	mov	r2, sl
 8001540:	1a98      	subs	r0, r3, r2
 8001542:	1e43      	subs	r3, r0, #1
 8001544:	4198      	sbcs	r0, r3
 8001546:	e7ea      	b.n	800151e <__eqdf2+0x56>
 8001548:	2000      	movs	r0, #0
 800154a:	e7e8      	b.n	800151e <__eqdf2+0x56>
 800154c:	000007ff 	.word	0x000007ff

08001550 <__gedf2>:
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	4657      	mov	r7, sl
 8001554:	464e      	mov	r6, r9
 8001556:	4645      	mov	r5, r8
 8001558:	46de      	mov	lr, fp
 800155a:	b5e0      	push	{r5, r6, r7, lr}
 800155c:	000d      	movs	r5, r1
 800155e:	030e      	lsls	r6, r1, #12
 8001560:	0049      	lsls	r1, r1, #1
 8001562:	0d49      	lsrs	r1, r1, #21
 8001564:	468a      	mov	sl, r1
 8001566:	0fdf      	lsrs	r7, r3, #31
 8001568:	0fe9      	lsrs	r1, r5, #31
 800156a:	46bc      	mov	ip, r7
 800156c:	b083      	sub	sp, #12
 800156e:	4f2f      	ldr	r7, [pc, #188]	@ (800162c <__gedf2+0xdc>)
 8001570:	0004      	movs	r4, r0
 8001572:	4680      	mov	r8, r0
 8001574:	9101      	str	r1, [sp, #4]
 8001576:	0058      	lsls	r0, r3, #1
 8001578:	0319      	lsls	r1, r3, #12
 800157a:	4691      	mov	r9, r2
 800157c:	0b36      	lsrs	r6, r6, #12
 800157e:	0b09      	lsrs	r1, r1, #12
 8001580:	0d40      	lsrs	r0, r0, #21
 8001582:	45ba      	cmp	sl, r7
 8001584:	d01d      	beq.n	80015c2 <__gedf2+0x72>
 8001586:	42b8      	cmp	r0, r7
 8001588:	d00d      	beq.n	80015a6 <__gedf2+0x56>
 800158a:	4657      	mov	r7, sl
 800158c:	2f00      	cmp	r7, #0
 800158e:	d12a      	bne.n	80015e6 <__gedf2+0x96>
 8001590:	4334      	orrs	r4, r6
 8001592:	2800      	cmp	r0, #0
 8001594:	d124      	bne.n	80015e0 <__gedf2+0x90>
 8001596:	430a      	orrs	r2, r1
 8001598:	d036      	beq.n	8001608 <__gedf2+0xb8>
 800159a:	2c00      	cmp	r4, #0
 800159c:	d141      	bne.n	8001622 <__gedf2+0xd2>
 800159e:	4663      	mov	r3, ip
 80015a0:	0058      	lsls	r0, r3, #1
 80015a2:	3801      	subs	r0, #1
 80015a4:	e015      	b.n	80015d2 <__gedf2+0x82>
 80015a6:	4311      	orrs	r1, r2
 80015a8:	d138      	bne.n	800161c <__gedf2+0xcc>
 80015aa:	4653      	mov	r3, sl
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <__gedf2+0x64>
 80015b0:	4326      	orrs	r6, r4
 80015b2:	d0f4      	beq.n	800159e <__gedf2+0x4e>
 80015b4:	9b01      	ldr	r3, [sp, #4]
 80015b6:	4563      	cmp	r3, ip
 80015b8:	d107      	bne.n	80015ca <__gedf2+0x7a>
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	0058      	lsls	r0, r3, #1
 80015be:	3801      	subs	r0, #1
 80015c0:	e007      	b.n	80015d2 <__gedf2+0x82>
 80015c2:	4326      	orrs	r6, r4
 80015c4:	d12a      	bne.n	800161c <__gedf2+0xcc>
 80015c6:	4550      	cmp	r0, sl
 80015c8:	d021      	beq.n	800160e <__gedf2+0xbe>
 80015ca:	2001      	movs	r0, #1
 80015cc:	9b01      	ldr	r3, [sp, #4]
 80015ce:	425f      	negs	r7, r3
 80015d0:	4338      	orrs	r0, r7
 80015d2:	b003      	add	sp, #12
 80015d4:	bcf0      	pop	{r4, r5, r6, r7}
 80015d6:	46bb      	mov	fp, r7
 80015d8:	46b2      	mov	sl, r6
 80015da:	46a9      	mov	r9, r5
 80015dc:	46a0      	mov	r8, r4
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	d0dc      	beq.n	800159e <__gedf2+0x4e>
 80015e4:	e7e6      	b.n	80015b4 <__gedf2+0x64>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d0ef      	beq.n	80015ca <__gedf2+0x7a>
 80015ea:	9b01      	ldr	r3, [sp, #4]
 80015ec:	4563      	cmp	r3, ip
 80015ee:	d1ec      	bne.n	80015ca <__gedf2+0x7a>
 80015f0:	4582      	cmp	sl, r0
 80015f2:	dcea      	bgt.n	80015ca <__gedf2+0x7a>
 80015f4:	dbe1      	blt.n	80015ba <__gedf2+0x6a>
 80015f6:	428e      	cmp	r6, r1
 80015f8:	d8e7      	bhi.n	80015ca <__gedf2+0x7a>
 80015fa:	d1de      	bne.n	80015ba <__gedf2+0x6a>
 80015fc:	45c8      	cmp	r8, r9
 80015fe:	d8e4      	bhi.n	80015ca <__gedf2+0x7a>
 8001600:	2000      	movs	r0, #0
 8001602:	45c8      	cmp	r8, r9
 8001604:	d2e5      	bcs.n	80015d2 <__gedf2+0x82>
 8001606:	e7d8      	b.n	80015ba <__gedf2+0x6a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d0e2      	beq.n	80015d2 <__gedf2+0x82>
 800160c:	e7dd      	b.n	80015ca <__gedf2+0x7a>
 800160e:	4311      	orrs	r1, r2
 8001610:	d104      	bne.n	800161c <__gedf2+0xcc>
 8001612:	9b01      	ldr	r3, [sp, #4]
 8001614:	4563      	cmp	r3, ip
 8001616:	d1d8      	bne.n	80015ca <__gedf2+0x7a>
 8001618:	2000      	movs	r0, #0
 800161a:	e7da      	b.n	80015d2 <__gedf2+0x82>
 800161c:	2002      	movs	r0, #2
 800161e:	4240      	negs	r0, r0
 8001620:	e7d7      	b.n	80015d2 <__gedf2+0x82>
 8001622:	9b01      	ldr	r3, [sp, #4]
 8001624:	4563      	cmp	r3, ip
 8001626:	d0e6      	beq.n	80015f6 <__gedf2+0xa6>
 8001628:	e7cf      	b.n	80015ca <__gedf2+0x7a>
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	000007ff 	.word	0x000007ff

08001630 <__ledf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4657      	mov	r7, sl
 8001634:	464e      	mov	r6, r9
 8001636:	4645      	mov	r5, r8
 8001638:	46de      	mov	lr, fp
 800163a:	b5e0      	push	{r5, r6, r7, lr}
 800163c:	000d      	movs	r5, r1
 800163e:	030e      	lsls	r6, r1, #12
 8001640:	0049      	lsls	r1, r1, #1
 8001642:	0d49      	lsrs	r1, r1, #21
 8001644:	468a      	mov	sl, r1
 8001646:	0fdf      	lsrs	r7, r3, #31
 8001648:	0fe9      	lsrs	r1, r5, #31
 800164a:	46bc      	mov	ip, r7
 800164c:	b083      	sub	sp, #12
 800164e:	4f2e      	ldr	r7, [pc, #184]	@ (8001708 <__ledf2+0xd8>)
 8001650:	0004      	movs	r4, r0
 8001652:	4680      	mov	r8, r0
 8001654:	9101      	str	r1, [sp, #4]
 8001656:	0058      	lsls	r0, r3, #1
 8001658:	0319      	lsls	r1, r3, #12
 800165a:	4691      	mov	r9, r2
 800165c:	0b36      	lsrs	r6, r6, #12
 800165e:	0b09      	lsrs	r1, r1, #12
 8001660:	0d40      	lsrs	r0, r0, #21
 8001662:	45ba      	cmp	sl, r7
 8001664:	d01e      	beq.n	80016a4 <__ledf2+0x74>
 8001666:	42b8      	cmp	r0, r7
 8001668:	d00d      	beq.n	8001686 <__ledf2+0x56>
 800166a:	4657      	mov	r7, sl
 800166c:	2f00      	cmp	r7, #0
 800166e:	d127      	bne.n	80016c0 <__ledf2+0x90>
 8001670:	4334      	orrs	r4, r6
 8001672:	2800      	cmp	r0, #0
 8001674:	d133      	bne.n	80016de <__ledf2+0xae>
 8001676:	430a      	orrs	r2, r1
 8001678:	d034      	beq.n	80016e4 <__ledf2+0xb4>
 800167a:	2c00      	cmp	r4, #0
 800167c:	d140      	bne.n	8001700 <__ledf2+0xd0>
 800167e:	4663      	mov	r3, ip
 8001680:	0058      	lsls	r0, r3, #1
 8001682:	3801      	subs	r0, #1
 8001684:	e015      	b.n	80016b2 <__ledf2+0x82>
 8001686:	4311      	orrs	r1, r2
 8001688:	d112      	bne.n	80016b0 <__ledf2+0x80>
 800168a:	4653      	mov	r3, sl
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <__ledf2+0x64>
 8001690:	4326      	orrs	r6, r4
 8001692:	d0f4      	beq.n	800167e <__ledf2+0x4e>
 8001694:	9b01      	ldr	r3, [sp, #4]
 8001696:	4563      	cmp	r3, ip
 8001698:	d01d      	beq.n	80016d6 <__ledf2+0xa6>
 800169a:	2001      	movs	r0, #1
 800169c:	9b01      	ldr	r3, [sp, #4]
 800169e:	425f      	negs	r7, r3
 80016a0:	4338      	orrs	r0, r7
 80016a2:	e006      	b.n	80016b2 <__ledf2+0x82>
 80016a4:	4326      	orrs	r6, r4
 80016a6:	d103      	bne.n	80016b0 <__ledf2+0x80>
 80016a8:	4550      	cmp	r0, sl
 80016aa:	d1f6      	bne.n	800169a <__ledf2+0x6a>
 80016ac:	4311      	orrs	r1, r2
 80016ae:	d01c      	beq.n	80016ea <__ledf2+0xba>
 80016b0:	2002      	movs	r0, #2
 80016b2:	b003      	add	sp, #12
 80016b4:	bcf0      	pop	{r4, r5, r6, r7}
 80016b6:	46bb      	mov	fp, r7
 80016b8:	46b2      	mov	sl, r6
 80016ba:	46a9      	mov	r9, r5
 80016bc:	46a0      	mov	r8, r4
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d0ea      	beq.n	800169a <__ledf2+0x6a>
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	4563      	cmp	r3, ip
 80016c8:	d1e7      	bne.n	800169a <__ledf2+0x6a>
 80016ca:	4582      	cmp	sl, r0
 80016cc:	dce5      	bgt.n	800169a <__ledf2+0x6a>
 80016ce:	db02      	blt.n	80016d6 <__ledf2+0xa6>
 80016d0:	428e      	cmp	r6, r1
 80016d2:	d8e2      	bhi.n	800169a <__ledf2+0x6a>
 80016d4:	d00e      	beq.n	80016f4 <__ledf2+0xc4>
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	0058      	lsls	r0, r3, #1
 80016da:	3801      	subs	r0, #1
 80016dc:	e7e9      	b.n	80016b2 <__ledf2+0x82>
 80016de:	2c00      	cmp	r4, #0
 80016e0:	d0cd      	beq.n	800167e <__ledf2+0x4e>
 80016e2:	e7d7      	b.n	8001694 <__ledf2+0x64>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	d0e4      	beq.n	80016b2 <__ledf2+0x82>
 80016e8:	e7d7      	b.n	800169a <__ledf2+0x6a>
 80016ea:	9b01      	ldr	r3, [sp, #4]
 80016ec:	2000      	movs	r0, #0
 80016ee:	4563      	cmp	r3, ip
 80016f0:	d0df      	beq.n	80016b2 <__ledf2+0x82>
 80016f2:	e7d2      	b.n	800169a <__ledf2+0x6a>
 80016f4:	45c8      	cmp	r8, r9
 80016f6:	d8d0      	bhi.n	800169a <__ledf2+0x6a>
 80016f8:	2000      	movs	r0, #0
 80016fa:	45c8      	cmp	r8, r9
 80016fc:	d2d9      	bcs.n	80016b2 <__ledf2+0x82>
 80016fe:	e7ea      	b.n	80016d6 <__ledf2+0xa6>
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	4563      	cmp	r3, ip
 8001704:	d0e4      	beq.n	80016d0 <__ledf2+0xa0>
 8001706:	e7c8      	b.n	800169a <__ledf2+0x6a>
 8001708:	000007ff 	.word	0x000007ff

0800170c <__aeabi_dmul>:
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	4657      	mov	r7, sl
 8001710:	464e      	mov	r6, r9
 8001712:	46de      	mov	lr, fp
 8001714:	4645      	mov	r5, r8
 8001716:	b5e0      	push	{r5, r6, r7, lr}
 8001718:	001f      	movs	r7, r3
 800171a:	030b      	lsls	r3, r1, #12
 800171c:	0b1b      	lsrs	r3, r3, #12
 800171e:	0016      	movs	r6, r2
 8001720:	469a      	mov	sl, r3
 8001722:	0fca      	lsrs	r2, r1, #31
 8001724:	004b      	lsls	r3, r1, #1
 8001726:	0004      	movs	r4, r0
 8001728:	4691      	mov	r9, r2
 800172a:	b085      	sub	sp, #20
 800172c:	0d5b      	lsrs	r3, r3, #21
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0x26>
 8001730:	e1cf      	b.n	8001ad2 <__aeabi_dmul+0x3c6>
 8001732:	4acd      	ldr	r2, [pc, #820]	@ (8001a68 <__aeabi_dmul+0x35c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d055      	beq.n	80017e4 <__aeabi_dmul+0xd8>
 8001738:	4651      	mov	r1, sl
 800173a:	0f42      	lsrs	r2, r0, #29
 800173c:	00c9      	lsls	r1, r1, #3
 800173e:	430a      	orrs	r2, r1
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0409      	lsls	r1, r1, #16
 8001744:	4311      	orrs	r1, r2
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4690      	mov	r8, r2
 800174a:	4ac8      	ldr	r2, [pc, #800]	@ (8001a6c <__aeabi_dmul+0x360>)
 800174c:	468a      	mov	sl, r1
 800174e:	4693      	mov	fp, r2
 8001750:	449b      	add	fp, r3
 8001752:	2300      	movs	r3, #0
 8001754:	2500      	movs	r5, #0
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	033c      	lsls	r4, r7, #12
 800175a:	007b      	lsls	r3, r7, #1
 800175c:	0ffa      	lsrs	r2, r7, #31
 800175e:	9601      	str	r6, [sp, #4]
 8001760:	0b24      	lsrs	r4, r4, #12
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	9200      	str	r2, [sp, #0]
 8001766:	d100      	bne.n	800176a <__aeabi_dmul+0x5e>
 8001768:	e188      	b.n	8001a7c <__aeabi_dmul+0x370>
 800176a:	4abf      	ldr	r2, [pc, #764]	@ (8001a68 <__aeabi_dmul+0x35c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d100      	bne.n	8001772 <__aeabi_dmul+0x66>
 8001770:	e092      	b.n	8001898 <__aeabi_dmul+0x18c>
 8001772:	4abe      	ldr	r2, [pc, #760]	@ (8001a6c <__aeabi_dmul+0x360>)
 8001774:	4694      	mov	ip, r2
 8001776:	4463      	add	r3, ip
 8001778:	449b      	add	fp, r3
 800177a:	2d0a      	cmp	r5, #10
 800177c:	dc42      	bgt.n	8001804 <__aeabi_dmul+0xf8>
 800177e:	00e4      	lsls	r4, r4, #3
 8001780:	0f73      	lsrs	r3, r6, #29
 8001782:	4323      	orrs	r3, r4
 8001784:	2480      	movs	r4, #128	@ 0x80
 8001786:	4649      	mov	r1, r9
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	431c      	orrs	r4, r3
 800178c:	00f3      	lsls	r3, r6, #3
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	9b00      	ldr	r3, [sp, #0]
 8001792:	2000      	movs	r0, #0
 8001794:	4059      	eors	r1, r3
 8001796:	b2cb      	uxtb	r3, r1
 8001798:	9303      	str	r3, [sp, #12]
 800179a:	2d02      	cmp	r5, #2
 800179c:	dc00      	bgt.n	80017a0 <__aeabi_dmul+0x94>
 800179e:	e094      	b.n	80018ca <__aeabi_dmul+0x1be>
 80017a0:	2301      	movs	r3, #1
 80017a2:	40ab      	lsls	r3, r5
 80017a4:	001d      	movs	r5, r3
 80017a6:	23a6      	movs	r3, #166	@ 0xa6
 80017a8:	002a      	movs	r2, r5
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	401a      	ands	r2, r3
 80017ae:	421d      	tst	r5, r3
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dmul+0xa8>
 80017b2:	e229      	b.n	8001c08 <__aeabi_dmul+0x4fc>
 80017b4:	2390      	movs	r3, #144	@ 0x90
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	421d      	tst	r5, r3
 80017ba:	d100      	bne.n	80017be <__aeabi_dmul+0xb2>
 80017bc:	e24d      	b.n	8001c5a <__aeabi_dmul+0x54e>
 80017be:	2300      	movs	r3, #0
 80017c0:	2480      	movs	r4, #128	@ 0x80
 80017c2:	4699      	mov	r9, r3
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001a68 <__aeabi_dmul+0x35c>)
 80017c8:	0010      	movs	r0, r2
 80017ca:	464a      	mov	r2, r9
 80017cc:	051b      	lsls	r3, r3, #20
 80017ce:	4323      	orrs	r3, r4
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	b005      	add	sp, #20
 80017d8:	bcf0      	pop	{r4, r5, r6, r7}
 80017da:	46bb      	mov	fp, r7
 80017dc:	46b2      	mov	sl, r6
 80017de:	46a9      	mov	r9, r5
 80017e0:	46a0      	mov	r8, r4
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e4:	4652      	mov	r2, sl
 80017e6:	4302      	orrs	r2, r0
 80017e8:	4690      	mov	r8, r2
 80017ea:	d000      	beq.n	80017ee <__aeabi_dmul+0xe2>
 80017ec:	e1ac      	b.n	8001b48 <__aeabi_dmul+0x43c>
 80017ee:	469b      	mov	fp, r3
 80017f0:	2302      	movs	r3, #2
 80017f2:	4692      	mov	sl, r2
 80017f4:	2508      	movs	r5, #8
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	e7ae      	b.n	8001758 <__aeabi_dmul+0x4c>
 80017fa:	9b00      	ldr	r3, [sp, #0]
 80017fc:	46a2      	mov	sl, r4
 80017fe:	4699      	mov	r9, r3
 8001800:	9b01      	ldr	r3, [sp, #4]
 8001802:	4698      	mov	r8, r3
 8001804:	9b02      	ldr	r3, [sp, #8]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d100      	bne.n	800180c <__aeabi_dmul+0x100>
 800180a:	e1ca      	b.n	8001ba2 <__aeabi_dmul+0x496>
 800180c:	2b03      	cmp	r3, #3
 800180e:	d100      	bne.n	8001812 <__aeabi_dmul+0x106>
 8001810:	e192      	b.n	8001b38 <__aeabi_dmul+0x42c>
 8001812:	2b01      	cmp	r3, #1
 8001814:	d110      	bne.n	8001838 <__aeabi_dmul+0x12c>
 8001816:	2300      	movs	r3, #0
 8001818:	2400      	movs	r4, #0
 800181a:	2200      	movs	r2, #0
 800181c:	e7d4      	b.n	80017c8 <__aeabi_dmul+0xbc>
 800181e:	2201      	movs	r2, #1
 8001820:	087b      	lsrs	r3, r7, #1
 8001822:	403a      	ands	r2, r7
 8001824:	4313      	orrs	r3, r2
 8001826:	4652      	mov	r2, sl
 8001828:	07d2      	lsls	r2, r2, #31
 800182a:	4313      	orrs	r3, r2
 800182c:	4698      	mov	r8, r3
 800182e:	4653      	mov	r3, sl
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	469a      	mov	sl, r3
 8001834:	9b03      	ldr	r3, [sp, #12]
 8001836:	4699      	mov	r9, r3
 8001838:	465b      	mov	r3, fp
 800183a:	1c58      	adds	r0, r3, #1
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	445b      	add	r3, fp
 8001842:	2b00      	cmp	r3, #0
 8001844:	dc00      	bgt.n	8001848 <__aeabi_dmul+0x13c>
 8001846:	e1b1      	b.n	8001bac <__aeabi_dmul+0x4a0>
 8001848:	4642      	mov	r2, r8
 800184a:	0752      	lsls	r2, r2, #29
 800184c:	d00b      	beq.n	8001866 <__aeabi_dmul+0x15a>
 800184e:	220f      	movs	r2, #15
 8001850:	4641      	mov	r1, r8
 8001852:	400a      	ands	r2, r1
 8001854:	2a04      	cmp	r2, #4
 8001856:	d006      	beq.n	8001866 <__aeabi_dmul+0x15a>
 8001858:	4642      	mov	r2, r8
 800185a:	1d11      	adds	r1, r2, #4
 800185c:	4541      	cmp	r1, r8
 800185e:	4192      	sbcs	r2, r2
 8001860:	4688      	mov	r8, r1
 8001862:	4252      	negs	r2, r2
 8001864:	4492      	add	sl, r2
 8001866:	4652      	mov	r2, sl
 8001868:	01d2      	lsls	r2, r2, #7
 800186a:	d506      	bpl.n	800187a <__aeabi_dmul+0x16e>
 800186c:	4652      	mov	r2, sl
 800186e:	4b80      	ldr	r3, [pc, #512]	@ (8001a70 <__aeabi_dmul+0x364>)
 8001870:	401a      	ands	r2, r3
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	4692      	mov	sl, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	18c3      	adds	r3, r0, r3
 800187a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a74 <__aeabi_dmul+0x368>)
 800187c:	4293      	cmp	r3, r2
 800187e:	dd00      	ble.n	8001882 <__aeabi_dmul+0x176>
 8001880:	e18f      	b.n	8001ba2 <__aeabi_dmul+0x496>
 8001882:	4642      	mov	r2, r8
 8001884:	08d1      	lsrs	r1, r2, #3
 8001886:	4652      	mov	r2, sl
 8001888:	0752      	lsls	r2, r2, #29
 800188a:	430a      	orrs	r2, r1
 800188c:	4651      	mov	r1, sl
 800188e:	055b      	lsls	r3, r3, #21
 8001890:	024c      	lsls	r4, r1, #9
 8001892:	0b24      	lsrs	r4, r4, #12
 8001894:	0d5b      	lsrs	r3, r3, #21
 8001896:	e797      	b.n	80017c8 <__aeabi_dmul+0xbc>
 8001898:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <__aeabi_dmul+0x35c>)
 800189a:	4326      	orrs	r6, r4
 800189c:	469c      	mov	ip, r3
 800189e:	44e3      	add	fp, ip
 80018a0:	2e00      	cmp	r6, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dmul+0x19a>
 80018a4:	e16f      	b.n	8001b86 <__aeabi_dmul+0x47a>
 80018a6:	2303      	movs	r3, #3
 80018a8:	4649      	mov	r1, r9
 80018aa:	431d      	orrs	r5, r3
 80018ac:	9b00      	ldr	r3, [sp, #0]
 80018ae:	4059      	eors	r1, r3
 80018b0:	b2cb      	uxtb	r3, r1
 80018b2:	9303      	str	r3, [sp, #12]
 80018b4:	2d0a      	cmp	r5, #10
 80018b6:	dd00      	ble.n	80018ba <__aeabi_dmul+0x1ae>
 80018b8:	e133      	b.n	8001b22 <__aeabi_dmul+0x416>
 80018ba:	2301      	movs	r3, #1
 80018bc:	40ab      	lsls	r3, r5
 80018be:	001d      	movs	r5, r3
 80018c0:	2303      	movs	r3, #3
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2288      	movs	r2, #136	@ 0x88
 80018c6:	422a      	tst	r2, r5
 80018c8:	d197      	bne.n	80017fa <__aeabi_dmul+0xee>
 80018ca:	4642      	mov	r2, r8
 80018cc:	4643      	mov	r3, r8
 80018ce:	0412      	lsls	r2, r2, #16
 80018d0:	0c12      	lsrs	r2, r2, #16
 80018d2:	0016      	movs	r6, r2
 80018d4:	9801      	ldr	r0, [sp, #4]
 80018d6:	0c1d      	lsrs	r5, r3, #16
 80018d8:	0c03      	lsrs	r3, r0, #16
 80018da:	0400      	lsls	r0, r0, #16
 80018dc:	0c00      	lsrs	r0, r0, #16
 80018de:	4346      	muls	r6, r0
 80018e0:	46b4      	mov	ip, r6
 80018e2:	001e      	movs	r6, r3
 80018e4:	436e      	muls	r6, r5
 80018e6:	9600      	str	r6, [sp, #0]
 80018e8:	0016      	movs	r6, r2
 80018ea:	0007      	movs	r7, r0
 80018ec:	435e      	muls	r6, r3
 80018ee:	4661      	mov	r1, ip
 80018f0:	46b0      	mov	r8, r6
 80018f2:	436f      	muls	r7, r5
 80018f4:	0c0e      	lsrs	r6, r1, #16
 80018f6:	44b8      	add	r8, r7
 80018f8:	4446      	add	r6, r8
 80018fa:	42b7      	cmp	r7, r6
 80018fc:	d905      	bls.n	800190a <__aeabi_dmul+0x1fe>
 80018fe:	2180      	movs	r1, #128	@ 0x80
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	4688      	mov	r8, r1
 8001904:	9f00      	ldr	r7, [sp, #0]
 8001906:	4447      	add	r7, r8
 8001908:	9700      	str	r7, [sp, #0]
 800190a:	4661      	mov	r1, ip
 800190c:	0409      	lsls	r1, r1, #16
 800190e:	0c09      	lsrs	r1, r1, #16
 8001910:	0c37      	lsrs	r7, r6, #16
 8001912:	0436      	lsls	r6, r6, #16
 8001914:	468c      	mov	ip, r1
 8001916:	0031      	movs	r1, r6
 8001918:	4461      	add	r1, ip
 800191a:	9101      	str	r1, [sp, #4]
 800191c:	0011      	movs	r1, r2
 800191e:	0c26      	lsrs	r6, r4, #16
 8001920:	0424      	lsls	r4, r4, #16
 8001922:	0c24      	lsrs	r4, r4, #16
 8001924:	4361      	muls	r1, r4
 8001926:	468c      	mov	ip, r1
 8001928:	0021      	movs	r1, r4
 800192a:	4369      	muls	r1, r5
 800192c:	4689      	mov	r9, r1
 800192e:	4661      	mov	r1, ip
 8001930:	0c09      	lsrs	r1, r1, #16
 8001932:	4688      	mov	r8, r1
 8001934:	4372      	muls	r2, r6
 8001936:	444a      	add	r2, r9
 8001938:	4442      	add	r2, r8
 800193a:	4375      	muls	r5, r6
 800193c:	4591      	cmp	r9, r2
 800193e:	d903      	bls.n	8001948 <__aeabi_dmul+0x23c>
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0249      	lsls	r1, r1, #9
 8001944:	4688      	mov	r8, r1
 8001946:	4445      	add	r5, r8
 8001948:	0c11      	lsrs	r1, r2, #16
 800194a:	4688      	mov	r8, r1
 800194c:	4661      	mov	r1, ip
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	0c09      	lsrs	r1, r1, #16
 8001952:	468c      	mov	ip, r1
 8001954:	0412      	lsls	r2, r2, #16
 8001956:	4462      	add	r2, ip
 8001958:	18b9      	adds	r1, r7, r2
 800195a:	9102      	str	r1, [sp, #8]
 800195c:	4651      	mov	r1, sl
 800195e:	0c09      	lsrs	r1, r1, #16
 8001960:	468c      	mov	ip, r1
 8001962:	4651      	mov	r1, sl
 8001964:	040f      	lsls	r7, r1, #16
 8001966:	0c3f      	lsrs	r7, r7, #16
 8001968:	0039      	movs	r1, r7
 800196a:	4341      	muls	r1, r0
 800196c:	4445      	add	r5, r8
 800196e:	4688      	mov	r8, r1
 8001970:	4661      	mov	r1, ip
 8001972:	4341      	muls	r1, r0
 8001974:	468a      	mov	sl, r1
 8001976:	4641      	mov	r1, r8
 8001978:	4660      	mov	r0, ip
 800197a:	0c09      	lsrs	r1, r1, #16
 800197c:	4689      	mov	r9, r1
 800197e:	4358      	muls	r0, r3
 8001980:	437b      	muls	r3, r7
 8001982:	4453      	add	r3, sl
 8001984:	444b      	add	r3, r9
 8001986:	459a      	cmp	sl, r3
 8001988:	d903      	bls.n	8001992 <__aeabi_dmul+0x286>
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0249      	lsls	r1, r1, #9
 800198e:	4689      	mov	r9, r1
 8001990:	4448      	add	r0, r9
 8001992:	0c19      	lsrs	r1, r3, #16
 8001994:	4689      	mov	r9, r1
 8001996:	4641      	mov	r1, r8
 8001998:	0409      	lsls	r1, r1, #16
 800199a:	0c09      	lsrs	r1, r1, #16
 800199c:	4688      	mov	r8, r1
 800199e:	0039      	movs	r1, r7
 80019a0:	4361      	muls	r1, r4
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	4443      	add	r3, r8
 80019a6:	4688      	mov	r8, r1
 80019a8:	4661      	mov	r1, ip
 80019aa:	434c      	muls	r4, r1
 80019ac:	4371      	muls	r1, r6
 80019ae:	468c      	mov	ip, r1
 80019b0:	4641      	mov	r1, r8
 80019b2:	4377      	muls	r7, r6
 80019b4:	0c0e      	lsrs	r6, r1, #16
 80019b6:	193f      	adds	r7, r7, r4
 80019b8:	19f6      	adds	r6, r6, r7
 80019ba:	4448      	add	r0, r9
 80019bc:	42b4      	cmp	r4, r6
 80019be:	d903      	bls.n	80019c8 <__aeabi_dmul+0x2bc>
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	0249      	lsls	r1, r1, #9
 80019c4:	4689      	mov	r9, r1
 80019c6:	44cc      	add	ip, r9
 80019c8:	9902      	ldr	r1, [sp, #8]
 80019ca:	9f00      	ldr	r7, [sp, #0]
 80019cc:	4689      	mov	r9, r1
 80019ce:	0431      	lsls	r1, r6, #16
 80019d0:	444f      	add	r7, r9
 80019d2:	4689      	mov	r9, r1
 80019d4:	4641      	mov	r1, r8
 80019d6:	4297      	cmp	r7, r2
 80019d8:	4192      	sbcs	r2, r2
 80019da:	040c      	lsls	r4, r1, #16
 80019dc:	0c24      	lsrs	r4, r4, #16
 80019de:	444c      	add	r4, r9
 80019e0:	18ff      	adds	r7, r7, r3
 80019e2:	4252      	negs	r2, r2
 80019e4:	1964      	adds	r4, r4, r5
 80019e6:	18a1      	adds	r1, r4, r2
 80019e8:	429f      	cmp	r7, r3
 80019ea:	419b      	sbcs	r3, r3
 80019ec:	4688      	mov	r8, r1
 80019ee:	4682      	mov	sl, r0
 80019f0:	425b      	negs	r3, r3
 80019f2:	4699      	mov	r9, r3
 80019f4:	4590      	cmp	r8, r2
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	42ac      	cmp	r4, r5
 80019fa:	41a4      	sbcs	r4, r4
 80019fc:	44c2      	add	sl, r8
 80019fe:	44d1      	add	r9, sl
 8001a00:	4252      	negs	r2, r2
 8001a02:	4264      	negs	r4, r4
 8001a04:	4314      	orrs	r4, r2
 8001a06:	4599      	cmp	r9, r3
 8001a08:	419b      	sbcs	r3, r3
 8001a0a:	4582      	cmp	sl, r0
 8001a0c:	4192      	sbcs	r2, r2
 8001a0e:	425b      	negs	r3, r3
 8001a10:	4252      	negs	r2, r2
 8001a12:	4313      	orrs	r3, r2
 8001a14:	464a      	mov	r2, r9
 8001a16:	0c36      	lsrs	r6, r6, #16
 8001a18:	19a4      	adds	r4, r4, r6
 8001a1a:	18e3      	adds	r3, r4, r3
 8001a1c:	4463      	add	r3, ip
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	0dd2      	lsrs	r2, r2, #23
 8001a22:	431a      	orrs	r2, r3
 8001a24:	9901      	ldr	r1, [sp, #4]
 8001a26:	4692      	mov	sl, r2
 8001a28:	027a      	lsls	r2, r7, #9
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	1e50      	subs	r0, r2, #1
 8001a2e:	4182      	sbcs	r2, r0
 8001a30:	0dff      	lsrs	r7, r7, #23
 8001a32:	4317      	orrs	r7, r2
 8001a34:	464a      	mov	r2, r9
 8001a36:	0252      	lsls	r2, r2, #9
 8001a38:	4317      	orrs	r7, r2
 8001a3a:	46b8      	mov	r8, r7
 8001a3c:	01db      	lsls	r3, r3, #7
 8001a3e:	d500      	bpl.n	8001a42 <__aeabi_dmul+0x336>
 8001a40:	e6ed      	b.n	800181e <__aeabi_dmul+0x112>
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <__aeabi_dmul+0x36c>)
 8001a44:	9a03      	ldr	r2, [sp, #12]
 8001a46:	445b      	add	r3, fp
 8001a48:	4691      	mov	r9, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dc00      	bgt.n	8001a50 <__aeabi_dmul+0x344>
 8001a4e:	e0ac      	b.n	8001baa <__aeabi_dmul+0x49e>
 8001a50:	003a      	movs	r2, r7
 8001a52:	0752      	lsls	r2, r2, #29
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dmul+0x34c>
 8001a56:	e710      	b.n	800187a <__aeabi_dmul+0x16e>
 8001a58:	220f      	movs	r2, #15
 8001a5a:	4658      	mov	r0, fp
 8001a5c:	403a      	ands	r2, r7
 8001a5e:	2a04      	cmp	r2, #4
 8001a60:	d000      	beq.n	8001a64 <__aeabi_dmul+0x358>
 8001a62:	e6f9      	b.n	8001858 <__aeabi_dmul+0x14c>
 8001a64:	e709      	b.n	800187a <__aeabi_dmul+0x16e>
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	000007ff 	.word	0x000007ff
 8001a6c:	fffffc01 	.word	0xfffffc01
 8001a70:	feffffff 	.word	0xfeffffff
 8001a74:	000007fe 	.word	0x000007fe
 8001a78:	000003ff 	.word	0x000003ff
 8001a7c:	0022      	movs	r2, r4
 8001a7e:	4332      	orrs	r2, r6
 8001a80:	d06f      	beq.n	8001b62 <__aeabi_dmul+0x456>
 8001a82:	2c00      	cmp	r4, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dmul+0x37c>
 8001a86:	e0c2      	b.n	8001c0e <__aeabi_dmul+0x502>
 8001a88:	0020      	movs	r0, r4
 8001a8a:	f000 fe27 	bl	80026dc <__clzsi2>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	0003      	movs	r3, r0
 8001a92:	3a0b      	subs	r2, #11
 8001a94:	201d      	movs	r0, #29
 8001a96:	1a82      	subs	r2, r0, r2
 8001a98:	0030      	movs	r0, r6
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	40d0      	lsrs	r0, r2
 8001a9e:	3908      	subs	r1, #8
 8001aa0:	408c      	lsls	r4, r1
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	4322      	orrs	r2, r4
 8001aa6:	0034      	movs	r4, r6
 8001aa8:	408c      	lsls	r4, r1
 8001aaa:	4659      	mov	r1, fp
 8001aac:	1acb      	subs	r3, r1, r3
 8001aae:	4986      	ldr	r1, [pc, #536]	@ (8001cc8 <__aeabi_dmul+0x5bc>)
 8001ab0:	468b      	mov	fp, r1
 8001ab2:	449b      	add	fp, r3
 8001ab4:	2d0a      	cmp	r5, #10
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dmul+0x3ae>
 8001ab8:	e6a4      	b.n	8001804 <__aeabi_dmul+0xf8>
 8001aba:	4649      	mov	r1, r9
 8001abc:	9b00      	ldr	r3, [sp, #0]
 8001abe:	9401      	str	r4, [sp, #4]
 8001ac0:	4059      	eors	r1, r3
 8001ac2:	b2cb      	uxtb	r3, r1
 8001ac4:	0014      	movs	r4, r2
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	2d02      	cmp	r5, #2
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dmul+0x3c4>
 8001ace:	e667      	b.n	80017a0 <__aeabi_dmul+0x94>
 8001ad0:	e6fb      	b.n	80018ca <__aeabi_dmul+0x1be>
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	4303      	orrs	r3, r0
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	d03c      	beq.n	8001b54 <__aeabi_dmul+0x448>
 8001ada:	4653      	mov	r3, sl
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dmul+0x3d6>
 8001ae0:	e0a3      	b.n	8001c2a <__aeabi_dmul+0x51e>
 8001ae2:	4650      	mov	r0, sl
 8001ae4:	f000 fdfa 	bl	80026dc <__clzsi2>
 8001ae8:	230b      	movs	r3, #11
 8001aea:	425b      	negs	r3, r3
 8001aec:	469c      	mov	ip, r3
 8001aee:	0002      	movs	r2, r0
 8001af0:	4484      	add	ip, r0
 8001af2:	0011      	movs	r1, r2
 8001af4:	4650      	mov	r0, sl
 8001af6:	3908      	subs	r1, #8
 8001af8:	4088      	lsls	r0, r1
 8001afa:	231d      	movs	r3, #29
 8001afc:	4680      	mov	r8, r0
 8001afe:	4660      	mov	r0, ip
 8001b00:	1a1b      	subs	r3, r3, r0
 8001b02:	0020      	movs	r0, r4
 8001b04:	40d8      	lsrs	r0, r3
 8001b06:	0003      	movs	r3, r0
 8001b08:	4640      	mov	r0, r8
 8001b0a:	4303      	orrs	r3, r0
 8001b0c:	469a      	mov	sl, r3
 8001b0e:	0023      	movs	r3, r4
 8001b10:	408b      	lsls	r3, r1
 8001b12:	4698      	mov	r8, r3
 8001b14:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc8 <__aeabi_dmul+0x5bc>)
 8001b16:	2500      	movs	r5, #0
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	469b      	mov	fp, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	e61a      	b.n	8001758 <__aeabi_dmul+0x4c>
 8001b22:	2d0f      	cmp	r5, #15
 8001b24:	d000      	beq.n	8001b28 <__aeabi_dmul+0x41c>
 8001b26:	e0c9      	b.n	8001cbc <__aeabi_dmul+0x5b0>
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	4652      	mov	r2, sl
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	421a      	tst	r2, r3
 8001b30:	d002      	beq.n	8001b38 <__aeabi_dmul+0x42c>
 8001b32:	421c      	tst	r4, r3
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dmul+0x42c>
 8001b36:	e092      	b.n	8001c5e <__aeabi_dmul+0x552>
 8001b38:	2480      	movs	r4, #128	@ 0x80
 8001b3a:	4653      	mov	r3, sl
 8001b3c:	0324      	lsls	r4, r4, #12
 8001b3e:	431c      	orrs	r4, r3
 8001b40:	0324      	lsls	r4, r4, #12
 8001b42:	4642      	mov	r2, r8
 8001b44:	0b24      	lsrs	r4, r4, #12
 8001b46:	e63e      	b.n	80017c6 <__aeabi_dmul+0xba>
 8001b48:	469b      	mov	fp, r3
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	4680      	mov	r8, r0
 8001b4e:	250c      	movs	r5, #12
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	e601      	b.n	8001758 <__aeabi_dmul+0x4c>
 8001b54:	2300      	movs	r3, #0
 8001b56:	469a      	mov	sl, r3
 8001b58:	469b      	mov	fp, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	2504      	movs	r5, #4
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	e5fa      	b.n	8001758 <__aeabi_dmul+0x4c>
 8001b62:	2101      	movs	r1, #1
 8001b64:	430d      	orrs	r5, r1
 8001b66:	2d0a      	cmp	r5, #10
 8001b68:	dd00      	ble.n	8001b6c <__aeabi_dmul+0x460>
 8001b6a:	e64b      	b.n	8001804 <__aeabi_dmul+0xf8>
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	9800      	ldr	r0, [sp, #0]
 8001b70:	4041      	eors	r1, r0
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	9103      	str	r1, [sp, #12]
 8001b76:	2d02      	cmp	r5, #2
 8001b78:	dc00      	bgt.n	8001b7c <__aeabi_dmul+0x470>
 8001b7a:	e096      	b.n	8001caa <__aeabi_dmul+0x59e>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2400      	movs	r4, #0
 8001b80:	2001      	movs	r0, #1
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	e60c      	b.n	80017a0 <__aeabi_dmul+0x94>
 8001b86:	4649      	mov	r1, r9
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9a00      	ldr	r2, [sp, #0]
 8001b8c:	432b      	orrs	r3, r5
 8001b8e:	4051      	eors	r1, r2
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	9203      	str	r2, [sp, #12]
 8001b94:	2b0a      	cmp	r3, #10
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dmul+0x48e>
 8001b98:	e634      	b.n	8001804 <__aeabi_dmul+0xf8>
 8001b9a:	2d00      	cmp	r5, #0
 8001b9c:	d157      	bne.n	8001c4e <__aeabi_dmul+0x542>
 8001b9e:	9b03      	ldr	r3, [sp, #12]
 8001ba0:	4699      	mov	r9, r3
 8001ba2:	2400      	movs	r4, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <__aeabi_dmul+0x5c0>)
 8001ba8:	e60e      	b.n	80017c8 <__aeabi_dmul+0xbc>
 8001baa:	4658      	mov	r0, fp
 8001bac:	2101      	movs	r1, #1
 8001bae:	1ac9      	subs	r1, r1, r3
 8001bb0:	2938      	cmp	r1, #56	@ 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_dmul+0x4aa>
 8001bb4:	e62f      	b.n	8001816 <__aeabi_dmul+0x10a>
 8001bb6:	291f      	cmp	r1, #31
 8001bb8:	dd56      	ble.n	8001c68 <__aeabi_dmul+0x55c>
 8001bba:	221f      	movs	r2, #31
 8001bbc:	4654      	mov	r4, sl
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	40dc      	lsrs	r4, r3
 8001bc4:	2920      	cmp	r1, #32
 8001bc6:	d007      	beq.n	8001bd8 <__aeabi_dmul+0x4cc>
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <__aeabi_dmul+0x5c4>)
 8001bca:	4642      	mov	r2, r8
 8001bcc:	469c      	mov	ip, r3
 8001bce:	4653      	mov	r3, sl
 8001bd0:	4460      	add	r0, ip
 8001bd2:	4083      	lsls	r3, r0
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	4642      	mov	r2, r8
 8001bda:	2107      	movs	r1, #7
 8001bdc:	1e53      	subs	r3, r2, #1
 8001bde:	419a      	sbcs	r2, r3
 8001be0:	000b      	movs	r3, r1
 8001be2:	4322      	orrs	r2, r4
 8001be4:	4013      	ands	r3, r2
 8001be6:	2400      	movs	r4, #0
 8001be8:	4211      	tst	r1, r2
 8001bea:	d009      	beq.n	8001c00 <__aeabi_dmul+0x4f4>
 8001bec:	230f      	movs	r3, #15
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d05d      	beq.n	8001cb0 <__aeabi_dmul+0x5a4>
 8001bf4:	1d11      	adds	r1, r2, #4
 8001bf6:	4291      	cmp	r1, r2
 8001bf8:	419b      	sbcs	r3, r3
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	075b      	lsls	r3, r3, #29
 8001c00:	08d2      	lsrs	r2, r2, #3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	e5df      	b.n	80017c8 <__aeabi_dmul+0xbc>
 8001c08:	9b03      	ldr	r3, [sp, #12]
 8001c0a:	4699      	mov	r9, r3
 8001c0c:	e5fa      	b.n	8001804 <__aeabi_dmul+0xf8>
 8001c0e:	9801      	ldr	r0, [sp, #4]
 8001c10:	f000 fd64 	bl	80026dc <__clzsi2>
 8001c14:	0002      	movs	r2, r0
 8001c16:	0003      	movs	r3, r0
 8001c18:	3215      	adds	r2, #21
 8001c1a:	3320      	adds	r3, #32
 8001c1c:	2a1c      	cmp	r2, #28
 8001c1e:	dc00      	bgt.n	8001c22 <__aeabi_dmul+0x516>
 8001c20:	e738      	b.n	8001a94 <__aeabi_dmul+0x388>
 8001c22:	9a01      	ldr	r2, [sp, #4]
 8001c24:	3808      	subs	r0, #8
 8001c26:	4082      	lsls	r2, r0
 8001c28:	e73f      	b.n	8001aaa <__aeabi_dmul+0x39e>
 8001c2a:	f000 fd57 	bl	80026dc <__clzsi2>
 8001c2e:	2315      	movs	r3, #21
 8001c30:	469c      	mov	ip, r3
 8001c32:	4484      	add	ip, r0
 8001c34:	0002      	movs	r2, r0
 8001c36:	4663      	mov	r3, ip
 8001c38:	3220      	adds	r2, #32
 8001c3a:	2b1c      	cmp	r3, #28
 8001c3c:	dc00      	bgt.n	8001c40 <__aeabi_dmul+0x534>
 8001c3e:	e758      	b.n	8001af2 <__aeabi_dmul+0x3e6>
 8001c40:	2300      	movs	r3, #0
 8001c42:	4698      	mov	r8, r3
 8001c44:	0023      	movs	r3, r4
 8001c46:	3808      	subs	r0, #8
 8001c48:	4083      	lsls	r3, r0
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	e762      	b.n	8001b14 <__aeabi_dmul+0x408>
 8001c4e:	001d      	movs	r5, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	2400      	movs	r4, #0
 8001c54:	2002      	movs	r0, #2
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	e5a2      	b.n	80017a0 <__aeabi_dmul+0x94>
 8001c5a:	9002      	str	r0, [sp, #8]
 8001c5c:	e632      	b.n	80018c4 <__aeabi_dmul+0x1b8>
 8001c5e:	431c      	orrs	r4, r3
 8001c60:	9b00      	ldr	r3, [sp, #0]
 8001c62:	9a01      	ldr	r2, [sp, #4]
 8001c64:	4699      	mov	r9, r3
 8001c66:	e5ae      	b.n	80017c6 <__aeabi_dmul+0xba>
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <__aeabi_dmul+0x5c8>)
 8001c6a:	4652      	mov	r2, sl
 8001c6c:	18c3      	adds	r3, r0, r3
 8001c6e:	4640      	mov	r0, r8
 8001c70:	409a      	lsls	r2, r3
 8001c72:	40c8      	lsrs	r0, r1
 8001c74:	4302      	orrs	r2, r0
 8001c76:	4640      	mov	r0, r8
 8001c78:	4098      	lsls	r0, r3
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	1e58      	subs	r0, r3, #1
 8001c7e:	4183      	sbcs	r3, r0
 8001c80:	4654      	mov	r4, sl
 8001c82:	431a      	orrs	r2, r3
 8001c84:	40cc      	lsrs	r4, r1
 8001c86:	0753      	lsls	r3, r2, #29
 8001c88:	d009      	beq.n	8001c9e <__aeabi_dmul+0x592>
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d005      	beq.n	8001c9e <__aeabi_dmul+0x592>
 8001c92:	1d13      	adds	r3, r2, #4
 8001c94:	4293      	cmp	r3, r2
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	4252      	negs	r2, r2
 8001c9a:	18a4      	adds	r4, r4, r2
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	0223      	lsls	r3, r4, #8
 8001ca0:	d508      	bpl.n	8001cb4 <__aeabi_dmul+0x5a8>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	e58e      	b.n	80017c8 <__aeabi_dmul+0xbc>
 8001caa:	4689      	mov	r9, r1
 8001cac:	2400      	movs	r4, #0
 8001cae:	e58b      	b.n	80017c8 <__aeabi_dmul+0xbc>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e7a5      	b.n	8001c00 <__aeabi_dmul+0x4f4>
 8001cb4:	0763      	lsls	r3, r4, #29
 8001cb6:	0264      	lsls	r4, r4, #9
 8001cb8:	0b24      	lsrs	r4, r4, #12
 8001cba:	e7a1      	b.n	8001c00 <__aeabi_dmul+0x4f4>
 8001cbc:	9b00      	ldr	r3, [sp, #0]
 8001cbe:	46a2      	mov	sl, r4
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	9b01      	ldr	r3, [sp, #4]
 8001cc4:	4698      	mov	r8, r3
 8001cc6:	e737      	b.n	8001b38 <__aeabi_dmul+0x42c>
 8001cc8:	fffffc0d 	.word	0xfffffc0d
 8001ccc:	000007ff 	.word	0x000007ff
 8001cd0:	0000043e 	.word	0x0000043e
 8001cd4:	0000041e 	.word	0x0000041e

08001cd8 <__aeabi_dsub>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	4657      	mov	r7, sl
 8001cdc:	464e      	mov	r6, r9
 8001cde:	4645      	mov	r5, r8
 8001ce0:	46de      	mov	lr, fp
 8001ce2:	b5e0      	push	{r5, r6, r7, lr}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	9000      	str	r0, [sp, #0]
 8001ce8:	9101      	str	r1, [sp, #4]
 8001cea:	030c      	lsls	r4, r1, #12
 8001cec:	004d      	lsls	r5, r1, #1
 8001cee:	0fce      	lsrs	r6, r1, #31
 8001cf0:	0a61      	lsrs	r1, r4, #9
 8001cf2:	9c00      	ldr	r4, [sp, #0]
 8001cf4:	005f      	lsls	r7, r3, #1
 8001cf6:	0f64      	lsrs	r4, r4, #29
 8001cf8:	430c      	orrs	r4, r1
 8001cfa:	9900      	ldr	r1, [sp, #0]
 8001cfc:	9200      	str	r2, [sp, #0]
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	00c8      	lsls	r0, r1, #3
 8001d02:	0319      	lsls	r1, r3, #12
 8001d04:	0d7b      	lsrs	r3, r7, #21
 8001d06:	4699      	mov	r9, r3
 8001d08:	9b01      	ldr	r3, [sp, #4]
 8001d0a:	4fcc      	ldr	r7, [pc, #816]	@ (800203c <__aeabi_dsub+0x364>)
 8001d0c:	0fdb      	lsrs	r3, r3, #31
 8001d0e:	469c      	mov	ip, r3
 8001d10:	0a4b      	lsrs	r3, r1, #9
 8001d12:	9900      	ldr	r1, [sp, #0]
 8001d14:	4680      	mov	r8, r0
 8001d16:	0f49      	lsrs	r1, r1, #29
 8001d18:	4319      	orrs	r1, r3
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	468b      	mov	fp, r1
 8001d1e:	00da      	lsls	r2, r3, #3
 8001d20:	4692      	mov	sl, r2
 8001d22:	0d6d      	lsrs	r5, r5, #21
 8001d24:	45b9      	cmp	r9, r7
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dsub+0x52>
 8001d28:	e0bf      	b.n	8001eaa <__aeabi_dsub+0x1d2>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	4661      	mov	r1, ip
 8001d2e:	4059      	eors	r1, r3
 8001d30:	464b      	mov	r3, r9
 8001d32:	468c      	mov	ip, r1
 8001d34:	1aeb      	subs	r3, r5, r3
 8001d36:	428e      	cmp	r6, r1
 8001d38:	d075      	beq.n	8001e26 <__aeabi_dsub+0x14e>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dc00      	bgt.n	8001d40 <__aeabi_dsub+0x68>
 8001d3e:	e2a3      	b.n	8002288 <__aeabi_dsub+0x5b0>
 8001d40:	4649      	mov	r1, r9
 8001d42:	2900      	cmp	r1, #0
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x70>
 8001d46:	e0ce      	b.n	8001ee6 <__aeabi_dsub+0x20e>
 8001d48:	42bd      	cmp	r5, r7
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x76>
 8001d4c:	e200      	b.n	8002150 <__aeabi_dsub+0x478>
 8001d4e:	2701      	movs	r7, #1
 8001d50:	2b38      	cmp	r3, #56	@ 0x38
 8001d52:	dc19      	bgt.n	8001d88 <__aeabi_dsub+0xb0>
 8001d54:	2780      	movs	r7, #128	@ 0x80
 8001d56:	4659      	mov	r1, fp
 8001d58:	043f      	lsls	r7, r7, #16
 8001d5a:	4339      	orrs	r1, r7
 8001d5c:	468b      	mov	fp, r1
 8001d5e:	2b1f      	cmp	r3, #31
 8001d60:	dd00      	ble.n	8001d64 <__aeabi_dsub+0x8c>
 8001d62:	e1fa      	b.n	800215a <__aeabi_dsub+0x482>
 8001d64:	2720      	movs	r7, #32
 8001d66:	1af9      	subs	r1, r7, r3
 8001d68:	468c      	mov	ip, r1
 8001d6a:	4659      	mov	r1, fp
 8001d6c:	4667      	mov	r7, ip
 8001d6e:	40b9      	lsls	r1, r7
 8001d70:	000f      	movs	r7, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	40d9      	lsrs	r1, r3
 8001d76:	430f      	orrs	r7, r1
 8001d78:	4661      	mov	r1, ip
 8001d7a:	408a      	lsls	r2, r1
 8001d7c:	1e51      	subs	r1, r2, #1
 8001d7e:	418a      	sbcs	r2, r1
 8001d80:	4659      	mov	r1, fp
 8001d82:	40d9      	lsrs	r1, r3
 8001d84:	4317      	orrs	r7, r2
 8001d86:	1a64      	subs	r4, r4, r1
 8001d88:	1bc7      	subs	r7, r0, r7
 8001d8a:	42b8      	cmp	r0, r7
 8001d8c:	4180      	sbcs	r0, r0
 8001d8e:	4240      	negs	r0, r0
 8001d90:	1a24      	subs	r4, r4, r0
 8001d92:	0223      	lsls	r3, r4, #8
 8001d94:	d400      	bmi.n	8001d98 <__aeabi_dsub+0xc0>
 8001d96:	e140      	b.n	800201a <__aeabi_dsub+0x342>
 8001d98:	0264      	lsls	r4, r4, #9
 8001d9a:	0a64      	lsrs	r4, r4, #9
 8001d9c:	2c00      	cmp	r4, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0xca>
 8001da0:	e154      	b.n	800204c <__aeabi_dsub+0x374>
 8001da2:	0020      	movs	r0, r4
 8001da4:	f000 fc9a 	bl	80026dc <__clzsi2>
 8001da8:	0003      	movs	r3, r0
 8001daa:	3b08      	subs	r3, #8
 8001dac:	2120      	movs	r1, #32
 8001dae:	0038      	movs	r0, r7
 8001db0:	1aca      	subs	r2, r1, r3
 8001db2:	40d0      	lsrs	r0, r2
 8001db4:	409c      	lsls	r4, r3
 8001db6:	0002      	movs	r2, r0
 8001db8:	409f      	lsls	r7, r3
 8001dba:	4322      	orrs	r2, r4
 8001dbc:	429d      	cmp	r5, r3
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0xea>
 8001dc0:	e1a6      	b.n	8002110 <__aeabi_dsub+0x438>
 8001dc2:	1b58      	subs	r0, r3, r5
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	1a09      	subs	r1, r1, r0
 8001dc8:	003c      	movs	r4, r7
 8001dca:	408f      	lsls	r7, r1
 8001dcc:	40c4      	lsrs	r4, r0
 8001dce:	1e7b      	subs	r3, r7, #1
 8001dd0:	419f      	sbcs	r7, r3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	4327      	orrs	r7, r4
 8001dd8:	431f      	orrs	r7, r3
 8001dda:	40c2      	lsrs	r2, r0
 8001ddc:	003b      	movs	r3, r7
 8001dde:	0014      	movs	r4, r2
 8001de0:	2500      	movs	r5, #0
 8001de2:	4313      	orrs	r3, r2
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x110>
 8001de6:	e1f7      	b.n	80021d8 <__aeabi_dsub+0x500>
 8001de8:	077b      	lsls	r3, r7, #29
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x116>
 8001dec:	e377      	b.n	80024de <__aeabi_dsub+0x806>
 8001dee:	230f      	movs	r3, #15
 8001df0:	0038      	movs	r0, r7
 8001df2:	403b      	ands	r3, r7
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d004      	beq.n	8001e02 <__aeabi_dsub+0x12a>
 8001df8:	1d38      	adds	r0, r7, #4
 8001dfa:	42b8      	cmp	r0, r7
 8001dfc:	41bf      	sbcs	r7, r7
 8001dfe:	427f      	negs	r7, r7
 8001e00:	19e4      	adds	r4, r4, r7
 8001e02:	0223      	lsls	r3, r4, #8
 8001e04:	d400      	bmi.n	8001e08 <__aeabi_dsub+0x130>
 8001e06:	e368      	b.n	80024da <__aeabi_dsub+0x802>
 8001e08:	4b8c      	ldr	r3, [pc, #560]	@ (800203c <__aeabi_dsub+0x364>)
 8001e0a:	3501      	adds	r5, #1
 8001e0c:	429d      	cmp	r5, r3
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x13a>
 8001e10:	e0f4      	b.n	8001ffc <__aeabi_dsub+0x324>
 8001e12:	4b8b      	ldr	r3, [pc, #556]	@ (8002040 <__aeabi_dsub+0x368>)
 8001e14:	056d      	lsls	r5, r5, #21
 8001e16:	401c      	ands	r4, r3
 8001e18:	0d6d      	lsrs	r5, r5, #21
 8001e1a:	0767      	lsls	r7, r4, #29
 8001e1c:	08c0      	lsrs	r0, r0, #3
 8001e1e:	0264      	lsls	r4, r4, #9
 8001e20:	4307      	orrs	r7, r0
 8001e22:	0b24      	lsrs	r4, r4, #12
 8001e24:	e0ec      	b.n	8002000 <__aeabi_dsub+0x328>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	dc00      	bgt.n	8001e2c <__aeabi_dsub+0x154>
 8001e2a:	e329      	b.n	8002480 <__aeabi_dsub+0x7a8>
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	2900      	cmp	r1, #0
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dsub+0x15c>
 8001e32:	e0d6      	b.n	8001fe2 <__aeabi_dsub+0x30a>
 8001e34:	4659      	mov	r1, fp
 8001e36:	4311      	orrs	r1, r2
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x164>
 8001e3a:	e12e      	b.n	800209a <__aeabi_dsub+0x3c2>
 8001e3c:	1e59      	subs	r1, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x16c>
 8001e42:	e1e6      	b.n	8002212 <__aeabi_dsub+0x53a>
 8001e44:	42bb      	cmp	r3, r7
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x172>
 8001e48:	e182      	b.n	8002150 <__aeabi_dsub+0x478>
 8001e4a:	2701      	movs	r7, #1
 8001e4c:	000b      	movs	r3, r1
 8001e4e:	2938      	cmp	r1, #56	@ 0x38
 8001e50:	dc14      	bgt.n	8001e7c <__aeabi_dsub+0x1a4>
 8001e52:	2b1f      	cmp	r3, #31
 8001e54:	dd00      	ble.n	8001e58 <__aeabi_dsub+0x180>
 8001e56:	e23c      	b.n	80022d2 <__aeabi_dsub+0x5fa>
 8001e58:	2720      	movs	r7, #32
 8001e5a:	1af9      	subs	r1, r7, r3
 8001e5c:	468c      	mov	ip, r1
 8001e5e:	4659      	mov	r1, fp
 8001e60:	4667      	mov	r7, ip
 8001e62:	40b9      	lsls	r1, r7
 8001e64:	000f      	movs	r7, r1
 8001e66:	0011      	movs	r1, r2
 8001e68:	40d9      	lsrs	r1, r3
 8001e6a:	430f      	orrs	r7, r1
 8001e6c:	4661      	mov	r1, ip
 8001e6e:	408a      	lsls	r2, r1
 8001e70:	1e51      	subs	r1, r2, #1
 8001e72:	418a      	sbcs	r2, r1
 8001e74:	4659      	mov	r1, fp
 8001e76:	40d9      	lsrs	r1, r3
 8001e78:	4317      	orrs	r7, r2
 8001e7a:	1864      	adds	r4, r4, r1
 8001e7c:	183f      	adds	r7, r7, r0
 8001e7e:	4287      	cmp	r7, r0
 8001e80:	4180      	sbcs	r0, r0
 8001e82:	4240      	negs	r0, r0
 8001e84:	1824      	adds	r4, r4, r0
 8001e86:	0223      	lsls	r3, r4, #8
 8001e88:	d400      	bmi.n	8001e8c <__aeabi_dsub+0x1b4>
 8001e8a:	e0c6      	b.n	800201a <__aeabi_dsub+0x342>
 8001e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800203c <__aeabi_dsub+0x364>)
 8001e8e:	3501      	adds	r5, #1
 8001e90:	429d      	cmp	r5, r3
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x1be>
 8001e94:	e0b2      	b.n	8001ffc <__aeabi_dsub+0x324>
 8001e96:	2101      	movs	r1, #1
 8001e98:	4b69      	ldr	r3, [pc, #420]	@ (8002040 <__aeabi_dsub+0x368>)
 8001e9a:	087a      	lsrs	r2, r7, #1
 8001e9c:	401c      	ands	r4, r3
 8001e9e:	4039      	ands	r1, r7
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	07e7      	lsls	r7, r4, #31
 8001ea4:	4317      	orrs	r7, r2
 8001ea6:	0864      	lsrs	r4, r4, #1
 8001ea8:	e79e      	b.n	8001de8 <__aeabi_dsub+0x110>
 8001eaa:	4b66      	ldr	r3, [pc, #408]	@ (8002044 <__aeabi_dsub+0x36c>)
 8001eac:	4311      	orrs	r1, r2
 8001eae:	468a      	mov	sl, r1
 8001eb0:	18eb      	adds	r3, r5, r3
 8001eb2:	2900      	cmp	r1, #0
 8001eb4:	d028      	beq.n	8001f08 <__aeabi_dsub+0x230>
 8001eb6:	4566      	cmp	r6, ip
 8001eb8:	d02c      	beq.n	8001f14 <__aeabi_dsub+0x23c>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d05b      	beq.n	8001f76 <__aeabi_dsub+0x29e>
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x1ec>
 8001ec2:	e12c      	b.n	800211e <__aeabi_dsub+0x446>
 8001ec4:	465b      	mov	r3, fp
 8001ec6:	4666      	mov	r6, ip
 8001ec8:	075f      	lsls	r7, r3, #29
 8001eca:	08d2      	lsrs	r2, r2, #3
 8001ecc:	4317      	orrs	r7, r2
 8001ece:	08dd      	lsrs	r5, r3, #3
 8001ed0:	003b      	movs	r3, r7
 8001ed2:	432b      	orrs	r3, r5
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x200>
 8001ed6:	e0e2      	b.n	800209e <__aeabi_dsub+0x3c6>
 8001ed8:	2480      	movs	r4, #128	@ 0x80
 8001eda:	0324      	lsls	r4, r4, #12
 8001edc:	432c      	orrs	r4, r5
 8001ede:	0324      	lsls	r4, r4, #12
 8001ee0:	4d56      	ldr	r5, [pc, #344]	@ (800203c <__aeabi_dsub+0x364>)
 8001ee2:	0b24      	lsrs	r4, r4, #12
 8001ee4:	e08c      	b.n	8002000 <__aeabi_dsub+0x328>
 8001ee6:	4659      	mov	r1, fp
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x216>
 8001eec:	e0d5      	b.n	800209a <__aeabi_dsub+0x3c2>
 8001eee:	1e59      	subs	r1, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x21e>
 8001ef4:	e1b9      	b.n	800226a <__aeabi_dsub+0x592>
 8001ef6:	42bb      	cmp	r3, r7
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x224>
 8001efa:	e1b1      	b.n	8002260 <__aeabi_dsub+0x588>
 8001efc:	2701      	movs	r7, #1
 8001efe:	000b      	movs	r3, r1
 8001f00:	2938      	cmp	r1, #56	@ 0x38
 8001f02:	dd00      	ble.n	8001f06 <__aeabi_dsub+0x22e>
 8001f04:	e740      	b.n	8001d88 <__aeabi_dsub+0xb0>
 8001f06:	e72a      	b.n	8001d5e <__aeabi_dsub+0x86>
 8001f08:	4661      	mov	r1, ip
 8001f0a:	2701      	movs	r7, #1
 8001f0c:	4079      	eors	r1, r7
 8001f0e:	468c      	mov	ip, r1
 8001f10:	4566      	cmp	r6, ip
 8001f12:	d1d2      	bne.n	8001eba <__aeabi_dsub+0x1e2>
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x242>
 8001f18:	e0c5      	b.n	80020a6 <__aeabi_dsub+0x3ce>
 8001f1a:	2d00      	cmp	r5, #0
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x248>
 8001f1e:	e155      	b.n	80021cc <__aeabi_dsub+0x4f4>
 8001f20:	464b      	mov	r3, r9
 8001f22:	0025      	movs	r5, r4
 8001f24:	4305      	orrs	r5, r0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x252>
 8001f28:	e212      	b.n	8002350 <__aeabi_dsub+0x678>
 8001f2a:	1e59      	subs	r1, r3, #1
 8001f2c:	468c      	mov	ip, r1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x25c>
 8001f32:	e249      	b.n	80023c8 <__aeabi_dsub+0x6f0>
 8001f34:	4d41      	ldr	r5, [pc, #260]	@ (800203c <__aeabi_dsub+0x364>)
 8001f36:	42ab      	cmp	r3, r5
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x264>
 8001f3a:	e28f      	b.n	800245c <__aeabi_dsub+0x784>
 8001f3c:	2701      	movs	r7, #1
 8001f3e:	2938      	cmp	r1, #56	@ 0x38
 8001f40:	dc11      	bgt.n	8001f66 <__aeabi_dsub+0x28e>
 8001f42:	4663      	mov	r3, ip
 8001f44:	2b1f      	cmp	r3, #31
 8001f46:	dd00      	ble.n	8001f4a <__aeabi_dsub+0x272>
 8001f48:	e25b      	b.n	8002402 <__aeabi_dsub+0x72a>
 8001f4a:	4661      	mov	r1, ip
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	0027      	movs	r7, r4
 8001f50:	1a5b      	subs	r3, r3, r1
 8001f52:	0005      	movs	r5, r0
 8001f54:	4098      	lsls	r0, r3
 8001f56:	409f      	lsls	r7, r3
 8001f58:	40cd      	lsrs	r5, r1
 8001f5a:	1e43      	subs	r3, r0, #1
 8001f5c:	4198      	sbcs	r0, r3
 8001f5e:	40cc      	lsrs	r4, r1
 8001f60:	432f      	orrs	r7, r5
 8001f62:	4307      	orrs	r7, r0
 8001f64:	44a3      	add	fp, r4
 8001f66:	18bf      	adds	r7, r7, r2
 8001f68:	4297      	cmp	r7, r2
 8001f6a:	4192      	sbcs	r2, r2
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	445a      	add	r2, fp
 8001f70:	0014      	movs	r4, r2
 8001f72:	464d      	mov	r5, r9
 8001f74:	e787      	b.n	8001e86 <__aeabi_dsub+0x1ae>
 8001f76:	4f34      	ldr	r7, [pc, #208]	@ (8002048 <__aeabi_dsub+0x370>)
 8001f78:	1c6b      	adds	r3, r5, #1
 8001f7a:	423b      	tst	r3, r7
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x2a8>
 8001f7e:	e0b6      	b.n	80020ee <__aeabi_dsub+0x416>
 8001f80:	4659      	mov	r1, fp
 8001f82:	0023      	movs	r3, r4
 8001f84:	4311      	orrs	r1, r2
 8001f86:	000f      	movs	r7, r1
 8001f88:	4303      	orrs	r3, r0
 8001f8a:	2d00      	cmp	r5, #0
 8001f8c:	d000      	beq.n	8001f90 <__aeabi_dsub+0x2b8>
 8001f8e:	e126      	b.n	80021de <__aeabi_dsub+0x506>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x2be>
 8001f94:	e1c0      	b.n	8002318 <__aeabi_dsub+0x640>
 8001f96:	2900      	cmp	r1, #0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x2c4>
 8001f9a:	e0a1      	b.n	80020e0 <__aeabi_dsub+0x408>
 8001f9c:	1a83      	subs	r3, r0, r2
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	465b      	mov	r3, fp
 8001fa2:	4540      	cmp	r0, r8
 8001fa4:	41ad      	sbcs	r5, r5
 8001fa6:	1ae3      	subs	r3, r4, r3
 8001fa8:	426d      	negs	r5, r5
 8001faa:	1b5b      	subs	r3, r3, r5
 8001fac:	2580      	movs	r5, #128	@ 0x80
 8001fae:	042d      	lsls	r5, r5, #16
 8001fb0:	422b      	tst	r3, r5
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x2de>
 8001fb4:	e14b      	b.n	800224e <__aeabi_dsub+0x576>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	1a10      	subs	r0, r2, r0
 8001fba:	4282      	cmp	r2, r0
 8001fbc:	4192      	sbcs	r2, r2
 8001fbe:	1b1c      	subs	r4, r3, r4
 8001fc0:	0007      	movs	r7, r0
 8001fc2:	2601      	movs	r6, #1
 8001fc4:	4663      	mov	r3, ip
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	1aa4      	subs	r4, r4, r2
 8001fca:	4327      	orrs	r7, r4
 8001fcc:	401e      	ands	r6, r3
 8001fce:	2f00      	cmp	r7, #0
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x2fc>
 8001fd2:	e142      	b.n	800225a <__aeabi_dsub+0x582>
 8001fd4:	422c      	tst	r4, r5
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dsub+0x302>
 8001fd8:	e26d      	b.n	80024b6 <__aeabi_dsub+0x7de>
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <__aeabi_dsub+0x368>)
 8001fdc:	2501      	movs	r5, #1
 8001fde:	401c      	ands	r4, r3
 8001fe0:	e71b      	b.n	8001e1a <__aeabi_dsub+0x142>
 8001fe2:	42bd      	cmp	r5, r7
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x310>
 8001fe6:	e13b      	b.n	8002260 <__aeabi_dsub+0x588>
 8001fe8:	2701      	movs	r7, #1
 8001fea:	2b38      	cmp	r3, #56	@ 0x38
 8001fec:	dd00      	ble.n	8001ff0 <__aeabi_dsub+0x318>
 8001fee:	e745      	b.n	8001e7c <__aeabi_dsub+0x1a4>
 8001ff0:	2780      	movs	r7, #128	@ 0x80
 8001ff2:	4659      	mov	r1, fp
 8001ff4:	043f      	lsls	r7, r7, #16
 8001ff6:	4339      	orrs	r1, r7
 8001ff8:	468b      	mov	fp, r1
 8001ffa:	e72a      	b.n	8001e52 <__aeabi_dsub+0x17a>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2700      	movs	r7, #0
 8002000:	052d      	lsls	r5, r5, #20
 8002002:	4325      	orrs	r5, r4
 8002004:	07f6      	lsls	r6, r6, #31
 8002006:	4335      	orrs	r5, r6
 8002008:	0038      	movs	r0, r7
 800200a:	0029      	movs	r1, r5
 800200c:	b003      	add	sp, #12
 800200e:	bcf0      	pop	{r4, r5, r6, r7}
 8002010:	46bb      	mov	fp, r7
 8002012:	46b2      	mov	sl, r6
 8002014:	46a9      	mov	r9, r5
 8002016:	46a0      	mov	r8, r4
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	077b      	lsls	r3, r7, #29
 800201c:	d004      	beq.n	8002028 <__aeabi_dsub+0x350>
 800201e:	230f      	movs	r3, #15
 8002020:	403b      	ands	r3, r7
 8002022:	2b04      	cmp	r3, #4
 8002024:	d000      	beq.n	8002028 <__aeabi_dsub+0x350>
 8002026:	e6e7      	b.n	8001df8 <__aeabi_dsub+0x120>
 8002028:	002b      	movs	r3, r5
 800202a:	08f8      	lsrs	r0, r7, #3
 800202c:	4a03      	ldr	r2, [pc, #12]	@ (800203c <__aeabi_dsub+0x364>)
 800202e:	0767      	lsls	r7, r4, #29
 8002030:	4307      	orrs	r7, r0
 8002032:	08e5      	lsrs	r5, r4, #3
 8002034:	4293      	cmp	r3, r2
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x362>
 8002038:	e74a      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 800203a:	e0a5      	b.n	8002188 <__aeabi_dsub+0x4b0>
 800203c:	000007ff 	.word	0x000007ff
 8002040:	ff7fffff 	.word	0xff7fffff
 8002044:	fffff801 	.word	0xfffff801
 8002048:	000007fe 	.word	0x000007fe
 800204c:	0038      	movs	r0, r7
 800204e:	f000 fb45 	bl	80026dc <__clzsi2>
 8002052:	0003      	movs	r3, r0
 8002054:	3318      	adds	r3, #24
 8002056:	2b1f      	cmp	r3, #31
 8002058:	dc00      	bgt.n	800205c <__aeabi_dsub+0x384>
 800205a:	e6a7      	b.n	8001dac <__aeabi_dsub+0xd4>
 800205c:	003a      	movs	r2, r7
 800205e:	3808      	subs	r0, #8
 8002060:	4082      	lsls	r2, r0
 8002062:	429d      	cmp	r5, r3
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x390>
 8002066:	e08a      	b.n	800217e <__aeabi_dsub+0x4a6>
 8002068:	1b5b      	subs	r3, r3, r5
 800206a:	1c58      	adds	r0, r3, #1
 800206c:	281f      	cmp	r0, #31
 800206e:	dc00      	bgt.n	8002072 <__aeabi_dsub+0x39a>
 8002070:	e1d8      	b.n	8002424 <__aeabi_dsub+0x74c>
 8002072:	0017      	movs	r7, r2
 8002074:	3b1f      	subs	r3, #31
 8002076:	40df      	lsrs	r7, r3
 8002078:	2820      	cmp	r0, #32
 800207a:	d005      	beq.n	8002088 <__aeabi_dsub+0x3b0>
 800207c:	2340      	movs	r3, #64	@ 0x40
 800207e:	1a1b      	subs	r3, r3, r0
 8002080:	409a      	lsls	r2, r3
 8002082:	1e53      	subs	r3, r2, #1
 8002084:	419a      	sbcs	r2, r3
 8002086:	4317      	orrs	r7, r2
 8002088:	2500      	movs	r5, #0
 800208a:	2f00      	cmp	r7, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x3b8>
 800208e:	e0e5      	b.n	800225c <__aeabi_dsub+0x584>
 8002090:	077b      	lsls	r3, r7, #29
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x3be>
 8002094:	e6ab      	b.n	8001dee <__aeabi_dsub+0x116>
 8002096:	002c      	movs	r4, r5
 8002098:	e7c6      	b.n	8002028 <__aeabi_dsub+0x350>
 800209a:	08c0      	lsrs	r0, r0, #3
 800209c:	e7c6      	b.n	800202c <__aeabi_dsub+0x354>
 800209e:	2700      	movs	r7, #0
 80020a0:	2400      	movs	r4, #0
 80020a2:	4dd1      	ldr	r5, [pc, #836]	@ (80023e8 <__aeabi_dsub+0x710>)
 80020a4:	e7ac      	b.n	8002000 <__aeabi_dsub+0x328>
 80020a6:	4fd1      	ldr	r7, [pc, #836]	@ (80023ec <__aeabi_dsub+0x714>)
 80020a8:	1c6b      	adds	r3, r5, #1
 80020aa:	423b      	tst	r3, r7
 80020ac:	d171      	bne.n	8002192 <__aeabi_dsub+0x4ba>
 80020ae:	0023      	movs	r3, r4
 80020b0:	4303      	orrs	r3, r0
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	d000      	beq.n	80020b8 <__aeabi_dsub+0x3e0>
 80020b6:	e14e      	b.n	8002356 <__aeabi_dsub+0x67e>
 80020b8:	4657      	mov	r7, sl
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x3e8>
 80020be:	e1b5      	b.n	800242c <__aeabi_dsub+0x754>
 80020c0:	2f00      	cmp	r7, #0
 80020c2:	d00d      	beq.n	80020e0 <__aeabi_dsub+0x408>
 80020c4:	1883      	adds	r3, r0, r2
 80020c6:	4283      	cmp	r3, r0
 80020c8:	4180      	sbcs	r0, r0
 80020ca:	445c      	add	r4, fp
 80020cc:	4240      	negs	r0, r0
 80020ce:	1824      	adds	r4, r4, r0
 80020d0:	0222      	lsls	r2, r4, #8
 80020d2:	d500      	bpl.n	80020d6 <__aeabi_dsub+0x3fe>
 80020d4:	e1c8      	b.n	8002468 <__aeabi_dsub+0x790>
 80020d6:	001f      	movs	r7, r3
 80020d8:	4698      	mov	r8, r3
 80020da:	4327      	orrs	r7, r4
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x408>
 80020de:	e0bc      	b.n	800225a <__aeabi_dsub+0x582>
 80020e0:	4643      	mov	r3, r8
 80020e2:	0767      	lsls	r7, r4, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	431f      	orrs	r7, r3
 80020e8:	08e5      	lsrs	r5, r4, #3
 80020ea:	2300      	movs	r3, #0
 80020ec:	e04c      	b.n	8002188 <__aeabi_dsub+0x4b0>
 80020ee:	1a83      	subs	r3, r0, r2
 80020f0:	4698      	mov	r8, r3
 80020f2:	465b      	mov	r3, fp
 80020f4:	4540      	cmp	r0, r8
 80020f6:	41bf      	sbcs	r7, r7
 80020f8:	1ae3      	subs	r3, r4, r3
 80020fa:	427f      	negs	r7, r7
 80020fc:	1bdb      	subs	r3, r3, r7
 80020fe:	021f      	lsls	r7, r3, #8
 8002100:	d47c      	bmi.n	80021fc <__aeabi_dsub+0x524>
 8002102:	4647      	mov	r7, r8
 8002104:	431f      	orrs	r7, r3
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x432>
 8002108:	e0a6      	b.n	8002258 <__aeabi_dsub+0x580>
 800210a:	001c      	movs	r4, r3
 800210c:	4647      	mov	r7, r8
 800210e:	e645      	b.n	8001d9c <__aeabi_dsub+0xc4>
 8002110:	4cb7      	ldr	r4, [pc, #732]	@ (80023f0 <__aeabi_dsub+0x718>)
 8002112:	1aed      	subs	r5, r5, r3
 8002114:	4014      	ands	r4, r2
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	d000      	beq.n	800211c <__aeabi_dsub+0x444>
 800211a:	e780      	b.n	800201e <__aeabi_dsub+0x346>
 800211c:	e784      	b.n	8002028 <__aeabi_dsub+0x350>
 800211e:	464b      	mov	r3, r9
 8002120:	0025      	movs	r5, r4
 8002122:	4305      	orrs	r5, r0
 8002124:	d066      	beq.n	80021f4 <__aeabi_dsub+0x51c>
 8002126:	1e5f      	subs	r7, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x456>
 800212c:	e0fc      	b.n	8002328 <__aeabi_dsub+0x650>
 800212e:	4dae      	ldr	r5, [pc, #696]	@ (80023e8 <__aeabi_dsub+0x710>)
 8002130:	42ab      	cmp	r3, r5
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x45e>
 8002134:	e15e      	b.n	80023f4 <__aeabi_dsub+0x71c>
 8002136:	4666      	mov	r6, ip
 8002138:	2f38      	cmp	r7, #56	@ 0x38
 800213a:	dc00      	bgt.n	800213e <__aeabi_dsub+0x466>
 800213c:	e0b4      	b.n	80022a8 <__aeabi_dsub+0x5d0>
 800213e:	2001      	movs	r0, #1
 8002140:	1a17      	subs	r7, r2, r0
 8002142:	42ba      	cmp	r2, r7
 8002144:	4192      	sbcs	r2, r2
 8002146:	465b      	mov	r3, fp
 8002148:	4252      	negs	r2, r2
 800214a:	464d      	mov	r5, r9
 800214c:	1a9c      	subs	r4, r3, r2
 800214e:	e620      	b.n	8001d92 <__aeabi_dsub+0xba>
 8002150:	0767      	lsls	r7, r4, #29
 8002152:	08c0      	lsrs	r0, r0, #3
 8002154:	4307      	orrs	r7, r0
 8002156:	08e5      	lsrs	r5, r4, #3
 8002158:	e6ba      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 800215a:	001f      	movs	r7, r3
 800215c:	4659      	mov	r1, fp
 800215e:	3f20      	subs	r7, #32
 8002160:	40f9      	lsrs	r1, r7
 8002162:	000f      	movs	r7, r1
 8002164:	2b20      	cmp	r3, #32
 8002166:	d005      	beq.n	8002174 <__aeabi_dsub+0x49c>
 8002168:	2140      	movs	r1, #64	@ 0x40
 800216a:	1acb      	subs	r3, r1, r3
 800216c:	4659      	mov	r1, fp
 800216e:	4099      	lsls	r1, r3
 8002170:	430a      	orrs	r2, r1
 8002172:	4692      	mov	sl, r2
 8002174:	4653      	mov	r3, sl
 8002176:	1e5a      	subs	r2, r3, #1
 8002178:	4193      	sbcs	r3, r2
 800217a:	431f      	orrs	r7, r3
 800217c:	e604      	b.n	8001d88 <__aeabi_dsub+0xb0>
 800217e:	1aeb      	subs	r3, r5, r3
 8002180:	4d9b      	ldr	r5, [pc, #620]	@ (80023f0 <__aeabi_dsub+0x718>)
 8002182:	4015      	ands	r5, r2
 8002184:	076f      	lsls	r7, r5, #29
 8002186:	08ed      	lsrs	r5, r5, #3
 8002188:	032c      	lsls	r4, r5, #12
 800218a:	055d      	lsls	r5, r3, #21
 800218c:	0b24      	lsrs	r4, r4, #12
 800218e:	0d6d      	lsrs	r5, r5, #21
 8002190:	e736      	b.n	8002000 <__aeabi_dsub+0x328>
 8002192:	4d95      	ldr	r5, [pc, #596]	@ (80023e8 <__aeabi_dsub+0x710>)
 8002194:	42ab      	cmp	r3, r5
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x4c2>
 8002198:	e0d6      	b.n	8002348 <__aeabi_dsub+0x670>
 800219a:	1882      	adds	r2, r0, r2
 800219c:	0021      	movs	r1, r4
 800219e:	4282      	cmp	r2, r0
 80021a0:	4180      	sbcs	r0, r0
 80021a2:	4459      	add	r1, fp
 80021a4:	4240      	negs	r0, r0
 80021a6:	1808      	adds	r0, r1, r0
 80021a8:	07c7      	lsls	r7, r0, #31
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	4317      	orrs	r7, r2
 80021ae:	0844      	lsrs	r4, r0, #1
 80021b0:	0752      	lsls	r2, r2, #29
 80021b2:	d400      	bmi.n	80021b6 <__aeabi_dsub+0x4de>
 80021b4:	e185      	b.n	80024c2 <__aeabi_dsub+0x7ea>
 80021b6:	220f      	movs	r2, #15
 80021b8:	001d      	movs	r5, r3
 80021ba:	403a      	ands	r2, r7
 80021bc:	2a04      	cmp	r2, #4
 80021be:	d000      	beq.n	80021c2 <__aeabi_dsub+0x4ea>
 80021c0:	e61a      	b.n	8001df8 <__aeabi_dsub+0x120>
 80021c2:	08ff      	lsrs	r7, r7, #3
 80021c4:	0764      	lsls	r4, r4, #29
 80021c6:	4327      	orrs	r7, r4
 80021c8:	0905      	lsrs	r5, r0, #4
 80021ca:	e7dd      	b.n	8002188 <__aeabi_dsub+0x4b0>
 80021cc:	465b      	mov	r3, fp
 80021ce:	08d2      	lsrs	r2, r2, #3
 80021d0:	075f      	lsls	r7, r3, #29
 80021d2:	4317      	orrs	r7, r2
 80021d4:	08dd      	lsrs	r5, r3, #3
 80021d6:	e67b      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 80021d8:	2700      	movs	r7, #0
 80021da:	2400      	movs	r4, #0
 80021dc:	e710      	b.n	8002000 <__aeabi_dsub+0x328>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d000      	beq.n	80021e4 <__aeabi_dsub+0x50c>
 80021e2:	e0d6      	b.n	8002392 <__aeabi_dsub+0x6ba>
 80021e4:	2900      	cmp	r1, #0
 80021e6:	d000      	beq.n	80021ea <__aeabi_dsub+0x512>
 80021e8:	e12f      	b.n	800244a <__aeabi_dsub+0x772>
 80021ea:	2480      	movs	r4, #128	@ 0x80
 80021ec:	2600      	movs	r6, #0
 80021ee:	4d7e      	ldr	r5, [pc, #504]	@ (80023e8 <__aeabi_dsub+0x710>)
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	e705      	b.n	8002000 <__aeabi_dsub+0x328>
 80021f4:	4666      	mov	r6, ip
 80021f6:	465c      	mov	r4, fp
 80021f8:	08d0      	lsrs	r0, r2, #3
 80021fa:	e717      	b.n	800202c <__aeabi_dsub+0x354>
 80021fc:	465b      	mov	r3, fp
 80021fe:	1a17      	subs	r7, r2, r0
 8002200:	42ba      	cmp	r2, r7
 8002202:	4192      	sbcs	r2, r2
 8002204:	1b1c      	subs	r4, r3, r4
 8002206:	2601      	movs	r6, #1
 8002208:	4663      	mov	r3, ip
 800220a:	4252      	negs	r2, r2
 800220c:	1aa4      	subs	r4, r4, r2
 800220e:	401e      	ands	r6, r3
 8002210:	e5c4      	b.n	8001d9c <__aeabi_dsub+0xc4>
 8002212:	1883      	adds	r3, r0, r2
 8002214:	4283      	cmp	r3, r0
 8002216:	4180      	sbcs	r0, r0
 8002218:	445c      	add	r4, fp
 800221a:	4240      	negs	r0, r0
 800221c:	1825      	adds	r5, r4, r0
 800221e:	022a      	lsls	r2, r5, #8
 8002220:	d400      	bmi.n	8002224 <__aeabi_dsub+0x54c>
 8002222:	e0da      	b.n	80023da <__aeabi_dsub+0x702>
 8002224:	4a72      	ldr	r2, [pc, #456]	@ (80023f0 <__aeabi_dsub+0x718>)
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	4015      	ands	r5, r2
 800222a:	07ea      	lsls	r2, r5, #31
 800222c:	431a      	orrs	r2, r3
 800222e:	0869      	lsrs	r1, r5, #1
 8002230:	075b      	lsls	r3, r3, #29
 8002232:	d400      	bmi.n	8002236 <__aeabi_dsub+0x55e>
 8002234:	e14a      	b.n	80024cc <__aeabi_dsub+0x7f4>
 8002236:	230f      	movs	r3, #15
 8002238:	4013      	ands	r3, r2
 800223a:	2b04      	cmp	r3, #4
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x568>
 800223e:	e0fc      	b.n	800243a <__aeabi_dsub+0x762>
 8002240:	1d17      	adds	r7, r2, #4
 8002242:	4297      	cmp	r7, r2
 8002244:	41a4      	sbcs	r4, r4
 8002246:	4264      	negs	r4, r4
 8002248:	2502      	movs	r5, #2
 800224a:	1864      	adds	r4, r4, r1
 800224c:	e6ec      	b.n	8002028 <__aeabi_dsub+0x350>
 800224e:	4647      	mov	r7, r8
 8002250:	001c      	movs	r4, r3
 8002252:	431f      	orrs	r7, r3
 8002254:	d000      	beq.n	8002258 <__aeabi_dsub+0x580>
 8002256:	e743      	b.n	80020e0 <__aeabi_dsub+0x408>
 8002258:	2600      	movs	r6, #0
 800225a:	2500      	movs	r5, #0
 800225c:	2400      	movs	r4, #0
 800225e:	e6cf      	b.n	8002000 <__aeabi_dsub+0x328>
 8002260:	08c0      	lsrs	r0, r0, #3
 8002262:	0767      	lsls	r7, r4, #29
 8002264:	4307      	orrs	r7, r0
 8002266:	08e5      	lsrs	r5, r4, #3
 8002268:	e632      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 800226a:	1a87      	subs	r7, r0, r2
 800226c:	465b      	mov	r3, fp
 800226e:	42b8      	cmp	r0, r7
 8002270:	4180      	sbcs	r0, r0
 8002272:	1ae4      	subs	r4, r4, r3
 8002274:	4240      	negs	r0, r0
 8002276:	1a24      	subs	r4, r4, r0
 8002278:	0223      	lsls	r3, r4, #8
 800227a:	d428      	bmi.n	80022ce <__aeabi_dsub+0x5f6>
 800227c:	0763      	lsls	r3, r4, #29
 800227e:	08ff      	lsrs	r7, r7, #3
 8002280:	431f      	orrs	r7, r3
 8002282:	08e5      	lsrs	r5, r4, #3
 8002284:	2301      	movs	r3, #1
 8002286:	e77f      	b.n	8002188 <__aeabi_dsub+0x4b0>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x5b6>
 800228c:	e673      	b.n	8001f76 <__aeabi_dsub+0x29e>
 800228e:	464b      	mov	r3, r9
 8002290:	1b5f      	subs	r7, r3, r5
 8002292:	003b      	movs	r3, r7
 8002294:	2d00      	cmp	r5, #0
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x5c2>
 8002298:	e742      	b.n	8002120 <__aeabi_dsub+0x448>
 800229a:	2f38      	cmp	r7, #56	@ 0x38
 800229c:	dd00      	ble.n	80022a0 <__aeabi_dsub+0x5c8>
 800229e:	e0ec      	b.n	800247a <__aeabi_dsub+0x7a2>
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	000e      	movs	r6, r1
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	431c      	orrs	r4, r3
 80022a8:	2f1f      	cmp	r7, #31
 80022aa:	dc25      	bgt.n	80022f8 <__aeabi_dsub+0x620>
 80022ac:	2520      	movs	r5, #32
 80022ae:	0023      	movs	r3, r4
 80022b0:	1bed      	subs	r5, r5, r7
 80022b2:	0001      	movs	r1, r0
 80022b4:	40a8      	lsls	r0, r5
 80022b6:	40ab      	lsls	r3, r5
 80022b8:	40f9      	lsrs	r1, r7
 80022ba:	1e45      	subs	r5, r0, #1
 80022bc:	41a8      	sbcs	r0, r5
 80022be:	430b      	orrs	r3, r1
 80022c0:	40fc      	lsrs	r4, r7
 80022c2:	4318      	orrs	r0, r3
 80022c4:	465b      	mov	r3, fp
 80022c6:	1b1b      	subs	r3, r3, r4
 80022c8:	469b      	mov	fp, r3
 80022ca:	e739      	b.n	8002140 <__aeabi_dsub+0x468>
 80022cc:	4666      	mov	r6, ip
 80022ce:	2501      	movs	r5, #1
 80022d0:	e562      	b.n	8001d98 <__aeabi_dsub+0xc0>
 80022d2:	001f      	movs	r7, r3
 80022d4:	4659      	mov	r1, fp
 80022d6:	3f20      	subs	r7, #32
 80022d8:	40f9      	lsrs	r1, r7
 80022da:	468c      	mov	ip, r1
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d005      	beq.n	80022ec <__aeabi_dsub+0x614>
 80022e0:	2740      	movs	r7, #64	@ 0x40
 80022e2:	4659      	mov	r1, fp
 80022e4:	1afb      	subs	r3, r7, r3
 80022e6:	4099      	lsls	r1, r3
 80022e8:	430a      	orrs	r2, r1
 80022ea:	4692      	mov	sl, r2
 80022ec:	4657      	mov	r7, sl
 80022ee:	1e7b      	subs	r3, r7, #1
 80022f0:	419f      	sbcs	r7, r3
 80022f2:	4663      	mov	r3, ip
 80022f4:	431f      	orrs	r7, r3
 80022f6:	e5c1      	b.n	8001e7c <__aeabi_dsub+0x1a4>
 80022f8:	003b      	movs	r3, r7
 80022fa:	0025      	movs	r5, r4
 80022fc:	3b20      	subs	r3, #32
 80022fe:	40dd      	lsrs	r5, r3
 8002300:	2f20      	cmp	r7, #32
 8002302:	d004      	beq.n	800230e <__aeabi_dsub+0x636>
 8002304:	2340      	movs	r3, #64	@ 0x40
 8002306:	1bdb      	subs	r3, r3, r7
 8002308:	409c      	lsls	r4, r3
 800230a:	4320      	orrs	r0, r4
 800230c:	4680      	mov	r8, r0
 800230e:	4640      	mov	r0, r8
 8002310:	1e43      	subs	r3, r0, #1
 8002312:	4198      	sbcs	r0, r3
 8002314:	4328      	orrs	r0, r5
 8002316:	e713      	b.n	8002140 <__aeabi_dsub+0x468>
 8002318:	2900      	cmp	r1, #0
 800231a:	d09d      	beq.n	8002258 <__aeabi_dsub+0x580>
 800231c:	2601      	movs	r6, #1
 800231e:	4663      	mov	r3, ip
 8002320:	465c      	mov	r4, fp
 8002322:	4690      	mov	r8, r2
 8002324:	401e      	ands	r6, r3
 8002326:	e6db      	b.n	80020e0 <__aeabi_dsub+0x408>
 8002328:	1a17      	subs	r7, r2, r0
 800232a:	465b      	mov	r3, fp
 800232c:	42ba      	cmp	r2, r7
 800232e:	4192      	sbcs	r2, r2
 8002330:	1b1c      	subs	r4, r3, r4
 8002332:	4252      	negs	r2, r2
 8002334:	1aa4      	subs	r4, r4, r2
 8002336:	0223      	lsls	r3, r4, #8
 8002338:	d4c8      	bmi.n	80022cc <__aeabi_dsub+0x5f4>
 800233a:	0763      	lsls	r3, r4, #29
 800233c:	08ff      	lsrs	r7, r7, #3
 800233e:	431f      	orrs	r7, r3
 8002340:	4666      	mov	r6, ip
 8002342:	2301      	movs	r3, #1
 8002344:	08e5      	lsrs	r5, r4, #3
 8002346:	e71f      	b.n	8002188 <__aeabi_dsub+0x4b0>
 8002348:	001d      	movs	r5, r3
 800234a:	2400      	movs	r4, #0
 800234c:	2700      	movs	r7, #0
 800234e:	e657      	b.n	8002000 <__aeabi_dsub+0x328>
 8002350:	465c      	mov	r4, fp
 8002352:	08d0      	lsrs	r0, r2, #3
 8002354:	e66a      	b.n	800202c <__aeabi_dsub+0x354>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d100      	bne.n	800235c <__aeabi_dsub+0x684>
 800235a:	e737      	b.n	80021cc <__aeabi_dsub+0x4f4>
 800235c:	4653      	mov	r3, sl
 800235e:	08c0      	lsrs	r0, r0, #3
 8002360:	0767      	lsls	r7, r4, #29
 8002362:	4307      	orrs	r7, r0
 8002364:	08e5      	lsrs	r5, r4, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x694>
 800236a:	e5b1      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	031b      	lsls	r3, r3, #12
 8002370:	421d      	tst	r5, r3
 8002372:	d008      	beq.n	8002386 <__aeabi_dsub+0x6ae>
 8002374:	4659      	mov	r1, fp
 8002376:	08c8      	lsrs	r0, r1, #3
 8002378:	4218      	tst	r0, r3
 800237a:	d104      	bne.n	8002386 <__aeabi_dsub+0x6ae>
 800237c:	08d2      	lsrs	r2, r2, #3
 800237e:	0749      	lsls	r1, r1, #29
 8002380:	430a      	orrs	r2, r1
 8002382:	0017      	movs	r7, r2
 8002384:	0005      	movs	r5, r0
 8002386:	0f7b      	lsrs	r3, r7, #29
 8002388:	00ff      	lsls	r7, r7, #3
 800238a:	08ff      	lsrs	r7, r7, #3
 800238c:	075b      	lsls	r3, r3, #29
 800238e:	431f      	orrs	r7, r3
 8002390:	e59e      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 8002392:	08c0      	lsrs	r0, r0, #3
 8002394:	0763      	lsls	r3, r4, #29
 8002396:	4318      	orrs	r0, r3
 8002398:	08e5      	lsrs	r5, r4, #3
 800239a:	2900      	cmp	r1, #0
 800239c:	d053      	beq.n	8002446 <__aeabi_dsub+0x76e>
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	031b      	lsls	r3, r3, #12
 80023a2:	421d      	tst	r5, r3
 80023a4:	d00a      	beq.n	80023bc <__aeabi_dsub+0x6e4>
 80023a6:	4659      	mov	r1, fp
 80023a8:	08cc      	lsrs	r4, r1, #3
 80023aa:	421c      	tst	r4, r3
 80023ac:	d106      	bne.n	80023bc <__aeabi_dsub+0x6e4>
 80023ae:	2601      	movs	r6, #1
 80023b0:	4663      	mov	r3, ip
 80023b2:	0025      	movs	r5, r4
 80023b4:	08d0      	lsrs	r0, r2, #3
 80023b6:	0749      	lsls	r1, r1, #29
 80023b8:	4308      	orrs	r0, r1
 80023ba:	401e      	ands	r6, r3
 80023bc:	0f47      	lsrs	r7, r0, #29
 80023be:	00c0      	lsls	r0, r0, #3
 80023c0:	08c0      	lsrs	r0, r0, #3
 80023c2:	077f      	lsls	r7, r7, #29
 80023c4:	4307      	orrs	r7, r0
 80023c6:	e583      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 80023c8:	1883      	adds	r3, r0, r2
 80023ca:	4293      	cmp	r3, r2
 80023cc:	4192      	sbcs	r2, r2
 80023ce:	445c      	add	r4, fp
 80023d0:	4252      	negs	r2, r2
 80023d2:	18a5      	adds	r5, r4, r2
 80023d4:	022a      	lsls	r2, r5, #8
 80023d6:	d500      	bpl.n	80023da <__aeabi_dsub+0x702>
 80023d8:	e724      	b.n	8002224 <__aeabi_dsub+0x54c>
 80023da:	076f      	lsls	r7, r5, #29
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	431f      	orrs	r7, r3
 80023e0:	08ed      	lsrs	r5, r5, #3
 80023e2:	2301      	movs	r3, #1
 80023e4:	e6d0      	b.n	8002188 <__aeabi_dsub+0x4b0>
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	000007ff 	.word	0x000007ff
 80023ec:	000007fe 	.word	0x000007fe
 80023f0:	ff7fffff 	.word	0xff7fffff
 80023f4:	465b      	mov	r3, fp
 80023f6:	08d2      	lsrs	r2, r2, #3
 80023f8:	075f      	lsls	r7, r3, #29
 80023fa:	4666      	mov	r6, ip
 80023fc:	4317      	orrs	r7, r2
 80023fe:	08dd      	lsrs	r5, r3, #3
 8002400:	e566      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 8002402:	0025      	movs	r5, r4
 8002404:	3b20      	subs	r3, #32
 8002406:	40dd      	lsrs	r5, r3
 8002408:	4663      	mov	r3, ip
 800240a:	2b20      	cmp	r3, #32
 800240c:	d005      	beq.n	800241a <__aeabi_dsub+0x742>
 800240e:	2340      	movs	r3, #64	@ 0x40
 8002410:	4661      	mov	r1, ip
 8002412:	1a5b      	subs	r3, r3, r1
 8002414:	409c      	lsls	r4, r3
 8002416:	4320      	orrs	r0, r4
 8002418:	4680      	mov	r8, r0
 800241a:	4647      	mov	r7, r8
 800241c:	1e7b      	subs	r3, r7, #1
 800241e:	419f      	sbcs	r7, r3
 8002420:	432f      	orrs	r7, r5
 8002422:	e5a0      	b.n	8001f66 <__aeabi_dsub+0x28e>
 8002424:	2120      	movs	r1, #32
 8002426:	2700      	movs	r7, #0
 8002428:	1a09      	subs	r1, r1, r0
 800242a:	e4d2      	b.n	8001dd2 <__aeabi_dsub+0xfa>
 800242c:	2f00      	cmp	r7, #0
 800242e:	d100      	bne.n	8002432 <__aeabi_dsub+0x75a>
 8002430:	e713      	b.n	800225a <__aeabi_dsub+0x582>
 8002432:	465c      	mov	r4, fp
 8002434:	0017      	movs	r7, r2
 8002436:	2500      	movs	r5, #0
 8002438:	e5f6      	b.n	8002028 <__aeabi_dsub+0x350>
 800243a:	08d7      	lsrs	r7, r2, #3
 800243c:	0749      	lsls	r1, r1, #29
 800243e:	2302      	movs	r3, #2
 8002440:	430f      	orrs	r7, r1
 8002442:	092d      	lsrs	r5, r5, #4
 8002444:	e6a0      	b.n	8002188 <__aeabi_dsub+0x4b0>
 8002446:	0007      	movs	r7, r0
 8002448:	e542      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 800244a:	465b      	mov	r3, fp
 800244c:	2601      	movs	r6, #1
 800244e:	075f      	lsls	r7, r3, #29
 8002450:	08dd      	lsrs	r5, r3, #3
 8002452:	4663      	mov	r3, ip
 8002454:	08d2      	lsrs	r2, r2, #3
 8002456:	4317      	orrs	r7, r2
 8002458:	401e      	ands	r6, r3
 800245a:	e539      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 800245c:	465b      	mov	r3, fp
 800245e:	08d2      	lsrs	r2, r2, #3
 8002460:	075f      	lsls	r7, r3, #29
 8002462:	4317      	orrs	r7, r2
 8002464:	08dd      	lsrs	r5, r3, #3
 8002466:	e533      	b.n	8001ed0 <__aeabi_dsub+0x1f8>
 8002468:	4a1e      	ldr	r2, [pc, #120]	@ (80024e4 <__aeabi_dsub+0x80c>)
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	4022      	ands	r2, r4
 800246e:	0757      	lsls	r7, r2, #29
 8002470:	0252      	lsls	r2, r2, #9
 8002472:	2501      	movs	r5, #1
 8002474:	431f      	orrs	r7, r3
 8002476:	0b14      	lsrs	r4, r2, #12
 8002478:	e5c2      	b.n	8002000 <__aeabi_dsub+0x328>
 800247a:	000e      	movs	r6, r1
 800247c:	2001      	movs	r0, #1
 800247e:	e65f      	b.n	8002140 <__aeabi_dsub+0x468>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <__aeabi_dsub+0x7c8>
 8002484:	464b      	mov	r3, r9
 8002486:	1b5b      	subs	r3, r3, r5
 8002488:	469c      	mov	ip, r3
 800248a:	2d00      	cmp	r5, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x7b8>
 800248e:	e548      	b.n	8001f22 <__aeabi_dsub+0x24a>
 8002490:	2701      	movs	r7, #1
 8002492:	2b38      	cmp	r3, #56	@ 0x38
 8002494:	dd00      	ble.n	8002498 <__aeabi_dsub+0x7c0>
 8002496:	e566      	b.n	8001f66 <__aeabi_dsub+0x28e>
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	431c      	orrs	r4, r3
 800249e:	e550      	b.n	8001f42 <__aeabi_dsub+0x26a>
 80024a0:	1c6b      	adds	r3, r5, #1
 80024a2:	4d11      	ldr	r5, [pc, #68]	@ (80024e8 <__aeabi_dsub+0x810>)
 80024a4:	422b      	tst	r3, r5
 80024a6:	d000      	beq.n	80024aa <__aeabi_dsub+0x7d2>
 80024a8:	e673      	b.n	8002192 <__aeabi_dsub+0x4ba>
 80024aa:	4659      	mov	r1, fp
 80024ac:	0023      	movs	r3, r4
 80024ae:	4311      	orrs	r1, r2
 80024b0:	468a      	mov	sl, r1
 80024b2:	4303      	orrs	r3, r0
 80024b4:	e600      	b.n	80020b8 <__aeabi_dsub+0x3e0>
 80024b6:	0767      	lsls	r7, r4, #29
 80024b8:	08c0      	lsrs	r0, r0, #3
 80024ba:	2300      	movs	r3, #0
 80024bc:	4307      	orrs	r7, r0
 80024be:	08e5      	lsrs	r5, r4, #3
 80024c0:	e662      	b.n	8002188 <__aeabi_dsub+0x4b0>
 80024c2:	0764      	lsls	r4, r4, #29
 80024c4:	08ff      	lsrs	r7, r7, #3
 80024c6:	4327      	orrs	r7, r4
 80024c8:	0905      	lsrs	r5, r0, #4
 80024ca:	e65d      	b.n	8002188 <__aeabi_dsub+0x4b0>
 80024cc:	08d2      	lsrs	r2, r2, #3
 80024ce:	0749      	lsls	r1, r1, #29
 80024d0:	4311      	orrs	r1, r2
 80024d2:	000f      	movs	r7, r1
 80024d4:	2302      	movs	r3, #2
 80024d6:	092d      	lsrs	r5, r5, #4
 80024d8:	e656      	b.n	8002188 <__aeabi_dsub+0x4b0>
 80024da:	0007      	movs	r7, r0
 80024dc:	e5a4      	b.n	8002028 <__aeabi_dsub+0x350>
 80024de:	0038      	movs	r0, r7
 80024e0:	e48f      	b.n	8001e02 <__aeabi_dsub+0x12a>
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	ff7fffff 	.word	0xff7fffff
 80024e8:	000007fe 	.word	0x000007fe

080024ec <__aeabi_dcmpun>:
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	46c6      	mov	lr, r8
 80024f0:	031e      	lsls	r6, r3, #12
 80024f2:	0b36      	lsrs	r6, r6, #12
 80024f4:	46b0      	mov	r8, r6
 80024f6:	4e0d      	ldr	r6, [pc, #52]	@ (800252c <__aeabi_dcmpun+0x40>)
 80024f8:	030c      	lsls	r4, r1, #12
 80024fa:	004d      	lsls	r5, r1, #1
 80024fc:	005f      	lsls	r7, r3, #1
 80024fe:	b500      	push	{lr}
 8002500:	0b24      	lsrs	r4, r4, #12
 8002502:	0d6d      	lsrs	r5, r5, #21
 8002504:	0d7f      	lsrs	r7, r7, #21
 8002506:	42b5      	cmp	r5, r6
 8002508:	d00b      	beq.n	8002522 <__aeabi_dcmpun+0x36>
 800250a:	4908      	ldr	r1, [pc, #32]	@ (800252c <__aeabi_dcmpun+0x40>)
 800250c:	2000      	movs	r0, #0
 800250e:	428f      	cmp	r7, r1
 8002510:	d104      	bne.n	800251c <__aeabi_dcmpun+0x30>
 8002512:	4646      	mov	r6, r8
 8002514:	4316      	orrs	r6, r2
 8002516:	0030      	movs	r0, r6
 8002518:	1e43      	subs	r3, r0, #1
 800251a:	4198      	sbcs	r0, r3
 800251c:	bc80      	pop	{r7}
 800251e:	46b8      	mov	r8, r7
 8002520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002522:	4304      	orrs	r4, r0
 8002524:	2001      	movs	r0, #1
 8002526:	2c00      	cmp	r4, #0
 8002528:	d1f8      	bne.n	800251c <__aeabi_dcmpun+0x30>
 800252a:	e7ee      	b.n	800250a <__aeabi_dcmpun+0x1e>
 800252c:	000007ff 	.word	0x000007ff

08002530 <__aeabi_d2iz>:
 8002530:	000b      	movs	r3, r1
 8002532:	0002      	movs	r2, r0
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4d16      	ldr	r5, [pc, #88]	@ (8002590 <__aeabi_d2iz+0x60>)
 8002538:	030c      	lsls	r4, r1, #12
 800253a:	b082      	sub	sp, #8
 800253c:	0049      	lsls	r1, r1, #1
 800253e:	2000      	movs	r0, #0
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	0b24      	lsrs	r4, r4, #12
 8002546:	0d49      	lsrs	r1, r1, #21
 8002548:	0fde      	lsrs	r6, r3, #31
 800254a:	42a9      	cmp	r1, r5
 800254c:	dd04      	ble.n	8002558 <__aeabi_d2iz+0x28>
 800254e:	4811      	ldr	r0, [pc, #68]	@ (8002594 <__aeabi_d2iz+0x64>)
 8002550:	4281      	cmp	r1, r0
 8002552:	dd03      	ble.n	800255c <__aeabi_d2iz+0x2c>
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <__aeabi_d2iz+0x68>)
 8002556:	18f0      	adds	r0, r6, r3
 8002558:	b002      	add	sp, #8
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	2080      	movs	r0, #128	@ 0x80
 800255e:	0340      	lsls	r0, r0, #13
 8002560:	4320      	orrs	r0, r4
 8002562:	4c0e      	ldr	r4, [pc, #56]	@ (800259c <__aeabi_d2iz+0x6c>)
 8002564:	1a64      	subs	r4, r4, r1
 8002566:	2c1f      	cmp	r4, #31
 8002568:	dd08      	ble.n	800257c <__aeabi_d2iz+0x4c>
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <__aeabi_d2iz+0x70>)
 800256c:	1a5b      	subs	r3, r3, r1
 800256e:	40d8      	lsrs	r0, r3
 8002570:	0003      	movs	r3, r0
 8002572:	4258      	negs	r0, r3
 8002574:	2e00      	cmp	r6, #0
 8002576:	d1ef      	bne.n	8002558 <__aeabi_d2iz+0x28>
 8002578:	0018      	movs	r0, r3
 800257a:	e7ed      	b.n	8002558 <__aeabi_d2iz+0x28>
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <__aeabi_d2iz+0x74>)
 800257e:	9a00      	ldr	r2, [sp, #0]
 8002580:	469c      	mov	ip, r3
 8002582:	0003      	movs	r3, r0
 8002584:	4461      	add	r1, ip
 8002586:	408b      	lsls	r3, r1
 8002588:	40e2      	lsrs	r2, r4
 800258a:	4313      	orrs	r3, r2
 800258c:	e7f1      	b.n	8002572 <__aeabi_d2iz+0x42>
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	000003fe 	.word	0x000003fe
 8002594:	0000041d 	.word	0x0000041d
 8002598:	7fffffff 	.word	0x7fffffff
 800259c:	00000433 	.word	0x00000433
 80025a0:	00000413 	.word	0x00000413
 80025a4:	fffffbed 	.word	0xfffffbed

080025a8 <__aeabi_i2d>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d016      	beq.n	80025dc <__aeabi_i2d+0x34>
 80025ae:	17c3      	asrs	r3, r0, #31
 80025b0:	18c5      	adds	r5, r0, r3
 80025b2:	405d      	eors	r5, r3
 80025b4:	0fc4      	lsrs	r4, r0, #31
 80025b6:	0028      	movs	r0, r5
 80025b8:	f000 f890 	bl	80026dc <__clzsi2>
 80025bc:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <__aeabi_i2d+0x58>)
 80025be:	1a1b      	subs	r3, r3, r0
 80025c0:	055b      	lsls	r3, r3, #21
 80025c2:	0d5b      	lsrs	r3, r3, #21
 80025c4:	280a      	cmp	r0, #10
 80025c6:	dc14      	bgt.n	80025f2 <__aeabi_i2d+0x4a>
 80025c8:	0002      	movs	r2, r0
 80025ca:	002e      	movs	r6, r5
 80025cc:	3215      	adds	r2, #21
 80025ce:	4096      	lsls	r6, r2
 80025d0:	220b      	movs	r2, #11
 80025d2:	1a12      	subs	r2, r2, r0
 80025d4:	40d5      	lsrs	r5, r2
 80025d6:	032d      	lsls	r5, r5, #12
 80025d8:	0b2d      	lsrs	r5, r5, #12
 80025da:	e003      	b.n	80025e4 <__aeabi_i2d+0x3c>
 80025dc:	2400      	movs	r4, #0
 80025de:	2300      	movs	r3, #0
 80025e0:	2500      	movs	r5, #0
 80025e2:	2600      	movs	r6, #0
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	432b      	orrs	r3, r5
 80025e8:	07e4      	lsls	r4, r4, #31
 80025ea:	4323      	orrs	r3, r4
 80025ec:	0030      	movs	r0, r6
 80025ee:	0019      	movs	r1, r3
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
 80025f2:	380b      	subs	r0, #11
 80025f4:	4085      	lsls	r5, r0
 80025f6:	032d      	lsls	r5, r5, #12
 80025f8:	2600      	movs	r6, #0
 80025fa:	0b2d      	lsrs	r5, r5, #12
 80025fc:	e7f2      	b.n	80025e4 <__aeabi_i2d+0x3c>
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	0000041e 	.word	0x0000041e

08002604 <__aeabi_ui2d>:
 8002604:	b510      	push	{r4, lr}
 8002606:	1e04      	subs	r4, r0, #0
 8002608:	d010      	beq.n	800262c <__aeabi_ui2d+0x28>
 800260a:	f000 f867 	bl	80026dc <__clzsi2>
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <__aeabi_ui2d+0x44>)
 8002610:	1a1b      	subs	r3, r3, r0
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	0d5b      	lsrs	r3, r3, #21
 8002616:	280a      	cmp	r0, #10
 8002618:	dc0f      	bgt.n	800263a <__aeabi_ui2d+0x36>
 800261a:	220b      	movs	r2, #11
 800261c:	0021      	movs	r1, r4
 800261e:	1a12      	subs	r2, r2, r0
 8002620:	40d1      	lsrs	r1, r2
 8002622:	3015      	adds	r0, #21
 8002624:	030a      	lsls	r2, r1, #12
 8002626:	4084      	lsls	r4, r0
 8002628:	0b12      	lsrs	r2, r2, #12
 800262a:	e001      	b.n	8002630 <__aeabi_ui2d+0x2c>
 800262c:	2300      	movs	r3, #0
 800262e:	2200      	movs	r2, #0
 8002630:	051b      	lsls	r3, r3, #20
 8002632:	4313      	orrs	r3, r2
 8002634:	0020      	movs	r0, r4
 8002636:	0019      	movs	r1, r3
 8002638:	bd10      	pop	{r4, pc}
 800263a:	0022      	movs	r2, r4
 800263c:	380b      	subs	r0, #11
 800263e:	4082      	lsls	r2, r0
 8002640:	0312      	lsls	r2, r2, #12
 8002642:	2400      	movs	r4, #0
 8002644:	0b12      	lsrs	r2, r2, #12
 8002646:	e7f3      	b.n	8002630 <__aeabi_ui2d+0x2c>
 8002648:	0000041e 	.word	0x0000041e

0800264c <__aeabi_f2d>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	0242      	lsls	r2, r0, #9
 8002650:	0043      	lsls	r3, r0, #1
 8002652:	0fc4      	lsrs	r4, r0, #31
 8002654:	20fe      	movs	r0, #254	@ 0xfe
 8002656:	0e1b      	lsrs	r3, r3, #24
 8002658:	1c59      	adds	r1, r3, #1
 800265a:	0a55      	lsrs	r5, r2, #9
 800265c:	4208      	tst	r0, r1
 800265e:	d00c      	beq.n	800267a <__aeabi_f2d+0x2e>
 8002660:	21e0      	movs	r1, #224	@ 0xe0
 8002662:	0089      	lsls	r1, r1, #2
 8002664:	468c      	mov	ip, r1
 8002666:	076d      	lsls	r5, r5, #29
 8002668:	0b12      	lsrs	r2, r2, #12
 800266a:	4463      	add	r3, ip
 800266c:	051b      	lsls	r3, r3, #20
 800266e:	4313      	orrs	r3, r2
 8002670:	07e4      	lsls	r4, r4, #31
 8002672:	4323      	orrs	r3, r4
 8002674:	0028      	movs	r0, r5
 8002676:	0019      	movs	r1, r3
 8002678:	bd70      	pop	{r4, r5, r6, pc}
 800267a:	2b00      	cmp	r3, #0
 800267c:	d114      	bne.n	80026a8 <__aeabi_f2d+0x5c>
 800267e:	2d00      	cmp	r5, #0
 8002680:	d01b      	beq.n	80026ba <__aeabi_f2d+0x6e>
 8002682:	0028      	movs	r0, r5
 8002684:	f000 f82a 	bl	80026dc <__clzsi2>
 8002688:	280a      	cmp	r0, #10
 800268a:	dc1c      	bgt.n	80026c6 <__aeabi_f2d+0x7a>
 800268c:	230b      	movs	r3, #11
 800268e:	002a      	movs	r2, r5
 8002690:	1a1b      	subs	r3, r3, r0
 8002692:	40da      	lsrs	r2, r3
 8002694:	0003      	movs	r3, r0
 8002696:	3315      	adds	r3, #21
 8002698:	409d      	lsls	r5, r3
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <__aeabi_f2d+0x88>)
 800269c:	0312      	lsls	r2, r2, #12
 800269e:	1a1b      	subs	r3, r3, r0
 80026a0:	055b      	lsls	r3, r3, #21
 80026a2:	0b12      	lsrs	r2, r2, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e7e1      	b.n	800266c <__aeabi_f2d+0x20>
 80026a8:	2d00      	cmp	r5, #0
 80026aa:	d009      	beq.n	80026c0 <__aeabi_f2d+0x74>
 80026ac:	0b13      	lsrs	r3, r2, #12
 80026ae:	2280      	movs	r2, #128	@ 0x80
 80026b0:	0312      	lsls	r2, r2, #12
 80026b2:	431a      	orrs	r2, r3
 80026b4:	076d      	lsls	r5, r5, #29
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <__aeabi_f2d+0x8c>)
 80026b8:	e7d8      	b.n	800266c <__aeabi_f2d+0x20>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	e7d5      	b.n	800266c <__aeabi_f2d+0x20>
 80026c0:	2200      	movs	r2, #0
 80026c2:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <__aeabi_f2d+0x8c>)
 80026c4:	e7d2      	b.n	800266c <__aeabi_f2d+0x20>
 80026c6:	0003      	movs	r3, r0
 80026c8:	002a      	movs	r2, r5
 80026ca:	3b0b      	subs	r3, #11
 80026cc:	409a      	lsls	r2, r3
 80026ce:	2500      	movs	r5, #0
 80026d0:	e7e3      	b.n	800269a <__aeabi_f2d+0x4e>
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	00000389 	.word	0x00000389
 80026d8:	000007ff 	.word	0x000007ff

080026dc <__clzsi2>:
 80026dc:	211c      	movs	r1, #28
 80026de:	2301      	movs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	4298      	cmp	r0, r3
 80026e4:	d301      	bcc.n	80026ea <__clzsi2+0xe>
 80026e6:	0c00      	lsrs	r0, r0, #16
 80026e8:	3910      	subs	r1, #16
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	4298      	cmp	r0, r3
 80026ee:	d301      	bcc.n	80026f4 <__clzsi2+0x18>
 80026f0:	0a00      	lsrs	r0, r0, #8
 80026f2:	3908      	subs	r1, #8
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	4298      	cmp	r0, r3
 80026f8:	d301      	bcc.n	80026fe <__clzsi2+0x22>
 80026fa:	0900      	lsrs	r0, r0, #4
 80026fc:	3904      	subs	r1, #4
 80026fe:	a202      	add	r2, pc, #8	@ (adr r2, 8002708 <__clzsi2+0x2c>)
 8002700:	5c10      	ldrb	r0, [r2, r0]
 8002702:	1840      	adds	r0, r0, r1
 8002704:	4770      	bx	lr
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	02020304 	.word	0x02020304
 800270c:	01010101 	.word	0x01010101
	...

08002718 <__clzdi2>:
 8002718:	b510      	push	{r4, lr}
 800271a:	2900      	cmp	r1, #0
 800271c:	d103      	bne.n	8002726 <__clzdi2+0xe>
 800271e:	f7ff ffdd 	bl	80026dc <__clzsi2>
 8002722:	3020      	adds	r0, #32
 8002724:	e002      	b.n	800272c <__clzdi2+0x14>
 8002726:	0008      	movs	r0, r1
 8002728:	f7ff ffd8 	bl	80026dc <__clzsi2>
 800272c:	bd10      	pop	{r4, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)

08002730 <DHT11_Start>:
void Set_PinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void Set_PinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

/*---------------------------------- DHT11 -------------------------------------*/

void DHT11_Start(void){
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	Set_PinInput(DHT11_PORT, DHT11_PIN);
 8002734:	23a0      	movs	r3, #160	@ 0xa0
 8002736:	05db      	lsls	r3, r3, #23
 8002738:	2102      	movs	r1, #2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fa50 	bl	8002be0 <Set_PinInput>

	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8002740:	23a0      	movs	r3, #160	@ 0xa0
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	2200      	movs	r2, #0
 8002746:	2102      	movs	r1, #2
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fefa 	bl	8003542 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 800274e:	2012      	movs	r0, #18
 8002750:	f000 fc8c 	bl	800306c <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8002754:	23a0      	movs	r3, #160	@ 0xa0
 8002756:	05db      	lsls	r3, r3, #23
 8002758:	2201      	movs	r2, #1
 800275a:	2102      	movs	r1, #2
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fef0 	bl	8003542 <HAL_GPIO_WritePin>
	Delay_MicroSeconds(30);
 8002762:	201e      	movs	r0, #30
 8002764:	f000 f9fe 	bl	8002b64 <Delay_MicroSeconds>

	Set_PinOutput(DHT11_PORT, DHT11_PIN);
 8002768:	23a0      	movs	r3, #160	@ 0xa0
 800276a:	05db      	lsls	r3, r3, #23
 800276c:	2102      	movs	r1, #2
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fa12 	bl	8002b98 <Set_PinOutput>
}
 8002774:	46c0      	nop			@ (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse(void){
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
	uint8_t Response;
	Delay_MicroSeconds(40);
 8002780:	2028      	movs	r0, #40	@ 0x28
 8002782:	f000 f9ef 	bl	8002b64 <Delay_MicroSeconds>

	if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)){
 8002786:	23a0      	movs	r3, #160	@ 0xa0
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	2102      	movs	r1, #2
 800278c:	0018      	movs	r0, r3
 800278e:	f000 febb 	bl	8003508 <HAL_GPIO_ReadPin>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d111      	bne.n	80027ba <DHT11_CheckResponse+0x40>
		Delay_MicroSeconds(80);
 8002796:	2050      	movs	r0, #80	@ 0x50
 8002798:	f000 f9e4 	bl	8002b64 <Delay_MicroSeconds>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 800279c:	23a0      	movs	r3, #160	@ 0xa0
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	2102      	movs	r1, #2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 feb0 	bl	8003508 <HAL_GPIO_ReadPin>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d003      	beq.n	80027b4 <DHT11_CheckResponse+0x3a>
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e002      	b.n	80027ba <DHT11_CheckResponse+0x40>
		else Response = -1; // 255
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	22ff      	movs	r2, #255	@ 0xff
 80027b8:	701a      	strb	r2, [r3, #0]
	}

	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	23a0      	movs	r3, #160	@ 0xa0
 80027be:	05db      	lsls	r3, r3, #23
 80027c0:	2102      	movs	r1, #2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 fea0 	bl	8003508 <HAL_GPIO_ReadPin>
 80027c8:	1e03      	subs	r3, r0, #0
 80027ca:	d1f7      	bne.n	80027bc <DHT11_CheckResponse+0x42>
	return Response;
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <DHT11_Read>:

uint8_t DHT11_Read(void){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
	int response = 0, i;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]

	for(i = 0; i < 8; i++){
 80027e2:	2300      	movs	r3, #0
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	e034      	b.n	8002852 <DHT11_Read+0x7a>
		while(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	23a0      	movs	r3, #160	@ 0xa0
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	2102      	movs	r1, #2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fe89 	bl	8003508 <HAL_GPIO_ReadPin>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d0f7      	beq.n	80027ea <DHT11_Read+0x12>
		Delay_MicroSeconds(40);
 80027fa:	2028      	movs	r0, #40	@ 0x28
 80027fc:	f000 f9b2 	bl	8002b64 <Delay_MicroSeconds>

		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) response &= ~(1 << (7 - i));
 8002800:	23a0      	movs	r3, #160	@ 0xa0
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	2102      	movs	r1, #2
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fe7e 	bl	8003508 <HAL_GPIO_ReadPin>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d10a      	bne.n	8002826 <DHT11_Read+0x4e>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2207      	movs	r2, #7
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2201      	movs	r2, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	0013      	movs	r3, r2
 800281c:	43da      	mvns	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4013      	ands	r3, r2
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	e009      	b.n	800283a <DHT11_Read+0x62>
		else response |= ~(1 <<(7 - i));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2207      	movs	r2, #7
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	43db      	mvns	r3, r3
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4313      	orrs	r3, r2
 8002838:	607b      	str	r3, [r7, #4]

		while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	23a0      	movs	r3, #160	@ 0xa0
 800283e:	05db      	lsls	r3, r3, #23
 8002840:	2102      	movs	r1, #2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fe60 	bl	8003508 <HAL_GPIO_ReadPin>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d1f7      	bne.n	800283c <DHT11_Read+0x64>
	for(i = 0; i < 8; i++){
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b07      	cmp	r3, #7
 8002856:	ddc7      	ble.n	80027e8 <DHT11_Read+0x10>
	}

	return response;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	b2db      	uxtb	r3, r3
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}

08002864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002868:	f000 fb90 	bl	8002f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800286c:	f000 f870 	bl	8002950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002870:	f000 f942 	bl	8002af8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002874:	f000 f8d4 	bl	8002a20 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002878:	f000 f90e 	bl	8002a98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800287c:	4b29      	ldr	r3, [pc, #164]	@ (8002924 <main+0xc0>)
 800287e:	0018      	movs	r0, r3
 8002880:	f001 fe12 	bl	80044a8 <HAL_TIM_Base_Start>
  DHT11_Start();
 8002884:	f7ff ff54 	bl	8002730 <DHT11_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  Presence = DHT11_CheckResponse();
 8002888:	f7ff ff77 	bl	800277a <DHT11_CheckResponse>
 800288c:	0003      	movs	r3, r0
 800288e:	001a      	movs	r2, r3
 8002890:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <main+0xc4>)
 8002892:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read();
 8002894:	f7ff ffa0 	bl	80027d8 <DHT11_Read>
 8002898:	0003      	movs	r3, r0
 800289a:	001a      	movs	r2, r3
 800289c:	4b23      	ldr	r3, [pc, #140]	@ (800292c <main+0xc8>)
 800289e:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read();
 80028a0:	f7ff ff9a 	bl	80027d8 <DHT11_Read>
 80028a4:	0003      	movs	r3, r0
 80028a6:	001a      	movs	r2, r3
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <main+0xcc>)
 80028aa:	701a      	strb	r2, [r3, #0]

	  Tmp_byte1 = DHT11_Read();
 80028ac:	f7ff ff94 	bl	80027d8 <DHT11_Read>
 80028b0:	0003      	movs	r3, r0
 80028b2:	001a      	movs	r2, r3
 80028b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <main+0xd0>)
 80028b6:	701a      	strb	r2, [r3, #0]
	  Tmp_byte2 = DHT11_Read();
 80028b8:	f7ff ff8e 	bl	80027d8 <DHT11_Read>
 80028bc:	0003      	movs	r3, r0
 80028be:	001a      	movs	r2, r3
 80028c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <main+0xd4>)
 80028c2:	701a      	strb	r2, [r3, #0]

	  SUM = DHT11_Read();
 80028c4:	f7ff ff88 	bl	80027d8 <DHT11_Read>
 80028c8:	0003      	movs	r3, r0
 80028ca:	001a      	movs	r2, r3
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <main+0xd8>)
 80028ce:	801a      	strh	r2, [r3, #0]

	  TEMP = Tmp_byte1;
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <main+0xd0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	001a      	movs	r2, r3
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <main+0xdc>)
 80028d8:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 80028da:	4b14      	ldr	r3, [pc, #80]	@ (800292c <main+0xc8>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	001a      	movs	r2, r3
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <main+0xe0>)
 80028e2:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 80028e4:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <main+0xdc>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7fd fec9 	bl	8000680 <__aeabi_ui2f>
 80028ee:	1c02      	adds	r2, r0, #0
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <main+0xe4>)
 80028f2:	601a      	str	r2, [r3, #0]
	  Humidity = (float) RH;
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <main+0xe0>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fd fec1 	bl	8000680 <__aeabi_ui2f>
 80028fe:	1c02      	adds	r2, r0, #0
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <main+0xe8>)
 8002902:	601a      	str	r2, [r3, #0]

	  SendValues(Temperature, Humidity);
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <main+0xe4>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <main+0xe8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c19      	adds	r1, r3, #0
 800290e:	1c10      	adds	r0, r2, #0
 8002910:	f000 f98a 	bl	8002c28 <SendValues>
	  HAL_Delay(1000);
 8002914:	23fa      	movs	r3, #250	@ 0xfa
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fba7 	bl	800306c <HAL_Delay>
	  Presence = DHT11_CheckResponse();
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	e7b2      	b.n	8002888 <main+0x24>
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	200001f0 	.word	0x200001f0
 8002928:	200002cc 	.word	0x200002cc
 800292c:	200002c8 	.word	0x200002c8
 8002930:	200002c9 	.word	0x200002c9
 8002934:	200002ca 	.word	0x200002ca
 8002938:	200002cb 	.word	0x200002cb
 800293c:	200002b8 	.word	0x200002b8
 8002940:	200002bc 	.word	0x200002bc
 8002944:	200002ba 	.word	0x200002ba
 8002948:	200002c0 	.word	0x200002c0
 800294c:	200002c4 	.word	0x200002c4

08002950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b09d      	sub	sp, #116	@ 0x74
 8002954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002956:	2438      	movs	r4, #56	@ 0x38
 8002958:	193b      	adds	r3, r7, r4
 800295a:	0018      	movs	r0, r3
 800295c:	2338      	movs	r3, #56	@ 0x38
 800295e:	001a      	movs	r2, r3
 8002960:	2100      	movs	r1, #0
 8002962:	f003 f9d1 	bl	8005d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002966:	2324      	movs	r3, #36	@ 0x24
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	0018      	movs	r0, r3
 800296c:	2314      	movs	r3, #20
 800296e:	001a      	movs	r2, r3
 8002970:	2100      	movs	r1, #0
 8002972:	f003 f9c9 	bl	8005d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002976:	003b      	movs	r3, r7
 8002978:	0018      	movs	r0, r3
 800297a:	2324      	movs	r3, #36	@ 0x24
 800297c:	001a      	movs	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	f003 f9c2 	bl	8005d08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002984:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <SystemClock_Config+0xc8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a24      	ldr	r2, [pc, #144]	@ (8002a1c <SystemClock_Config+0xcc>)
 800298a:	401a      	ands	r2, r3
 800298c:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <SystemClock_Config+0xc8>)
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0109      	lsls	r1, r1, #4
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002996:	0021      	movs	r1, r4
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2202      	movs	r2, #2
 800299c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	2201      	movs	r2, #1
 80029a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	2210      	movs	r2, #16
 80029a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	2200      	movs	r2, #0
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fde2 	bl	800357c <HAL_RCC_OscConfig>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80029bc:	f000 f968 	bl	8002c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c0:	2124      	movs	r1, #36	@ 0x24
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	220f      	movs	r2, #15
 80029c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2201      	movs	r2, #1
 80029cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2100      	movs	r1, #0
 80029e4:	0018      	movs	r0, r3
 80029e6:	f001 f98d 	bl	8003d04 <HAL_RCC_ClockConfig>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80029ee:	f000 f94f 	bl	8002c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f2:	003b      	movs	r3, r7
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029f8:	003b      	movs	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029fe:	003b      	movs	r3, r7
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fb83 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d001      	beq.n	8002a0e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002a0a:	f000 f941 	bl	8002c90 <Error_Handler>
  }
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b01d      	add	sp, #116	@ 0x74
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	ffffe7ff 	.word	0xffffe7ff

08002a20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a26:	003b      	movs	r3, r7
 8002a28:	0018      	movs	r0, r3
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	001a      	movs	r2, r3
 8002a2e:	2100      	movs	r1, #0
 8002a30:	f003 f96a 	bl	8005d08 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a36:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <MX_TIM6_Init+0x70>)
 8002a38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF-1;
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a48:	4a12      	ldr	r2, [pc, #72]	@ (8002a94 <MX_TIM6_Init+0x74>)
 8002a4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a54:	0018      	movs	r0, r3
 8002a56:	f001 fce7 	bl	8004428 <HAL_TIM_Base_Init>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a5e:	f000 f917 	bl	8002c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	003b      	movs	r3, r7
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	003b      	movs	r3, r7
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a6e:	003a      	movs	r2, r7
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <MX_TIM6_Init+0x6c>)
 8002a72:	0011      	movs	r1, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 fdb5 	bl	80045e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a7e:	f000 f907 	bl	8002c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	200001f0 	.word	0x200001f0
 8002a90:	40001000 	.word	0x40001000
 8002a94:	0000fffe 	.word	0x0000fffe

08002a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a9c:	4b14      	ldr	r3, [pc, #80]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002a9e:	4a15      	ldr	r2, [pc, #84]	@ (8002af4 <MX_USART1_UART_Init+0x5c>)
 8002aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002aa2:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002aa4:	2296      	movs	r2, #150	@ 0x96
 8002aa6:	0192      	lsls	r2, r2, #6
 8002aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002abe:	220c      	movs	r2, #12
 8002ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ada:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <MX_USART1_UART_Init+0x58>)
 8002adc:	0018      	movs	r0, r3
 8002ade:	f001 fdd9 	bl	8004694 <HAL_UART_Init>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d001      	beq.n	8002aea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ae6:	f000 f8d3 	bl	8002c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000230 	.word	0x20000230
 8002af4:	40013800 	.word	0x40013800

08002af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	0018      	movs	r0, r3
 8002b02:	2314      	movs	r3, #20
 8002b04:	001a      	movs	r2, r3
 8002b06:	2100      	movs	r1, #0
 8002b08:	f003 f8fe 	bl	8005d08 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <MX_GPIO_Init+0x68>)
 8002b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <MX_GPIO_Init+0x68>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <MX_GPIO_Init+0x68>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_Data_GPIO_Port, DHT11_Data_Pin, GPIO_PIN_RESET);
 8002b24:	23a0      	movs	r3, #160	@ 0xa0
 8002b26:	05db      	lsls	r3, r3, #23
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fd08 	bl	8003542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Data_Pin */
  GPIO_InitStruct.Pin = DHT11_Data_Pin;
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_Data_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	1d3a      	adds	r2, r7, #4
 8002b4c:	23a0      	movs	r3, #160	@ 0xa0
 8002b4e:	05db      	lsls	r3, r3, #23
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fb62 	bl	800321c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b006      	add	sp, #24
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <Delay_MicroSeconds>:

/* USER CODE BEGIN 4 */
void Delay_MicroSeconds(uint16_t time){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	1dbb      	adds	r3, r7, #6
 8002b6e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <Delay_MicroSeconds+0x30>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim6)) < time);
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <Delay_MicroSeconds+0x30>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b80:	1dbb      	adds	r3, r7, #6
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d3f8      	bcc.n	8002b7a <Delay_MicroSeconds+0x16>
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b002      	add	sp, #8
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	200001f0 	.word	0x200001f0

08002b98 <Set_PinOutput>:

void Set_PinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	@ 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	1cbb      	adds	r3, r7, #2
 8002ba4:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba6:	240c      	movs	r4, #12
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	0018      	movs	r0, r3
 8002bac:	2314      	movs	r3, #20
 8002bae:	001a      	movs	r2, r3
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f003 f8a9 	bl	8005d08 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002bb6:	1cbb      	adds	r3, r7, #2
 8002bb8:	881a      	ldrh	r2, [r3, #0]
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	193b      	adds	r3, r7, r4
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8002bca:	193a      	adds	r2, r7, r4
 8002bcc:	23a0      	movs	r3, #160	@ 0xa0
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 fb22 	bl	800321c <HAL_GPIO_Init>
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b009      	add	sp, #36	@ 0x24
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <Set_PinInput>:

void Set_PinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	000a      	movs	r2, r1
 8002bea:	1cbb      	adds	r3, r7, #2
 8002bec:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bee:	240c      	movs	r4, #12
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	2314      	movs	r3, #20
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f003 f885 	bl	8005d08 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	881a      	ldrh	r2, [r3, #0]
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8002c12:	193a      	adds	r2, r7, r4
 8002c14:	23a0      	movs	r3, #160	@ 0xa0
 8002c16:	05db      	lsls	r3, r3, #23
 8002c18:	0011      	movs	r1, r2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fafe 	bl	800321c <HAL_GPIO_Init>
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b009      	add	sp, #36	@ 0x24
 8002c26:	bd90      	pop	{r4, r7, pc}

08002c28 <SendValues>:

void SendValues(float Temp, float Rh){
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2a:	b08d      	sub	sp, #52	@ 0x34
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	char buffer[30] = {0};
 8002c32:	2608      	movs	r6, #8
 8002c34:	19bb      	adds	r3, r7, r6
 8002c36:	0018      	movs	r0, r3
 8002c38:	231e      	movs	r3, #30
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f003 f863 	bl	8005d08 <memset>

	sprintf(buffer, "TEMP: %.2f C\nRH: %.2f %%", Temp, Rh);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fd02 	bl	800264c <__aeabi_f2d>
 8002c48:	0004      	movs	r4, r0
 8002c4a:	000d      	movs	r5, r1
 8002c4c:	6838      	ldr	r0, [r7, #0]
 8002c4e:	f7ff fcfd 	bl	800264c <__aeabi_f2d>
 8002c52:	0002      	movs	r2, r0
 8002c54:	000b      	movs	r3, r1
 8002c56:	490c      	ldr	r1, [pc, #48]	@ (8002c88 <SendValues+0x60>)
 8002c58:	19b8      	adds	r0, r7, r6
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	0022      	movs	r2, r4
 8002c60:	002b      	movs	r3, r5
 8002c62:	f002 ffe3 	bl	8005c2c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 100);
 8002c66:	0034      	movs	r4, r6
 8002c68:	19bb      	adds	r3, r7, r6
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7fd fa4c 	bl	8000108 <strlen>
 8002c70:	0003      	movs	r3, r0
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	1939      	adds	r1, r7, r4
 8002c76:	4805      	ldr	r0, [pc, #20]	@ (8002c8c <SendValues+0x64>)
 8002c78:	2364      	movs	r3, #100	@ 0x64
 8002c7a:	f001 fd5f 	bl	800473c <HAL_UART_Transmit>
}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b00b      	add	sp, #44	@ 0x2c
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	08007fe0 	.word	0x08007fe0
 8002c8c:	20000230 	.word	0x20000230

08002c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c94:	b672      	cpsid	i
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	e7fd      	b.n	8002c98 <Error_Handler+0x8>

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca0:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <HAL_MspInit+0x24>)
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_MspInit+0x24>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <HAL_MspInit+0x24>)
 8002cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <HAL_MspInit+0x24>)
 8002cb2:	2180      	movs	r1, #128	@ 0x80
 8002cb4:	0549      	lsls	r1, r1, #21
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a06      	ldr	r2, [pc, #24]	@ (8002cec <HAL_TIM_Base_MspInit+0x28>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d105      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x1e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2c>)
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2c>)
 8002cdc:	2110      	movs	r1, #16
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	40001000 	.word	0x40001000
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	240c      	movs	r4, #12
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	0018      	movs	r0, r3
 8002d02:	2314      	movs	r3, #20
 8002d04:	001a      	movs	r2, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	f002 fffe 	bl	8005d08 <memset>
  if(huart->Instance==USART1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <HAL_UART_MspInit+0x80>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d12a      	bne.n	8002d6c <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d16:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <HAL_UART_MspInit+0x84>)
 8002d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_UART_MspInit+0x84>)
 8002d1c:	2180      	movs	r1, #128	@ 0x80
 8002d1e:	01c9      	lsls	r1, r1, #7
 8002d20:	430a      	orrs	r2, r1
 8002d22:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_UART_MspInit+0x84>)
 8002d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_UART_MspInit+0x84>)
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_UART_MspInit+0x84>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	2201      	movs	r2, #1
 8002d36:	4013      	ands	r3, r2
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	22c0      	movs	r2, #192	@ 0xc0
 8002d40:	00d2      	lsls	r2, r2, #3
 8002d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	0021      	movs	r1, r4
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	2202      	movs	r2, #2
 8002d4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	2203      	movs	r2, #3
 8002d56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	187a      	adds	r2, r7, r1
 8002d60:	23a0      	movs	r3, #160	@ 0xa0
 8002d62:	05db      	lsls	r3, r3, #23
 8002d64:	0011      	movs	r1, r2
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 fa58 	bl	800321c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b009      	add	sp, #36	@ 0x24
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40021000 	.word	0x40021000

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d80:	46c0      	nop			@ (mov r8, r8)
 8002d82:	e7fd      	b.n	8002d80 <NMI_Handler+0x4>

08002d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	e7fd      	b.n	8002d88 <HardFault_Handler+0x4>

08002d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da4:	f000 f946 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	af00      	add	r7, sp, #0
  return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_kill>:

int _kill(int pid, int sig)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dc4:	f002 fffa 	bl	8005dbc <__errno>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	2216      	movs	r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
  return -1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	425b      	negs	r3, r3
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_exit>:

void _exit (int status)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002de2:	2301      	movs	r3, #1
 8002de4:	425a      	negs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff ffe5 	bl	8002dba <_kill>
  while (1) {}    /* Make sure we hang here */
 8002df0:	46c0      	nop			@ (mov r8, r8)
 8002df2:	e7fd      	b.n	8002df0 <_exit+0x16>

08002df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e00a      	b.n	8002e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e06:	e000      	b.n	8002e0a <_read+0x16>
 8002e08:	bf00      	nop
 8002e0a:	0001      	movs	r1, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	60ba      	str	r2, [r7, #8]
 8002e12:	b2ca      	uxtb	r2, r1
 8002e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	dbf0      	blt.n	8002e06 <_read+0x12>
  }

  return len;
 8002e24:	687b      	ldr	r3, [r7, #4]
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b006      	add	sp, #24
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e009      	b.n	8002e54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	60ba      	str	r2, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	e000      	b.n	8002e4e <_write+0x20>
 8002e4c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	3301      	adds	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dbf1      	blt.n	8002e40 <_write+0x12>
  }
  return len;
 8002e5c:	687b      	ldr	r3, [r7, #4]
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b006      	add	sp, #24
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_close>:

int _close(int file)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	425b      	negs	r3, r3
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	0192      	lsls	r2, r2, #6
 8002e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_isatty>:

int _isatty(int file)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f002 ff64 	bl	8005dbc <__errno>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	425b      	negs	r3, r3
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	18d2      	adds	r2, r2, r3
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <_sbrk+0x64>)
 8002f10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20002000 	.word	0x20002000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	200002d0 	.word	0x200002d0
 8002f28:	20000428 	.word	0x20000428

08002f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002f38:	480d      	ldr	r0, [pc, #52]	@ (8002f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f3c:	f7ff fff6 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f40:	480c      	ldr	r0, [pc, #48]	@ (8002f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f42:	490d      	ldr	r1, [pc, #52]	@ (8002f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <LoopForever+0xe>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f58:	4c0a      	ldr	r4, [pc, #40]	@ (8002f84 <LoopForever+0x16>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f66:	f002 ff2f 	bl	8005dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6a:	f7ff fc7b 	bl	8002864 <main>

08002f6e <LoopForever>:

LoopForever:
    b LoopForever
 8002f6e:	e7fe      	b.n	8002f6e <LoopForever>
  ldr   r0, =_estack
 8002f70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002f7c:	0800842c 	.word	0x0800842c
  ldr r2, =_sbss
 8002f80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002f84:	20000424 	.word	0x20000424

08002f88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f88:	e7fe      	b.n	8002f88 <ADC1_COMP_IRQHandler>
	...

08002f8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_Init+0x3c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_Init+0x3c>)
 8002f9e:	2140      	movs	r1, #64	@ 0x40
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f000 f811 	bl	8002fcc <HAL_InitTick>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e001      	b.n	8002fba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fb6:	f7ff fe71 	bl	8002c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	40022000 	.word	0x40022000

08002fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <HAL_InitTick+0x5c>)
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_InitTick+0x60>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	0019      	movs	r1, r3
 8002fde:	23fa      	movs	r3, #250	@ 0xfa
 8002fe0:	0098      	lsls	r0, r3, #2
 8002fe2:	f7fd f8ad 	bl	8000140 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	0019      	movs	r1, r3
 8002fea:	0020      	movs	r0, r4
 8002fec:	f7fd f8a8 	bl	8000140 <__udivsi3>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f905 	bl	8003202 <HAL_SYSTICK_Config>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e00f      	b.n	8003020 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d80b      	bhi.n	800301e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	2301      	movs	r3, #1
 800300a:	425b      	negs	r3, r3
 800300c:	2200      	movs	r2, #0
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f8e2 	bl	80031d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_InitTick+0x64>)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b003      	add	sp, #12
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	20000000 	.word	0x20000000
 800302c:	20000008 	.word	0x20000008
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_IncTick+0x1c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	001a      	movs	r2, r3
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_IncTick+0x20>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	18d2      	adds	r2, r2, r3
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_IncTick+0x20>)
 8003046:	601a      	str	r2, [r3, #0]
}
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	20000008 	.word	0x20000008
 8003054:	200002d4 	.word	0x200002d4

08003058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  return uwTick;
 800305c:	4b02      	ldr	r3, [pc, #8]	@ (8003068 <HAL_GetTick+0x10>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	200002d4 	.word	0x200002d4

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff fff0 	bl	8003058 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3301      	adds	r3, #1
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	001a      	movs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	189b      	adds	r3, r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	f7ff ffe0 	bl	8003058 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	20000008 	.word	0x20000008

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	0002      	movs	r2, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80030c8:	d828      	bhi.n	800311c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003188 <__NVIC_SetPriority+0xd4>)
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	33c0      	adds	r3, #192	@ 0xc0
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	589b      	ldr	r3, [r3, r2]
 80030da:	1dfa      	adds	r2, r7, #7
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	0011      	movs	r1, r2
 80030e0:	2203      	movs	r2, #3
 80030e2:	400a      	ands	r2, r1
 80030e4:	00d2      	lsls	r2, r2, #3
 80030e6:	21ff      	movs	r1, #255	@ 0xff
 80030e8:	4091      	lsls	r1, r2
 80030ea:	000a      	movs	r2, r1
 80030ec:	43d2      	mvns	r2, r2
 80030ee:	401a      	ands	r2, r3
 80030f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	22ff      	movs	r2, #255	@ 0xff
 80030f8:	401a      	ands	r2, r3
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	0018      	movs	r0, r3
 8003100:	2303      	movs	r3, #3
 8003102:	4003      	ands	r3, r0
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003108:	481f      	ldr	r0, [pc, #124]	@ (8003188 <__NVIC_SetPriority+0xd4>)
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b25b      	sxtb	r3, r3
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	430a      	orrs	r2, r1
 8003114:	33c0      	adds	r3, #192	@ 0xc0
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800311a:	e031      	b.n	8003180 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800311c:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <__NVIC_SetPriority+0xd8>)
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	0019      	movs	r1, r3
 8003124:	230f      	movs	r3, #15
 8003126:	400b      	ands	r3, r1
 8003128:	3b08      	subs	r3, #8
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3306      	adds	r3, #6
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	3304      	adds	r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1dfa      	adds	r2, r7, #7
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	0011      	movs	r1, r2
 800313c:	2203      	movs	r2, #3
 800313e:	400a      	ands	r2, r1
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	21ff      	movs	r1, #255	@ 0xff
 8003144:	4091      	lsls	r1, r2
 8003146:	000a      	movs	r2, r1
 8003148:	43d2      	mvns	r2, r2
 800314a:	401a      	ands	r2, r3
 800314c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	22ff      	movs	r2, #255	@ 0xff
 8003154:	401a      	ands	r2, r3
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	2303      	movs	r3, #3
 800315e:	4003      	ands	r3, r0
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003164:	4809      	ldr	r0, [pc, #36]	@ (800318c <__NVIC_SetPriority+0xd8>)
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	001c      	movs	r4, r3
 800316c:	230f      	movs	r3, #15
 800316e:	4023      	ands	r3, r4
 8003170:	3b08      	subs	r3, #8
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	430a      	orrs	r2, r1
 8003176:	3306      	adds	r3, #6
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	18c3      	adds	r3, r0, r3
 800317c:	3304      	adds	r3, #4
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b003      	add	sp, #12
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	045b      	lsls	r3, r3, #17
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d301      	bcc.n	80031a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a4:	2301      	movs	r3, #1
 80031a6:	e010      	b.n	80031ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a8:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <SysTick_Config+0x44>)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	3a01      	subs	r2, #1
 80031ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b0:	2301      	movs	r3, #1
 80031b2:	425b      	negs	r3, r3
 80031b4:	2103      	movs	r1, #3
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff ff7c 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <SysTick_Config+0x44>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <SysTick_Config+0x44>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	210f      	movs	r1, #15
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	1c02      	adds	r2, r0, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff ffbf 	bl	8003190 <SysTick_Config>
 8003212:	0003      	movs	r3, r0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003232:	e14f      	b.n	80034d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4091      	lsls	r1, r2
 800323e:	000a      	movs	r2, r1
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d100      	bne.n	800324c <HAL_GPIO_Init+0x30>
 800324a:	e140      	b.n	80034ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2203      	movs	r2, #3
 8003252:	4013      	ands	r3, r2
 8003254:	2b01      	cmp	r3, #1
 8003256:	d005      	beq.n	8003264 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003260:	2b02      	cmp	r3, #2
 8003262:	d130      	bne.n	80032c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	409a      	lsls	r2, r3
 8003272:	0013      	movs	r3, r2
 8003274:	43da      	mvns	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	0013      	movs	r3, r2
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329a:	2201      	movs	r2, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	43da      	mvns	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	2201      	movs	r2, #1
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
 80032b8:	0013      	movs	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2203      	movs	r2, #3
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d017      	beq.n	8003302 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2203      	movs	r2, #3
 8003308:	4013      	ands	r3, r2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d123      	bne.n	8003356 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	58d3      	ldr	r3, [r2, r3]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2207      	movs	r2, #7
 8003320:	4013      	ands	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	409a      	lsls	r2, r3
 8003328:	0013      	movs	r3, r2
 800332a:	43da      	mvns	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2107      	movs	r1, #7
 800333a:	400b      	ands	r3, r1
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	409a      	lsls	r2, r3
 8003340:	0013      	movs	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	08da      	lsrs	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	6939      	ldr	r1, [r7, #16]
 8003354:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	409a      	lsls	r2, r3
 8003364:	0013      	movs	r3, r2
 8003366:	43da      	mvns	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	401a      	ands	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	23c0      	movs	r3, #192	@ 0xc0
 8003390:	029b      	lsls	r3, r3, #10
 8003392:	4013      	ands	r3, r2
 8003394:	d100      	bne.n	8003398 <HAL_GPIO_Init+0x17c>
 8003396:	e09a      	b.n	80034ce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003398:	4b54      	ldr	r3, [pc, #336]	@ (80034ec <HAL_GPIO_Init+0x2d0>)
 800339a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <HAL_GPIO_Init+0x2d0>)
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a4:	4a52      	ldr	r2, [pc, #328]	@ (80034f0 <HAL_GPIO_Init+0x2d4>)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	589b      	ldr	r3, [r3, r2]
 80033b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2203      	movs	r2, #3
 80033b6:	4013      	ands	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	220f      	movs	r2, #15
 80033bc:	409a      	lsls	r2, r3
 80033be:	0013      	movs	r3, r2
 80033c0:	43da      	mvns	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	23a0      	movs	r3, #160	@ 0xa0
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x1ea>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_GPIO_Init+0x2d8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x1e6>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a46      	ldr	r2, [pc, #280]	@ (80034f8 <HAL_GPIO_Init+0x2dc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x1e2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a45      	ldr	r2, [pc, #276]	@ (80034fc <HAL_GPIO_Init+0x2e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x1de>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a44      	ldr	r2, [pc, #272]	@ (8003500 <HAL_GPIO_Init+0x2e4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x1da>
 80033f2:	2305      	movs	r3, #5
 80033f4:	e008      	b.n	8003408 <HAL_GPIO_Init+0x1ec>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x1ec>
 80033fa:	2303      	movs	r3, #3
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x1ec>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x1ec>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x1ec>
 8003406:	2300      	movs	r3, #0
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	2103      	movs	r1, #3
 800340c:	400a      	ands	r2, r1
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003418:	4935      	ldr	r1, [pc, #212]	@ (80034f0 <HAL_GPIO_Init+0x2d4>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003426:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43da      	mvns	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	035b      	lsls	r3, r3, #13
 800343e:	4013      	ands	r3, r2
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800344a:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003450:	4b2c      	ldr	r3, [pc, #176]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	43da      	mvns	r2, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	2380      	movs	r3, #128	@ 0x80
 8003466:	039b      	lsls	r3, r3, #14
 8003468:	4013      	ands	r3, r2
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003474:	4b23      	ldr	r3, [pc, #140]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800347a:	4b22      	ldr	r3, [pc, #136]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	4013      	ands	r3, r2
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a4:	4b17      	ldr	r3, [pc, #92]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	025b      	lsls	r3, r3, #9
 80034bc:	4013      	ands	r3, r2
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	40da      	lsrs	r2, r3
 80034dc:	1e13      	subs	r3, r2, #0
 80034de:	d000      	beq.n	80034e2 <HAL_GPIO_Init+0x2c6>
 80034e0:	e6a8      	b.n	8003234 <HAL_GPIO_Init+0x18>
  }
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b006      	add	sp, #24
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40010000 	.word	0x40010000
 80034f4:	50000400 	.word	0x50000400
 80034f8:	50000800 	.word	0x50000800
 80034fc:	50000c00 	.word	0x50000c00
 8003500:	50001c00 	.word	0x50001c00
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	000a      	movs	r2, r1
 8003512:	1cbb      	adds	r3, r7, #2
 8003514:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	1cba      	adds	r2, r7, #2
 800351c:	8812      	ldrh	r2, [r2, #0]
 800351e:	4013      	ands	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003522:	230f      	movs	r3, #15
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e003      	b.n	8003534 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800352c:	230f      	movs	r3, #15
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003534:	230f      	movs	r3, #15
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	0008      	movs	r0, r1
 800354c:	0011      	movs	r1, r2
 800354e:	1cbb      	adds	r3, r7, #2
 8003550:	1c02      	adds	r2, r0, #0
 8003552:	801a      	strh	r2, [r3, #0]
 8003554:	1c7b      	adds	r3, r7, #1
 8003556:	1c0a      	adds	r2, r1, #0
 8003558:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800355a:	1c7b      	adds	r3, r7, #1
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	1cbb      	adds	r3, r7, #2
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800356a:	e003      	b.n	8003574 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800356c:	1cbb      	adds	r3, r7, #2
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b5b0      	push	{r4, r5, r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f000 fbaf 	bl	8003cee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	4bcf      	ldr	r3, [pc, #828]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	220c      	movs	r2, #12
 8003596:	4013      	ands	r3, r2
 8003598:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800359a:	4bcd      	ldr	r3, [pc, #820]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	2380      	movs	r3, #128	@ 0x80
 80035a0:	025b      	lsls	r3, r3, #9
 80035a2:	4013      	ands	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x36>
 80035b0:	e07e      	b.n	80036b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d007      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d112      	bne.n	80035e4 <HAL_RCC_OscConfig+0x68>
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4bc1      	ldr	r3, [pc, #772]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	029b      	lsls	r3, r3, #10
 80035d0:	4013      	ands	r3, r2
 80035d2:	d100      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5a>
 80035d4:	e06b      	b.n	80036ae <HAL_RCC_OscConfig+0x132>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d167      	bne.n	80036ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f000 fb85 	bl	8003cee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	025b      	lsls	r3, r3, #9
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_OscConfig+0x84>
 80035f0:	4bb7      	ldr	r3, [pc, #732]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4bb6      	ldr	r3, [pc, #728]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80035f6:	2180      	movs	r1, #128	@ 0x80
 80035f8:	0249      	lsls	r1, r1, #9
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e027      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	23a0      	movs	r3, #160	@ 0xa0
 8003606:	02db      	lsls	r3, r3, #11
 8003608:	429a      	cmp	r2, r3
 800360a:	d10e      	bne.n	800362a <HAL_RCC_OscConfig+0xae>
 800360c:	4bb0      	ldr	r3, [pc, #704]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4baf      	ldr	r3, [pc, #700]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003612:	2180      	movs	r1, #128	@ 0x80
 8003614:	02c9      	lsls	r1, r1, #11
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	4bad      	ldr	r3, [pc, #692]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4bac      	ldr	r3, [pc, #688]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003620:	2180      	movs	r1, #128	@ 0x80
 8003622:	0249      	lsls	r1, r1, #9
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e012      	b.n	8003650 <HAL_RCC_OscConfig+0xd4>
 800362a:	4ba9      	ldr	r3, [pc, #676]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4ba8      	ldr	r3, [pc, #672]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003630:	49a8      	ldr	r1, [pc, #672]	@ (80038d4 <HAL_RCC_OscConfig+0x358>)
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	4ba6      	ldr	r3, [pc, #664]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	025b      	lsls	r3, r3, #9
 800363e:	4013      	ands	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4ba2      	ldr	r3, [pc, #648]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4ba1      	ldr	r3, [pc, #644]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800364a:	49a3      	ldr	r1, [pc, #652]	@ (80038d8 <HAL_RCC_OscConfig+0x35c>)
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7ff fcfe 	bl	8003058 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003660:	e009      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003662:	f7ff fcf9 	bl	8003058 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	@ 0x64
 800366e:	d902      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	f000 fb3c 	bl	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003676:	4b96      	ldr	r3, [pc, #600]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	029b      	lsls	r3, r3, #10
 800367e:	4013      	ands	r3, r2
 8003680:	d0ef      	beq.n	8003662 <HAL_RCC_OscConfig+0xe6>
 8003682:	e015      	b.n	80036b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7ff fce8 	bl	8003058 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368e:	f7ff fce3 	bl	8003058 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	@ 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e326      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036a0:	4b8b      	ldr	r3, [pc, #556]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	4013      	ands	r3, r2
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x112>
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d100      	bne.n	80036bc <HAL_RCC_OscConfig+0x140>
 80036ba:	e08b      	b.n	80037d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d13e      	bne.n	800374c <HAL_RCC_OscConfig+0x1d0>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13b      	bne.n	800374c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80036d4:	4b7e      	ldr	r3, [pc, #504]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2204      	movs	r2, #4
 80036da:	4013      	ands	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_RCC_OscConfig+0x16c>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e302      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b79      	ldr	r3, [pc, #484]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a7b      	ldr	r2, [pc, #492]	@ (80038dc <HAL_RCC_OscConfig+0x360>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	0019      	movs	r1, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	4b75      	ldr	r3, [pc, #468]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036fe:	4b74      	ldr	r3, [pc, #464]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2209      	movs	r2, #9
 8003704:	4393      	bics	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	4b71      	ldr	r3, [pc, #452]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003710:	f000 fc40 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8003714:	0001      	movs	r1, r0
 8003716:	4b6e      	ldr	r3, [pc, #440]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	220f      	movs	r2, #15
 800371e:	4013      	ands	r3, r2
 8003720:	4a6f      	ldr	r2, [pc, #444]	@ (80038e0 <HAL_RCC_OscConfig+0x364>)
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	000a      	movs	r2, r1
 8003726:	40da      	lsrs	r2, r3
 8003728:	4b6e      	ldr	r3, [pc, #440]	@ (80038e4 <HAL_RCC_OscConfig+0x368>)
 800372a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800372c:	4b6e      	ldr	r3, [pc, #440]	@ (80038e8 <HAL_RCC_OscConfig+0x36c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2513      	movs	r5, #19
 8003732:	197c      	adds	r4, r7, r5
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff fc49 	bl	8002fcc <HAL_InitTick>
 800373a:	0003      	movs	r3, r0
 800373c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800373e:	197b      	adds	r3, r7, r5
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d046      	beq.n	80037d4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003746:	197b      	adds	r3, r7, r5
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	e2d0      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d027      	beq.n	80037a2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003752:	4b5f      	ldr	r3, [pc, #380]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2209      	movs	r2, #9
 8003758:	4393      	bics	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	4b5c      	ldr	r3, [pc, #368]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7ff fc78 	bl	8003058 <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376e:	f7ff fc73 	bl	8003058 <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e2b6      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003780:	4b53      	ldr	r3, [pc, #332]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2204      	movs	r2, #4
 8003786:	4013      	ands	r3, r2
 8003788:	d0f1      	beq.n	800376e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b51      	ldr	r3, [pc, #324]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a53      	ldr	r2, [pc, #332]	@ (80038dc <HAL_RCC_OscConfig+0x360>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e018      	b.n	80037d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b4b      	ldr	r3, [pc, #300]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	438a      	bics	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7ff fc53 	bl	8003058 <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7ff fc4e 	bl	8003058 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e291      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2204      	movs	r2, #4
 80037d0:	4013      	ands	r3, r2
 80037d2:	d1f1      	bne.n	80037b8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2210      	movs	r2, #16
 80037da:	4013      	ands	r3, r2
 80037dc:	d100      	bne.n	80037e0 <HAL_RCC_OscConfig+0x264>
 80037de:	e0a1      	b.n	8003924 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d140      	bne.n	8003868 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e6:	4b3a      	ldr	r3, [pc, #232]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x282>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e277      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fe:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a3a      	ldr	r2, [pc, #232]	@ (80038ec <HAL_RCC_OscConfig+0x370>)
 8003804:	4013      	ands	r3, r2
 8003806:	0019      	movs	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800380c:	4b30      	ldr	r3, [pc, #192]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003812:	4b2f      	ldr	r3, [pc, #188]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	0a19      	lsrs	r1, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	061a      	lsls	r2, r3, #24
 8003820:	4b2b      	ldr	r3, [pc, #172]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	0b5b      	lsrs	r3, r3, #13
 800382c:	3301      	adds	r3, #1
 800382e:	2280      	movs	r2, #128	@ 0x80
 8003830:	0212      	lsls	r2, r2, #8
 8003832:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003834:	4b26      	ldr	r3, [pc, #152]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	210f      	movs	r1, #15
 800383c:	400b      	ands	r3, r1
 800383e:	4928      	ldr	r1, [pc, #160]	@ (80038e0 <HAL_RCC_OscConfig+0x364>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003844:	4b27      	ldr	r3, [pc, #156]	@ (80038e4 <HAL_RCC_OscConfig+0x368>)
 8003846:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <HAL_RCC_OscConfig+0x36c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2513      	movs	r5, #19
 800384e:	197c      	adds	r4, r7, r5
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff fbbb 	bl	8002fcc <HAL_InitTick>
 8003856:	0003      	movs	r3, r0
 8003858:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800385a:	197b      	adds	r3, r7, r5
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d060      	beq.n	8003924 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003862:	197b      	adds	r3, r7, r5
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	e242      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03f      	beq.n	80038f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003870:	4b17      	ldr	r3, [pc, #92]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 8003876:	2180      	movs	r1, #128	@ 0x80
 8003878:	0049      	lsls	r1, r1, #1
 800387a:	430a      	orrs	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7ff fbeb 	bl	8003058 <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003888:	f7ff fbe6 	bl	8003058 <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e229      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4013      	ands	r3, r2
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a6:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a10      	ldr	r2, [pc, #64]	@ (80038ec <HAL_RCC_OscConfig+0x370>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	0a19      	lsrs	r1, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	061a      	lsls	r2, r3, #24
 80038c8:	4b01      	ldr	r3, [pc, #4]	@ (80038d0 <HAL_RCC_OscConfig+0x354>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e029      	b.n	8003924 <HAL_RCC_OscConfig+0x3a8>
 80038d0:	40021000 	.word	0x40021000
 80038d4:	fffeffff 	.word	0xfffeffff
 80038d8:	fffbffff 	.word	0xfffbffff
 80038dc:	ffffe0ff 	.word	0xffffe0ff
 80038e0:	0800803c 	.word	0x0800803c
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004
 80038ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f0:	4bbd      	ldr	r3, [pc, #756]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4bbc      	ldr	r3, [pc, #752]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 80038f6:	49bd      	ldr	r1, [pc, #756]	@ (8003bec <HAL_RCC_OscConfig+0x670>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7ff fbac 	bl	8003058 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003906:	f7ff fba7 	bl	8003058 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1ea      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003918:	4bb3      	ldr	r3, [pc, #716]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4013      	ands	r3, r2
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	4013      	ands	r3, r2
 800392c:	d036      	beq.n	800399c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d019      	beq.n	800396a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003936:	4bac      	ldr	r3, [pc, #688]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800393a:	4bab      	ldr	r3, [pc, #684]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003942:	f7ff fb89 	bl	8003058 <HAL_GetTick>
 8003946:	0003      	movs	r3, r0
 8003948:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394c:	f7ff fb84 	bl	8003058 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1c7      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800395e:	4ba2      	ldr	r3, [pc, #648]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003962:	2202      	movs	r2, #2
 8003964:	4013      	ands	r3, r2
 8003966:	d0f1      	beq.n	800394c <HAL_RCC_OscConfig+0x3d0>
 8003968:	e018      	b.n	800399c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396a:	4b9f      	ldr	r3, [pc, #636]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 800396c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800396e:	4b9e      	ldr	r3, [pc, #632]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003970:	2101      	movs	r1, #1
 8003972:	438a      	bics	r2, r1
 8003974:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7ff fb6f 	bl	8003058 <HAL_GetTick>
 800397a:	0003      	movs	r3, r0
 800397c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7ff fb6a 	bl	8003058 <HAL_GetTick>
 8003984:	0002      	movs	r2, r0
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1ad      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003992:	4b95      	ldr	r3, [pc, #596]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	2202      	movs	r2, #2
 8003998:	4013      	ands	r3, r2
 800399a:	d1f1      	bne.n	8003980 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d100      	bne.n	80039a8 <HAL_RCC_OscConfig+0x42c>
 80039a6:	e0ae      	b.n	8003b06 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a8:	2027      	movs	r0, #39	@ 0x27
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4b8d      	ldr	r3, [pc, #564]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 80039b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	055b      	lsls	r3, r3, #21
 80039b8:	4013      	ands	r3, r2
 80039ba:	d109      	bne.n	80039d0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b8a      	ldr	r3, [pc, #552]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 80039be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039c0:	4b89      	ldr	r3, [pc, #548]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 80039c2:	2180      	movs	r1, #128	@ 0x80
 80039c4:	0549      	lsls	r1, r1, #21
 80039c6:	430a      	orrs	r2, r1
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80039ca:	183b      	adds	r3, r7, r0
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b87      	ldr	r3, [pc, #540]	@ (8003bf0 <HAL_RCC_OscConfig+0x674>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d11a      	bne.n	8003a12 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039dc:	4b84      	ldr	r3, [pc, #528]	@ (8003bf0 <HAL_RCC_OscConfig+0x674>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b83      	ldr	r3, [pc, #524]	@ (8003bf0 <HAL_RCC_OscConfig+0x674>)
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	0049      	lsls	r1, r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7ff fb35 	bl	8003058 <HAL_GetTick>
 80039ee:	0003      	movs	r3, r0
 80039f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7ff fb30 	bl	8003058 <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e173      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf0 <HAL_RCC_OscConfig+0x674>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_OscConfig+0x4b2>
 8003a1e:	4b72      	ldr	r3, [pc, #456]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a22:	4b71      	ldr	r3, [pc, #452]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a24:	2180      	movs	r1, #128	@ 0x80
 8003a26:	0049      	lsls	r1, r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a2c:	e031      	b.n	8003a92 <HAL_RCC_OscConfig+0x516>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4d4>
 8003a36:	4b6c      	ldr	r3, [pc, #432]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a3a:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a3c:	496b      	ldr	r1, [pc, #428]	@ (8003bec <HAL_RCC_OscConfig+0x670>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a42:	4b69      	ldr	r3, [pc, #420]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a46:	4b68      	ldr	r3, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a48:	496a      	ldr	r1, [pc, #424]	@ (8003bf4 <HAL_RCC_OscConfig+0x678>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a4e:	e020      	b.n	8003a92 <HAL_RCC_OscConfig+0x516>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	23a0      	movs	r3, #160	@ 0xa0
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d10e      	bne.n	8003a7a <HAL_RCC_OscConfig+0x4fe>
 8003a5c:	4b62      	ldr	r3, [pc, #392]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a60:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	00c9      	lsls	r1, r1, #3
 8003a66:	430a      	orrs	r2, r1
 8003a68:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a70:	2180      	movs	r1, #128	@ 0x80
 8003a72:	0049      	lsls	r1, r1, #1
 8003a74:	430a      	orrs	r2, r1
 8003a76:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x516>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a80:	495a      	ldr	r1, [pc, #360]	@ (8003bec <HAL_RCC_OscConfig+0x670>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a86:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a8a:	4b57      	ldr	r3, [pc, #348]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003a8c:	4959      	ldr	r1, [pc, #356]	@ (8003bf4 <HAL_RCC_OscConfig+0x678>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7ff fadd 	bl	8003058 <HAL_GetTick>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa2:	e009      	b.n	8003ab8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7ff fad8 	bl	8003058 <HAL_GetTick>
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_RCC_OscConfig+0x67c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e11a      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003aba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d0ef      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x528>
 8003ac4:	e014      	b.n	8003af0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7ff fac7 	bl	8003058 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ace:	e009      	b.n	8003ae4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7ff fac2 	bl	8003058 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4a47      	ldr	r2, [pc, #284]	@ (8003bf8 <HAL_RCC_OscConfig+0x67c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e104      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ae4:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4013      	ands	r3, r2
 8003aee:	d1ef      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003af0:	2327      	movs	r3, #39	@ 0x27
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b3b      	ldr	r3, [pc, #236]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afe:	4b3a      	ldr	r3, [pc, #232]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b00:	493e      	ldr	r1, [pc, #248]	@ (8003bfc <HAL_RCC_OscConfig+0x680>)
 8003b02:	400a      	ands	r2, r1
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d049      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d026      	beq.n	8003b66 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003b18:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4b32      	ldr	r3, [pc, #200]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	4b30      	ldr	r3, [pc, #192]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b30:	4b33      	ldr	r3, [pc, #204]	@ (8003c00 <HAL_RCC_OscConfig+0x684>)
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	4b32      	ldr	r3, [pc, #200]	@ (8003c00 <HAL_RCC_OscConfig+0x684>)
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	0189      	lsls	r1, r1, #6
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7ff fa8b 	bl	8003058 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b48:	f7ff fa86 	bl	8003058 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0c9      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b5a:	4b23      	ldr	r3, [pc, #140]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4013      	ands	r3, r2
 8003b62:	d0f1      	beq.n	8003b48 <HAL_RCC_OscConfig+0x5cc>
 8003b64:	e01e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	438a      	bics	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	4b23      	ldr	r3, [pc, #140]	@ (8003c00 <HAL_RCC_OscConfig+0x684>)
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	4b22      	ldr	r3, [pc, #136]	@ (8003c00 <HAL_RCC_OscConfig+0x684>)
 8003b78:	4922      	ldr	r1, [pc, #136]	@ (8003c04 <HAL_RCC_OscConfig+0x688>)
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7ff fa6b 	bl	8003058 <HAL_GetTick>
 8003b82:	0003      	movs	r3, r0
 8003b84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b88:	f7ff fa66 	bl	8003058 <HAL_GetTick>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0a9      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d1f1      	bne.n	8003b88 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d100      	bne.n	8003bae <HAL_RCC_OscConfig+0x632>
 8003bac:	e09e      	b.n	8003cec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d100      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x63a>
 8003bb4:	e077      	b.n	8003ca6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d158      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_OscConfig+0x66c>)
 8003bc4:	4910      	ldr	r1, [pc, #64]	@ (8003c08 <HAL_RCC_OscConfig+0x68c>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7ff fa45 	bl	8003058 <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7ff fa40 	bl	8003058 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d914      	bls.n	8003c0c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e083      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	40021000 	.word	0x40021000
 8003bec:	fffffeff 	.word	0xfffffeff
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	fffffbff 	.word	0xfffffbff
 8003bf8:	00001388 	.word	0x00001388
 8003bfc:	efffffff 	.word	0xefffffff
 8003c00:	40010000 	.word	0x40010000
 8003c04:	ffffdfff 	.word	0xffffdfff
 8003c08:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	@ 0x80
 8003c12:	049b      	lsls	r3, r3, #18
 8003c14:	4013      	ands	r3, r2
 8003c16:	d1dd      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c18:	4b37      	ldr	r3, [pc, #220]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4a37      	ldr	r2, [pc, #220]	@ (8003cfc <HAL_RCC_OscConfig+0x780>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c30:	431a      	orrs	r2, r3
 8003c32:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c34:	430a      	orrs	r2, r1
 8003c36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c3e:	2180      	movs	r1, #128	@ 0x80
 8003c40:	0449      	lsls	r1, r1, #17
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7ff fa07 	bl	8003058 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7ff fa02 	bl	8003058 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e045      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c62:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	049b      	lsls	r3, r3, #18
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x6d4>
 8003c6e:	e03d      	b.n	8003cec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c76:	4922      	ldr	r1, [pc, #136]	@ (8003d00 <HAL_RCC_OscConfig+0x784>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7ff f9ec 	bl	8003058 <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7ff f9e7 	bl	8003058 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e02a      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c98:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	049b      	lsls	r3, r3, #18
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x70a>
 8003ca4:	e022      	b.n	8003cec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e01d      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <HAL_RCC_OscConfig+0x77c>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	025b      	lsls	r3, r3, #9
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d10f      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	23f0      	movs	r3, #240	@ 0xf0
 8003ccc:	039b      	lsls	r3, r3, #14
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	23c0      	movs	r3, #192	@ 0xc0
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	401a      	ands	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b00a      	add	sp, #40	@ 0x28
 8003cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	ff02ffff 	.word	0xff02ffff
 8003d00:	feffffff 	.word	0xfeffffff

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e128      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b96      	ldr	r3, [pc, #600]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4013      	ands	r3, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d91e      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b93      	ldr	r3, [pc, #588]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4393      	bics	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	4b90      	ldr	r3, [pc, #576]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d38:	f7ff f98e 	bl	8003058 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d42:	f7ff f989 	bl	8003058 <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	4a8a      	ldr	r2, [pc, #552]	@ (8003f78 <HAL_RCC_ClockConfig+0x274>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e109      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b87      	ldr	r3, [pc, #540]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6e:	4b83      	ldr	r3, [pc, #524]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	22f0      	movs	r2, #240	@ 0xf0
 8003d74:	4393      	bics	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b7f      	ldr	r3, [pc, #508]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2201      	movs	r2, #1
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d100      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x8a>
 8003d8c:	e089      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d96:	4b79      	ldr	r3, [pc, #484]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d120      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0e1      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dae:	4b73      	ldr	r3, [pc, #460]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	049b      	lsls	r3, r3, #18
 8003db6:	4013      	ands	r3, r2
 8003db8:	d114      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0d5      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d109      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0ca      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003dd4:	4b69      	ldr	r3, [pc, #420]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0c2      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de4:	4b65      	ldr	r3, [pc, #404]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2203      	movs	r2, #3
 8003dea:	4393      	bics	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4b62      	ldr	r3, [pc, #392]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df8:	f7ff f92e 	bl	8003058 <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d111      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e08:	e009      	b.n	8003e1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0a:	f7ff f925 	bl	8003058 <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	4a58      	ldr	r2, [pc, #352]	@ (8003f78 <HAL_RCC_ClockConfig+0x274>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e0a5      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e1e:	4b57      	ldr	r3, [pc, #348]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	220c      	movs	r2, #12
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d1ef      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x106>
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d111      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e34:	e009      	b.n	8003e4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e36:	f7ff f90f 	bl	8003058 <HAL_GetTick>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	4a4d      	ldr	r2, [pc, #308]	@ (8003f78 <HAL_RCC_ClockConfig+0x274>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e08f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	220c      	movs	r2, #12
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d1ef      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x132>
 8003e56:	e024      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d11b      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e60:	e009      	b.n	8003e76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e62:	f7ff f8f9 	bl	8003058 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	4a42      	ldr	r2, [pc, #264]	@ (8003f78 <HAL_RCC_ClockConfig+0x274>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e079      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e76:	4b41      	ldr	r3, [pc, #260]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d1ef      	bne.n	8003e62 <HAL_RCC_ClockConfig+0x15e>
 8003e82:	e00e      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e84:	f7ff f8e8 	bl	8003058 <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f78 <HAL_RCC_ClockConfig+0x274>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e068      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e98:	4b38      	ldr	r3, [pc, #224]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	220c      	movs	r2, #12
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea2:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d21e      	bcs.n	8003eee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb0:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4393      	bics	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	4b2e      	ldr	r3, [pc, #184]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ec2:	f7ff f8c9 	bl	8003058 <HAL_GetTick>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	e009      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7ff f8c4 	bl	8003058 <HAL_GetTick>
 8003ed0:	0002      	movs	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <HAL_RCC_ClockConfig+0x274>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e044      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee0:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d1ee      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b20      	ldr	r3, [pc, #128]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a20      	ldr	r2, [pc, #128]	@ (8003f80 <HAL_RCC_ClockConfig+0x27c>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2208      	movs	r2, #8
 8003f12:	4013      	ands	r3, r2
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f16:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f84 <HAL_RCC_ClockConfig+0x280>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00da      	lsls	r2, r3, #3
 8003f26:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2c:	f000 f832 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8003f30:	0001      	movs	r1, r0
 8003f32:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <HAL_RCC_ClockConfig+0x278>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	220f      	movs	r2, #15
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	4a12      	ldr	r2, [pc, #72]	@ (8003f88 <HAL_RCC_ClockConfig+0x284>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	000a      	movs	r2, r1
 8003f42:	40da      	lsrs	r2, r3
 8003f44:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <HAL_RCC_ClockConfig+0x288>)
 8003f46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <HAL_RCC_ClockConfig+0x28c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	250b      	movs	r5, #11
 8003f4e:	197c      	adds	r4, r7, r5
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff f83b 	bl	8002fcc <HAL_InitTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f5a:	197b      	adds	r3, r7, r5
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f62:	197b      	adds	r3, r7, r5
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	40022000 	.word	0x40022000
 8003f78:	00001388 	.word	0x00001388
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	fffff8ff 	.word	0xfffff8ff
 8003f84:	ffffc7ff 	.word	0xffffc7ff
 8003f88:	0800803c 	.word	0x0800803c
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	20000004 	.word	0x20000004

08003f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800408c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d013      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003faa:	d85c      	bhi.n	8004066 <HAL_RCC_GetSysClockFreq+0xd2>
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d002      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x22>
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d00b      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x38>
 8003fb4:	e057      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d002      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fc2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003fc4:	e05d      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003fc6:	4b33      	ldr	r3, [pc, #204]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fc8:	613b      	str	r3, [r7, #16]
      break;
 8003fca:	e05a      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fcc:	4b32      	ldr	r3, [pc, #200]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fce:	613b      	str	r3, [r7, #16]
      break;
 8003fd0:	e057      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	0c9b      	lsrs	r3, r3, #18
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	4013      	ands	r3, r2
 8003fda:	4a30      	ldr	r2, [pc, #192]	@ (800409c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	5cd3      	ldrb	r3, [r2, r3]
 8003fde:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	0d9b      	lsrs	r3, r3, #22
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	3301      	adds	r3, #1
 8003fea:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fec:	4b27      	ldr	r3, [pc, #156]	@ (800408c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	025b      	lsls	r3, r3, #9
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00f      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	000a      	movs	r2, r1
 8003ffc:	0152      	lsls	r2, r2, #5
 8003ffe:	1a52      	subs	r2, r2, r1
 8004000:	0193      	lsls	r3, r2, #6
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	185b      	adds	r3, r3, r1
 8004008:	025b      	lsls	r3, r3, #9
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f7fc f897 	bl	8000140 <__udivsi3>
 8004012:	0003      	movs	r3, r0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e023      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004018:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <HAL_RCC_GetSysClockFreq+0xf8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2210      	movs	r2, #16
 800401e:	4013      	ands	r3, r2
 8004020:	d00f      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	000a      	movs	r2, r1
 8004026:	0152      	lsls	r2, r2, #5
 8004028:	1a52      	subs	r2, r2, r1
 800402a:	0193      	lsls	r3, r2, #6
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	185b      	adds	r3, r3, r1
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	0018      	movs	r0, r3
 8004038:	f7fc f882 	bl	8000140 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e00e      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	000a      	movs	r2, r1
 8004046:	0152      	lsls	r2, r2, #5
 8004048:	1a52      	subs	r2, r2, r1
 800404a:	0193      	lsls	r3, r2, #6
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	185b      	adds	r3, r3, r1
 8004052:	029b      	lsls	r3, r3, #10
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f7fc f872 	bl	8000140 <__udivsi3>
 800405c:	0003      	movs	r3, r0
 800405e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	613b      	str	r3, [r7, #16]
      break;
 8004064:	e00d      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0b5b      	lsrs	r3, r3, #13
 800406c:	2207      	movs	r2, #7
 800406e:	4013      	ands	r3, r2
 8004070:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	2280      	movs	r2, #128	@ 0x80
 8004078:	0212      	lsls	r2, r2, #8
 800407a:	409a      	lsls	r2, r3
 800407c:	0013      	movs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
      break;
 8004080:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004082:	693b      	ldr	r3, [r7, #16]
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b006      	add	sp, #24
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	003d0900 	.word	0x003d0900
 8004094:	00f42400 	.word	0x00f42400
 8004098:	007a1200 	.word	0x007a1200
 800409c:	08008054 	.word	0x08008054

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b02      	ldr	r3, [pc, #8]	@ (80040b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	20000000 	.word	0x20000000

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b8:	f7ff fff2 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040bc:	0001      	movs	r1, r0
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	2207      	movs	r2, #7
 80040c6:	4013      	ands	r3, r2
 80040c8:	4a04      	ldr	r2, [pc, #16]	@ (80040dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	40d9      	lsrs	r1, r3
 80040ce:	000b      	movs	r3, r1
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	40021000 	.word	0x40021000
 80040dc:	0800804c 	.word	0x0800804c

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	0001      	movs	r1, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0adb      	lsrs	r3, r3, #11
 80040f0:	2207      	movs	r2, #7
 80040f2:	4013      	ands	r3, r2
 80040f4:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	40d9      	lsrs	r1, r3
 80040fa:	000b      	movs	r3, r1
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	40021000 	.word	0x40021000
 8004108:	0800804c 	.word	0x0800804c

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004114:	2317      	movs	r3, #23
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2220      	movs	r2, #32
 8004122:	4013      	ands	r3, r2
 8004124:	d106      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	2380      	movs	r3, #128	@ 0x80
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4013      	ands	r3, r2
 8004130:	d100      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004132:	e104      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004134:	4bb1      	ldr	r3, [pc, #708]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	055b      	lsls	r3, r3, #21
 800413c:	4013      	ands	r3, r2
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004140:	4bae      	ldr	r3, [pc, #696]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004144:	4bad      	ldr	r3, [pc, #692]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004146:	2180      	movs	r1, #128	@ 0x80
 8004148:	0549      	lsls	r1, r1, #21
 800414a:	430a      	orrs	r2, r1
 800414c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800414e:	2317      	movs	r3, #23
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	4baa      	ldr	r3, [pc, #680]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4013      	ands	r3, r2
 8004160:	d11a      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004162:	4ba7      	ldr	r3, [pc, #668]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4ba6      	ldr	r3, [pc, #664]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004168:	2180      	movs	r1, #128	@ 0x80
 800416a:	0049      	lsls	r1, r1, #1
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004170:	f7fe ff72 	bl	8003058 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	e008      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fe ff6d 	bl	8003058 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	@ 0x64
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e133      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b9c      	ldr	r3, [pc, #624]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4013      	ands	r3, r2
 8004196:	d0f0      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004198:	4b98      	ldr	r3, [pc, #608]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	23c0      	movs	r3, #192	@ 0xc0
 800419e:	039b      	lsls	r3, r3, #14
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	23c0      	movs	r3, #192	@ 0xc0
 80041aa:	039b      	lsls	r3, r3, #14
 80041ac:	4013      	ands	r3, r2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	23c0      	movs	r3, #192	@ 0xc0
 80041ba:	039b      	lsls	r3, r3, #14
 80041bc:	4013      	ands	r3, r2
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d013      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	23c0      	movs	r3, #192	@ 0xc0
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	401a      	ands	r2, r3
 80041ce:	23c0      	movs	r3, #192	@ 0xc0
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041d6:	4b89      	ldr	r3, [pc, #548]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	029b      	lsls	r3, r3, #10
 80041de:	401a      	ands	r2, r3
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	029b      	lsls	r3, r3, #10
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d101      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e103      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80041ec:	4b83      	ldr	r3, [pc, #524]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041f0:	23c0      	movs	r3, #192	@ 0xc0
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d049      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	23c0      	movs	r3, #192	@ 0xc0
 8004204:	029b      	lsls	r3, r3, #10
 8004206:	4013      	ands	r3, r2
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d004      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2220      	movs	r2, #32
 8004214:	4013      	ands	r3, r2
 8004216:	d10d      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	23c0      	movs	r3, #192	@ 0xc0
 800421e:	029b      	lsls	r3, r3, #10
 8004220:	4013      	ands	r3, r2
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	429a      	cmp	r2, r3
 8004226:	d034      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	4013      	ands	r3, r2
 8004232:	d02e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004234:	4b71      	ldr	r3, [pc, #452]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004238:	4a72      	ldr	r2, [pc, #456]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800423a:	4013      	ands	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800423e:	4b6f      	ldr	r3, [pc, #444]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004242:	4b6e      	ldr	r3, [pc, #440]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004244:	2180      	movs	r1, #128	@ 0x80
 8004246:	0309      	lsls	r1, r1, #12
 8004248:	430a      	orrs	r2, r1
 800424a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800424c:	4b6b      	ldr	r3, [pc, #428]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800424e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004250:	4b6a      	ldr	r3, [pc, #424]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004252:	496d      	ldr	r1, [pc, #436]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004254:	400a      	ands	r2, r1
 8004256:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004258:	4b68      	ldr	r3, [pc, #416]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d014      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fe fef6 	bl	8003058 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004270:	e009      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fe fef1 	bl	8003058 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	4a63      	ldr	r2, [pc, #396]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0b6      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004286:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004288:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4013      	ands	r3, r2
 8004290:	d0ef      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	4013      	ands	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	23c0      	movs	r3, #192	@ 0xc0
 80042a4:	029b      	lsls	r3, r3, #10
 80042a6:	401a      	ands	r2, r3
 80042a8:	23c0      	movs	r3, #192	@ 0xc0
 80042aa:	029b      	lsls	r3, r3, #10
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10c      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80042b0:	4b52      	ldr	r3, [pc, #328]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a56      	ldr	r2, [pc, #344]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	23c0      	movs	r3, #192	@ 0xc0
 80042c0:	039b      	lsls	r3, r3, #14
 80042c2:	401a      	ands	r2, r3
 80042c4:	4b4d      	ldr	r3, [pc, #308]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042c6:	430a      	orrs	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	4b4c      	ldr	r3, [pc, #304]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	23c0      	movs	r3, #192	@ 0xc0
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	401a      	ands	r2, r3
 80042d8:	4b48      	ldr	r3, [pc, #288]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042da:	430a      	orrs	r2, r1
 80042dc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2220      	movs	r2, #32
 80042e4:	4013      	ands	r3, r2
 80042e6:	d01f      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	23c0      	movs	r3, #192	@ 0xc0
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	401a      	ands	r2, r3
 80042f2:	23c0      	movs	r3, #192	@ 0xc0
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80042fa:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a44      	ldr	r2, [pc, #272]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	23c0      	movs	r3, #192	@ 0xc0
 800430a:	039b      	lsls	r3, r3, #14
 800430c:	401a      	ands	r2, r3
 800430e:	4b3b      	ldr	r3, [pc, #236]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	4b39      	ldr	r3, [pc, #228]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004316:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	23c0      	movs	r3, #192	@ 0xc0
 800431e:	029b      	lsls	r3, r3, #10
 8004320:	401a      	ands	r2, r3
 8004322:	4b36      	ldr	r3, [pc, #216]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004324:	430a      	orrs	r2, r1
 8004326:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004328:	2317      	movs	r3, #23
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b32      	ldr	r3, [pc, #200]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004338:	4936      	ldr	r1, [pc, #216]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800433a:	400a      	ands	r2, r1
 800433c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2201      	movs	r2, #1
 8004344:	4013      	ands	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004348:	4b2c      	ldr	r3, [pc, #176]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800434a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434c:	2203      	movs	r2, #3
 800434e:	4393      	bics	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004358:	430a      	orrs	r2, r1
 800435a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2202      	movs	r2, #2
 8004362:	4013      	ands	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004366:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436a:	220c      	movs	r2, #12
 800436c:	4393      	bics	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004376:	430a      	orrs	r2, r1
 8004378:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	4013      	ands	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004384:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004388:	4a23      	ldr	r2, [pc, #140]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800438a:	4013      	ands	r3, r2
 800438c:	0019      	movs	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004394:	430a      	orrs	r2, r1
 8004396:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	4013      	ands	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a2:	4b16      	ldr	r3, [pc, #88]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	4a1d      	ldr	r2, [pc, #116]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2240      	movs	r2, #64	@ 0x40
 80043bc:	4013      	ands	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c0:	4b0e      	ldr	r3, [pc, #56]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043d0:	430a      	orrs	r2, r1
 80043d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2280      	movs	r2, #128	@ 0x80
 80043da:	4013      	ands	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043de:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e2:	4a10      	ldr	r2, [pc, #64]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b006      	add	sp, #24
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	40007000 	.word	0x40007000
 8004404:	fffcffff 	.word	0xfffcffff
 8004408:	fff7ffff 	.word	0xfff7ffff
 800440c:	00001388 	.word	0x00001388
 8004410:	ffcfffff 	.word	0xffcfffff
 8004414:	efffffff 	.word	0xefffffff
 8004418:	fffff3ff 	.word	0xfffff3ff
 800441c:	ffffcfff 	.word	0xffffcfff
 8004420:	fbffffff 	.word	0xfbffffff
 8004424:	fff3ffff 	.word	0xfff3ffff

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e032      	b.n	80044a0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2239      	movs	r2, #57	@ 0x39
 800443e:	5c9b      	ldrb	r3, [r3, r2]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2238      	movs	r2, #56	@ 0x38
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fe fc37 	bl	8002cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2239      	movs	r2, #57	@ 0x39
 800445a:	2102      	movs	r1, #2
 800445c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	0019      	movs	r1, r3
 8004468:	0010      	movs	r0, r2
 800446a:	f000 f861 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	223e      	movs	r2, #62	@ 0x3e
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	223a      	movs	r2, #58	@ 0x3a
 800447a:	2101      	movs	r1, #1
 800447c:	5499      	strb	r1, [r3, r2]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	223b      	movs	r2, #59	@ 0x3b
 8004482:	2101      	movs	r1, #1
 8004484:	5499      	strb	r1, [r3, r2]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	223c      	movs	r2, #60	@ 0x3c
 800448a:	2101      	movs	r1, #1
 800448c:	5499      	strb	r1, [r3, r2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223d      	movs	r2, #61	@ 0x3d
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2239      	movs	r2, #57	@ 0x39
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2239      	movs	r2, #57	@ 0x39
 80044b4:	5c9b      	ldrb	r3, [r3, r2]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d001      	beq.n	80044c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e02e      	b.n	800451e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2239      	movs	r2, #57	@ 0x39
 80044c4:	2102      	movs	r1, #2
 80044c6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_Base_Start+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a13      	ldr	r2, [pc, #76]	@ (8004528 <HAL_TIM_Base_Start+0x80>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_Base_Start+0x40>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a12      	ldr	r2, [pc, #72]	@ (800452c <HAL_TIM_Base_Start+0x84>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2207      	movs	r2, #7
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d010      	beq.n	800451c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450a:	e007      	b.n	800451c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b004      	add	sp, #16
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	40010800 	.word	0x40010800
 800452c:	40011400 	.word	0x40011400

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	429a      	cmp	r2, r3
 8004548:	d007      	beq.n	800455a <TIM_Base_SetConfig+0x2a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a22      	ldr	r2, [pc, #136]	@ (80045d8 <TIM_Base_SetConfig+0xa8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_Base_SetConfig+0x2a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a21      	ldr	r2, [pc, #132]	@ (80045dc <TIM_Base_SetConfig+0xac>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2270      	movs	r2, #112	@ 0x70
 800455e:	4393      	bics	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	05db      	lsls	r3, r3, #23
 8004572:	429a      	cmp	r2, r3
 8004574:	d007      	beq.n	8004586 <TIM_Base_SetConfig+0x56>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a17      	ldr	r2, [pc, #92]	@ (80045d8 <TIM_Base_SetConfig+0xa8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_Base_SetConfig+0x56>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a16      	ldr	r2, [pc, #88]	@ (80045dc <TIM_Base_SetConfig+0xac>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <TIM_Base_SetConfig+0xb0>)
 800458a:	4013      	ands	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2280      	movs	r2, #128	@ 0x80
 800459c:	4393      	bics	r3, r2
 800459e:	001a      	movs	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b004      	add	sp, #16
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40010800 	.word	0x40010800
 80045dc:	40011400 	.word	0x40011400
 80045e0:	fffffcff 	.word	0xfffffcff

080045e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2238      	movs	r2, #56	@ 0x38
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e042      	b.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2238      	movs	r2, #56	@ 0x38
 8004600:	2101      	movs	r1, #1
 8004602:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2239      	movs	r2, #57	@ 0x39
 8004608:	2102      	movs	r1, #2
 800460a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2270      	movs	r2, #112	@ 0x70
 8004620:	4393      	bics	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	05db      	lsls	r3, r3, #23
 800463e:	429a      	cmp	r2, r3
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0f      	ldr	r2, [pc, #60]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10c      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	4393      	bics	r3, r2
 800465c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2239      	movs	r2, #57	@ 0x39
 8004674:	2101      	movs	r1, #1
 8004676:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2238      	movs	r2, #56	@ 0x38
 800467c:	2100      	movs	r1, #0
 800467e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b004      	add	sp, #16
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	40010800 	.word	0x40010800
 8004690:	40011400 	.word	0x40011400

08004694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e044      	b.n	8004730 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2278      	movs	r2, #120	@ 0x78
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7fe fb1b 	bl	8002cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2224      	movs	r2, #36	@ 0x24
 80046c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2101      	movs	r1, #1
 80046d0:	438a      	bics	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fb50 	bl	8004d84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 f8c8 	bl	800487c <UART_SetConfig>
 80046ec:	0003      	movs	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e01c      	b.n	8004730 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	490d      	ldr	r1, [pc, #52]	@ (8004738 <HAL_UART_Init+0xa4>)
 8004702:	400a      	ands	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	212a      	movs	r1, #42	@ 0x2a
 8004712:	438a      	bics	r2, r1
 8004714:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2101      	movs	r1, #1
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 fbdf 	bl	8004eec <UART_CheckIdleState>
 800472e:	0003      	movs	r3, r0
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b002      	add	sp, #8
 8004736:	bd80      	pop	{r7, pc}
 8004738:	ffffb7ff 	.word	0xffffb7ff

0800473c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	@ 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	1dbb      	adds	r3, r7, #6
 800474a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004750:	2b20      	cmp	r3, #32
 8004752:	d000      	beq.n	8004756 <HAL_UART_Transmit+0x1a>
 8004754:	e08c      	b.n	8004870 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_UART_Transmit+0x28>
 800475c:	1dbb      	adds	r3, r7, #6
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e084      	b.n	8004872 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	015b      	lsls	r3, r3, #5
 8004770:	429a      	cmp	r2, r3
 8004772:	d109      	bne.n	8004788 <HAL_UART_Transmit+0x4c>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2201      	movs	r2, #1
 8004780:	4013      	ands	r3, r2
 8004782:	d001      	beq.n	8004788 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e074      	b.n	8004872 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2284      	movs	r2, #132	@ 0x84
 800478c:	2100      	movs	r1, #0
 800478e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2221      	movs	r2, #33	@ 0x21
 8004794:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004796:	f7fe fc5f 	bl	8003058 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1dba      	adds	r2, r7, #6
 80047a2:	2150      	movs	r1, #80	@ 0x50
 80047a4:	8812      	ldrh	r2, [r2, #0]
 80047a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1dba      	adds	r2, r7, #6
 80047ac:	2152      	movs	r1, #82	@ 0x52
 80047ae:	8812      	ldrh	r2, [r2, #0]
 80047b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	015b      	lsls	r3, r3, #5
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d108      	bne.n	80047d0 <HAL_UART_Transmit+0x94>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e003      	b.n	80047d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d8:	e02f      	b.n	800483a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	0013      	movs	r3, r2
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	@ 0x80
 80047e8:	f000 fc28 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d004      	beq.n	80047fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e03b      	b.n	8004872 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	001a      	movs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	05d2      	lsls	r2, r2, #23
 800480c:	0dd2      	lsrs	r2, r2, #23
 800480e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	3302      	adds	r3, #2
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e007      	b.n	8004828 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2252      	movs	r2, #82	@ 0x52
 800482c:	5a9b      	ldrh	r3, [r3, r2]
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b299      	uxth	r1, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2252      	movs	r2, #82	@ 0x52
 8004838:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2252      	movs	r2, #82	@ 0x52
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1c9      	bne.n	80047da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	0013      	movs	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	2140      	movs	r1, #64	@ 0x40
 8004854:	f000 fbf2 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d004      	beq.n	8004866 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e005      	b.n	8004872 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b008      	add	sp, #32
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b08e      	sub	sp, #56	@ 0x38
 8004880:	af00      	add	r7, sp, #0
 8004882:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004884:	231a      	movs	r3, #26
 8004886:	2218      	movs	r2, #24
 8004888:	189b      	adds	r3, r3, r2
 800488a:	19db      	adds	r3, r3, r7
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	431a      	orrs	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	431a      	orrs	r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4ac6      	ldr	r2, [pc, #792]	@ (8004bc8 <UART_SetConfig+0x34c>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4ac1      	ldr	r2, [pc, #772]	@ (8004bcc <UART_SetConfig+0x350>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	0019      	movs	r1, r3
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4abb      	ldr	r2, [pc, #748]	@ (8004bd0 <UART_SetConfig+0x354>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ec:	4313      	orrs	r3, r2
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4ab7      	ldr	r2, [pc, #732]	@ (8004bd4 <UART_SetConfig+0x358>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004902:	430a      	orrs	r2, r1
 8004904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4ab3      	ldr	r2, [pc, #716]	@ (8004bd8 <UART_SetConfig+0x35c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d131      	bne.n	8004974 <UART_SetConfig+0xf8>
 8004910:	4bb2      	ldr	r3, [pc, #712]	@ (8004bdc <UART_SetConfig+0x360>)
 8004912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004914:	2203      	movs	r2, #3
 8004916:	4013      	ands	r3, r2
 8004918:	2b03      	cmp	r3, #3
 800491a:	d01d      	beq.n	8004958 <UART_SetConfig+0xdc>
 800491c:	d823      	bhi.n	8004966 <UART_SetConfig+0xea>
 800491e:	2b02      	cmp	r3, #2
 8004920:	d00c      	beq.n	800493c <UART_SetConfig+0xc0>
 8004922:	d820      	bhi.n	8004966 <UART_SetConfig+0xea>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <UART_SetConfig+0xb2>
 8004928:	2b01      	cmp	r3, #1
 800492a:	d00e      	beq.n	800494a <UART_SetConfig+0xce>
 800492c:	e01b      	b.n	8004966 <UART_SetConfig+0xea>
 800492e:	231b      	movs	r3, #27
 8004930:	2218      	movs	r2, #24
 8004932:	189b      	adds	r3, r3, r2
 8004934:	19db      	adds	r3, r3, r7
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e09c      	b.n	8004a76 <UART_SetConfig+0x1fa>
 800493c:	231b      	movs	r3, #27
 800493e:	2218      	movs	r2, #24
 8004940:	189b      	adds	r3, r3, r2
 8004942:	19db      	adds	r3, r3, r7
 8004944:	2202      	movs	r2, #2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e095      	b.n	8004a76 <UART_SetConfig+0x1fa>
 800494a:	231b      	movs	r3, #27
 800494c:	2218      	movs	r2, #24
 800494e:	189b      	adds	r3, r3, r2
 8004950:	19db      	adds	r3, r3, r7
 8004952:	2204      	movs	r2, #4
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e08e      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004958:	231b      	movs	r3, #27
 800495a:	2218      	movs	r2, #24
 800495c:	189b      	adds	r3, r3, r2
 800495e:	19db      	adds	r3, r3, r7
 8004960:	2208      	movs	r2, #8
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e087      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004966:	231b      	movs	r3, #27
 8004968:	2218      	movs	r2, #24
 800496a:	189b      	adds	r3, r3, r2
 800496c:	19db      	adds	r3, r3, r7
 800496e:	2210      	movs	r2, #16
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e080      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a99      	ldr	r2, [pc, #612]	@ (8004be0 <UART_SetConfig+0x364>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d131      	bne.n	80049e2 <UART_SetConfig+0x166>
 800497e:	4b97      	ldr	r3, [pc, #604]	@ (8004bdc <UART_SetConfig+0x360>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004982:	220c      	movs	r2, #12
 8004984:	4013      	ands	r3, r2
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d01d      	beq.n	80049c6 <UART_SetConfig+0x14a>
 800498a:	d823      	bhi.n	80049d4 <UART_SetConfig+0x158>
 800498c:	2b08      	cmp	r3, #8
 800498e:	d00c      	beq.n	80049aa <UART_SetConfig+0x12e>
 8004990:	d820      	bhi.n	80049d4 <UART_SetConfig+0x158>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <UART_SetConfig+0x120>
 8004996:	2b04      	cmp	r3, #4
 8004998:	d00e      	beq.n	80049b8 <UART_SetConfig+0x13c>
 800499a:	e01b      	b.n	80049d4 <UART_SetConfig+0x158>
 800499c:	231b      	movs	r3, #27
 800499e:	2218      	movs	r2, #24
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	19db      	adds	r3, r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e065      	b.n	8004a76 <UART_SetConfig+0x1fa>
 80049aa:	231b      	movs	r3, #27
 80049ac:	2218      	movs	r2, #24
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	19db      	adds	r3, r3, r7
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e05e      	b.n	8004a76 <UART_SetConfig+0x1fa>
 80049b8:	231b      	movs	r3, #27
 80049ba:	2218      	movs	r2, #24
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	19db      	adds	r3, r3, r7
 80049c0:	2204      	movs	r2, #4
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e057      	b.n	8004a76 <UART_SetConfig+0x1fa>
 80049c6:	231b      	movs	r3, #27
 80049c8:	2218      	movs	r2, #24
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	19db      	adds	r3, r3, r7
 80049ce:	2208      	movs	r2, #8
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e050      	b.n	8004a76 <UART_SetConfig+0x1fa>
 80049d4:	231b      	movs	r3, #27
 80049d6:	2218      	movs	r2, #24
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	19db      	adds	r3, r3, r7
 80049dc:	2210      	movs	r2, #16
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e049      	b.n	8004a76 <UART_SetConfig+0x1fa>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7a      	ldr	r2, [pc, #488]	@ (8004bd0 <UART_SetConfig+0x354>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d13e      	bne.n	8004a6a <UART_SetConfig+0x1ee>
 80049ec:	4b7b      	ldr	r3, [pc, #492]	@ (8004bdc <UART_SetConfig+0x360>)
 80049ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049f0:	23c0      	movs	r3, #192	@ 0xc0
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4013      	ands	r3, r2
 80049f6:	22c0      	movs	r2, #192	@ 0xc0
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d027      	beq.n	8004a4e <UART_SetConfig+0x1d2>
 80049fe:	22c0      	movs	r2, #192	@ 0xc0
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d82a      	bhi.n	8004a5c <UART_SetConfig+0x1e0>
 8004a06:	2280      	movs	r2, #128	@ 0x80
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d011      	beq.n	8004a32 <UART_SetConfig+0x1b6>
 8004a0e:	2280      	movs	r2, #128	@ 0x80
 8004a10:	0112      	lsls	r2, r2, #4
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d822      	bhi.n	8004a5c <UART_SetConfig+0x1e0>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <UART_SetConfig+0x1a8>
 8004a1a:	2280      	movs	r2, #128	@ 0x80
 8004a1c:	00d2      	lsls	r2, r2, #3
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <UART_SetConfig+0x1c4>
 8004a22:	e01b      	b.n	8004a5c <UART_SetConfig+0x1e0>
 8004a24:	231b      	movs	r3, #27
 8004a26:	2218      	movs	r2, #24
 8004a28:	189b      	adds	r3, r3, r2
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e021      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004a32:	231b      	movs	r3, #27
 8004a34:	2218      	movs	r2, #24
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	19db      	adds	r3, r3, r7
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e01a      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004a40:	231b      	movs	r3, #27
 8004a42:	2218      	movs	r2, #24
 8004a44:	189b      	adds	r3, r3, r2
 8004a46:	19db      	adds	r3, r3, r7
 8004a48:	2204      	movs	r2, #4
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	e013      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004a4e:	231b      	movs	r3, #27
 8004a50:	2218      	movs	r2, #24
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	19db      	adds	r3, r3, r7
 8004a56:	2208      	movs	r2, #8
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e00c      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004a5c:	231b      	movs	r3, #27
 8004a5e:	2218      	movs	r2, #24
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	19db      	adds	r3, r3, r7
 8004a64:	2210      	movs	r2, #16
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e005      	b.n	8004a76 <UART_SetConfig+0x1fa>
 8004a6a:	231b      	movs	r3, #27
 8004a6c:	2218      	movs	r2, #24
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	19db      	adds	r3, r3, r7
 8004a72:	2210      	movs	r2, #16
 8004a74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a55      	ldr	r2, [pc, #340]	@ (8004bd0 <UART_SetConfig+0x354>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d000      	beq.n	8004a82 <UART_SetConfig+0x206>
 8004a80:	e084      	b.n	8004b8c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a82:	231b      	movs	r3, #27
 8004a84:	2218      	movs	r2, #24
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	19db      	adds	r3, r3, r7
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d01d      	beq.n	8004acc <UART_SetConfig+0x250>
 8004a90:	dc20      	bgt.n	8004ad4 <UART_SetConfig+0x258>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d015      	beq.n	8004ac2 <UART_SetConfig+0x246>
 8004a96:	dc1d      	bgt.n	8004ad4 <UART_SetConfig+0x258>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <UART_SetConfig+0x226>
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d005      	beq.n	8004aac <UART_SetConfig+0x230>
 8004aa0:	e018      	b.n	8004ad4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7ff fb07 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004aaa:	e01c      	b.n	8004ae6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aac:	4b4b      	ldr	r3, [pc, #300]	@ (8004bdc <UART_SetConfig+0x360>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d002      	beq.n	8004abc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8004be4 <UART_SetConfig+0x368>)
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004abc:	4b4a      	ldr	r3, [pc, #296]	@ (8004be8 <UART_SetConfig+0x36c>)
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ac0:	e011      	b.n	8004ae6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac2:	f7ff fa67 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004aca:	e00c      	b.n	8004ae6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ad2:	e008      	b.n	8004ae6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004ad8:	231a      	movs	r3, #26
 8004ada:	2218      	movs	r2, #24
 8004adc:	189b      	adds	r3, r3, r2
 8004ade:	19db      	adds	r3, r3, r7
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
        break;
 8004ae4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d100      	bne.n	8004aee <UART_SetConfig+0x272>
 8004aec:	e132      	b.n	8004d54 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	0013      	movs	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d305      	bcc.n	8004b0a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d906      	bls.n	8004b18 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004b0a:	231a      	movs	r3, #26
 8004b0c:	2218      	movs	r2, #24
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	19db      	adds	r3, r3, r7
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e11d      	b.n	8004d54 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	6939      	ldr	r1, [r7, #16]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	000b      	movs	r3, r1
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	0010      	movs	r0, r2
 8004b2a:	0205      	lsls	r5, r0, #8
 8004b2c:	431d      	orrs	r5, r3
 8004b2e:	000b      	movs	r3, r1
 8004b30:	021c      	lsls	r4, r3, #8
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68b8      	ldr	r0, [r7, #8]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	1900      	adds	r0, r0, r4
 8004b44:	4169      	adcs	r1, r5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f7fb fca8 	bl	80004a8 <__aeabi_uldivmod>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	000b      	movs	r3, r1
 8004b5c:	0013      	movs	r3, r2
 8004b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b62:	23c0      	movs	r3, #192	@ 0xc0
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d309      	bcc.n	8004b7e <UART_SetConfig+0x302>
 8004b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	035b      	lsls	r3, r3, #13
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d204      	bcs.n	8004b7e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	e0ea      	b.n	8004d54 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b7e:	231a      	movs	r3, #26
 8004b80:	2218      	movs	r2, #24
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	19db      	adds	r3, r3, r7
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e0e3      	b.n	8004d54 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d000      	beq.n	8004b9a <UART_SetConfig+0x31e>
 8004b98:	e085      	b.n	8004ca6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004b9a:	231b      	movs	r3, #27
 8004b9c:	2218      	movs	r2, #24
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	19db      	adds	r3, r3, r7
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d837      	bhi.n	8004c18 <UART_SetConfig+0x39c>
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <UART_SetConfig+0x370>)
 8004bac:	18d3      	adds	r3, r2, r3
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb2:	f7ff fa7f 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bba:	e036      	b.n	8004c2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7ff fa90 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bc4:	e031      	b.n	8004c2a <UART_SetConfig+0x3ae>
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	efff69f3 	.word	0xefff69f3
 8004bcc:	ffffcfff 	.word	0xffffcfff
 8004bd0:	40004800 	.word	0x40004800
 8004bd4:	fffff4ff 	.word	0xfffff4ff
 8004bd8:	40013800 	.word	0x40013800
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40004400 	.word	0x40004400
 8004be4:	003d0900 	.word	0x003d0900
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	08008060 	.word	0x08008060
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf0:	4b60      	ldr	r3, [pc, #384]	@ (8004d74 <UART_SetConfig+0x4f8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d002      	beq.n	8004c00 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8004d78 <UART_SetConfig+0x4fc>)
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bfe:	e014      	b.n	8004c2a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b5e      	ldr	r3, [pc, #376]	@ (8004d7c <UART_SetConfig+0x500>)
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c04:	e011      	b.n	8004c2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7ff f9c5 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c0e:	e00c      	b.n	8004c2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c16:	e008      	b.n	8004c2a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004c1c:	231a      	movs	r3, #26
 8004c1e:	2218      	movs	r2, #24
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	19db      	adds	r3, r3, r7
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
        break;
 8004c28:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d100      	bne.n	8004c32 <UART_SetConfig+0x3b6>
 8004c30:	e090      	b.n	8004d54 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	18d2      	adds	r2, r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0019      	movs	r1, r3
 8004c44:	0010      	movs	r0, r2
 8004c46:	f7fb fa7b 	bl	8000140 <__udivsi3>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d921      	bls.n	8004c98 <UART_SetConfig+0x41c>
 8004c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c56:	2380      	movs	r3, #128	@ 0x80
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d21c      	bcs.n	8004c98 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	200e      	movs	r0, #14
 8004c64:	2418      	movs	r4, #24
 8004c66:	1903      	adds	r3, r0, r4
 8004c68:	19db      	adds	r3, r3, r7
 8004c6a:	210f      	movs	r1, #15
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2207      	movs	r2, #7
 8004c78:	4013      	ands	r3, r2
 8004c7a:	b299      	uxth	r1, r3
 8004c7c:	1903      	adds	r3, r0, r4
 8004c7e:	19db      	adds	r3, r3, r7
 8004c80:	1902      	adds	r2, r0, r4
 8004c82:	19d2      	adds	r2, r2, r7
 8004c84:	8812      	ldrh	r2, [r2, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1902      	adds	r2, r0, r4
 8004c90:	19d2      	adds	r2, r2, r7
 8004c92:	8812      	ldrh	r2, [r2, #0]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e05d      	b.n	8004d54 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c98:	231a      	movs	r3, #26
 8004c9a:	2218      	movs	r2, #24
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	19db      	adds	r3, r3, r7
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e056      	b.n	8004d54 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca6:	231b      	movs	r3, #27
 8004ca8:	2218      	movs	r2, #24
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	19db      	adds	r3, r3, r7
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d822      	bhi.n	8004cfa <UART_SetConfig+0x47e>
 8004cb4:	009a      	lsls	r2, r3, #2
 8004cb6:	4b32      	ldr	r3, [pc, #200]	@ (8004d80 <UART_SetConfig+0x504>)
 8004cb8:	18d3      	adds	r3, r2, r3
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cbe:	f7ff f9f9 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cc6:	e021      	b.n	8004d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7ff fa0a 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cd0:	e01c      	b.n	8004d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cd2:	4b28      	ldr	r3, [pc, #160]	@ (8004d74 <UART_SetConfig+0x4f8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004cdc:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <UART_SetConfig+0x4fc>)
 8004cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ce0:	e014      	b.n	8004d0c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004ce2:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <UART_SetConfig+0x500>)
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ce6:	e011      	b.n	8004d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce8:	f7ff f954 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8004cec:	0003      	movs	r3, r0
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cf0:	e00c      	b.n	8004d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf2:	2380      	movs	r3, #128	@ 0x80
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cf8:	e008      	b.n	8004d0c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004cfe:	231a      	movs	r3, #26
 8004d00:	2218      	movs	r2, #24
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	19db      	adds	r3, r3, r7
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
        break;
 8004d0a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d020      	beq.n	8004d54 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	085a      	lsrs	r2, r3, #1
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1a:	18d2      	adds	r2, r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	0019      	movs	r1, r3
 8004d22:	0010      	movs	r0, r2
 8004d24:	f7fb fa0c 	bl	8000140 <__udivsi3>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	d90a      	bls.n	8004d48 <UART_SetConfig+0x4cc>
 8004d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d34:	2380      	movs	r3, #128	@ 0x80
 8004d36:	025b      	lsls	r3, r3, #9
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d205      	bcs.n	8004d48 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e005      	b.n	8004d54 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d48:	231a      	movs	r3, #26
 8004d4a:	2218      	movs	r2, #24
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2200      	movs	r2, #0
 8004d58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d60:	231a      	movs	r3, #26
 8004d62:	2218      	movs	r2, #24
 8004d64:	189b      	adds	r3, r3, r2
 8004d66:	19db      	adds	r3, r3, r7
 8004d68:	781b      	ldrb	r3, [r3, #0]
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b00e      	add	sp, #56	@ 0x38
 8004d70:	bdb0      	pop	{r4, r5, r7, pc}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	40021000 	.word	0x40021000
 8004d78:	003d0900 	.word	0x003d0900
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	08008084 	.word	0x08008084

08004d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	2208      	movs	r2, #8
 8004d92:	4013      	ands	r3, r2
 8004d94:	d00b      	beq.n	8004dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <UART_AdvFeatureConfig+0x144>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	2201      	movs	r2, #1
 8004db4:	4013      	ands	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4a43      	ldr	r2, [pc, #268]	@ (8004ecc <UART_AdvFeatureConfig+0x148>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed0 <UART_AdvFeatureConfig+0x14c>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	2204      	movs	r2, #4
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a34      	ldr	r2, [pc, #208]	@ (8004ed4 <UART_AdvFeatureConfig+0x150>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	2210      	movs	r2, #16
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed8 <UART_AdvFeatureConfig+0x154>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4a25      	ldr	r2, [pc, #148]	@ (8004edc <UART_AdvFeatureConfig+0x158>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	2240      	movs	r2, #64	@ 0x40
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d01d      	beq.n	8004e9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <UART_AdvFeatureConfig+0x15c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	035b      	lsls	r3, r3, #13
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d10b      	bne.n	8004e9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ee4 <UART_AdvFeatureConfig+0x160>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	2280      	movs	r2, #128	@ 0x80
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee8 <UART_AdvFeatureConfig+0x164>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	ffff7fff 	.word	0xffff7fff
 8004ecc:	fffdffff 	.word	0xfffdffff
 8004ed0:	fffeffff 	.word	0xfffeffff
 8004ed4:	fffbffff 	.word	0xfffbffff
 8004ed8:	ffffefff 	.word	0xffffefff
 8004edc:	ffffdfff 	.word	0xffffdfff
 8004ee0:	ffefffff 	.word	0xffefffff
 8004ee4:	ff9fffff 	.word	0xff9fffff
 8004ee8:	fff7ffff 	.word	0xfff7ffff

08004eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b092      	sub	sp, #72	@ 0x48
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2284      	movs	r2, #132	@ 0x84
 8004ef8:	2100      	movs	r1, #0
 8004efa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004efc:	f7fe f8ac 	bl	8003058 <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d12c      	bne.n	8004f6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f14:	2280      	movs	r2, #128	@ 0x80
 8004f16:	0391      	lsls	r1, r2, #14
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4a46      	ldr	r2, [pc, #280]	@ (8005034 <UART_CheckIdleState+0x148>)
 8004f1c:	9200      	str	r2, [sp, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f000 f88c 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d021      	beq.n	8004f6c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f28:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f32:	2301      	movs	r3, #1
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2180      	movs	r1, #128	@ 0x80
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2278      	movs	r2, #120	@ 0x78
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e05f      	b.n	800502c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2204      	movs	r2, #4
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d146      	bne.n	8005008 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	03d1      	lsls	r1, r2, #15
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	@ (8005034 <UART_CheckIdleState+0x148>)
 8004f84:	9200      	str	r2, [sp, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f000 f858 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d03b      	beq.n	8005008 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f90:	f3ef 8310 	mrs	r3, PRIMASK
 8004f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4921      	ldr	r1, [pc, #132]	@ (8005038 <UART_CheckIdleState+0x14c>)
 8004fb2:	400a      	ands	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f383 8810 	msr	PRIMASK, r3
}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2280      	movs	r2, #128	@ 0x80
 8004ff8:	2120      	movs	r1, #32
 8004ffa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2278      	movs	r2, #120	@ 0x78
 8005000:	2100      	movs	r1, #0
 8005002:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e011      	b.n	800502c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2280      	movs	r2, #128	@ 0x80
 8005012:	2120      	movs	r1, #32
 8005014:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2278      	movs	r2, #120	@ 0x78
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b010      	add	sp, #64	@ 0x40
 8005032:	bd80      	pop	{r7, pc}
 8005034:	01ffffff 	.word	0x01ffffff
 8005038:	fffffedf 	.word	0xfffffedf

0800503c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504c:	e051      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	3301      	adds	r3, #1
 8005052:	d04e      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005054:	f7fe f800 	bl	8003058 <HAL_GetTick>
 8005058:	0002      	movs	r2, r0
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e051      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2204      	movs	r2, #4
 8005076:	4013      	ands	r3, r2
 8005078:	d03b      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b80      	cmp	r3, #128	@ 0x80
 800507e:	d038      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b40      	cmp	r3, #64	@ 0x40
 8005084:	d035      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	2208      	movs	r2, #8
 800508e:	4013      	ands	r3, r2
 8005090:	2b08      	cmp	r3, #8
 8005092:	d111      	bne.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2208      	movs	r2, #8
 800509a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0018      	movs	r0, r3
 80050a0:	f000 f83c 	bl	800511c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2284      	movs	r2, #132	@ 0x84
 80050a8:	2108      	movs	r1, #8
 80050aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2278      	movs	r2, #120	@ 0x78
 80050b0:	2100      	movs	r1, #0
 80050b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e02c      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	401a      	ands	r2, r3
 80050c4:	2380      	movs	r3, #128	@ 0x80
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d112      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2280      	movs	r2, #128	@ 0x80
 80050d2:	0112      	lsls	r2, r2, #4
 80050d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f81f 	bl	800511c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2284      	movs	r2, #132	@ 0x84
 80050e2:	2120      	movs	r1, #32
 80050e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2278      	movs	r2, #120	@ 0x78
 80050ea:	2100      	movs	r1, #0
 80050ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e00f      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	425a      	negs	r2, r3
 8005102:	4153      	adcs	r3, r2
 8005104:	b2db      	uxtb	r3, r3
 8005106:	001a      	movs	r2, r3
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d09e      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	@ 0x38
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8310 	mrs	r3, PRIMASK
 8005128:	617b      	str	r3, [r7, #20]
  return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
 800512e:	2301      	movs	r3, #1
 8005130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4926      	ldr	r1, [pc, #152]	@ (80051e0 <UART_EndRxTransfer+0xc4>)
 8005146:	400a      	ands	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005156:	f3ef 8310 	mrs	r3, PRIMASK
 800515a:	623b      	str	r3, [r7, #32]
  return(result);
 800515c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005160:	2301      	movs	r3, #1
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	f383 8810 	msr	PRIMASK, r3
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2101      	movs	r1, #1
 8005178:	438a      	bics	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	f383 8810 	msr	PRIMASK, r3
}
 8005186:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518c:	2b01      	cmp	r3, #1
 800518e:	d118      	bne.n	80051c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	60bb      	str	r3, [r7, #8]
  return(result);
 8005196:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800519a:	2301      	movs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f383 8810 	msr	PRIMASK, r3
}
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2110      	movs	r1, #16
 80051b2:	438a      	bics	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2280      	movs	r2, #128	@ 0x80
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b00e      	add	sp, #56	@ 0x38
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	fffffedf 	.word	0xfffffedf

080051e4 <__cvt>:
 80051e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e6:	001f      	movs	r7, r3
 80051e8:	2300      	movs	r3, #0
 80051ea:	0016      	movs	r6, r2
 80051ec:	b08b      	sub	sp, #44	@ 0x2c
 80051ee:	429f      	cmp	r7, r3
 80051f0:	da04      	bge.n	80051fc <__cvt+0x18>
 80051f2:	2180      	movs	r1, #128	@ 0x80
 80051f4:	0609      	lsls	r1, r1, #24
 80051f6:	187b      	adds	r3, r7, r1
 80051f8:	001f      	movs	r7, r3
 80051fa:	232d      	movs	r3, #45	@ 0x2d
 80051fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051fe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005200:	7013      	strb	r3, [r2, #0]
 8005202:	2320      	movs	r3, #32
 8005204:	2203      	movs	r2, #3
 8005206:	439d      	bics	r5, r3
 8005208:	2d46      	cmp	r5, #70	@ 0x46
 800520a:	d007      	beq.n	800521c <__cvt+0x38>
 800520c:	002b      	movs	r3, r5
 800520e:	3b45      	subs	r3, #69	@ 0x45
 8005210:	4259      	negs	r1, r3
 8005212:	414b      	adcs	r3, r1
 8005214:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005216:	3a01      	subs	r2, #1
 8005218:	18cb      	adds	r3, r1, r3
 800521a:	9310      	str	r3, [sp, #64]	@ 0x40
 800521c:	ab09      	add	r3, sp, #36	@ 0x24
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	ab08      	add	r3, sp, #32
 8005222:	9303      	str	r3, [sp, #12]
 8005224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005226:	9200      	str	r2, [sp, #0]
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800522c:	0032      	movs	r2, r6
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	003b      	movs	r3, r7
 8005232:	f000 fe81 	bl	8005f38 <_dtoa_r>
 8005236:	0004      	movs	r4, r0
 8005238:	2d47      	cmp	r5, #71	@ 0x47
 800523a:	d11b      	bne.n	8005274 <__cvt+0x90>
 800523c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800523e:	07db      	lsls	r3, r3, #31
 8005240:	d511      	bpl.n	8005266 <__cvt+0x82>
 8005242:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005244:	18c3      	adds	r3, r0, r3
 8005246:	9307      	str	r3, [sp, #28]
 8005248:	2200      	movs	r2, #0
 800524a:	2300      	movs	r3, #0
 800524c:	0030      	movs	r0, r6
 800524e:	0039      	movs	r1, r7
 8005250:	f7fb f8fc 	bl	800044c <__aeabi_dcmpeq>
 8005254:	2800      	cmp	r0, #0
 8005256:	d001      	beq.n	800525c <__cvt+0x78>
 8005258:	9b07      	ldr	r3, [sp, #28]
 800525a:	9309      	str	r3, [sp, #36]	@ 0x24
 800525c:	2230      	movs	r2, #48	@ 0x30
 800525e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005260:	9907      	ldr	r1, [sp, #28]
 8005262:	428b      	cmp	r3, r1
 8005264:	d320      	bcc.n	80052a8 <__cvt+0xc4>
 8005266:	0020      	movs	r0, r4
 8005268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800526c:	1b1b      	subs	r3, r3, r4
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	b00b      	add	sp, #44	@ 0x2c
 8005272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005274:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005276:	18c3      	adds	r3, r0, r3
 8005278:	9307      	str	r3, [sp, #28]
 800527a:	2d46      	cmp	r5, #70	@ 0x46
 800527c:	d1e4      	bne.n	8005248 <__cvt+0x64>
 800527e:	7803      	ldrb	r3, [r0, #0]
 8005280:	2b30      	cmp	r3, #48	@ 0x30
 8005282:	d10c      	bne.n	800529e <__cvt+0xba>
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	0030      	movs	r0, r6
 800528a:	0039      	movs	r1, r7
 800528c:	f7fb f8de 	bl	800044c <__aeabi_dcmpeq>
 8005290:	2800      	cmp	r0, #0
 8005292:	d104      	bne.n	800529e <__cvt+0xba>
 8005294:	2301      	movs	r3, #1
 8005296:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052a0:	9a07      	ldr	r2, [sp, #28]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	e7ce      	b.n	8005246 <__cvt+0x62>
 80052a8:	1c59      	adds	r1, r3, #1
 80052aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e7d6      	b.n	800525e <__cvt+0x7a>

080052b0 <__exponent>:
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	232b      	movs	r3, #43	@ 0x2b
 80052b4:	b085      	sub	sp, #20
 80052b6:	0005      	movs	r5, r0
 80052b8:	1e0c      	subs	r4, r1, #0
 80052ba:	7002      	strb	r2, [r0, #0]
 80052bc:	da01      	bge.n	80052c2 <__exponent+0x12>
 80052be:	424c      	negs	r4, r1
 80052c0:	3302      	adds	r3, #2
 80052c2:	706b      	strb	r3, [r5, #1]
 80052c4:	2c09      	cmp	r4, #9
 80052c6:	dd2c      	ble.n	8005322 <__exponent+0x72>
 80052c8:	ab02      	add	r3, sp, #8
 80052ca:	1dde      	adds	r6, r3, #7
 80052cc:	0020      	movs	r0, r4
 80052ce:	210a      	movs	r1, #10
 80052d0:	f7fb f8a6 	bl	8000420 <__aeabi_idivmod>
 80052d4:	0037      	movs	r7, r6
 80052d6:	3130      	adds	r1, #48	@ 0x30
 80052d8:	3e01      	subs	r6, #1
 80052da:	0020      	movs	r0, r4
 80052dc:	7031      	strb	r1, [r6, #0]
 80052de:	210a      	movs	r1, #10
 80052e0:	9401      	str	r4, [sp, #4]
 80052e2:	f7fa ffb7 	bl	8000254 <__divsi3>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	0004      	movs	r4, r0
 80052ea:	2b63      	cmp	r3, #99	@ 0x63
 80052ec:	dcee      	bgt.n	80052cc <__exponent+0x1c>
 80052ee:	1eba      	subs	r2, r7, #2
 80052f0:	1ca8      	adds	r0, r5, #2
 80052f2:	0001      	movs	r1, r0
 80052f4:	0013      	movs	r3, r2
 80052f6:	3430      	adds	r4, #48	@ 0x30
 80052f8:	7014      	strb	r4, [r2, #0]
 80052fa:	ac02      	add	r4, sp, #8
 80052fc:	3407      	adds	r4, #7
 80052fe:	429c      	cmp	r4, r3
 8005300:	d80a      	bhi.n	8005318 <__exponent+0x68>
 8005302:	2300      	movs	r3, #0
 8005304:	4294      	cmp	r4, r2
 8005306:	d303      	bcc.n	8005310 <__exponent+0x60>
 8005308:	3309      	adds	r3, #9
 800530a:	aa02      	add	r2, sp, #8
 800530c:	189b      	adds	r3, r3, r2
 800530e:	1bdb      	subs	r3, r3, r7
 8005310:	18c0      	adds	r0, r0, r3
 8005312:	1b40      	subs	r0, r0, r5
 8005314:	b005      	add	sp, #20
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	781c      	ldrb	r4, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	700c      	strb	r4, [r1, #0]
 800531e:	3101      	adds	r1, #1
 8005320:	e7eb      	b.n	80052fa <__exponent+0x4a>
 8005322:	2330      	movs	r3, #48	@ 0x30
 8005324:	18e4      	adds	r4, r4, r3
 8005326:	70ab      	strb	r3, [r5, #2]
 8005328:	1d28      	adds	r0, r5, #4
 800532a:	70ec      	strb	r4, [r5, #3]
 800532c:	e7f1      	b.n	8005312 <__exponent+0x62>
	...

08005330 <_printf_float>:
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b097      	sub	sp, #92	@ 0x5c
 8005334:	000d      	movs	r5, r1
 8005336:	920a      	str	r2, [sp, #40]	@ 0x28
 8005338:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800533a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800533c:	9009      	str	r0, [sp, #36]	@ 0x24
 800533e:	f000 fceb 	bl	8005d18 <_localeconv_r>
 8005342:	6803      	ldr	r3, [r0, #0]
 8005344:	0018      	movs	r0, r3
 8005346:	930d      	str	r3, [sp, #52]	@ 0x34
 8005348:	f7fa fede 	bl	8000108 <strlen>
 800534c:	2300      	movs	r3, #0
 800534e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005350:	9314      	str	r3, [sp, #80]	@ 0x50
 8005352:	7e2b      	ldrb	r3, [r5, #24]
 8005354:	2207      	movs	r2, #7
 8005356:	930c      	str	r3, [sp, #48]	@ 0x30
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	930e      	str	r3, [sp, #56]	@ 0x38
 800535c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	05c9      	lsls	r1, r1, #23
 8005362:	d545      	bpl.n	80053f0 <_printf_float+0xc0>
 8005364:	189b      	adds	r3, r3, r2
 8005366:	4393      	bics	r3, r2
 8005368:	001a      	movs	r2, r3
 800536a:	3208      	adds	r2, #8
 800536c:	6022      	str	r2, [r4, #0]
 800536e:	2201      	movs	r2, #1
 8005370:	681e      	ldr	r6, [r3, #0]
 8005372:	685f      	ldr	r7, [r3, #4]
 8005374:	007b      	lsls	r3, r7, #1
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	9311      	str	r3, [sp, #68]	@ 0x44
 800537a:	9610      	str	r6, [sp, #64]	@ 0x40
 800537c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800537e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005380:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005382:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005384:	4ba7      	ldr	r3, [pc, #668]	@ (8005624 <_printf_float+0x2f4>)
 8005386:	4252      	negs	r2, r2
 8005388:	f7fd f8b0 	bl	80024ec <__aeabi_dcmpun>
 800538c:	2800      	cmp	r0, #0
 800538e:	d131      	bne.n	80053f4 <_printf_float+0xc4>
 8005390:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005392:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005394:	2201      	movs	r2, #1
 8005396:	4ba3      	ldr	r3, [pc, #652]	@ (8005624 <_printf_float+0x2f4>)
 8005398:	4252      	negs	r2, r2
 800539a:	f7fb f867 	bl	800046c <__aeabi_dcmple>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d128      	bne.n	80053f4 <_printf_float+0xc4>
 80053a2:	2200      	movs	r2, #0
 80053a4:	2300      	movs	r3, #0
 80053a6:	0030      	movs	r0, r6
 80053a8:	0039      	movs	r1, r7
 80053aa:	f7fb f855 	bl	8000458 <__aeabi_dcmplt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d003      	beq.n	80053ba <_printf_float+0x8a>
 80053b2:	002b      	movs	r3, r5
 80053b4:	222d      	movs	r2, #45	@ 0x2d
 80053b6:	3343      	adds	r3, #67	@ 0x43
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053bc:	4f9a      	ldr	r7, [pc, #616]	@ (8005628 <_printf_float+0x2f8>)
 80053be:	2b47      	cmp	r3, #71	@ 0x47
 80053c0:	d800      	bhi.n	80053c4 <_printf_float+0x94>
 80053c2:	4f9a      	ldr	r7, [pc, #616]	@ (800562c <_printf_float+0x2fc>)
 80053c4:	2303      	movs	r3, #3
 80053c6:	2400      	movs	r4, #0
 80053c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053ca:	612b      	str	r3, [r5, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	439a      	bics	r2, r3
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053d4:	0029      	movs	r1, r5
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053dc:	aa15      	add	r2, sp, #84	@ 0x54
 80053de:	f000 f9e5 	bl	80057ac <_printf_common>
 80053e2:	3001      	adds	r0, #1
 80053e4:	d000      	beq.n	80053e8 <_printf_float+0xb8>
 80053e6:	e09e      	b.n	8005526 <_printf_float+0x1f6>
 80053e8:	2001      	movs	r0, #1
 80053ea:	4240      	negs	r0, r0
 80053ec:	b017      	add	sp, #92	@ 0x5c
 80053ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f0:	3307      	adds	r3, #7
 80053f2:	e7b8      	b.n	8005366 <_printf_float+0x36>
 80053f4:	0032      	movs	r2, r6
 80053f6:	003b      	movs	r3, r7
 80053f8:	0030      	movs	r0, r6
 80053fa:	0039      	movs	r1, r7
 80053fc:	f7fd f876 	bl	80024ec <__aeabi_dcmpun>
 8005400:	2800      	cmp	r0, #0
 8005402:	d00b      	beq.n	800541c <_printf_float+0xec>
 8005404:	2f00      	cmp	r7, #0
 8005406:	da03      	bge.n	8005410 <_printf_float+0xe0>
 8005408:	002b      	movs	r3, r5
 800540a:	222d      	movs	r2, #45	@ 0x2d
 800540c:	3343      	adds	r3, #67	@ 0x43
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005412:	4f87      	ldr	r7, [pc, #540]	@ (8005630 <_printf_float+0x300>)
 8005414:	2b47      	cmp	r3, #71	@ 0x47
 8005416:	d8d5      	bhi.n	80053c4 <_printf_float+0x94>
 8005418:	4f86      	ldr	r7, [pc, #536]	@ (8005634 <_printf_float+0x304>)
 800541a:	e7d3      	b.n	80053c4 <_printf_float+0x94>
 800541c:	2220      	movs	r2, #32
 800541e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005420:	686b      	ldr	r3, [r5, #4]
 8005422:	4394      	bics	r4, r2
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	d146      	bne.n	80054b6 <_printf_float+0x186>
 8005428:	3307      	adds	r3, #7
 800542a:	606b      	str	r3, [r5, #4]
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4313      	orrs	r3, r2
 8005434:	2200      	movs	r2, #0
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	9206      	str	r2, [sp, #24]
 800543a:	aa14      	add	r2, sp, #80	@ 0x50
 800543c:	9205      	str	r2, [sp, #20]
 800543e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005440:	a90a      	add	r1, sp, #40	@ 0x28
 8005442:	9204      	str	r2, [sp, #16]
 8005444:	aa13      	add	r2, sp, #76	@ 0x4c
 8005446:	9203      	str	r2, [sp, #12]
 8005448:	2223      	movs	r2, #35	@ 0x23
 800544a:	1852      	adds	r2, r2, r1
 800544c:	9202      	str	r2, [sp, #8]
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	686b      	ldr	r3, [r5, #4]
 8005452:	0032      	movs	r2, r6
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005458:	003b      	movs	r3, r7
 800545a:	f7ff fec3 	bl	80051e4 <__cvt>
 800545e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005460:	0007      	movs	r7, r0
 8005462:	2c47      	cmp	r4, #71	@ 0x47
 8005464:	d12d      	bne.n	80054c2 <_printf_float+0x192>
 8005466:	1cd3      	adds	r3, r2, #3
 8005468:	db02      	blt.n	8005470 <_printf_float+0x140>
 800546a:	686b      	ldr	r3, [r5, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	dd47      	ble.n	8005500 <_printf_float+0x1d0>
 8005470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005472:	3b02      	subs	r3, #2
 8005474:	b2db      	uxtb	r3, r3
 8005476:	930c      	str	r3, [sp, #48]	@ 0x30
 8005478:	0028      	movs	r0, r5
 800547a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800547c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800547e:	3901      	subs	r1, #1
 8005480:	3050      	adds	r0, #80	@ 0x50
 8005482:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005484:	f7ff ff14 	bl	80052b0 <__exponent>
 8005488:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800548a:	0004      	movs	r4, r0
 800548c:	1813      	adds	r3, r2, r0
 800548e:	612b      	str	r3, [r5, #16]
 8005490:	2a01      	cmp	r2, #1
 8005492:	dc02      	bgt.n	800549a <_printf_float+0x16a>
 8005494:	682a      	ldr	r2, [r5, #0]
 8005496:	07d2      	lsls	r2, r2, #31
 8005498:	d501      	bpl.n	800549e <_printf_float+0x16e>
 800549a:	3301      	adds	r3, #1
 800549c:	612b      	str	r3, [r5, #16]
 800549e:	2323      	movs	r3, #35	@ 0x23
 80054a0:	aa0a      	add	r2, sp, #40	@ 0x28
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d100      	bne.n	80054ac <_printf_float+0x17c>
 80054aa:	e792      	b.n	80053d2 <_printf_float+0xa2>
 80054ac:	002b      	movs	r3, r5
 80054ae:	222d      	movs	r2, #45	@ 0x2d
 80054b0:	3343      	adds	r3, #67	@ 0x43
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	e78d      	b.n	80053d2 <_printf_float+0xa2>
 80054b6:	2c47      	cmp	r4, #71	@ 0x47
 80054b8:	d1b8      	bne.n	800542c <_printf_float+0xfc>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1b6      	bne.n	800542c <_printf_float+0xfc>
 80054be:	3301      	adds	r3, #1
 80054c0:	e7b3      	b.n	800542a <_printf_float+0xfa>
 80054c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054c4:	2b65      	cmp	r3, #101	@ 0x65
 80054c6:	d9d7      	bls.n	8005478 <_printf_float+0x148>
 80054c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054ca:	2b66      	cmp	r3, #102	@ 0x66
 80054cc:	d11a      	bne.n	8005504 <_printf_float+0x1d4>
 80054ce:	686b      	ldr	r3, [r5, #4]
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	dd09      	ble.n	80054e8 <_printf_float+0x1b8>
 80054d4:	612a      	str	r2, [r5, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <_printf_float+0x1b0>
 80054da:	6829      	ldr	r1, [r5, #0]
 80054dc:	07c9      	lsls	r1, r1, #31
 80054de:	d50b      	bpl.n	80054f8 <_printf_float+0x1c8>
 80054e0:	3301      	adds	r3, #1
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	612b      	str	r3, [r5, #16]
 80054e6:	e007      	b.n	80054f8 <_printf_float+0x1c8>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <_printf_float+0x1c4>
 80054ec:	2201      	movs	r2, #1
 80054ee:	6829      	ldr	r1, [r5, #0]
 80054f0:	4211      	tst	r1, r2
 80054f2:	d000      	beq.n	80054f6 <_printf_float+0x1c6>
 80054f4:	1c9a      	adds	r2, r3, #2
 80054f6:	612a      	str	r2, [r5, #16]
 80054f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80054fa:	2400      	movs	r4, #0
 80054fc:	65ab      	str	r3, [r5, #88]	@ 0x58
 80054fe:	e7ce      	b.n	800549e <_printf_float+0x16e>
 8005500:	2367      	movs	r3, #103	@ 0x67
 8005502:	930c      	str	r3, [sp, #48]	@ 0x30
 8005504:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005506:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005508:	4299      	cmp	r1, r3
 800550a:	db06      	blt.n	800551a <_printf_float+0x1ea>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	6129      	str	r1, [r5, #16]
 8005510:	07db      	lsls	r3, r3, #31
 8005512:	d5f1      	bpl.n	80054f8 <_printf_float+0x1c8>
 8005514:	3101      	adds	r1, #1
 8005516:	6129      	str	r1, [r5, #16]
 8005518:	e7ee      	b.n	80054f8 <_printf_float+0x1c8>
 800551a:	2201      	movs	r2, #1
 800551c:	2900      	cmp	r1, #0
 800551e:	dce0      	bgt.n	80054e2 <_printf_float+0x1b2>
 8005520:	1892      	adds	r2, r2, r2
 8005522:	1a52      	subs	r2, r2, r1
 8005524:	e7dd      	b.n	80054e2 <_printf_float+0x1b2>
 8005526:	682a      	ldr	r2, [r5, #0]
 8005528:	0553      	lsls	r3, r2, #21
 800552a:	d408      	bmi.n	800553e <_printf_float+0x20e>
 800552c:	692b      	ldr	r3, [r5, #16]
 800552e:	003a      	movs	r2, r7
 8005530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005534:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005536:	47a0      	blx	r4
 8005538:	3001      	adds	r0, #1
 800553a:	d129      	bne.n	8005590 <_printf_float+0x260>
 800553c:	e754      	b.n	80053e8 <_printf_float+0xb8>
 800553e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005540:	2b65      	cmp	r3, #101	@ 0x65
 8005542:	d800      	bhi.n	8005546 <_printf_float+0x216>
 8005544:	e0db      	b.n	80056fe <_printf_float+0x3ce>
 8005546:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005548:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	f7fa ff7d 	bl	800044c <__aeabi_dcmpeq>
 8005552:	2800      	cmp	r0, #0
 8005554:	d033      	beq.n	80055be <_printf_float+0x28e>
 8005556:	2301      	movs	r3, #1
 8005558:	4a37      	ldr	r2, [pc, #220]	@ (8005638 <_printf_float+0x308>)
 800555a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800555c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800555e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005560:	47a0      	blx	r4
 8005562:	3001      	adds	r0, #1
 8005564:	d100      	bne.n	8005568 <_printf_float+0x238>
 8005566:	e73f      	b.n	80053e8 <_printf_float+0xb8>
 8005568:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800556a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800556c:	42b3      	cmp	r3, r6
 800556e:	db02      	blt.n	8005576 <_printf_float+0x246>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	07db      	lsls	r3, r3, #31
 8005574:	d50c      	bpl.n	8005590 <_printf_float+0x260>
 8005576:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800557a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800557c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800557e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005580:	47a0      	blx	r4
 8005582:	2400      	movs	r4, #0
 8005584:	3001      	adds	r0, #1
 8005586:	d100      	bne.n	800558a <_printf_float+0x25a>
 8005588:	e72e      	b.n	80053e8 <_printf_float+0xb8>
 800558a:	1e73      	subs	r3, r6, #1
 800558c:	42a3      	cmp	r3, r4
 800558e:	dc0a      	bgt.n	80055a6 <_printf_float+0x276>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	079b      	lsls	r3, r3, #30
 8005594:	d500      	bpl.n	8005598 <_printf_float+0x268>
 8005596:	e106      	b.n	80057a6 <_printf_float+0x476>
 8005598:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800559a:	68e8      	ldr	r0, [r5, #12]
 800559c:	4298      	cmp	r0, r3
 800559e:	db00      	blt.n	80055a2 <_printf_float+0x272>
 80055a0:	e724      	b.n	80053ec <_printf_float+0xbc>
 80055a2:	0018      	movs	r0, r3
 80055a4:	e722      	b.n	80053ec <_printf_float+0xbc>
 80055a6:	002a      	movs	r2, r5
 80055a8:	2301      	movs	r3, #1
 80055aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055ae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80055b0:	321a      	adds	r2, #26
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	d100      	bne.n	80055ba <_printf_float+0x28a>
 80055b8:	e716      	b.n	80053e8 <_printf_float+0xb8>
 80055ba:	3401      	adds	r4, #1
 80055bc:	e7e5      	b.n	800558a <_printf_float+0x25a>
 80055be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dc3b      	bgt.n	800563c <_printf_float+0x30c>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005638 <_printf_float+0x308>)
 80055c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80055ce:	47a0      	blx	r4
 80055d0:	3001      	adds	r0, #1
 80055d2:	d100      	bne.n	80055d6 <_printf_float+0x2a6>
 80055d4:	e708      	b.n	80053e8 <_printf_float+0xb8>
 80055d6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80055d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055da:	4333      	orrs	r3, r6
 80055dc:	d102      	bne.n	80055e4 <_printf_float+0x2b4>
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	07db      	lsls	r3, r3, #31
 80055e2:	d5d5      	bpl.n	8005590 <_printf_float+0x260>
 80055e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80055ee:	47a0      	blx	r4
 80055f0:	2300      	movs	r3, #0
 80055f2:	3001      	adds	r0, #1
 80055f4:	d100      	bne.n	80055f8 <_printf_float+0x2c8>
 80055f6:	e6f7      	b.n	80053e8 <_printf_float+0xb8>
 80055f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80055fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80055fe:	425b      	negs	r3, r3
 8005600:	4293      	cmp	r3, r2
 8005602:	dc01      	bgt.n	8005608 <_printf_float+0x2d8>
 8005604:	0033      	movs	r3, r6
 8005606:	e792      	b.n	800552e <_printf_float+0x1fe>
 8005608:	002a      	movs	r2, r5
 800560a:	2301      	movs	r3, #1
 800560c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800560e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005610:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005612:	321a      	adds	r2, #26
 8005614:	47a0      	blx	r4
 8005616:	3001      	adds	r0, #1
 8005618:	d100      	bne.n	800561c <_printf_float+0x2ec>
 800561a:	e6e5      	b.n	80053e8 <_printf_float+0xb8>
 800561c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800561e:	3301      	adds	r3, #1
 8005620:	e7ea      	b.n	80055f8 <_printf_float+0x2c8>
 8005622:	46c0      	nop			@ (mov r8, r8)
 8005624:	7fefffff 	.word	0x7fefffff
 8005628:	080080ac 	.word	0x080080ac
 800562c:	080080a8 	.word	0x080080a8
 8005630:	080080b4 	.word	0x080080b4
 8005634:	080080b0 	.word	0x080080b0
 8005638:	080080b8 	.word	0x080080b8
 800563c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800563e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005640:	930c      	str	r3, [sp, #48]	@ 0x30
 8005642:	429e      	cmp	r6, r3
 8005644:	dd00      	ble.n	8005648 <_printf_float+0x318>
 8005646:	001e      	movs	r6, r3
 8005648:	2e00      	cmp	r6, #0
 800564a:	dc31      	bgt.n	80056b0 <_printf_float+0x380>
 800564c:	43f3      	mvns	r3, r6
 800564e:	2400      	movs	r4, #0
 8005650:	17db      	asrs	r3, r3, #31
 8005652:	4033      	ands	r3, r6
 8005654:	930e      	str	r3, [sp, #56]	@ 0x38
 8005656:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800565a:	1af3      	subs	r3, r6, r3
 800565c:	42a3      	cmp	r3, r4
 800565e:	dc30      	bgt.n	80056c2 <_printf_float+0x392>
 8005660:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005662:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005664:	429a      	cmp	r2, r3
 8005666:	dc38      	bgt.n	80056da <_printf_float+0x3aa>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	07db      	lsls	r3, r3, #31
 800566c:	d435      	bmi.n	80056da <_printf_float+0x3aa>
 800566e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005672:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005674:	1b9b      	subs	r3, r3, r6
 8005676:	1b14      	subs	r4, r2, r4
 8005678:	429c      	cmp	r4, r3
 800567a:	dd00      	ble.n	800567e <_printf_float+0x34e>
 800567c:	001c      	movs	r4, r3
 800567e:	2c00      	cmp	r4, #0
 8005680:	dc34      	bgt.n	80056ec <_printf_float+0x3bc>
 8005682:	43e3      	mvns	r3, r4
 8005684:	2600      	movs	r6, #0
 8005686:	17db      	asrs	r3, r3, #31
 8005688:	401c      	ands	r4, r3
 800568a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800568c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	1b1b      	subs	r3, r3, r4
 8005692:	42b3      	cmp	r3, r6
 8005694:	dc00      	bgt.n	8005698 <_printf_float+0x368>
 8005696:	e77b      	b.n	8005590 <_printf_float+0x260>
 8005698:	002a      	movs	r2, r5
 800569a:	2301      	movs	r3, #1
 800569c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800569e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80056a2:	321a      	adds	r2, #26
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	d100      	bne.n	80056ac <_printf_float+0x37c>
 80056aa:	e69d      	b.n	80053e8 <_printf_float+0xb8>
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7ec      	b.n	800568a <_printf_float+0x35a>
 80056b0:	0033      	movs	r3, r6
 80056b2:	003a      	movs	r2, r7
 80056b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80056ba:	47a0      	blx	r4
 80056bc:	3001      	adds	r0, #1
 80056be:	d1c5      	bne.n	800564c <_printf_float+0x31c>
 80056c0:	e692      	b.n	80053e8 <_printf_float+0xb8>
 80056c2:	002a      	movs	r2, r5
 80056c4:	2301      	movs	r3, #1
 80056c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056ca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80056cc:	321a      	adds	r2, #26
 80056ce:	47b0      	blx	r6
 80056d0:	3001      	adds	r0, #1
 80056d2:	d100      	bne.n	80056d6 <_printf_float+0x3a6>
 80056d4:	e688      	b.n	80053e8 <_printf_float+0xb8>
 80056d6:	3401      	adds	r4, #1
 80056d8:	e7bd      	b.n	8005656 <_printf_float+0x326>
 80056da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80056de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80056e4:	47a0      	blx	r4
 80056e6:	3001      	adds	r0, #1
 80056e8:	d1c1      	bne.n	800566e <_printf_float+0x33e>
 80056ea:	e67d      	b.n	80053e8 <_printf_float+0xb8>
 80056ec:	19ba      	adds	r2, r7, r6
 80056ee:	0023      	movs	r3, r4
 80056f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80056f6:	47b0      	blx	r6
 80056f8:	3001      	adds	r0, #1
 80056fa:	d1c2      	bne.n	8005682 <_printf_float+0x352>
 80056fc:	e674      	b.n	80053e8 <_printf_float+0xb8>
 80056fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005700:	930c      	str	r3, [sp, #48]	@ 0x30
 8005702:	2b01      	cmp	r3, #1
 8005704:	dc02      	bgt.n	800570c <_printf_float+0x3dc>
 8005706:	2301      	movs	r3, #1
 8005708:	421a      	tst	r2, r3
 800570a:	d039      	beq.n	8005780 <_printf_float+0x450>
 800570c:	2301      	movs	r3, #1
 800570e:	003a      	movs	r2, r7
 8005710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005714:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005716:	47b0      	blx	r6
 8005718:	3001      	adds	r0, #1
 800571a:	d100      	bne.n	800571e <_printf_float+0x3ee>
 800571c:	e664      	b.n	80053e8 <_printf_float+0xb8>
 800571e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005720:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005726:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005728:	47b0      	blx	r6
 800572a:	3001      	adds	r0, #1
 800572c:	d100      	bne.n	8005730 <_printf_float+0x400>
 800572e:	e65b      	b.n	80053e8 <_printf_float+0xb8>
 8005730:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005732:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005736:	2200      	movs	r2, #0
 8005738:	3b01      	subs	r3, #1
 800573a:	930c      	str	r3, [sp, #48]	@ 0x30
 800573c:	2300      	movs	r3, #0
 800573e:	f7fa fe85 	bl	800044c <__aeabi_dcmpeq>
 8005742:	2800      	cmp	r0, #0
 8005744:	d11a      	bne.n	800577c <_printf_float+0x44c>
 8005746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005748:	1c7a      	adds	r2, r7, #1
 800574a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800574c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800574e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005750:	47b0      	blx	r6
 8005752:	3001      	adds	r0, #1
 8005754:	d10e      	bne.n	8005774 <_printf_float+0x444>
 8005756:	e647      	b.n	80053e8 <_printf_float+0xb8>
 8005758:	002a      	movs	r2, r5
 800575a:	2301      	movs	r3, #1
 800575c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800575e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005760:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005762:	321a      	adds	r2, #26
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	d100      	bne.n	800576c <_printf_float+0x43c>
 800576a:	e63d      	b.n	80053e8 <_printf_float+0xb8>
 800576c:	3601      	adds	r6, #1
 800576e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005770:	429e      	cmp	r6, r3
 8005772:	dbf1      	blt.n	8005758 <_printf_float+0x428>
 8005774:	002a      	movs	r2, r5
 8005776:	0023      	movs	r3, r4
 8005778:	3250      	adds	r2, #80	@ 0x50
 800577a:	e6d9      	b.n	8005530 <_printf_float+0x200>
 800577c:	2600      	movs	r6, #0
 800577e:	e7f6      	b.n	800576e <_printf_float+0x43e>
 8005780:	003a      	movs	r2, r7
 8005782:	e7e2      	b.n	800574a <_printf_float+0x41a>
 8005784:	002a      	movs	r2, r5
 8005786:	2301      	movs	r3, #1
 8005788:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800578a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800578c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800578e:	3219      	adds	r2, #25
 8005790:	47b0      	blx	r6
 8005792:	3001      	adds	r0, #1
 8005794:	d100      	bne.n	8005798 <_printf_float+0x468>
 8005796:	e627      	b.n	80053e8 <_printf_float+0xb8>
 8005798:	3401      	adds	r4, #1
 800579a:	68eb      	ldr	r3, [r5, #12]
 800579c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	dcef      	bgt.n	8005784 <_printf_float+0x454>
 80057a4:	e6f8      	b.n	8005598 <_printf_float+0x268>
 80057a6:	2400      	movs	r4, #0
 80057a8:	e7f7      	b.n	800579a <_printf_float+0x46a>
 80057aa:	46c0      	nop			@ (mov r8, r8)

080057ac <_printf_common>:
 80057ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ae:	0016      	movs	r6, r2
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	688a      	ldr	r2, [r1, #8]
 80057b4:	690b      	ldr	r3, [r1, #16]
 80057b6:	000c      	movs	r4, r1
 80057b8:	9000      	str	r0, [sp, #0]
 80057ba:	4293      	cmp	r3, r2
 80057bc:	da00      	bge.n	80057c0 <_printf_common+0x14>
 80057be:	0013      	movs	r3, r2
 80057c0:	0022      	movs	r2, r4
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	3243      	adds	r2, #67	@ 0x43
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d001      	beq.n	80057d0 <_printf_common+0x24>
 80057cc:	3301      	adds	r3, #1
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	069b      	lsls	r3, r3, #26
 80057d4:	d502      	bpl.n	80057dc <_printf_common+0x30>
 80057d6:	6833      	ldr	r3, [r6, #0]
 80057d8:	3302      	adds	r3, #2
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	2306      	movs	r3, #6
 80057e0:	0015      	movs	r5, r2
 80057e2:	401d      	ands	r5, r3
 80057e4:	421a      	tst	r2, r3
 80057e6:	d027      	beq.n	8005838 <_printf_common+0x8c>
 80057e8:	0023      	movs	r3, r4
 80057ea:	3343      	adds	r3, #67	@ 0x43
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	1e5a      	subs	r2, r3, #1
 80057f0:	4193      	sbcs	r3, r2
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	0692      	lsls	r2, r2, #26
 80057f6:	d430      	bmi.n	800585a <_printf_common+0xae>
 80057f8:	0022      	movs	r2, r4
 80057fa:	9901      	ldr	r1, [sp, #4]
 80057fc:	9800      	ldr	r0, [sp, #0]
 80057fe:	9d08      	ldr	r5, [sp, #32]
 8005800:	3243      	adds	r2, #67	@ 0x43
 8005802:	47a8      	blx	r5
 8005804:	3001      	adds	r0, #1
 8005806:	d025      	beq.n	8005854 <_printf_common+0xa8>
 8005808:	2206      	movs	r2, #6
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	2500      	movs	r5, #0
 800580e:	4013      	ands	r3, r2
 8005810:	2b04      	cmp	r3, #4
 8005812:	d105      	bne.n	8005820 <_printf_common+0x74>
 8005814:	6833      	ldr	r3, [r6, #0]
 8005816:	68e5      	ldr	r5, [r4, #12]
 8005818:	1aed      	subs	r5, r5, r3
 800581a:	43eb      	mvns	r3, r5
 800581c:	17db      	asrs	r3, r3, #31
 800581e:	401d      	ands	r5, r3
 8005820:	68a3      	ldr	r3, [r4, #8]
 8005822:	6922      	ldr	r2, [r4, #16]
 8005824:	4293      	cmp	r3, r2
 8005826:	dd01      	ble.n	800582c <_printf_common+0x80>
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	18ed      	adds	r5, r5, r3
 800582c:	2600      	movs	r6, #0
 800582e:	42b5      	cmp	r5, r6
 8005830:	d120      	bne.n	8005874 <_printf_common+0xc8>
 8005832:	2000      	movs	r0, #0
 8005834:	e010      	b.n	8005858 <_printf_common+0xac>
 8005836:	3501      	adds	r5, #1
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	6832      	ldr	r2, [r6, #0]
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	42ab      	cmp	r3, r5
 8005840:	ddd2      	ble.n	80057e8 <_printf_common+0x3c>
 8005842:	0022      	movs	r2, r4
 8005844:	2301      	movs	r3, #1
 8005846:	9901      	ldr	r1, [sp, #4]
 8005848:	9800      	ldr	r0, [sp, #0]
 800584a:	9f08      	ldr	r7, [sp, #32]
 800584c:	3219      	adds	r2, #25
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	d1f0      	bne.n	8005836 <_printf_common+0x8a>
 8005854:	2001      	movs	r0, #1
 8005856:	4240      	negs	r0, r0
 8005858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800585a:	2030      	movs	r0, #48	@ 0x30
 800585c:	18e1      	adds	r1, r4, r3
 800585e:	3143      	adds	r1, #67	@ 0x43
 8005860:	7008      	strb	r0, [r1, #0]
 8005862:	0021      	movs	r1, r4
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	3145      	adds	r1, #69	@ 0x45
 8005868:	7809      	ldrb	r1, [r1, #0]
 800586a:	18a2      	adds	r2, r4, r2
 800586c:	3243      	adds	r2, #67	@ 0x43
 800586e:	3302      	adds	r3, #2
 8005870:	7011      	strb	r1, [r2, #0]
 8005872:	e7c1      	b.n	80057f8 <_printf_common+0x4c>
 8005874:	0022      	movs	r2, r4
 8005876:	2301      	movs	r3, #1
 8005878:	9901      	ldr	r1, [sp, #4]
 800587a:	9800      	ldr	r0, [sp, #0]
 800587c:	9f08      	ldr	r7, [sp, #32]
 800587e:	321a      	adds	r2, #26
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	d0e6      	beq.n	8005854 <_printf_common+0xa8>
 8005886:	3601      	adds	r6, #1
 8005888:	e7d1      	b.n	800582e <_printf_common+0x82>
	...

0800588c <_printf_i>:
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	b08b      	sub	sp, #44	@ 0x2c
 8005890:	9206      	str	r2, [sp, #24]
 8005892:	000a      	movs	r2, r1
 8005894:	3243      	adds	r2, #67	@ 0x43
 8005896:	9307      	str	r3, [sp, #28]
 8005898:	9005      	str	r0, [sp, #20]
 800589a:	9203      	str	r2, [sp, #12]
 800589c:	7e0a      	ldrb	r2, [r1, #24]
 800589e:	000c      	movs	r4, r1
 80058a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80058a2:	2a78      	cmp	r2, #120	@ 0x78
 80058a4:	d809      	bhi.n	80058ba <_printf_i+0x2e>
 80058a6:	2a62      	cmp	r2, #98	@ 0x62
 80058a8:	d80b      	bhi.n	80058c2 <_printf_i+0x36>
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	d100      	bne.n	80058b0 <_printf_i+0x24>
 80058ae:	e0ba      	b.n	8005a26 <_printf_i+0x19a>
 80058b0:	497a      	ldr	r1, [pc, #488]	@ (8005a9c <_printf_i+0x210>)
 80058b2:	9104      	str	r1, [sp, #16]
 80058b4:	2a58      	cmp	r2, #88	@ 0x58
 80058b6:	d100      	bne.n	80058ba <_printf_i+0x2e>
 80058b8:	e08e      	b.n	80059d8 <_printf_i+0x14c>
 80058ba:	0025      	movs	r5, r4
 80058bc:	3542      	adds	r5, #66	@ 0x42
 80058be:	702a      	strb	r2, [r5, #0]
 80058c0:	e022      	b.n	8005908 <_printf_i+0x7c>
 80058c2:	0010      	movs	r0, r2
 80058c4:	3863      	subs	r0, #99	@ 0x63
 80058c6:	2815      	cmp	r0, #21
 80058c8:	d8f7      	bhi.n	80058ba <_printf_i+0x2e>
 80058ca:	f7fa fc2f 	bl	800012c <__gnu_thumb1_case_shi>
 80058ce:	0016      	.short	0x0016
 80058d0:	fff6001f 	.word	0xfff6001f
 80058d4:	fff6fff6 	.word	0xfff6fff6
 80058d8:	001ffff6 	.word	0x001ffff6
 80058dc:	fff6fff6 	.word	0xfff6fff6
 80058e0:	fff6fff6 	.word	0xfff6fff6
 80058e4:	0036009f 	.word	0x0036009f
 80058e8:	fff6007e 	.word	0xfff6007e
 80058ec:	00b0fff6 	.word	0x00b0fff6
 80058f0:	0036fff6 	.word	0x0036fff6
 80058f4:	fff6fff6 	.word	0xfff6fff6
 80058f8:	0082      	.short	0x0082
 80058fa:	0025      	movs	r5, r4
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	3542      	adds	r5, #66	@ 0x42
 8005900:	1d11      	adds	r1, r2, #4
 8005902:	6019      	str	r1, [r3, #0]
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	702b      	strb	r3, [r5, #0]
 8005908:	2301      	movs	r3, #1
 800590a:	e09e      	b.n	8005a4a <_printf_i+0x1be>
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	6809      	ldr	r1, [r1, #0]
 8005910:	1d02      	adds	r2, r0, #4
 8005912:	060d      	lsls	r5, r1, #24
 8005914:	d50b      	bpl.n	800592e <_printf_i+0xa2>
 8005916:	6806      	ldr	r6, [r0, #0]
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	2e00      	cmp	r6, #0
 800591c:	da03      	bge.n	8005926 <_printf_i+0x9a>
 800591e:	232d      	movs	r3, #45	@ 0x2d
 8005920:	9a03      	ldr	r2, [sp, #12]
 8005922:	4276      	negs	r6, r6
 8005924:	7013      	strb	r3, [r2, #0]
 8005926:	4b5d      	ldr	r3, [pc, #372]	@ (8005a9c <_printf_i+0x210>)
 8005928:	270a      	movs	r7, #10
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	e018      	b.n	8005960 <_printf_i+0xd4>
 800592e:	6806      	ldr	r6, [r0, #0]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	0649      	lsls	r1, r1, #25
 8005934:	d5f1      	bpl.n	800591a <_printf_i+0x8e>
 8005936:	b236      	sxth	r6, r6
 8005938:	e7ef      	b.n	800591a <_printf_i+0x8e>
 800593a:	6808      	ldr	r0, [r1, #0]
 800593c:	6819      	ldr	r1, [r3, #0]
 800593e:	c940      	ldmia	r1!, {r6}
 8005940:	0605      	lsls	r5, r0, #24
 8005942:	d402      	bmi.n	800594a <_printf_i+0xbe>
 8005944:	0640      	lsls	r0, r0, #25
 8005946:	d500      	bpl.n	800594a <_printf_i+0xbe>
 8005948:	b2b6      	uxth	r6, r6
 800594a:	6019      	str	r1, [r3, #0]
 800594c:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <_printf_i+0x210>)
 800594e:	270a      	movs	r7, #10
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	2a6f      	cmp	r2, #111	@ 0x6f
 8005954:	d100      	bne.n	8005958 <_printf_i+0xcc>
 8005956:	3f02      	subs	r7, #2
 8005958:	0023      	movs	r3, r4
 800595a:	2200      	movs	r2, #0
 800595c:	3343      	adds	r3, #67	@ 0x43
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	60a3      	str	r3, [r4, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	db06      	blt.n	8005976 <_printf_i+0xea>
 8005968:	2104      	movs	r1, #4
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	9d03      	ldr	r5, [sp, #12]
 800596e:	438a      	bics	r2, r1
 8005970:	6022      	str	r2, [r4, #0]
 8005972:	4333      	orrs	r3, r6
 8005974:	d00c      	beq.n	8005990 <_printf_i+0x104>
 8005976:	9d03      	ldr	r5, [sp, #12]
 8005978:	0030      	movs	r0, r6
 800597a:	0039      	movs	r1, r7
 800597c:	f7fa fc66 	bl	800024c <__aeabi_uidivmod>
 8005980:	9b04      	ldr	r3, [sp, #16]
 8005982:	3d01      	subs	r5, #1
 8005984:	5c5b      	ldrb	r3, [r3, r1]
 8005986:	702b      	strb	r3, [r5, #0]
 8005988:	0033      	movs	r3, r6
 800598a:	0006      	movs	r6, r0
 800598c:	429f      	cmp	r7, r3
 800598e:	d9f3      	bls.n	8005978 <_printf_i+0xec>
 8005990:	2f08      	cmp	r7, #8
 8005992:	d109      	bne.n	80059a8 <_printf_i+0x11c>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	07db      	lsls	r3, r3, #31
 8005998:	d506      	bpl.n	80059a8 <_printf_i+0x11c>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	dc02      	bgt.n	80059a8 <_printf_i+0x11c>
 80059a2:	2330      	movs	r3, #48	@ 0x30
 80059a4:	3d01      	subs	r5, #1
 80059a6:	702b      	strb	r3, [r5, #0]
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	1b5b      	subs	r3, r3, r5
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	9b07      	ldr	r3, [sp, #28]
 80059b0:	0021      	movs	r1, r4
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	9805      	ldr	r0, [sp, #20]
 80059b6:	9b06      	ldr	r3, [sp, #24]
 80059b8:	aa09      	add	r2, sp, #36	@ 0x24
 80059ba:	f7ff fef7 	bl	80057ac <_printf_common>
 80059be:	3001      	adds	r0, #1
 80059c0:	d148      	bne.n	8005a54 <_printf_i+0x1c8>
 80059c2:	2001      	movs	r0, #1
 80059c4:	4240      	negs	r0, r0
 80059c6:	b00b      	add	sp, #44	@ 0x2c
 80059c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ca:	2220      	movs	r2, #32
 80059cc:	6809      	ldr	r1, [r1, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	2278      	movs	r2, #120	@ 0x78
 80059d4:	4932      	ldr	r1, [pc, #200]	@ (8005aa0 <_printf_i+0x214>)
 80059d6:	9104      	str	r1, [sp, #16]
 80059d8:	0021      	movs	r1, r4
 80059da:	3145      	adds	r1, #69	@ 0x45
 80059dc:	700a      	strb	r2, [r1, #0]
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	c940      	ldmia	r1!, {r6}
 80059e4:	0610      	lsls	r0, r2, #24
 80059e6:	d402      	bmi.n	80059ee <_printf_i+0x162>
 80059e8:	0650      	lsls	r0, r2, #25
 80059ea:	d500      	bpl.n	80059ee <_printf_i+0x162>
 80059ec:	b2b6      	uxth	r6, r6
 80059ee:	6019      	str	r1, [r3, #0]
 80059f0:	07d3      	lsls	r3, r2, #31
 80059f2:	d502      	bpl.n	80059fa <_printf_i+0x16e>
 80059f4:	2320      	movs	r3, #32
 80059f6:	4313      	orrs	r3, r2
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d001      	beq.n	8005a02 <_printf_i+0x176>
 80059fe:	2710      	movs	r7, #16
 8005a00:	e7aa      	b.n	8005958 <_printf_i+0xcc>
 8005a02:	2220      	movs	r2, #32
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	4393      	bics	r3, r2
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	e7f8      	b.n	80059fe <_printf_i+0x172>
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	680d      	ldr	r5, [r1, #0]
 8005a10:	1d10      	adds	r0, r2, #4
 8005a12:	6949      	ldr	r1, [r1, #20]
 8005a14:	6018      	str	r0, [r3, #0]
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	062e      	lsls	r6, r5, #24
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0x194>
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	e002      	b.n	8005a26 <_printf_i+0x19a>
 8005a20:	066d      	lsls	r5, r5, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0x190>
 8005a24:	8019      	strh	r1, [r3, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	9d03      	ldr	r5, [sp, #12]
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	e7bf      	b.n	80059ae <_printf_i+0x122>
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	1d11      	adds	r1, r2, #4
 8005a32:	6019      	str	r1, [r3, #0]
 8005a34:	6815      	ldr	r5, [r2, #0]
 8005a36:	2100      	movs	r1, #0
 8005a38:	0028      	movs	r0, r5
 8005a3a:	6862      	ldr	r2, [r4, #4]
 8005a3c:	f000 f9eb 	bl	8005e16 <memchr>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d001      	beq.n	8005a48 <_printf_i+0x1bc>
 8005a44:	1b40      	subs	r0, r0, r5
 8005a46:	6060      	str	r0, [r4, #4]
 8005a48:	6863      	ldr	r3, [r4, #4]
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9a03      	ldr	r2, [sp, #12]
 8005a50:	7013      	strb	r3, [r2, #0]
 8005a52:	e7ac      	b.n	80059ae <_printf_i+0x122>
 8005a54:	002a      	movs	r2, r5
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	9906      	ldr	r1, [sp, #24]
 8005a5a:	9805      	ldr	r0, [sp, #20]
 8005a5c:	9d07      	ldr	r5, [sp, #28]
 8005a5e:	47a8      	blx	r5
 8005a60:	3001      	adds	r0, #1
 8005a62:	d0ae      	beq.n	80059c2 <_printf_i+0x136>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	079b      	lsls	r3, r3, #30
 8005a68:	d415      	bmi.n	8005a96 <_printf_i+0x20a>
 8005a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a6c:	68e0      	ldr	r0, [r4, #12]
 8005a6e:	4298      	cmp	r0, r3
 8005a70:	daa9      	bge.n	80059c6 <_printf_i+0x13a>
 8005a72:	0018      	movs	r0, r3
 8005a74:	e7a7      	b.n	80059c6 <_printf_i+0x13a>
 8005a76:	0022      	movs	r2, r4
 8005a78:	2301      	movs	r3, #1
 8005a7a:	9906      	ldr	r1, [sp, #24]
 8005a7c:	9805      	ldr	r0, [sp, #20]
 8005a7e:	9e07      	ldr	r6, [sp, #28]
 8005a80:	3219      	adds	r2, #25
 8005a82:	47b0      	blx	r6
 8005a84:	3001      	adds	r0, #1
 8005a86:	d09c      	beq.n	80059c2 <_printf_i+0x136>
 8005a88:	3501      	adds	r5, #1
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dcf0      	bgt.n	8005a76 <_printf_i+0x1ea>
 8005a94:	e7e9      	b.n	8005a6a <_printf_i+0x1de>
 8005a96:	2500      	movs	r5, #0
 8005a98:	e7f7      	b.n	8005a8a <_printf_i+0x1fe>
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	080080ba 	.word	0x080080ba
 8005aa0:	080080cb 	.word	0x080080cb

08005aa4 <std>:
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	b510      	push	{r4, lr}
 8005aa8:	0004      	movs	r4, r0
 8005aaa:	6003      	str	r3, [r0, #0]
 8005aac:	6043      	str	r3, [r0, #4]
 8005aae:	6083      	str	r3, [r0, #8]
 8005ab0:	8181      	strh	r1, [r0, #12]
 8005ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ab4:	81c2      	strh	r2, [r0, #14]
 8005ab6:	6103      	str	r3, [r0, #16]
 8005ab8:	6143      	str	r3, [r0, #20]
 8005aba:	6183      	str	r3, [r0, #24]
 8005abc:	0019      	movs	r1, r3
 8005abe:	2208      	movs	r2, #8
 8005ac0:	305c      	adds	r0, #92	@ 0x5c
 8005ac2:	f000 f921 	bl	8005d08 <memset>
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <std+0x50>)
 8005ac8:	6224      	str	r4, [r4, #32]
 8005aca:	6263      	str	r3, [r4, #36]	@ 0x24
 8005acc:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <std+0x54>)
 8005ace:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <std+0x58>)
 8005ad2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <std+0x5c>)
 8005ad6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <std+0x60>)
 8005ada:	429c      	cmp	r4, r3
 8005adc:	d005      	beq.n	8005aea <std+0x46>
 8005ade:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <std+0x64>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d002      	beq.n	8005aea <std+0x46>
 8005ae4:	4b09      	ldr	r3, [pc, #36]	@ (8005b0c <std+0x68>)
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d103      	bne.n	8005af2 <std+0x4e>
 8005aea:	0020      	movs	r0, r4
 8005aec:	3058      	adds	r0, #88	@ 0x58
 8005aee:	f000 f98f 	bl	8005e10 <__retarget_lock_init_recursive>
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	08005c71 	.word	0x08005c71
 8005af8:	08005c99 	.word	0x08005c99
 8005afc:	08005cd1 	.word	0x08005cd1
 8005b00:	08005cfd 	.word	0x08005cfd
 8005b04:	200002d8 	.word	0x200002d8
 8005b08:	20000340 	.word	0x20000340
 8005b0c:	200003a8 	.word	0x200003a8

08005b10 <stdio_exit_handler>:
 8005b10:	b510      	push	{r4, lr}
 8005b12:	4a03      	ldr	r2, [pc, #12]	@ (8005b20 <stdio_exit_handler+0x10>)
 8005b14:	4903      	ldr	r1, [pc, #12]	@ (8005b24 <stdio_exit_handler+0x14>)
 8005b16:	4804      	ldr	r0, [pc, #16]	@ (8005b28 <stdio_exit_handler+0x18>)
 8005b18:	f000 f86c 	bl	8005bf4 <_fwalk_sglue>
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	2000000c 	.word	0x2000000c
 8005b24:	08007825 	.word	0x08007825
 8005b28:	2000001c 	.word	0x2000001c

08005b2c <cleanup_stdio>:
 8005b2c:	6841      	ldr	r1, [r0, #4]
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <cleanup_stdio+0x30>)
 8005b30:	b510      	push	{r4, lr}
 8005b32:	0004      	movs	r4, r0
 8005b34:	4299      	cmp	r1, r3
 8005b36:	d001      	beq.n	8005b3c <cleanup_stdio+0x10>
 8005b38:	f001 fe74 	bl	8007824 <_fflush_r>
 8005b3c:	68a1      	ldr	r1, [r4, #8]
 8005b3e:	4b08      	ldr	r3, [pc, #32]	@ (8005b60 <cleanup_stdio+0x34>)
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d002      	beq.n	8005b4a <cleanup_stdio+0x1e>
 8005b44:	0020      	movs	r0, r4
 8005b46:	f001 fe6d 	bl	8007824 <_fflush_r>
 8005b4a:	68e1      	ldr	r1, [r4, #12]
 8005b4c:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <cleanup_stdio+0x38>)
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	d002      	beq.n	8005b58 <cleanup_stdio+0x2c>
 8005b52:	0020      	movs	r0, r4
 8005b54:	f001 fe66 	bl	8007824 <_fflush_r>
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	200002d8 	.word	0x200002d8
 8005b60:	20000340 	.word	0x20000340
 8005b64:	200003a8 	.word	0x200003a8

08005b68 <global_stdio_init.part.0>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4b09      	ldr	r3, [pc, #36]	@ (8005b90 <global_stdio_init.part.0+0x28>)
 8005b6c:	4a09      	ldr	r2, [pc, #36]	@ (8005b94 <global_stdio_init.part.0+0x2c>)
 8005b6e:	2104      	movs	r1, #4
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	4809      	ldr	r0, [pc, #36]	@ (8005b98 <global_stdio_init.part.0+0x30>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	f7ff ff95 	bl	8005aa4 <std>
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2109      	movs	r1, #9
 8005b7e:	4807      	ldr	r0, [pc, #28]	@ (8005b9c <global_stdio_init.part.0+0x34>)
 8005b80:	f7ff ff90 	bl	8005aa4 <std>
 8005b84:	2202      	movs	r2, #2
 8005b86:	2112      	movs	r1, #18
 8005b88:	4805      	ldr	r0, [pc, #20]	@ (8005ba0 <global_stdio_init.part.0+0x38>)
 8005b8a:	f7ff ff8b 	bl	8005aa4 <std>
 8005b8e:	bd10      	pop	{r4, pc}
 8005b90:	20000410 	.word	0x20000410
 8005b94:	08005b11 	.word	0x08005b11
 8005b98:	200002d8 	.word	0x200002d8
 8005b9c:	20000340 	.word	0x20000340
 8005ba0:	200003a8 	.word	0x200003a8

08005ba4 <__sfp_lock_acquire>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4802      	ldr	r0, [pc, #8]	@ (8005bb0 <__sfp_lock_acquire+0xc>)
 8005ba8:	f000 f933 	bl	8005e12 <__retarget_lock_acquire_recursive>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	20000419 	.word	0x20000419

08005bb4 <__sfp_lock_release>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	4802      	ldr	r0, [pc, #8]	@ (8005bc0 <__sfp_lock_release+0xc>)
 8005bb8:	f000 f92c 	bl	8005e14 <__retarget_lock_release_recursive>
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	20000419 	.word	0x20000419

08005bc4 <__sinit>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	0004      	movs	r4, r0
 8005bc8:	f7ff ffec 	bl	8005ba4 <__sfp_lock_acquire>
 8005bcc:	6a23      	ldr	r3, [r4, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <__sinit+0x14>
 8005bd2:	f7ff ffef 	bl	8005bb4 <__sfp_lock_release>
 8005bd6:	bd10      	pop	{r4, pc}
 8005bd8:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <__sinit+0x28>)
 8005bda:	6223      	str	r3, [r4, #32]
 8005bdc:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <__sinit+0x2c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f6      	bne.n	8005bd2 <__sinit+0xe>
 8005be4:	f7ff ffc0 	bl	8005b68 <global_stdio_init.part.0>
 8005be8:	e7f3      	b.n	8005bd2 <__sinit+0xe>
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	08005b2d 	.word	0x08005b2d
 8005bf0:	20000410 	.word	0x20000410

08005bf4 <_fwalk_sglue>:
 8005bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bf6:	0014      	movs	r4, r2
 8005bf8:	2600      	movs	r6, #0
 8005bfa:	9000      	str	r0, [sp, #0]
 8005bfc:	9101      	str	r1, [sp, #4]
 8005bfe:	68a5      	ldr	r5, [r4, #8]
 8005c00:	6867      	ldr	r7, [r4, #4]
 8005c02:	3f01      	subs	r7, #1
 8005c04:	d504      	bpl.n	8005c10 <_fwalk_sglue+0x1c>
 8005c06:	6824      	ldr	r4, [r4, #0]
 8005c08:	2c00      	cmp	r4, #0
 8005c0a:	d1f8      	bne.n	8005bfe <_fwalk_sglue+0xa>
 8005c0c:	0030      	movs	r0, r6
 8005c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c10:	89ab      	ldrh	r3, [r5, #12]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d908      	bls.n	8005c28 <_fwalk_sglue+0x34>
 8005c16:	220e      	movs	r2, #14
 8005c18:	5eab      	ldrsh	r3, [r5, r2]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	d004      	beq.n	8005c28 <_fwalk_sglue+0x34>
 8005c1e:	0029      	movs	r1, r5
 8005c20:	9800      	ldr	r0, [sp, #0]
 8005c22:	9b01      	ldr	r3, [sp, #4]
 8005c24:	4798      	blx	r3
 8005c26:	4306      	orrs	r6, r0
 8005c28:	3568      	adds	r5, #104	@ 0x68
 8005c2a:	e7ea      	b.n	8005c02 <_fwalk_sglue+0xe>

08005c2c <siprintf>:
 8005c2c:	b40e      	push	{r1, r2, r3}
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	2400      	movs	r4, #0
 8005c32:	490c      	ldr	r1, [pc, #48]	@ (8005c64 <siprintf+0x38>)
 8005c34:	b09d      	sub	sp, #116	@ 0x74
 8005c36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005c38:	9002      	str	r0, [sp, #8]
 8005c3a:	9006      	str	r0, [sp, #24]
 8005c3c:	9107      	str	r1, [sp, #28]
 8005c3e:	9104      	str	r1, [sp, #16]
 8005c40:	4809      	ldr	r0, [pc, #36]	@ (8005c68 <siprintf+0x3c>)
 8005c42:	490a      	ldr	r1, [pc, #40]	@ (8005c6c <siprintf+0x40>)
 8005c44:	cb04      	ldmia	r3!, {r2}
 8005c46:	9105      	str	r1, [sp, #20]
 8005c48:	6800      	ldr	r0, [r0, #0]
 8005c4a:	a902      	add	r1, sp, #8
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c50:	f001 fc64 	bl	800751c <_svfiprintf_r>
 8005c54:	9b02      	ldr	r3, [sp, #8]
 8005c56:	701c      	strb	r4, [r3, #0]
 8005c58:	b01d      	add	sp, #116	@ 0x74
 8005c5a:	bc10      	pop	{r4}
 8005c5c:	bc08      	pop	{r3}
 8005c5e:	b003      	add	sp, #12
 8005c60:	4718      	bx	r3
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	7fffffff 	.word	0x7fffffff
 8005c68:	20000018 	.word	0x20000018
 8005c6c:	ffff0208 	.word	0xffff0208

08005c70 <__sread>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	000c      	movs	r4, r1
 8005c74:	250e      	movs	r5, #14
 8005c76:	5f49      	ldrsh	r1, [r1, r5]
 8005c78:	f000 f878 	bl	8005d6c <_read_r>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	db03      	blt.n	8005c88 <__sread+0x18>
 8005c80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005c82:	181b      	adds	r3, r3, r0
 8005c84:	6563      	str	r3, [r4, #84]	@ 0x54
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	4a02      	ldr	r2, [pc, #8]	@ (8005c94 <__sread+0x24>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	e7f9      	b.n	8005c86 <__sread+0x16>
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	ffffefff 	.word	0xffffefff

08005c98 <__swrite>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	001f      	movs	r7, r3
 8005c9c:	898b      	ldrh	r3, [r1, #12]
 8005c9e:	0005      	movs	r5, r0
 8005ca0:	000c      	movs	r4, r1
 8005ca2:	0016      	movs	r6, r2
 8005ca4:	05db      	lsls	r3, r3, #23
 8005ca6:	d505      	bpl.n	8005cb4 <__swrite+0x1c>
 8005ca8:	230e      	movs	r3, #14
 8005caa:	5ec9      	ldrsh	r1, [r1, r3]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2302      	movs	r3, #2
 8005cb0:	f000 f848 	bl	8005d44 <_lseek_r>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	4a05      	ldr	r2, [pc, #20]	@ (8005ccc <__swrite+0x34>)
 8005cb8:	0028      	movs	r0, r5
 8005cba:	4013      	ands	r3, r2
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	0032      	movs	r2, r6
 8005cc0:	230e      	movs	r3, #14
 8005cc2:	5ee1      	ldrsh	r1, [r4, r3]
 8005cc4:	003b      	movs	r3, r7
 8005cc6:	f000 f865 	bl	8005d94 <_write_r>
 8005cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ccc:	ffffefff 	.word	0xffffefff

08005cd0 <__sseek>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	000c      	movs	r4, r1
 8005cd4:	250e      	movs	r5, #14
 8005cd6:	5f49      	ldrsh	r1, [r1, r5]
 8005cd8:	f000 f834 	bl	8005d44 <_lseek_r>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	1c42      	adds	r2, r0, #1
 8005ce0:	d103      	bne.n	8005cea <__sseek+0x1a>
 8005ce2:	4a05      	ldr	r2, [pc, #20]	@ (8005cf8 <__sseek+0x28>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	bd70      	pop	{r4, r5, r6, pc}
 8005cea:	2280      	movs	r2, #128	@ 0x80
 8005cec:	0152      	lsls	r2, r2, #5
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cf4:	e7f8      	b.n	8005ce8 <__sseek+0x18>
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	ffffefff 	.word	0xffffefff

08005cfc <__sclose>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	230e      	movs	r3, #14
 8005d00:	5ec9      	ldrsh	r1, [r1, r3]
 8005d02:	f000 f80d 	bl	8005d20 <_close_r>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <memset>:
 8005d08:	0003      	movs	r3, r0
 8005d0a:	1882      	adds	r2, r0, r2
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d100      	bne.n	8005d12 <memset+0xa>
 8005d10:	4770      	bx	lr
 8005d12:	7019      	strb	r1, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	e7f9      	b.n	8005d0c <memset+0x4>

08005d18 <_localeconv_r>:
 8005d18:	4800      	ldr	r0, [pc, #0]	@ (8005d1c <_localeconv_r+0x4>)
 8005d1a:	4770      	bx	lr
 8005d1c:	20000158 	.word	0x20000158

08005d20 <_close_r>:
 8005d20:	2300      	movs	r3, #0
 8005d22:	b570      	push	{r4, r5, r6, lr}
 8005d24:	4d06      	ldr	r5, [pc, #24]	@ (8005d40 <_close_r+0x20>)
 8005d26:	0004      	movs	r4, r0
 8005d28:	0008      	movs	r0, r1
 8005d2a:	602b      	str	r3, [r5, #0]
 8005d2c:	f7fd f89b 	bl	8002e66 <_close>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d103      	bne.n	8005d3c <_close_r+0x1c>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d000      	beq.n	8005d3c <_close_r+0x1c>
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	20000414 	.word	0x20000414

08005d44 <_lseek_r>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	0004      	movs	r4, r0
 8005d48:	0008      	movs	r0, r1
 8005d4a:	0011      	movs	r1, r2
 8005d4c:	001a      	movs	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	4d05      	ldr	r5, [pc, #20]	@ (8005d68 <_lseek_r+0x24>)
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f7fd f8a8 	bl	8002ea8 <_lseek>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d103      	bne.n	8005d64 <_lseek_r+0x20>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d000      	beq.n	8005d64 <_lseek_r+0x20>
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	20000414 	.word	0x20000414

08005d6c <_read_r>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	0004      	movs	r4, r0
 8005d70:	0008      	movs	r0, r1
 8005d72:	0011      	movs	r1, r2
 8005d74:	001a      	movs	r2, r3
 8005d76:	2300      	movs	r3, #0
 8005d78:	4d05      	ldr	r5, [pc, #20]	@ (8005d90 <_read_r+0x24>)
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	f7fd f83a 	bl	8002df4 <_read>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d103      	bne.n	8005d8c <_read_r+0x20>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d000      	beq.n	8005d8c <_read_r+0x20>
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	20000414 	.word	0x20000414

08005d94 <_write_r>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	0004      	movs	r4, r0
 8005d98:	0008      	movs	r0, r1
 8005d9a:	0011      	movs	r1, r2
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	2300      	movs	r3, #0
 8005da0:	4d05      	ldr	r5, [pc, #20]	@ (8005db8 <_write_r+0x24>)
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fd f843 	bl	8002e2e <_write>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d103      	bne.n	8005db4 <_write_r+0x20>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d000      	beq.n	8005db4 <_write_r+0x20>
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	20000414 	.word	0x20000414

08005dbc <__errno>:
 8005dbc:	4b01      	ldr	r3, [pc, #4]	@ (8005dc4 <__errno+0x8>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	20000018 	.word	0x20000018

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	2600      	movs	r6, #0
 8005dcc:	4c0c      	ldr	r4, [pc, #48]	@ (8005e00 <__libc_init_array+0x38>)
 8005dce:	4d0d      	ldr	r5, [pc, #52]	@ (8005e04 <__libc_init_array+0x3c>)
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	42a6      	cmp	r6, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	2600      	movs	r6, #0
 8005dda:	f002 f8f3 	bl	8007fc4 <_init>
 8005dde:	4c0a      	ldr	r4, [pc, #40]	@ (8005e08 <__libc_init_array+0x40>)
 8005de0:	4d0a      	ldr	r5, [pc, #40]	@ (8005e0c <__libc_init_array+0x44>)
 8005de2:	1b64      	subs	r4, r4, r5
 8005de4:	10a4      	asrs	r4, r4, #2
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	00b3      	lsls	r3, r6, #2
 8005dee:	58eb      	ldr	r3, [r5, r3]
 8005df0:	4798      	blx	r3
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	00b3      	lsls	r3, r6, #2
 8005df8:	58eb      	ldr	r3, [r5, r3]
 8005dfa:	4798      	blx	r3
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	08008424 	.word	0x08008424
 8005e04:	08008424 	.word	0x08008424
 8005e08:	08008428 	.word	0x08008428
 8005e0c:	08008424 	.word	0x08008424

08005e10 <__retarget_lock_init_recursive>:
 8005e10:	4770      	bx	lr

08005e12 <__retarget_lock_acquire_recursive>:
 8005e12:	4770      	bx	lr

08005e14 <__retarget_lock_release_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <memchr>:
 8005e16:	b2c9      	uxtb	r1, r1
 8005e18:	1882      	adds	r2, r0, r2
 8005e1a:	4290      	cmp	r0, r2
 8005e1c:	d101      	bne.n	8005e22 <memchr+0xc>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	4770      	bx	lr
 8005e22:	7803      	ldrb	r3, [r0, #0]
 8005e24:	428b      	cmp	r3, r1
 8005e26:	d0fb      	beq.n	8005e20 <memchr+0xa>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	e7f6      	b.n	8005e1a <memchr+0x4>

08005e2c <quorem>:
 8005e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2e:	6903      	ldr	r3, [r0, #16]
 8005e30:	690c      	ldr	r4, [r1, #16]
 8005e32:	b089      	sub	sp, #36	@ 0x24
 8005e34:	9003      	str	r0, [sp, #12]
 8005e36:	9106      	str	r1, [sp, #24]
 8005e38:	2000      	movs	r0, #0
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	db63      	blt.n	8005f06 <quorem+0xda>
 8005e3e:	000b      	movs	r3, r1
 8005e40:	3c01      	subs	r4, #1
 8005e42:	3314      	adds	r3, #20
 8005e44:	00a5      	lsls	r5, r4, #2
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	195b      	adds	r3, r3, r5
 8005e4a:	9305      	str	r3, [sp, #20]
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	195d      	adds	r5, r3, r5
 8005e54:	9b05      	ldr	r3, [sp, #20]
 8005e56:	682f      	ldr	r7, [r5, #0]
 8005e58:	681e      	ldr	r6, [r3, #0]
 8005e5a:	0038      	movs	r0, r7
 8005e5c:	3601      	adds	r6, #1
 8005e5e:	0031      	movs	r1, r6
 8005e60:	f7fa f96e 	bl	8000140 <__udivsi3>
 8005e64:	9002      	str	r0, [sp, #8]
 8005e66:	42b7      	cmp	r7, r6
 8005e68:	d327      	bcc.n	8005eba <quorem+0x8e>
 8005e6a:	9b04      	ldr	r3, [sp, #16]
 8005e6c:	2700      	movs	r7, #0
 8005e6e:	469c      	mov	ip, r3
 8005e70:	9e01      	ldr	r6, [sp, #4]
 8005e72:	9707      	str	r7, [sp, #28]
 8005e74:	4662      	mov	r2, ip
 8005e76:	ca08      	ldmia	r2!, {r3}
 8005e78:	6830      	ldr	r0, [r6, #0]
 8005e7a:	4694      	mov	ip, r2
 8005e7c:	9a02      	ldr	r2, [sp, #8]
 8005e7e:	b299      	uxth	r1, r3
 8005e80:	4351      	muls	r1, r2
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	4353      	muls	r3, r2
 8005e86:	19c9      	adds	r1, r1, r7
 8005e88:	0c0a      	lsrs	r2, r1, #16
 8005e8a:	189b      	adds	r3, r3, r2
 8005e8c:	b289      	uxth	r1, r1
 8005e8e:	b282      	uxth	r2, r0
 8005e90:	1a52      	subs	r2, r2, r1
 8005e92:	9907      	ldr	r1, [sp, #28]
 8005e94:	0c1f      	lsrs	r7, r3, #16
 8005e96:	1852      	adds	r2, r2, r1
 8005e98:	0c00      	lsrs	r0, r0, #16
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	1411      	asrs	r1, r2, #16
 8005e9e:	1ac3      	subs	r3, r0, r3
 8005ea0:	185b      	adds	r3, r3, r1
 8005ea2:	1419      	asrs	r1, r3, #16
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	9b05      	ldr	r3, [sp, #20]
 8005eac:	9107      	str	r1, [sp, #28]
 8005eae:	c604      	stmia	r6!, {r2}
 8005eb0:	4563      	cmp	r3, ip
 8005eb2:	d2df      	bcs.n	8005e74 <quorem+0x48>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02b      	beq.n	8005f12 <quorem+0xe6>
 8005eba:	9906      	ldr	r1, [sp, #24]
 8005ebc:	9803      	ldr	r0, [sp, #12]
 8005ebe:	f001 f9b7 	bl	8007230 <__mcmp>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	db1e      	blt.n	8005f04 <quorem+0xd8>
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	9d01      	ldr	r5, [sp, #4]
 8005eca:	9904      	ldr	r1, [sp, #16]
 8005ecc:	c901      	ldmia	r1!, {r0}
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	b287      	uxth	r7, r0
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	1bd2      	subs	r2, r2, r7
 8005ed6:	1992      	adds	r2, r2, r6
 8005ed8:	0c00      	lsrs	r0, r0, #16
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	1a1b      	subs	r3, r3, r0
 8005ede:	1410      	asrs	r0, r2, #16
 8005ee0:	181b      	adds	r3, r3, r0
 8005ee2:	141e      	asrs	r6, r3, #16
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	9b05      	ldr	r3, [sp, #20]
 8005eec:	c504      	stmia	r5!, {r2}
 8005eee:	428b      	cmp	r3, r1
 8005ef0:	d2ec      	bcs.n	8005ecc <quorem+0xa0>
 8005ef2:	9a01      	ldr	r2, [sp, #4]
 8005ef4:	00a3      	lsls	r3, r4, #2
 8005ef6:	18d3      	adds	r3, r2, r3
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	d014      	beq.n	8005f28 <quorem+0xfc>
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	3301      	adds	r3, #1
 8005f02:	9302      	str	r3, [sp, #8]
 8005f04:	9802      	ldr	r0, [sp, #8]
 8005f06:	b009      	add	sp, #36	@ 0x24
 8005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0a:	682b      	ldr	r3, [r5, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <quorem+0xee>
 8005f10:	3c01      	subs	r4, #1
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	3d04      	subs	r5, #4
 8005f16:	42ab      	cmp	r3, r5
 8005f18:	d3f7      	bcc.n	8005f0a <quorem+0xde>
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	611c      	str	r4, [r3, #16]
 8005f1e:	e7cc      	b.n	8005eba <quorem+0x8e>
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d104      	bne.n	8005f30 <quorem+0x104>
 8005f26:	3c01      	subs	r4, #1
 8005f28:	9a01      	ldr	r2, [sp, #4]
 8005f2a:	3b04      	subs	r3, #4
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d3f7      	bcc.n	8005f20 <quorem+0xf4>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	611c      	str	r4, [r3, #16]
 8005f34:	e7e3      	b.n	8005efe <quorem+0xd2>
	...

08005f38 <_dtoa_r>:
 8005f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f3a:	0014      	movs	r4, r2
 8005f3c:	001d      	movs	r5, r3
 8005f3e:	69c6      	ldr	r6, [r0, #28]
 8005f40:	b09d      	sub	sp, #116	@ 0x74
 8005f42:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f44:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005f46:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8005f48:	9003      	str	r0, [sp, #12]
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d10f      	bne.n	8005f6e <_dtoa_r+0x36>
 8005f4e:	2010      	movs	r0, #16
 8005f50:	f000 fe2c 	bl	8006bac <malloc>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1e02      	subs	r2, r0, #0
 8005f58:	61d8      	str	r0, [r3, #28]
 8005f5a:	d104      	bne.n	8005f66 <_dtoa_r+0x2e>
 8005f5c:	21ef      	movs	r1, #239	@ 0xef
 8005f5e:	4bc7      	ldr	r3, [pc, #796]	@ (800627c <_dtoa_r+0x344>)
 8005f60:	48c7      	ldr	r0, [pc, #796]	@ (8006280 <_dtoa_r+0x348>)
 8005f62:	f001 fcb9 	bl	80078d8 <__assert_func>
 8005f66:	6046      	str	r6, [r0, #4]
 8005f68:	6086      	str	r6, [r0, #8]
 8005f6a:	6006      	str	r6, [r0, #0]
 8005f6c:	60c6      	str	r6, [r0, #12]
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d00b      	beq.n	8005f90 <_dtoa_r+0x58>
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4093      	lsls	r3, r2
 8005f7e:	604a      	str	r2, [r1, #4]
 8005f80:	608b      	str	r3, [r1, #8]
 8005f82:	9803      	ldr	r0, [sp, #12]
 8005f84:	f000 ff12 	bl	8006dac <_Bfree>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	2d00      	cmp	r5, #0
 8005f92:	da1e      	bge.n	8005fd2 <_dtoa_r+0x9a>
 8005f94:	2301      	movs	r3, #1
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	006b      	lsls	r3, r5, #1
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f9e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005fa0:	4bb8      	ldr	r3, [pc, #736]	@ (8006284 <_dtoa_r+0x34c>)
 8005fa2:	4ab8      	ldr	r2, [pc, #736]	@ (8006284 <_dtoa_r+0x34c>)
 8005fa4:	403b      	ands	r3, r7
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d116      	bne.n	8005fd8 <_dtoa_r+0xa0>
 8005faa:	4bb7      	ldr	r3, [pc, #732]	@ (8006288 <_dtoa_r+0x350>)
 8005fac:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	033b      	lsls	r3, r7, #12
 8005fb2:	0b1b      	lsrs	r3, r3, #12
 8005fb4:	4323      	orrs	r3, r4
 8005fb6:	d101      	bne.n	8005fbc <_dtoa_r+0x84>
 8005fb8:	f000 fd80 	bl	8006abc <_dtoa_r+0xb84>
 8005fbc:	4bb3      	ldr	r3, [pc, #716]	@ (800628c <_dtoa_r+0x354>)
 8005fbe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	d002      	beq.n	8005fcc <_dtoa_r+0x94>
 8005fc6:	4bb2      	ldr	r3, [pc, #712]	@ (8006290 <_dtoa_r+0x358>)
 8005fc8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	9808      	ldr	r0, [sp, #32]
 8005fce:	b01d      	add	sp, #116	@ 0x74
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	e7e2      	b.n	8005f9e <_dtoa_r+0x66>
 8005fd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fdc:	9212      	str	r2, [sp, #72]	@ 0x48
 8005fde:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fe0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005fe2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f7fa fa30 	bl	800044c <__aeabi_dcmpeq>
 8005fec:	1e06      	subs	r6, r0, #0
 8005fee:	d00b      	beq.n	8006008 <_dtoa_r+0xd0>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <_dtoa_r+0xca>
 8005ffc:	4ba5      	ldr	r3, [pc, #660]	@ (8006294 <_dtoa_r+0x35c>)
 8005ffe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4ba5      	ldr	r3, [pc, #660]	@ (8006298 <_dtoa_r+0x360>)
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	e7e1      	b.n	8005fcc <_dtoa_r+0x94>
 8006008:	ab1a      	add	r3, sp, #104	@ 0x68
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	9803      	ldr	r0, [sp, #12]
 8006012:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006016:	f001 f9c1 	bl	800739c <__d2b>
 800601a:	007a      	lsls	r2, r7, #1
 800601c:	9005      	str	r0, [sp, #20]
 800601e:	0d52      	lsrs	r2, r2, #21
 8006020:	d100      	bne.n	8006024 <_dtoa_r+0xec>
 8006022:	e07b      	b.n	800611c <_dtoa_r+0x1e4>
 8006024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006026:	9618      	str	r6, [sp, #96]	@ 0x60
 8006028:	0319      	lsls	r1, r3, #12
 800602a:	4b9c      	ldr	r3, [pc, #624]	@ (800629c <_dtoa_r+0x364>)
 800602c:	0b09      	lsrs	r1, r1, #12
 800602e:	430b      	orrs	r3, r1
 8006030:	499b      	ldr	r1, [pc, #620]	@ (80062a0 <_dtoa_r+0x368>)
 8006032:	1857      	adds	r7, r2, r1
 8006034:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006036:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006038:	0019      	movs	r1, r3
 800603a:	2200      	movs	r2, #0
 800603c:	4b99      	ldr	r3, [pc, #612]	@ (80062a4 <_dtoa_r+0x36c>)
 800603e:	f7fb fe4b 	bl	8001cd8 <__aeabi_dsub>
 8006042:	4a99      	ldr	r2, [pc, #612]	@ (80062a8 <_dtoa_r+0x370>)
 8006044:	4b99      	ldr	r3, [pc, #612]	@ (80062ac <_dtoa_r+0x374>)
 8006046:	f7fb fb61 	bl	800170c <__aeabi_dmul>
 800604a:	4a99      	ldr	r2, [pc, #612]	@ (80062b0 <_dtoa_r+0x378>)
 800604c:	4b99      	ldr	r3, [pc, #612]	@ (80062b4 <_dtoa_r+0x37c>)
 800604e:	f7fa fb5d 	bl	800070c <__aeabi_dadd>
 8006052:	0004      	movs	r4, r0
 8006054:	0038      	movs	r0, r7
 8006056:	000d      	movs	r5, r1
 8006058:	f7fc faa6 	bl	80025a8 <__aeabi_i2d>
 800605c:	4a96      	ldr	r2, [pc, #600]	@ (80062b8 <_dtoa_r+0x380>)
 800605e:	4b97      	ldr	r3, [pc, #604]	@ (80062bc <_dtoa_r+0x384>)
 8006060:	f7fb fb54 	bl	800170c <__aeabi_dmul>
 8006064:	0002      	movs	r2, r0
 8006066:	000b      	movs	r3, r1
 8006068:	0020      	movs	r0, r4
 800606a:	0029      	movs	r1, r5
 800606c:	f7fa fb4e 	bl	800070c <__aeabi_dadd>
 8006070:	0004      	movs	r4, r0
 8006072:	000d      	movs	r5, r1
 8006074:	f7fc fa5c 	bl	8002530 <__aeabi_d2iz>
 8006078:	2200      	movs	r2, #0
 800607a:	9004      	str	r0, [sp, #16]
 800607c:	2300      	movs	r3, #0
 800607e:	0020      	movs	r0, r4
 8006080:	0029      	movs	r1, r5
 8006082:	f7fa f9e9 	bl	8000458 <__aeabi_dcmplt>
 8006086:	2800      	cmp	r0, #0
 8006088:	d00b      	beq.n	80060a2 <_dtoa_r+0x16a>
 800608a:	9804      	ldr	r0, [sp, #16]
 800608c:	f7fc fa8c 	bl	80025a8 <__aeabi_i2d>
 8006090:	002b      	movs	r3, r5
 8006092:	0022      	movs	r2, r4
 8006094:	f7fa f9da 	bl	800044c <__aeabi_dcmpeq>
 8006098:	4243      	negs	r3, r0
 800609a:	4158      	adcs	r0, r3
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	1a1b      	subs	r3, r3, r0
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	2301      	movs	r3, #1
 80060a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	2b16      	cmp	r3, #22
 80060aa:	d810      	bhi.n	80060ce <_dtoa_r+0x196>
 80060ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80060ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80060b0:	9a04      	ldr	r2, [sp, #16]
 80060b2:	4b83      	ldr	r3, [pc, #524]	@ (80062c0 <_dtoa_r+0x388>)
 80060b4:	00d2      	lsls	r2, r2, #3
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f7fa f9cc 	bl	8000458 <__aeabi_dcmplt>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d047      	beq.n	8006154 <_dtoa_r+0x21c>
 80060c4:	9b04      	ldr	r3, [sp, #16]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	9304      	str	r3, [sp, #16]
 80060ca:	2300      	movs	r3, #0
 80060cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80060ce:	2200      	movs	r2, #0
 80060d0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80060d2:	9206      	str	r2, [sp, #24]
 80060d4:	1bdb      	subs	r3, r3, r7
 80060d6:	1e5a      	subs	r2, r3, #1
 80060d8:	d53e      	bpl.n	8006158 <_dtoa_r+0x220>
 80060da:	2201      	movs	r2, #1
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	9306      	str	r3, [sp, #24]
 80060e0:	2300      	movs	r3, #0
 80060e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80060e4:	9b04      	ldr	r3, [sp, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	db38      	blt.n	800615c <_dtoa_r+0x224>
 80060ea:	9a04      	ldr	r2, [sp, #16]
 80060ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060ee:	4694      	mov	ip, r2
 80060f0:	4463      	add	r3, ip
 80060f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80060f4:	2300      	movs	r3, #0
 80060f6:	9214      	str	r2, [sp, #80]	@ 0x50
 80060f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060fc:	2401      	movs	r4, #1
 80060fe:	2b09      	cmp	r3, #9
 8006100:	d862      	bhi.n	80061c8 <_dtoa_r+0x290>
 8006102:	2b05      	cmp	r3, #5
 8006104:	dd02      	ble.n	800610c <_dtoa_r+0x1d4>
 8006106:	2400      	movs	r4, #0
 8006108:	3b04      	subs	r3, #4
 800610a:	9322      	str	r3, [sp, #136]	@ 0x88
 800610c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800610e:	1e98      	subs	r0, r3, #2
 8006110:	2803      	cmp	r0, #3
 8006112:	d863      	bhi.n	80061dc <_dtoa_r+0x2a4>
 8006114:	f7fa f800 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006118:	2b385654 	.word	0x2b385654
 800611c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800611e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006120:	18f6      	adds	r6, r6, r3
 8006122:	4b68      	ldr	r3, [pc, #416]	@ (80062c4 <_dtoa_r+0x38c>)
 8006124:	18f2      	adds	r2, r6, r3
 8006126:	2a20      	cmp	r2, #32
 8006128:	dd0f      	ble.n	800614a <_dtoa_r+0x212>
 800612a:	2340      	movs	r3, #64	@ 0x40
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	409f      	lsls	r7, r3
 8006130:	4b65      	ldr	r3, [pc, #404]	@ (80062c8 <_dtoa_r+0x390>)
 8006132:	0038      	movs	r0, r7
 8006134:	18f3      	adds	r3, r6, r3
 8006136:	40dc      	lsrs	r4, r3
 8006138:	4320      	orrs	r0, r4
 800613a:	f7fc fa63 	bl	8002604 <__aeabi_ui2d>
 800613e:	2201      	movs	r2, #1
 8006140:	4b62      	ldr	r3, [pc, #392]	@ (80062cc <_dtoa_r+0x394>)
 8006142:	1e77      	subs	r7, r6, #1
 8006144:	18cb      	adds	r3, r1, r3
 8006146:	9218      	str	r2, [sp, #96]	@ 0x60
 8006148:	e776      	b.n	8006038 <_dtoa_r+0x100>
 800614a:	2320      	movs	r3, #32
 800614c:	0020      	movs	r0, r4
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	4098      	lsls	r0, r3
 8006152:	e7f2      	b.n	800613a <_dtoa_r+0x202>
 8006154:	9015      	str	r0, [sp, #84]	@ 0x54
 8006156:	e7ba      	b.n	80060ce <_dtoa_r+0x196>
 8006158:	920d      	str	r2, [sp, #52]	@ 0x34
 800615a:	e7c3      	b.n	80060e4 <_dtoa_r+0x1ac>
 800615c:	9b06      	ldr	r3, [sp, #24]
 800615e:	9a04      	ldr	r2, [sp, #16]
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	9306      	str	r3, [sp, #24]
 8006164:	4253      	negs	r3, r2
 8006166:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006168:	2300      	movs	r3, #0
 800616a:	9314      	str	r3, [sp, #80]	@ 0x50
 800616c:	e7c5      	b.n	80060fa <_dtoa_r+0x1c2>
 800616e:	2301      	movs	r3, #1
 8006170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006172:	9310      	str	r3, [sp, #64]	@ 0x40
 8006174:	4694      	mov	ip, r2
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	4463      	add	r3, ip
 800617a:	930e      	str	r3, [sp, #56]	@ 0x38
 800617c:	3301      	adds	r3, #1
 800617e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	dc08      	bgt.n	8006196 <_dtoa_r+0x25e>
 8006184:	2301      	movs	r3, #1
 8006186:	e006      	b.n	8006196 <_dtoa_r+0x25e>
 8006188:	2301      	movs	r3, #1
 800618a:	9310      	str	r3, [sp, #64]	@ 0x40
 800618c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd28      	ble.n	80061e4 <_dtoa_r+0x2ac>
 8006192:	930e      	str	r3, [sp, #56]	@ 0x38
 8006194:	9309      	str	r3, [sp, #36]	@ 0x24
 8006196:	9a03      	ldr	r2, [sp, #12]
 8006198:	2100      	movs	r1, #0
 800619a:	69d0      	ldr	r0, [r2, #28]
 800619c:	2204      	movs	r2, #4
 800619e:	0015      	movs	r5, r2
 80061a0:	3514      	adds	r5, #20
 80061a2:	429d      	cmp	r5, r3
 80061a4:	d923      	bls.n	80061ee <_dtoa_r+0x2b6>
 80061a6:	6041      	str	r1, [r0, #4]
 80061a8:	9803      	ldr	r0, [sp, #12]
 80061aa:	f000 fdbb 	bl	8006d24 <_Balloc>
 80061ae:	9008      	str	r0, [sp, #32]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d11f      	bne.n	80061f4 <_dtoa_r+0x2bc>
 80061b4:	21b0      	movs	r1, #176	@ 0xb0
 80061b6:	4b46      	ldr	r3, [pc, #280]	@ (80062d0 <_dtoa_r+0x398>)
 80061b8:	4831      	ldr	r0, [pc, #196]	@ (8006280 <_dtoa_r+0x348>)
 80061ba:	9a08      	ldr	r2, [sp, #32]
 80061bc:	31ff      	adds	r1, #255	@ 0xff
 80061be:	e6d0      	b.n	8005f62 <_dtoa_r+0x2a>
 80061c0:	2300      	movs	r3, #0
 80061c2:	e7e2      	b.n	800618a <_dtoa_r+0x252>
 80061c4:	2300      	movs	r3, #0
 80061c6:	e7d3      	b.n	8006170 <_dtoa_r+0x238>
 80061c8:	2300      	movs	r3, #0
 80061ca:	9410      	str	r4, [sp, #64]	@ 0x40
 80061cc:	9322      	str	r3, [sp, #136]	@ 0x88
 80061ce:	3b01      	subs	r3, #1
 80061d0:	2200      	movs	r2, #0
 80061d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80061d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d6:	3313      	adds	r3, #19
 80061d8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80061da:	e7dc      	b.n	8006196 <_dtoa_r+0x25e>
 80061dc:	2301      	movs	r3, #1
 80061de:	9310      	str	r3, [sp, #64]	@ 0x40
 80061e0:	3b02      	subs	r3, #2
 80061e2:	e7f5      	b.n	80061d0 <_dtoa_r+0x298>
 80061e4:	2301      	movs	r3, #1
 80061e6:	001a      	movs	r2, r3
 80061e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80061ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ec:	e7f4      	b.n	80061d8 <_dtoa_r+0x2a0>
 80061ee:	3101      	adds	r1, #1
 80061f0:	0052      	lsls	r2, r2, #1
 80061f2:	e7d4      	b.n	800619e <_dtoa_r+0x266>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	9a08      	ldr	r2, [sp, #32]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fe:	2b0e      	cmp	r3, #14
 8006200:	d900      	bls.n	8006204 <_dtoa_r+0x2cc>
 8006202:	e0d6      	b.n	80063b2 <_dtoa_r+0x47a>
 8006204:	2c00      	cmp	r4, #0
 8006206:	d100      	bne.n	800620a <_dtoa_r+0x2d2>
 8006208:	e0d3      	b.n	80063b2 <_dtoa_r+0x47a>
 800620a:	9b04      	ldr	r3, [sp, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dd63      	ble.n	80062d8 <_dtoa_r+0x3a0>
 8006210:	210f      	movs	r1, #15
 8006212:	9a04      	ldr	r2, [sp, #16]
 8006214:	4b2a      	ldr	r3, [pc, #168]	@ (80062c0 <_dtoa_r+0x388>)
 8006216:	400a      	ands	r2, r1
 8006218:	00d2      	lsls	r2, r2, #3
 800621a:	189b      	adds	r3, r3, r2
 800621c:	681e      	ldr	r6, [r3, #0]
 800621e:	685f      	ldr	r7, [r3, #4]
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	2402      	movs	r4, #2
 8006224:	111d      	asrs	r5, r3, #4
 8006226:	05db      	lsls	r3, r3, #23
 8006228:	d50a      	bpl.n	8006240 <_dtoa_r+0x308>
 800622a:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <_dtoa_r+0x39c>)
 800622c:	400d      	ands	r5, r1
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006234:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006236:	f7fa fe2f 	bl	8000e98 <__aeabi_ddiv>
 800623a:	900a      	str	r0, [sp, #40]	@ 0x28
 800623c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800623e:	3401      	adds	r4, #1
 8006240:	4b24      	ldr	r3, [pc, #144]	@ (80062d4 <_dtoa_r+0x39c>)
 8006242:	930c      	str	r3, [sp, #48]	@ 0x30
 8006244:	2d00      	cmp	r5, #0
 8006246:	d108      	bne.n	800625a <_dtoa_r+0x322>
 8006248:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800624a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800624c:	0032      	movs	r2, r6
 800624e:	003b      	movs	r3, r7
 8006250:	f7fa fe22 	bl	8000e98 <__aeabi_ddiv>
 8006254:	900a      	str	r0, [sp, #40]	@ 0x28
 8006256:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006258:	e059      	b.n	800630e <_dtoa_r+0x3d6>
 800625a:	2301      	movs	r3, #1
 800625c:	421d      	tst	r5, r3
 800625e:	d009      	beq.n	8006274 <_dtoa_r+0x33c>
 8006260:	18e4      	adds	r4, r4, r3
 8006262:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006264:	0030      	movs	r0, r6
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	0039      	movs	r1, r7
 800626c:	f7fb fa4e 	bl	800170c <__aeabi_dmul>
 8006270:	0006      	movs	r6, r0
 8006272:	000f      	movs	r7, r1
 8006274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006276:	106d      	asrs	r5, r5, #1
 8006278:	3308      	adds	r3, #8
 800627a:	e7e2      	b.n	8006242 <_dtoa_r+0x30a>
 800627c:	080080e9 	.word	0x080080e9
 8006280:	08008100 	.word	0x08008100
 8006284:	7ff00000 	.word	0x7ff00000
 8006288:	0000270f 	.word	0x0000270f
 800628c:	080080e5 	.word	0x080080e5
 8006290:	080080e8 	.word	0x080080e8
 8006294:	080080b9 	.word	0x080080b9
 8006298:	080080b8 	.word	0x080080b8
 800629c:	3ff00000 	.word	0x3ff00000
 80062a0:	fffffc01 	.word	0xfffffc01
 80062a4:	3ff80000 	.word	0x3ff80000
 80062a8:	636f4361 	.word	0x636f4361
 80062ac:	3fd287a7 	.word	0x3fd287a7
 80062b0:	8b60c8b3 	.word	0x8b60c8b3
 80062b4:	3fc68a28 	.word	0x3fc68a28
 80062b8:	509f79fb 	.word	0x509f79fb
 80062bc:	3fd34413 	.word	0x3fd34413
 80062c0:	08008250 	.word	0x08008250
 80062c4:	00000432 	.word	0x00000432
 80062c8:	00000412 	.word	0x00000412
 80062cc:	fe100000 	.word	0xfe100000
 80062d0:	08008158 	.word	0x08008158
 80062d4:	08008228 	.word	0x08008228
 80062d8:	9b04      	ldr	r3, [sp, #16]
 80062da:	2402      	movs	r4, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d016      	beq.n	800630e <_dtoa_r+0x3d6>
 80062e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80062e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80062e4:	220f      	movs	r2, #15
 80062e6:	425d      	negs	r5, r3
 80062e8:	402a      	ands	r2, r5
 80062ea:	4bd5      	ldr	r3, [pc, #852]	@ (8006640 <_dtoa_r+0x708>)
 80062ec:	00d2      	lsls	r2, r2, #3
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f7fb fa0a 	bl	800170c <__aeabi_dmul>
 80062f8:	2701      	movs	r7, #1
 80062fa:	2300      	movs	r3, #0
 80062fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80062fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006300:	4ed0      	ldr	r6, [pc, #832]	@ (8006644 <_dtoa_r+0x70c>)
 8006302:	112d      	asrs	r5, r5, #4
 8006304:	2d00      	cmp	r5, #0
 8006306:	d000      	beq.n	800630a <_dtoa_r+0x3d2>
 8006308:	e095      	b.n	8006436 <_dtoa_r+0x4fe>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1a2      	bne.n	8006254 <_dtoa_r+0x31c>
 800630e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006310:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006312:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006314:	2b00      	cmp	r3, #0
 8006316:	d100      	bne.n	800631a <_dtoa_r+0x3e2>
 8006318:	e098      	b.n	800644c <_dtoa_r+0x514>
 800631a:	2200      	movs	r2, #0
 800631c:	0030      	movs	r0, r6
 800631e:	0039      	movs	r1, r7
 8006320:	4bc9      	ldr	r3, [pc, #804]	@ (8006648 <_dtoa_r+0x710>)
 8006322:	f7fa f899 	bl	8000458 <__aeabi_dcmplt>
 8006326:	2800      	cmp	r0, #0
 8006328:	d100      	bne.n	800632c <_dtoa_r+0x3f4>
 800632a:	e08f      	b.n	800644c <_dtoa_r+0x514>
 800632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d100      	bne.n	8006334 <_dtoa_r+0x3fc>
 8006332:	e08b      	b.n	800644c <_dtoa_r+0x514>
 8006334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006336:	2b00      	cmp	r3, #0
 8006338:	dd37      	ble.n	80063aa <_dtoa_r+0x472>
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	2200      	movs	r2, #0
 800633e:	3b01      	subs	r3, #1
 8006340:	930c      	str	r3, [sp, #48]	@ 0x30
 8006342:	0030      	movs	r0, r6
 8006344:	4bc1      	ldr	r3, [pc, #772]	@ (800664c <_dtoa_r+0x714>)
 8006346:	0039      	movs	r1, r7
 8006348:	f7fb f9e0 	bl	800170c <__aeabi_dmul>
 800634c:	900a      	str	r0, [sp, #40]	@ 0x28
 800634e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006352:	3401      	adds	r4, #1
 8006354:	0020      	movs	r0, r4
 8006356:	9311      	str	r3, [sp, #68]	@ 0x44
 8006358:	f7fc f926 	bl	80025a8 <__aeabi_i2d>
 800635c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800635e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006360:	f7fb f9d4 	bl	800170c <__aeabi_dmul>
 8006364:	4bba      	ldr	r3, [pc, #744]	@ (8006650 <_dtoa_r+0x718>)
 8006366:	2200      	movs	r2, #0
 8006368:	f7fa f9d0 	bl	800070c <__aeabi_dadd>
 800636c:	4bb9      	ldr	r3, [pc, #740]	@ (8006654 <_dtoa_r+0x71c>)
 800636e:	0006      	movs	r6, r0
 8006370:	18cf      	adds	r7, r1, r3
 8006372:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006374:	2b00      	cmp	r3, #0
 8006376:	d16d      	bne.n	8006454 <_dtoa_r+0x51c>
 8006378:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800637a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800637c:	2200      	movs	r2, #0
 800637e:	4bb6      	ldr	r3, [pc, #728]	@ (8006658 <_dtoa_r+0x720>)
 8006380:	f7fb fcaa 	bl	8001cd8 <__aeabi_dsub>
 8006384:	0032      	movs	r2, r6
 8006386:	003b      	movs	r3, r7
 8006388:	0004      	movs	r4, r0
 800638a:	000d      	movs	r5, r1
 800638c:	f7fa f878 	bl	8000480 <__aeabi_dcmpgt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d000      	beq.n	8006396 <_dtoa_r+0x45e>
 8006394:	e2b6      	b.n	8006904 <_dtoa_r+0x9cc>
 8006396:	2180      	movs	r1, #128	@ 0x80
 8006398:	0609      	lsls	r1, r1, #24
 800639a:	187b      	adds	r3, r7, r1
 800639c:	0032      	movs	r2, r6
 800639e:	0020      	movs	r0, r4
 80063a0:	0029      	movs	r1, r5
 80063a2:	f7fa f859 	bl	8000458 <__aeabi_dcmplt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d128      	bne.n	80063fc <_dtoa_r+0x4c4>
 80063aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80063ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da00      	bge.n	80063ba <_dtoa_r+0x482>
 80063b8:	e174      	b.n	80066a4 <_dtoa_r+0x76c>
 80063ba:	9a04      	ldr	r2, [sp, #16]
 80063bc:	2a0e      	cmp	r2, #14
 80063be:	dd00      	ble.n	80063c2 <_dtoa_r+0x48a>
 80063c0:	e170      	b.n	80066a4 <_dtoa_r+0x76c>
 80063c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006640 <_dtoa_r+0x708>)
 80063c4:	00d2      	lsls	r2, r2, #3
 80063c6:	189b      	adds	r3, r3, r2
 80063c8:	685c      	ldr	r4, [r3, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	9306      	str	r3, [sp, #24]
 80063ce:	9407      	str	r4, [sp, #28]
 80063d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	db00      	blt.n	80063d8 <_dtoa_r+0x4a0>
 80063d6:	e0e7      	b.n	80065a8 <_dtoa_r+0x670>
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	dd00      	ble.n	80063e0 <_dtoa_r+0x4a8>
 80063de:	e0e3      	b.n	80065a8 <_dtoa_r+0x670>
 80063e0:	d10c      	bne.n	80063fc <_dtoa_r+0x4c4>
 80063e2:	9806      	ldr	r0, [sp, #24]
 80063e4:	9907      	ldr	r1, [sp, #28]
 80063e6:	2200      	movs	r2, #0
 80063e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006658 <_dtoa_r+0x720>)
 80063ea:	f7fb f98f 	bl	800170c <__aeabi_dmul>
 80063ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063f2:	f7fa f84f 	bl	8000494 <__aeabi_dcmpge>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d100      	bne.n	80063fc <_dtoa_r+0x4c4>
 80063fa:	e286      	b.n	800690a <_dtoa_r+0x9d2>
 80063fc:	2600      	movs	r6, #0
 80063fe:	0037      	movs	r7, r6
 8006400:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006402:	9c08      	ldr	r4, [sp, #32]
 8006404:	43db      	mvns	r3, r3
 8006406:	930c      	str	r3, [sp, #48]	@ 0x30
 8006408:	9704      	str	r7, [sp, #16]
 800640a:	2700      	movs	r7, #0
 800640c:	0031      	movs	r1, r6
 800640e:	9803      	ldr	r0, [sp, #12]
 8006410:	f000 fccc 	bl	8006dac <_Bfree>
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d100      	bne.n	800641c <_dtoa_r+0x4e4>
 800641a:	e0bb      	b.n	8006594 <_dtoa_r+0x65c>
 800641c:	2f00      	cmp	r7, #0
 800641e:	d005      	beq.n	800642c <_dtoa_r+0x4f4>
 8006420:	429f      	cmp	r7, r3
 8006422:	d003      	beq.n	800642c <_dtoa_r+0x4f4>
 8006424:	0039      	movs	r1, r7
 8006426:	9803      	ldr	r0, [sp, #12]
 8006428:	f000 fcc0 	bl	8006dac <_Bfree>
 800642c:	9904      	ldr	r1, [sp, #16]
 800642e:	9803      	ldr	r0, [sp, #12]
 8006430:	f000 fcbc 	bl	8006dac <_Bfree>
 8006434:	e0ae      	b.n	8006594 <_dtoa_r+0x65c>
 8006436:	423d      	tst	r5, r7
 8006438:	d005      	beq.n	8006446 <_dtoa_r+0x50e>
 800643a:	6832      	ldr	r2, [r6, #0]
 800643c:	6873      	ldr	r3, [r6, #4]
 800643e:	f7fb f965 	bl	800170c <__aeabi_dmul>
 8006442:	003b      	movs	r3, r7
 8006444:	3401      	adds	r4, #1
 8006446:	106d      	asrs	r5, r5, #1
 8006448:	3608      	adds	r6, #8
 800644a:	e75b      	b.n	8006304 <_dtoa_r+0x3cc>
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006452:	e77f      	b.n	8006354 <_dtoa_r+0x41c>
 8006454:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006456:	4b7a      	ldr	r3, [pc, #488]	@ (8006640 <_dtoa_r+0x708>)
 8006458:	3a01      	subs	r2, #1
 800645a:	00d2      	lsls	r2, r2, #3
 800645c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800645e:	189b      	adds	r3, r3, r2
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2900      	cmp	r1, #0
 8006466:	d04c      	beq.n	8006502 <_dtoa_r+0x5ca>
 8006468:	2000      	movs	r0, #0
 800646a:	497c      	ldr	r1, [pc, #496]	@ (800665c <_dtoa_r+0x724>)
 800646c:	f7fa fd14 	bl	8000e98 <__aeabi_ddiv>
 8006470:	0032      	movs	r2, r6
 8006472:	003b      	movs	r3, r7
 8006474:	f7fb fc30 	bl	8001cd8 <__aeabi_dsub>
 8006478:	9a08      	ldr	r2, [sp, #32]
 800647a:	0006      	movs	r6, r0
 800647c:	4694      	mov	ip, r2
 800647e:	000f      	movs	r7, r1
 8006480:	9b08      	ldr	r3, [sp, #32]
 8006482:	9316      	str	r3, [sp, #88]	@ 0x58
 8006484:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006486:	4463      	add	r3, ip
 8006488:	9311      	str	r3, [sp, #68]	@ 0x44
 800648a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800648c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800648e:	f7fc f84f 	bl	8002530 <__aeabi_d2iz>
 8006492:	0005      	movs	r5, r0
 8006494:	f7fc f888 	bl	80025a8 <__aeabi_i2d>
 8006498:	0002      	movs	r2, r0
 800649a:	000b      	movs	r3, r1
 800649c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800649e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064a0:	f7fb fc1a 	bl	8001cd8 <__aeabi_dsub>
 80064a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064a6:	3530      	adds	r5, #48	@ 0x30
 80064a8:	1c5c      	adds	r4, r3, #1
 80064aa:	701d      	strb	r5, [r3, #0]
 80064ac:	0032      	movs	r2, r6
 80064ae:	003b      	movs	r3, r7
 80064b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80064b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80064b4:	f7f9 ffd0 	bl	8000458 <__aeabi_dcmplt>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d16b      	bne.n	8006594 <_dtoa_r+0x65c>
 80064bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064c0:	2000      	movs	r0, #0
 80064c2:	4961      	ldr	r1, [pc, #388]	@ (8006648 <_dtoa_r+0x710>)
 80064c4:	f7fb fc08 	bl	8001cd8 <__aeabi_dsub>
 80064c8:	0032      	movs	r2, r6
 80064ca:	003b      	movs	r3, r7
 80064cc:	f7f9 ffc4 	bl	8000458 <__aeabi_dcmplt>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d000      	beq.n	80064d6 <_dtoa_r+0x59e>
 80064d4:	e0c6      	b.n	8006664 <_dtoa_r+0x72c>
 80064d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064d8:	42a3      	cmp	r3, r4
 80064da:	d100      	bne.n	80064de <_dtoa_r+0x5a6>
 80064dc:	e765      	b.n	80063aa <_dtoa_r+0x472>
 80064de:	2200      	movs	r2, #0
 80064e0:	0030      	movs	r0, r6
 80064e2:	0039      	movs	r1, r7
 80064e4:	4b59      	ldr	r3, [pc, #356]	@ (800664c <_dtoa_r+0x714>)
 80064e6:	f7fb f911 	bl	800170c <__aeabi_dmul>
 80064ea:	2200      	movs	r2, #0
 80064ec:	0006      	movs	r6, r0
 80064ee:	000f      	movs	r7, r1
 80064f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80064f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064f4:	4b55      	ldr	r3, [pc, #340]	@ (800664c <_dtoa_r+0x714>)
 80064f6:	f7fb f909 	bl	800170c <__aeabi_dmul>
 80064fa:	9416      	str	r4, [sp, #88]	@ 0x58
 80064fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80064fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006500:	e7c3      	b.n	800648a <_dtoa_r+0x552>
 8006502:	0030      	movs	r0, r6
 8006504:	0039      	movs	r1, r7
 8006506:	f7fb f901 	bl	800170c <__aeabi_dmul>
 800650a:	9d08      	ldr	r5, [sp, #32]
 800650c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800650e:	002b      	movs	r3, r5
 8006510:	4694      	mov	ip, r2
 8006512:	9016      	str	r0, [sp, #88]	@ 0x58
 8006514:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006516:	4463      	add	r3, ip
 8006518:	9319      	str	r3, [sp, #100]	@ 0x64
 800651a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800651c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800651e:	f7fc f807 	bl	8002530 <__aeabi_d2iz>
 8006522:	0004      	movs	r4, r0
 8006524:	f7fc f840 	bl	80025a8 <__aeabi_i2d>
 8006528:	000b      	movs	r3, r1
 800652a:	0002      	movs	r2, r0
 800652c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800652e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006530:	f7fb fbd2 	bl	8001cd8 <__aeabi_dsub>
 8006534:	3430      	adds	r4, #48	@ 0x30
 8006536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006538:	702c      	strb	r4, [r5, #0]
 800653a:	3501      	adds	r5, #1
 800653c:	0006      	movs	r6, r0
 800653e:	000f      	movs	r7, r1
 8006540:	42ab      	cmp	r3, r5
 8006542:	d12a      	bne.n	800659a <_dtoa_r+0x662>
 8006544:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006546:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800654c:	469c      	mov	ip, r3
 800654e:	2200      	movs	r2, #0
 8006550:	4b42      	ldr	r3, [pc, #264]	@ (800665c <_dtoa_r+0x724>)
 8006552:	4464      	add	r4, ip
 8006554:	f7fa f8da 	bl	800070c <__aeabi_dadd>
 8006558:	0002      	movs	r2, r0
 800655a:	000b      	movs	r3, r1
 800655c:	0030      	movs	r0, r6
 800655e:	0039      	movs	r1, r7
 8006560:	f7f9 ff8e 	bl	8000480 <__aeabi_dcmpgt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d000      	beq.n	800656a <_dtoa_r+0x632>
 8006568:	e07c      	b.n	8006664 <_dtoa_r+0x72c>
 800656a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800656c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800656e:	2000      	movs	r0, #0
 8006570:	493a      	ldr	r1, [pc, #232]	@ (800665c <_dtoa_r+0x724>)
 8006572:	f7fb fbb1 	bl	8001cd8 <__aeabi_dsub>
 8006576:	0002      	movs	r2, r0
 8006578:	000b      	movs	r3, r1
 800657a:	0030      	movs	r0, r6
 800657c:	0039      	movs	r1, r7
 800657e:	f7f9 ff6b 	bl	8000458 <__aeabi_dcmplt>
 8006582:	2800      	cmp	r0, #0
 8006584:	d100      	bne.n	8006588 <_dtoa_r+0x650>
 8006586:	e710      	b.n	80063aa <_dtoa_r+0x472>
 8006588:	0023      	movs	r3, r4
 800658a:	3c01      	subs	r4, #1
 800658c:	7822      	ldrb	r2, [r4, #0]
 800658e:	2a30      	cmp	r2, #48	@ 0x30
 8006590:	d0fa      	beq.n	8006588 <_dtoa_r+0x650>
 8006592:	001c      	movs	r4, r3
 8006594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	e042      	b.n	8006620 <_dtoa_r+0x6e8>
 800659a:	2200      	movs	r2, #0
 800659c:	4b2b      	ldr	r3, [pc, #172]	@ (800664c <_dtoa_r+0x714>)
 800659e:	f7fb f8b5 	bl	800170c <__aeabi_dmul>
 80065a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80065a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065a6:	e7b8      	b.n	800651a <_dtoa_r+0x5e2>
 80065a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065aa:	9d08      	ldr	r5, [sp, #32]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	195b      	adds	r3, r3, r5
 80065b0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80065b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80065b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80065b6:	9a06      	ldr	r2, [sp, #24]
 80065b8:	9b07      	ldr	r3, [sp, #28]
 80065ba:	0030      	movs	r0, r6
 80065bc:	0039      	movs	r1, r7
 80065be:	f7fa fc6b 	bl	8000e98 <__aeabi_ddiv>
 80065c2:	f7fb ffb5 	bl	8002530 <__aeabi_d2iz>
 80065c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80065c8:	f7fb ffee 	bl	80025a8 <__aeabi_i2d>
 80065cc:	9a06      	ldr	r2, [sp, #24]
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	f7fb f89c 	bl	800170c <__aeabi_dmul>
 80065d4:	0002      	movs	r2, r0
 80065d6:	000b      	movs	r3, r1
 80065d8:	0030      	movs	r0, r6
 80065da:	0039      	movs	r1, r7
 80065dc:	f7fb fb7c 	bl	8001cd8 <__aeabi_dsub>
 80065e0:	002b      	movs	r3, r5
 80065e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e4:	3501      	adds	r5, #1
 80065e6:	3230      	adds	r2, #48	@ 0x30
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ec:	002c      	movs	r4, r5
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d14b      	bne.n	800668a <_dtoa_r+0x752>
 80065f2:	0002      	movs	r2, r0
 80065f4:	000b      	movs	r3, r1
 80065f6:	f7fa f889 	bl	800070c <__aeabi_dadd>
 80065fa:	9a06      	ldr	r2, [sp, #24]
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	0006      	movs	r6, r0
 8006600:	000f      	movs	r7, r1
 8006602:	f7f9 ff3d 	bl	8000480 <__aeabi_dcmpgt>
 8006606:	2800      	cmp	r0, #0
 8006608:	d12a      	bne.n	8006660 <_dtoa_r+0x728>
 800660a:	9a06      	ldr	r2, [sp, #24]
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	0030      	movs	r0, r6
 8006610:	0039      	movs	r1, r7
 8006612:	f7f9 ff1b 	bl	800044c <__aeabi_dcmpeq>
 8006616:	2800      	cmp	r0, #0
 8006618:	d002      	beq.n	8006620 <_dtoa_r+0x6e8>
 800661a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661c:	07dd      	lsls	r5, r3, #31
 800661e:	d41f      	bmi.n	8006660 <_dtoa_r+0x728>
 8006620:	9905      	ldr	r1, [sp, #20]
 8006622:	9803      	ldr	r0, [sp, #12]
 8006624:	f000 fbc2 	bl	8006dac <_Bfree>
 8006628:	2300      	movs	r3, #0
 800662a:	7023      	strb	r3, [r4, #0]
 800662c:	9b04      	ldr	r3, [sp, #16]
 800662e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006630:	3301      	adds	r3, #1
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006636:	2b00      	cmp	r3, #0
 8006638:	d100      	bne.n	800663c <_dtoa_r+0x704>
 800663a:	e4c7      	b.n	8005fcc <_dtoa_r+0x94>
 800663c:	601c      	str	r4, [r3, #0]
 800663e:	e4c5      	b.n	8005fcc <_dtoa_r+0x94>
 8006640:	08008250 	.word	0x08008250
 8006644:	08008228 	.word	0x08008228
 8006648:	3ff00000 	.word	0x3ff00000
 800664c:	40240000 	.word	0x40240000
 8006650:	401c0000 	.word	0x401c0000
 8006654:	fcc00000 	.word	0xfcc00000
 8006658:	40140000 	.word	0x40140000
 800665c:	3fe00000 	.word	0x3fe00000
 8006660:	9b04      	ldr	r3, [sp, #16]
 8006662:	930c      	str	r3, [sp, #48]	@ 0x30
 8006664:	0023      	movs	r3, r4
 8006666:	001c      	movs	r4, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	2a39      	cmp	r2, #57	@ 0x39
 800666e:	d108      	bne.n	8006682 <_dtoa_r+0x74a>
 8006670:	9a08      	ldr	r2, [sp, #32]
 8006672:	429a      	cmp	r2, r3
 8006674:	d1f7      	bne.n	8006666 <_dtoa_r+0x72e>
 8006676:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006678:	9908      	ldr	r1, [sp, #32]
 800667a:	3201      	adds	r2, #1
 800667c:	920c      	str	r2, [sp, #48]	@ 0x30
 800667e:	2230      	movs	r2, #48	@ 0x30
 8006680:	700a      	strb	r2, [r1, #0]
 8006682:	781a      	ldrb	r2, [r3, #0]
 8006684:	3201      	adds	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e784      	b.n	8006594 <_dtoa_r+0x65c>
 800668a:	2200      	movs	r2, #0
 800668c:	4bc6      	ldr	r3, [pc, #792]	@ (80069a8 <_dtoa_r+0xa70>)
 800668e:	f7fb f83d 	bl	800170c <__aeabi_dmul>
 8006692:	2200      	movs	r2, #0
 8006694:	2300      	movs	r3, #0
 8006696:	0006      	movs	r6, r0
 8006698:	000f      	movs	r7, r1
 800669a:	f7f9 fed7 	bl	800044c <__aeabi_dcmpeq>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d089      	beq.n	80065b6 <_dtoa_r+0x67e>
 80066a2:	e7bd      	b.n	8006620 <_dtoa_r+0x6e8>
 80066a4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80066a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80066a8:	9c06      	ldr	r4, [sp, #24]
 80066aa:	2f00      	cmp	r7, #0
 80066ac:	d014      	beq.n	80066d8 <_dtoa_r+0x7a0>
 80066ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066b0:	2a01      	cmp	r2, #1
 80066b2:	dd00      	ble.n	80066b6 <_dtoa_r+0x77e>
 80066b4:	e0e4      	b.n	8006880 <_dtoa_r+0x948>
 80066b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80066b8:	2a00      	cmp	r2, #0
 80066ba:	d100      	bne.n	80066be <_dtoa_r+0x786>
 80066bc:	e0da      	b.n	8006874 <_dtoa_r+0x93c>
 80066be:	4abb      	ldr	r2, [pc, #748]	@ (80069ac <_dtoa_r+0xa74>)
 80066c0:	189b      	adds	r3, r3, r2
 80066c2:	9a06      	ldr	r2, [sp, #24]
 80066c4:	2101      	movs	r1, #1
 80066c6:	18d2      	adds	r2, r2, r3
 80066c8:	9206      	str	r2, [sp, #24]
 80066ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80066cc:	9803      	ldr	r0, [sp, #12]
 80066ce:	18d3      	adds	r3, r2, r3
 80066d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80066d2:	f000 fc23 	bl	8006f1c <__i2b>
 80066d6:	0007      	movs	r7, r0
 80066d8:	2c00      	cmp	r4, #0
 80066da:	d00e      	beq.n	80066fa <_dtoa_r+0x7c2>
 80066dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066de:	2b00      	cmp	r3, #0
 80066e0:	dd0b      	ble.n	80066fa <_dtoa_r+0x7c2>
 80066e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80066e4:	0023      	movs	r3, r4
 80066e6:	4294      	cmp	r4, r2
 80066e8:	dd00      	ble.n	80066ec <_dtoa_r+0x7b4>
 80066ea:	0013      	movs	r3, r2
 80066ec:	9a06      	ldr	r2, [sp, #24]
 80066ee:	1ae4      	subs	r4, r4, r3
 80066f0:	1ad2      	subs	r2, r2, r3
 80066f2:	9206      	str	r2, [sp, #24]
 80066f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80066fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d021      	beq.n	8006744 <_dtoa_r+0x80c>
 8006700:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d100      	bne.n	8006708 <_dtoa_r+0x7d0>
 8006706:	e0d3      	b.n	80068b0 <_dtoa_r+0x978>
 8006708:	9e05      	ldr	r6, [sp, #20]
 800670a:	2d00      	cmp	r5, #0
 800670c:	d014      	beq.n	8006738 <_dtoa_r+0x800>
 800670e:	0039      	movs	r1, r7
 8006710:	002a      	movs	r2, r5
 8006712:	9803      	ldr	r0, [sp, #12]
 8006714:	f000 fcc4 	bl	80070a0 <__pow5mult>
 8006718:	9a05      	ldr	r2, [sp, #20]
 800671a:	0001      	movs	r1, r0
 800671c:	0007      	movs	r7, r0
 800671e:	9803      	ldr	r0, [sp, #12]
 8006720:	f000 fc14 	bl	8006f4c <__multiply>
 8006724:	0006      	movs	r6, r0
 8006726:	9905      	ldr	r1, [sp, #20]
 8006728:	9803      	ldr	r0, [sp, #12]
 800672a:	f000 fb3f 	bl	8006dac <_Bfree>
 800672e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006730:	9605      	str	r6, [sp, #20]
 8006732:	1b5b      	subs	r3, r3, r5
 8006734:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006736:	d005      	beq.n	8006744 <_dtoa_r+0x80c>
 8006738:	0031      	movs	r1, r6
 800673a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800673c:	9803      	ldr	r0, [sp, #12]
 800673e:	f000 fcaf 	bl	80070a0 <__pow5mult>
 8006742:	9005      	str	r0, [sp, #20]
 8006744:	2101      	movs	r1, #1
 8006746:	9803      	ldr	r0, [sp, #12]
 8006748:	f000 fbe8 	bl	8006f1c <__i2b>
 800674c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800674e:	0006      	movs	r6, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d100      	bne.n	8006756 <_dtoa_r+0x81e>
 8006754:	e1bc      	b.n	8006ad0 <_dtoa_r+0xb98>
 8006756:	001a      	movs	r2, r3
 8006758:	0001      	movs	r1, r0
 800675a:	9803      	ldr	r0, [sp, #12]
 800675c:	f000 fca0 	bl	80070a0 <__pow5mult>
 8006760:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006762:	0006      	movs	r6, r0
 8006764:	2500      	movs	r5, #0
 8006766:	2b01      	cmp	r3, #1
 8006768:	dc16      	bgt.n	8006798 <_dtoa_r+0x860>
 800676a:	2500      	movs	r5, #0
 800676c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800676e:	42ab      	cmp	r3, r5
 8006770:	d10e      	bne.n	8006790 <_dtoa_r+0x858>
 8006772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	42ab      	cmp	r3, r5
 8006778:	d10a      	bne.n	8006790 <_dtoa_r+0x858>
 800677a:	4b8d      	ldr	r3, [pc, #564]	@ (80069b0 <_dtoa_r+0xa78>)
 800677c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800677e:	4213      	tst	r3, r2
 8006780:	d006      	beq.n	8006790 <_dtoa_r+0x858>
 8006782:	9b06      	ldr	r3, [sp, #24]
 8006784:	3501      	adds	r5, #1
 8006786:	3301      	adds	r3, #1
 8006788:	9306      	str	r3, [sp, #24]
 800678a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800678c:	3301      	adds	r3, #1
 800678e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006790:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006792:	2001      	movs	r0, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <_dtoa_r+0x872>
 8006798:	6933      	ldr	r3, [r6, #16]
 800679a:	3303      	adds	r3, #3
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	18f3      	adds	r3, r6, r3
 80067a0:	6858      	ldr	r0, [r3, #4]
 80067a2:	f000 fb6b 	bl	8006e7c <__hi0bits>
 80067a6:	2320      	movs	r3, #32
 80067a8:	1a18      	subs	r0, r3, r0
 80067aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067ac:	1818      	adds	r0, r3, r0
 80067ae:	0002      	movs	r2, r0
 80067b0:	231f      	movs	r3, #31
 80067b2:	401a      	ands	r2, r3
 80067b4:	4218      	tst	r0, r3
 80067b6:	d100      	bne.n	80067ba <_dtoa_r+0x882>
 80067b8:	e081      	b.n	80068be <_dtoa_r+0x986>
 80067ba:	3301      	adds	r3, #1
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	2b04      	cmp	r3, #4
 80067c0:	dd79      	ble.n	80068b6 <_dtoa_r+0x97e>
 80067c2:	231c      	movs	r3, #28
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	9a06      	ldr	r2, [sp, #24]
 80067c8:	18e4      	adds	r4, r4, r3
 80067ca:	18d2      	adds	r2, r2, r3
 80067cc:	9206      	str	r2, [sp, #24]
 80067ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80067d0:	18d3      	adds	r3, r2, r3
 80067d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80067d4:	9b06      	ldr	r3, [sp, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dd05      	ble.n	80067e6 <_dtoa_r+0x8ae>
 80067da:	001a      	movs	r2, r3
 80067dc:	9905      	ldr	r1, [sp, #20]
 80067de:	9803      	ldr	r0, [sp, #12]
 80067e0:	f000 fcba 	bl	8007158 <__lshift>
 80067e4:	9005      	str	r0, [sp, #20]
 80067e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dd05      	ble.n	80067f8 <_dtoa_r+0x8c0>
 80067ec:	0031      	movs	r1, r6
 80067ee:	001a      	movs	r2, r3
 80067f0:	9803      	ldr	r0, [sp, #12]
 80067f2:	f000 fcb1 	bl	8007158 <__lshift>
 80067f6:	0006      	movs	r6, r0
 80067f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d061      	beq.n	80068c2 <_dtoa_r+0x98a>
 80067fe:	0031      	movs	r1, r6
 8006800:	9805      	ldr	r0, [sp, #20]
 8006802:	f000 fd15 	bl	8007230 <__mcmp>
 8006806:	2800      	cmp	r0, #0
 8006808:	da5b      	bge.n	80068c2 <_dtoa_r+0x98a>
 800680a:	9b04      	ldr	r3, [sp, #16]
 800680c:	220a      	movs	r2, #10
 800680e:	3b01      	subs	r3, #1
 8006810:	930c      	str	r3, [sp, #48]	@ 0x30
 8006812:	9905      	ldr	r1, [sp, #20]
 8006814:	2300      	movs	r3, #0
 8006816:	9803      	ldr	r0, [sp, #12]
 8006818:	f000 faec 	bl	8006df4 <__multadd>
 800681c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800681e:	9005      	str	r0, [sp, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d100      	bne.n	8006826 <_dtoa_r+0x8ee>
 8006824:	e15b      	b.n	8006ade <_dtoa_r+0xba6>
 8006826:	2300      	movs	r3, #0
 8006828:	0039      	movs	r1, r7
 800682a:	220a      	movs	r2, #10
 800682c:	9803      	ldr	r0, [sp, #12]
 800682e:	f000 fae1 	bl	8006df4 <__multadd>
 8006832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006834:	0007      	movs	r7, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	dc4d      	bgt.n	80068d6 <_dtoa_r+0x99e>
 800683a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800683c:	2b02      	cmp	r3, #2
 800683e:	dd46      	ble.n	80068ce <_dtoa_r+0x996>
 8006840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d000      	beq.n	8006848 <_dtoa_r+0x910>
 8006846:	e5db      	b.n	8006400 <_dtoa_r+0x4c8>
 8006848:	0031      	movs	r1, r6
 800684a:	2205      	movs	r2, #5
 800684c:	9803      	ldr	r0, [sp, #12]
 800684e:	f000 fad1 	bl	8006df4 <__multadd>
 8006852:	0006      	movs	r6, r0
 8006854:	0001      	movs	r1, r0
 8006856:	9805      	ldr	r0, [sp, #20]
 8006858:	f000 fcea 	bl	8007230 <__mcmp>
 800685c:	2800      	cmp	r0, #0
 800685e:	dc00      	bgt.n	8006862 <_dtoa_r+0x92a>
 8006860:	e5ce      	b.n	8006400 <_dtoa_r+0x4c8>
 8006862:	9b08      	ldr	r3, [sp, #32]
 8006864:	9a08      	ldr	r2, [sp, #32]
 8006866:	1c5c      	adds	r4, r3, #1
 8006868:	2331      	movs	r3, #49	@ 0x31
 800686a:	7013      	strb	r3, [r2, #0]
 800686c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800686e:	3301      	adds	r3, #1
 8006870:	930c      	str	r3, [sp, #48]	@ 0x30
 8006872:	e5c9      	b.n	8006408 <_dtoa_r+0x4d0>
 8006874:	2336      	movs	r3, #54	@ 0x36
 8006876:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006878:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	9c06      	ldr	r4, [sp, #24]
 800687e:	e720      	b.n	80066c2 <_dtoa_r+0x78a>
 8006880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006882:	1e5d      	subs	r5, r3, #1
 8006884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006886:	42ab      	cmp	r3, r5
 8006888:	db08      	blt.n	800689c <_dtoa_r+0x964>
 800688a:	1b5d      	subs	r5, r3, r5
 800688c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	daf4      	bge.n	800687c <_dtoa_r+0x944>
 8006892:	9b06      	ldr	r3, [sp, #24]
 8006894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006896:	1a9c      	subs	r4, r3, r2
 8006898:	2300      	movs	r3, #0
 800689a:	e712      	b.n	80066c2 <_dtoa_r+0x78a>
 800689c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800689e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068a0:	1aeb      	subs	r3, r5, r3
 80068a2:	18d3      	adds	r3, r2, r3
 80068a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80068a6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80068a8:	9c06      	ldr	r4, [sp, #24]
 80068aa:	2500      	movs	r5, #0
 80068ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ae:	e708      	b.n	80066c2 <_dtoa_r+0x78a>
 80068b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80068b2:	9905      	ldr	r1, [sp, #20]
 80068b4:	e742      	b.n	800673c <_dtoa_r+0x804>
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d08c      	beq.n	80067d4 <_dtoa_r+0x89c>
 80068ba:	331c      	adds	r3, #28
 80068bc:	e783      	b.n	80067c6 <_dtoa_r+0x88e>
 80068be:	0013      	movs	r3, r2
 80068c0:	e7fb      	b.n	80068ba <_dtoa_r+0x982>
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80068c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	ddb5      	ble.n	800683a <_dtoa_r+0x902>
 80068ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d100      	bne.n	80068d6 <_dtoa_r+0x99e>
 80068d4:	e107      	b.n	8006ae6 <_dtoa_r+0xbae>
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	dd05      	ble.n	80068e6 <_dtoa_r+0x9ae>
 80068da:	0039      	movs	r1, r7
 80068dc:	0022      	movs	r2, r4
 80068de:	9803      	ldr	r0, [sp, #12]
 80068e0:	f000 fc3a 	bl	8007158 <__lshift>
 80068e4:	0007      	movs	r7, r0
 80068e6:	9704      	str	r7, [sp, #16]
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	d020      	beq.n	800692e <_dtoa_r+0x9f6>
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	9803      	ldr	r0, [sp, #12]
 80068f0:	f000 fa18 	bl	8006d24 <_Balloc>
 80068f4:	1e04      	subs	r4, r0, #0
 80068f6:	d10c      	bne.n	8006912 <_dtoa_r+0x9da>
 80068f8:	0022      	movs	r2, r4
 80068fa:	4b2e      	ldr	r3, [pc, #184]	@ (80069b4 <_dtoa_r+0xa7c>)
 80068fc:	482e      	ldr	r0, [pc, #184]	@ (80069b8 <_dtoa_r+0xa80>)
 80068fe:	492f      	ldr	r1, [pc, #188]	@ (80069bc <_dtoa_r+0xa84>)
 8006900:	f7ff fb2f 	bl	8005f62 <_dtoa_r+0x2a>
 8006904:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006906:	0037      	movs	r7, r6
 8006908:	e7ab      	b.n	8006862 <_dtoa_r+0x92a>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800690e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006910:	e7f9      	b.n	8006906 <_dtoa_r+0x9ce>
 8006912:	0039      	movs	r1, r7
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	310c      	adds	r1, #12
 8006918:	3202      	adds	r2, #2
 800691a:	0092      	lsls	r2, r2, #2
 800691c:	300c      	adds	r0, #12
 800691e:	f000 ffd1 	bl	80078c4 <memcpy>
 8006922:	2201      	movs	r2, #1
 8006924:	0021      	movs	r1, r4
 8006926:	9803      	ldr	r0, [sp, #12]
 8006928:	f000 fc16 	bl	8007158 <__lshift>
 800692c:	9004      	str	r0, [sp, #16]
 800692e:	9b08      	ldr	r3, [sp, #32]
 8006930:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006932:	9306      	str	r3, [sp, #24]
 8006934:	3b01      	subs	r3, #1
 8006936:	189b      	adds	r3, r3, r2
 8006938:	2201      	movs	r2, #1
 800693a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800693c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800693e:	4013      	ands	r3, r2
 8006940:	930e      	str	r3, [sp, #56]	@ 0x38
 8006942:	0031      	movs	r1, r6
 8006944:	9805      	ldr	r0, [sp, #20]
 8006946:	f7ff fa71 	bl	8005e2c <quorem>
 800694a:	0039      	movs	r1, r7
 800694c:	0005      	movs	r5, r0
 800694e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006950:	9805      	ldr	r0, [sp, #20]
 8006952:	f000 fc6d 	bl	8007230 <__mcmp>
 8006956:	9a04      	ldr	r2, [sp, #16]
 8006958:	900d      	str	r0, [sp, #52]	@ 0x34
 800695a:	0031      	movs	r1, r6
 800695c:	9803      	ldr	r0, [sp, #12]
 800695e:	f000 fc83 	bl	8007268 <__mdiff>
 8006962:	2201      	movs	r2, #1
 8006964:	68c3      	ldr	r3, [r0, #12]
 8006966:	0004      	movs	r4, r0
 8006968:	3530      	adds	r5, #48	@ 0x30
 800696a:	9209      	str	r2, [sp, #36]	@ 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <_dtoa_r+0xa42>
 8006970:	0001      	movs	r1, r0
 8006972:	9805      	ldr	r0, [sp, #20]
 8006974:	f000 fc5c 	bl	8007230 <__mcmp>
 8006978:	9009      	str	r0, [sp, #36]	@ 0x24
 800697a:	0021      	movs	r1, r4
 800697c:	9803      	ldr	r0, [sp, #12]
 800697e:	f000 fa15 	bl	8006dac <_Bfree>
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006986:	1c5c      	adds	r4, r3, #1
 8006988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698a:	4313      	orrs	r3, r2
 800698c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800698e:	4313      	orrs	r3, r2
 8006990:	d116      	bne.n	80069c0 <_dtoa_r+0xa88>
 8006992:	2d39      	cmp	r5, #57	@ 0x39
 8006994:	d02f      	beq.n	80069f6 <_dtoa_r+0xabe>
 8006996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006998:	2b00      	cmp	r3, #0
 800699a:	dd01      	ble.n	80069a0 <_dtoa_r+0xa68>
 800699c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800699e:	3531      	adds	r5, #49	@ 0x31
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	701d      	strb	r5, [r3, #0]
 80069a4:	e532      	b.n	800640c <_dtoa_r+0x4d4>
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	40240000 	.word	0x40240000
 80069ac:	00000433 	.word	0x00000433
 80069b0:	7ff00000 	.word	0x7ff00000
 80069b4:	08008158 	.word	0x08008158
 80069b8:	08008100 	.word	0x08008100
 80069bc:	000002ef 	.word	0x000002ef
 80069c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db04      	blt.n	80069d0 <_dtoa_r+0xa98>
 80069c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069c8:	4313      	orrs	r3, r2
 80069ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d11e      	bne.n	8006a0e <_dtoa_r+0xad6>
 80069d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dde4      	ble.n	80069a0 <_dtoa_r+0xa68>
 80069d6:	9905      	ldr	r1, [sp, #20]
 80069d8:	2201      	movs	r2, #1
 80069da:	9803      	ldr	r0, [sp, #12]
 80069dc:	f000 fbbc 	bl	8007158 <__lshift>
 80069e0:	0031      	movs	r1, r6
 80069e2:	9005      	str	r0, [sp, #20]
 80069e4:	f000 fc24 	bl	8007230 <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dc02      	bgt.n	80069f2 <_dtoa_r+0xaba>
 80069ec:	d1d8      	bne.n	80069a0 <_dtoa_r+0xa68>
 80069ee:	07eb      	lsls	r3, r5, #31
 80069f0:	d5d6      	bpl.n	80069a0 <_dtoa_r+0xa68>
 80069f2:	2d39      	cmp	r5, #57	@ 0x39
 80069f4:	d1d2      	bne.n	800699c <_dtoa_r+0xa64>
 80069f6:	2339      	movs	r3, #57	@ 0x39
 80069f8:	9a06      	ldr	r2, [sp, #24]
 80069fa:	7013      	strb	r3, [r2, #0]
 80069fc:	0023      	movs	r3, r4
 80069fe:	001c      	movs	r4, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	2a39      	cmp	r2, #57	@ 0x39
 8006a06:	d050      	beq.n	8006aaa <_dtoa_r+0xb72>
 8006a08:	3201      	adds	r2, #1
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	e4fe      	b.n	800640c <_dtoa_r+0x4d4>
 8006a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd03      	ble.n	8006a1c <_dtoa_r+0xae4>
 8006a14:	2d39      	cmp	r5, #57	@ 0x39
 8006a16:	d0ee      	beq.n	80069f6 <_dtoa_r+0xabe>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	e7c1      	b.n	80069a0 <_dtoa_r+0xa68>
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	9a06      	ldr	r2, [sp, #24]
 8006a20:	701d      	strb	r5, [r3, #0]
 8006a22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d02b      	beq.n	8006a80 <_dtoa_r+0xb48>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	9905      	ldr	r1, [sp, #20]
 8006a2e:	9803      	ldr	r0, [sp, #12]
 8006a30:	f000 f9e0 	bl	8006df4 <__multadd>
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	9005      	str	r0, [sp, #20]
 8006a38:	429f      	cmp	r7, r3
 8006a3a:	d109      	bne.n	8006a50 <_dtoa_r+0xb18>
 8006a3c:	0039      	movs	r1, r7
 8006a3e:	2300      	movs	r3, #0
 8006a40:	220a      	movs	r2, #10
 8006a42:	9803      	ldr	r0, [sp, #12]
 8006a44:	f000 f9d6 	bl	8006df4 <__multadd>
 8006a48:	0007      	movs	r7, r0
 8006a4a:	9004      	str	r0, [sp, #16]
 8006a4c:	9406      	str	r4, [sp, #24]
 8006a4e:	e778      	b.n	8006942 <_dtoa_r+0xa0a>
 8006a50:	0039      	movs	r1, r7
 8006a52:	2300      	movs	r3, #0
 8006a54:	220a      	movs	r2, #10
 8006a56:	9803      	ldr	r0, [sp, #12]
 8006a58:	f000 f9cc 	bl	8006df4 <__multadd>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	0007      	movs	r7, r0
 8006a60:	220a      	movs	r2, #10
 8006a62:	9904      	ldr	r1, [sp, #16]
 8006a64:	9803      	ldr	r0, [sp, #12]
 8006a66:	f000 f9c5 	bl	8006df4 <__multadd>
 8006a6a:	9004      	str	r0, [sp, #16]
 8006a6c:	e7ee      	b.n	8006a4c <_dtoa_r+0xb14>
 8006a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a70:	2401      	movs	r4, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dd00      	ble.n	8006a78 <_dtoa_r+0xb40>
 8006a76:	001c      	movs	r4, r3
 8006a78:	9704      	str	r7, [sp, #16]
 8006a7a:	2700      	movs	r7, #0
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	191c      	adds	r4, r3, r4
 8006a80:	9905      	ldr	r1, [sp, #20]
 8006a82:	2201      	movs	r2, #1
 8006a84:	9803      	ldr	r0, [sp, #12]
 8006a86:	f000 fb67 	bl	8007158 <__lshift>
 8006a8a:	0031      	movs	r1, r6
 8006a8c:	9005      	str	r0, [sp, #20]
 8006a8e:	f000 fbcf 	bl	8007230 <__mcmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	dcb2      	bgt.n	80069fc <_dtoa_r+0xac4>
 8006a96:	d101      	bne.n	8006a9c <_dtoa_r+0xb64>
 8006a98:	07ed      	lsls	r5, r5, #31
 8006a9a:	d4af      	bmi.n	80069fc <_dtoa_r+0xac4>
 8006a9c:	0023      	movs	r3, r4
 8006a9e:	001c      	movs	r4, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	781a      	ldrb	r2, [r3, #0]
 8006aa4:	2a30      	cmp	r2, #48	@ 0x30
 8006aa6:	d0fa      	beq.n	8006a9e <_dtoa_r+0xb66>
 8006aa8:	e4b0      	b.n	800640c <_dtoa_r+0x4d4>
 8006aaa:	9a08      	ldr	r2, [sp, #32]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d1a6      	bne.n	80069fe <_dtoa_r+0xac6>
 8006ab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ab6:	2331      	movs	r3, #49	@ 0x31
 8006ab8:	7013      	strb	r3, [r2, #0]
 8006aba:	e4a7      	b.n	800640c <_dtoa_r+0x4d4>
 8006abc:	4b14      	ldr	r3, [pc, #80]	@ (8006b10 <_dtoa_r+0xbd8>)
 8006abe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006ac0:	9308      	str	r3, [sp, #32]
 8006ac2:	4b14      	ldr	r3, [pc, #80]	@ (8006b14 <_dtoa_r+0xbdc>)
 8006ac4:	2a00      	cmp	r2, #0
 8006ac6:	d001      	beq.n	8006acc <_dtoa_r+0xb94>
 8006ac8:	f7ff fa7e 	bl	8005fc8 <_dtoa_r+0x90>
 8006acc:	f7ff fa7e 	bl	8005fcc <_dtoa_r+0x94>
 8006ad0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	dc00      	bgt.n	8006ad8 <_dtoa_r+0xba0>
 8006ad6:	e648      	b.n	800676a <_dtoa_r+0x832>
 8006ad8:	2001      	movs	r0, #1
 8006ada:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006adc:	e665      	b.n	80067aa <_dtoa_r+0x872>
 8006ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dc00      	bgt.n	8006ae6 <_dtoa_r+0xbae>
 8006ae4:	e6a9      	b.n	800683a <_dtoa_r+0x902>
 8006ae6:	2400      	movs	r4, #0
 8006ae8:	0031      	movs	r1, r6
 8006aea:	9805      	ldr	r0, [sp, #20]
 8006aec:	f7ff f99e 	bl	8005e2c <quorem>
 8006af0:	9b08      	ldr	r3, [sp, #32]
 8006af2:	3030      	adds	r0, #48	@ 0x30
 8006af4:	5518      	strb	r0, [r3, r4]
 8006af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006af8:	3401      	adds	r4, #1
 8006afa:	0005      	movs	r5, r0
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	ddb6      	ble.n	8006a6e <_dtoa_r+0xb36>
 8006b00:	2300      	movs	r3, #0
 8006b02:	220a      	movs	r2, #10
 8006b04:	9905      	ldr	r1, [sp, #20]
 8006b06:	9803      	ldr	r0, [sp, #12]
 8006b08:	f000 f974 	bl	8006df4 <__multadd>
 8006b0c:	9005      	str	r0, [sp, #20]
 8006b0e:	e7eb      	b.n	8006ae8 <_dtoa_r+0xbb0>
 8006b10:	080080dc 	.word	0x080080dc
 8006b14:	080080e4 	.word	0x080080e4

08006b18 <_free_r>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	0005      	movs	r5, r0
 8006b1c:	1e0c      	subs	r4, r1, #0
 8006b1e:	d010      	beq.n	8006b42 <_free_r+0x2a>
 8006b20:	3c04      	subs	r4, #4
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da00      	bge.n	8006b2a <_free_r+0x12>
 8006b28:	18e4      	adds	r4, r4, r3
 8006b2a:	0028      	movs	r0, r5
 8006b2c:	f000 f8ea 	bl	8006d04 <__malloc_lock>
 8006b30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba8 <_free_r+0x90>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <_free_r+0x2c>
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	6014      	str	r4, [r2, #0]
 8006b3c:	0028      	movs	r0, r5
 8006b3e:	f000 f8e9 	bl	8006d14 <__malloc_unlock>
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d908      	bls.n	8006b5a <_free_r+0x42>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	1821      	adds	r1, r4, r0
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	d1f3      	bne.n	8006b38 <_free_r+0x20>
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	1809      	adds	r1, r1, r0
 8006b56:	6021      	str	r1, [r4, #0]
 8006b58:	e7ee      	b.n	8006b38 <_free_r+0x20>
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <_free_r+0x4e>
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d9f9      	bls.n	8006b5a <_free_r+0x42>
 8006b66:	6811      	ldr	r1, [r2, #0]
 8006b68:	1850      	adds	r0, r2, r1
 8006b6a:	42a0      	cmp	r0, r4
 8006b6c:	d10b      	bne.n	8006b86 <_free_r+0x6e>
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	1809      	adds	r1, r1, r0
 8006b72:	1850      	adds	r0, r2, r1
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	4283      	cmp	r3, r0
 8006b78:	d1e0      	bne.n	8006b3c <_free_r+0x24>
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	1841      	adds	r1, r0, r1
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	6053      	str	r3, [r2, #4]
 8006b84:	e7da      	b.n	8006b3c <_free_r+0x24>
 8006b86:	42a0      	cmp	r0, r4
 8006b88:	d902      	bls.n	8006b90 <_free_r+0x78>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	e7d5      	b.n	8006b3c <_free_r+0x24>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	1821      	adds	r1, r4, r0
 8006b94:	428b      	cmp	r3, r1
 8006b96:	d103      	bne.n	8006ba0 <_free_r+0x88>
 8006b98:	6819      	ldr	r1, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	1809      	adds	r1, r1, r0
 8006b9e:	6021      	str	r1, [r4, #0]
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	6054      	str	r4, [r2, #4]
 8006ba4:	e7ca      	b.n	8006b3c <_free_r+0x24>
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	20000420 	.word	0x20000420

08006bac <malloc>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	4b03      	ldr	r3, [pc, #12]	@ (8006bbc <malloc+0x10>)
 8006bb0:	0001      	movs	r1, r0
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	f000 f826 	bl	8006c04 <_malloc_r>
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	20000018 	.word	0x20000018

08006bc0 <sbrk_aligned>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8006c00 <sbrk_aligned+0x40>)
 8006bc4:	000d      	movs	r5, r1
 8006bc6:	6831      	ldr	r1, [r6, #0]
 8006bc8:	0004      	movs	r4, r0
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d102      	bne.n	8006bd4 <sbrk_aligned+0x14>
 8006bce:	f000 fe67 	bl	80078a0 <_sbrk_r>
 8006bd2:	6030      	str	r0, [r6, #0]
 8006bd4:	0029      	movs	r1, r5
 8006bd6:	0020      	movs	r0, r4
 8006bd8:	f000 fe62 	bl	80078a0 <_sbrk_r>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d103      	bne.n	8006be8 <sbrk_aligned+0x28>
 8006be0:	2501      	movs	r5, #1
 8006be2:	426d      	negs	r5, r5
 8006be4:	0028      	movs	r0, r5
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	2303      	movs	r3, #3
 8006bea:	1cc5      	adds	r5, r0, #3
 8006bec:	439d      	bics	r5, r3
 8006bee:	42a8      	cmp	r0, r5
 8006bf0:	d0f8      	beq.n	8006be4 <sbrk_aligned+0x24>
 8006bf2:	1a29      	subs	r1, r5, r0
 8006bf4:	0020      	movs	r0, r4
 8006bf6:	f000 fe53 	bl	80078a0 <_sbrk_r>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d1f2      	bne.n	8006be4 <sbrk_aligned+0x24>
 8006bfe:	e7ef      	b.n	8006be0 <sbrk_aligned+0x20>
 8006c00:	2000041c 	.word	0x2000041c

08006c04 <_malloc_r>:
 8006c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c06:	2203      	movs	r2, #3
 8006c08:	1ccb      	adds	r3, r1, #3
 8006c0a:	4393      	bics	r3, r2
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	0005      	movs	r5, r0
 8006c10:	001f      	movs	r7, r3
 8006c12:	2b0c      	cmp	r3, #12
 8006c14:	d234      	bcs.n	8006c80 <_malloc_r+0x7c>
 8006c16:	270c      	movs	r7, #12
 8006c18:	42b9      	cmp	r1, r7
 8006c1a:	d833      	bhi.n	8006c84 <_malloc_r+0x80>
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	f000 f871 	bl	8006d04 <__malloc_lock>
 8006c22:	4e37      	ldr	r6, [pc, #220]	@ (8006d00 <_malloc_r+0xfc>)
 8006c24:	6833      	ldr	r3, [r6, #0]
 8006c26:	001c      	movs	r4, r3
 8006c28:	2c00      	cmp	r4, #0
 8006c2a:	d12f      	bne.n	8006c8c <_malloc_r+0x88>
 8006c2c:	0039      	movs	r1, r7
 8006c2e:	0028      	movs	r0, r5
 8006c30:	f7ff ffc6 	bl	8006bc0 <sbrk_aligned>
 8006c34:	0004      	movs	r4, r0
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d15f      	bne.n	8006cfa <_malloc_r+0xf6>
 8006c3a:	6834      	ldr	r4, [r6, #0]
 8006c3c:	9400      	str	r4, [sp, #0]
 8006c3e:	9b00      	ldr	r3, [sp, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d14a      	bne.n	8006cda <_malloc_r+0xd6>
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d052      	beq.n	8006cee <_malloc_r+0xea>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	0028      	movs	r0, r5
 8006c4c:	18e3      	adds	r3, r4, r3
 8006c4e:	9900      	ldr	r1, [sp, #0]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	f000 fe25 	bl	80078a0 <_sbrk_r>
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	d148      	bne.n	8006cee <_malloc_r+0xea>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	0028      	movs	r0, r5
 8006c60:	1aff      	subs	r7, r7, r3
 8006c62:	0039      	movs	r1, r7
 8006c64:	f7ff ffac 	bl	8006bc0 <sbrk_aligned>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d040      	beq.n	8006cee <_malloc_r+0xea>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	19db      	adds	r3, r3, r7
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	6833      	ldr	r3, [r6, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d133      	bne.n	8006ce2 <_malloc_r+0xde>
 8006c7a:	9b00      	ldr	r3, [sp, #0]
 8006c7c:	6033      	str	r3, [r6, #0]
 8006c7e:	e019      	b.n	8006cb4 <_malloc_r+0xb0>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dac9      	bge.n	8006c18 <_malloc_r+0x14>
 8006c84:	230c      	movs	r3, #12
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	2000      	movs	r0, #0
 8006c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c8c:	6821      	ldr	r1, [r4, #0]
 8006c8e:	1bc9      	subs	r1, r1, r7
 8006c90:	d420      	bmi.n	8006cd4 <_malloc_r+0xd0>
 8006c92:	290b      	cmp	r1, #11
 8006c94:	d90a      	bls.n	8006cac <_malloc_r+0xa8>
 8006c96:	19e2      	adds	r2, r4, r7
 8006c98:	6027      	str	r7, [r4, #0]
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	d104      	bne.n	8006ca8 <_malloc_r+0xa4>
 8006c9e:	6032      	str	r2, [r6, #0]
 8006ca0:	6863      	ldr	r3, [r4, #4]
 8006ca2:	6011      	str	r1, [r2, #0]
 8006ca4:	6053      	str	r3, [r2, #4]
 8006ca6:	e005      	b.n	8006cb4 <_malloc_r+0xb0>
 8006ca8:	605a      	str	r2, [r3, #4]
 8006caa:	e7f9      	b.n	8006ca0 <_malloc_r+0x9c>
 8006cac:	6862      	ldr	r2, [r4, #4]
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	d10e      	bne.n	8006cd0 <_malloc_r+0xcc>
 8006cb2:	6032      	str	r2, [r6, #0]
 8006cb4:	0028      	movs	r0, r5
 8006cb6:	f000 f82d 	bl	8006d14 <__malloc_unlock>
 8006cba:	0020      	movs	r0, r4
 8006cbc:	2207      	movs	r2, #7
 8006cbe:	300b      	adds	r0, #11
 8006cc0:	1d23      	adds	r3, r4, #4
 8006cc2:	4390      	bics	r0, r2
 8006cc4:	1ac2      	subs	r2, r0, r3
 8006cc6:	4298      	cmp	r0, r3
 8006cc8:	d0df      	beq.n	8006c8a <_malloc_r+0x86>
 8006cca:	1a1b      	subs	r3, r3, r0
 8006ccc:	50a3      	str	r3, [r4, r2]
 8006cce:	e7dc      	b.n	8006c8a <_malloc_r+0x86>
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	e7ef      	b.n	8006cb4 <_malloc_r+0xb0>
 8006cd4:	0023      	movs	r3, r4
 8006cd6:	6864      	ldr	r4, [r4, #4]
 8006cd8:	e7a6      	b.n	8006c28 <_malloc_r+0x24>
 8006cda:	9c00      	ldr	r4, [sp, #0]
 8006cdc:	6863      	ldr	r3, [r4, #4]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	e7ad      	b.n	8006c3e <_malloc_r+0x3a>
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	d1fb      	bne.n	8006ce2 <_malloc_r+0xde>
 8006cea:	2300      	movs	r3, #0
 8006cec:	e7da      	b.n	8006ca4 <_malloc_r+0xa0>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	0028      	movs	r0, r5
 8006cf2:	602b      	str	r3, [r5, #0]
 8006cf4:	f000 f80e 	bl	8006d14 <__malloc_unlock>
 8006cf8:	e7c6      	b.n	8006c88 <_malloc_r+0x84>
 8006cfa:	6007      	str	r7, [r0, #0]
 8006cfc:	e7da      	b.n	8006cb4 <_malloc_r+0xb0>
 8006cfe:	46c0      	nop			@ (mov r8, r8)
 8006d00:	20000420 	.word	0x20000420

08006d04 <__malloc_lock>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4802      	ldr	r0, [pc, #8]	@ (8006d10 <__malloc_lock+0xc>)
 8006d08:	f7ff f883 	bl	8005e12 <__retarget_lock_acquire_recursive>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	46c0      	nop			@ (mov r8, r8)
 8006d10:	20000418 	.word	0x20000418

08006d14 <__malloc_unlock>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4802      	ldr	r0, [pc, #8]	@ (8006d20 <__malloc_unlock+0xc>)
 8006d18:	f7ff f87c 	bl	8005e14 <__retarget_lock_release_recursive>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	20000418 	.word	0x20000418

08006d24 <_Balloc>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	69c5      	ldr	r5, [r0, #28]
 8006d28:	0006      	movs	r6, r0
 8006d2a:	000c      	movs	r4, r1
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	d10e      	bne.n	8006d4e <_Balloc+0x2a>
 8006d30:	2010      	movs	r0, #16
 8006d32:	f7ff ff3b 	bl	8006bac <malloc>
 8006d36:	1e02      	subs	r2, r0, #0
 8006d38:	61f0      	str	r0, [r6, #28]
 8006d3a:	d104      	bne.n	8006d46 <_Balloc+0x22>
 8006d3c:	216b      	movs	r1, #107	@ 0x6b
 8006d3e:	4b19      	ldr	r3, [pc, #100]	@ (8006da4 <_Balloc+0x80>)
 8006d40:	4819      	ldr	r0, [pc, #100]	@ (8006da8 <_Balloc+0x84>)
 8006d42:	f000 fdc9 	bl	80078d8 <__assert_func>
 8006d46:	6045      	str	r5, [r0, #4]
 8006d48:	6085      	str	r5, [r0, #8]
 8006d4a:	6005      	str	r5, [r0, #0]
 8006d4c:	60c5      	str	r5, [r0, #12]
 8006d4e:	69f5      	ldr	r5, [r6, #28]
 8006d50:	68eb      	ldr	r3, [r5, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d013      	beq.n	8006d7e <_Balloc+0x5a>
 8006d56:	69f3      	ldr	r3, [r6, #28]
 8006d58:	00a2      	lsls	r2, r4, #2
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	189b      	adds	r3, r3, r2
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d118      	bne.n	8006d96 <_Balloc+0x72>
 8006d64:	2101      	movs	r1, #1
 8006d66:	000d      	movs	r5, r1
 8006d68:	40a5      	lsls	r5, r4
 8006d6a:	1d6a      	adds	r2, r5, #5
 8006d6c:	0030      	movs	r0, r6
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	f000 fdd0 	bl	8007914 <_calloc_r>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d00c      	beq.n	8006d92 <_Balloc+0x6e>
 8006d78:	6044      	str	r4, [r0, #4]
 8006d7a:	6085      	str	r5, [r0, #8]
 8006d7c:	e00d      	b.n	8006d9a <_Balloc+0x76>
 8006d7e:	2221      	movs	r2, #33	@ 0x21
 8006d80:	2104      	movs	r1, #4
 8006d82:	0030      	movs	r0, r6
 8006d84:	f000 fdc6 	bl	8007914 <_calloc_r>
 8006d88:	69f3      	ldr	r3, [r6, #28]
 8006d8a:	60e8      	str	r0, [r5, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e1      	bne.n	8006d56 <_Balloc+0x32>
 8006d92:	2000      	movs	r0, #0
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	6802      	ldr	r2, [r0, #0]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6103      	str	r3, [r0, #16]
 8006d9e:	60c3      	str	r3, [r0, #12]
 8006da0:	e7f8      	b.n	8006d94 <_Balloc+0x70>
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	080080e9 	.word	0x080080e9
 8006da8:	08008169 	.word	0x08008169

08006dac <_Bfree>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	69c6      	ldr	r6, [r0, #28]
 8006db0:	0005      	movs	r5, r0
 8006db2:	000c      	movs	r4, r1
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	d10e      	bne.n	8006dd6 <_Bfree+0x2a>
 8006db8:	2010      	movs	r0, #16
 8006dba:	f7ff fef7 	bl	8006bac <malloc>
 8006dbe:	1e02      	subs	r2, r0, #0
 8006dc0:	61e8      	str	r0, [r5, #28]
 8006dc2:	d104      	bne.n	8006dce <_Bfree+0x22>
 8006dc4:	218f      	movs	r1, #143	@ 0x8f
 8006dc6:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <_Bfree+0x40>)
 8006dc8:	4809      	ldr	r0, [pc, #36]	@ (8006df0 <_Bfree+0x44>)
 8006dca:	f000 fd85 	bl	80078d8 <__assert_func>
 8006dce:	6046      	str	r6, [r0, #4]
 8006dd0:	6086      	str	r6, [r0, #8]
 8006dd2:	6006      	str	r6, [r0, #0]
 8006dd4:	60c6      	str	r6, [r0, #12]
 8006dd6:	2c00      	cmp	r4, #0
 8006dd8:	d007      	beq.n	8006dea <_Bfree+0x3e>
 8006dda:	69eb      	ldr	r3, [r5, #28]
 8006ddc:	6862      	ldr	r2, [r4, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	6022      	str	r2, [r4, #0]
 8006de8:	601c      	str	r4, [r3, #0]
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	080080e9 	.word	0x080080e9
 8006df0:	08008169 	.word	0x08008169

08006df4 <__multadd>:
 8006df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006df6:	000f      	movs	r7, r1
 8006df8:	9001      	str	r0, [sp, #4]
 8006dfa:	000c      	movs	r4, r1
 8006dfc:	001e      	movs	r6, r3
 8006dfe:	2000      	movs	r0, #0
 8006e00:	690d      	ldr	r5, [r1, #16]
 8006e02:	3714      	adds	r7, #20
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	3001      	adds	r0, #1
 8006e08:	b299      	uxth	r1, r3
 8006e0a:	4351      	muls	r1, r2
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	4353      	muls	r3, r2
 8006e10:	1989      	adds	r1, r1, r6
 8006e12:	0c0e      	lsrs	r6, r1, #16
 8006e14:	199b      	adds	r3, r3, r6
 8006e16:	0c1e      	lsrs	r6, r3, #16
 8006e18:	b289      	uxth	r1, r1
 8006e1a:	041b      	lsls	r3, r3, #16
 8006e1c:	185b      	adds	r3, r3, r1
 8006e1e:	c708      	stmia	r7!, {r3}
 8006e20:	4285      	cmp	r5, r0
 8006e22:	dcef      	bgt.n	8006e04 <__multadd+0x10>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	d022      	beq.n	8006e6e <__multadd+0x7a>
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	42ab      	cmp	r3, r5
 8006e2c:	dc19      	bgt.n	8006e62 <__multadd+0x6e>
 8006e2e:	6861      	ldr	r1, [r4, #4]
 8006e30:	9801      	ldr	r0, [sp, #4]
 8006e32:	3101      	adds	r1, #1
 8006e34:	f7ff ff76 	bl	8006d24 <_Balloc>
 8006e38:	1e07      	subs	r7, r0, #0
 8006e3a:	d105      	bne.n	8006e48 <__multadd+0x54>
 8006e3c:	003a      	movs	r2, r7
 8006e3e:	21ba      	movs	r1, #186	@ 0xba
 8006e40:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <__multadd+0x80>)
 8006e42:	480d      	ldr	r0, [pc, #52]	@ (8006e78 <__multadd+0x84>)
 8006e44:	f000 fd48 	bl	80078d8 <__assert_func>
 8006e48:	0021      	movs	r1, r4
 8006e4a:	6922      	ldr	r2, [r4, #16]
 8006e4c:	310c      	adds	r1, #12
 8006e4e:	3202      	adds	r2, #2
 8006e50:	0092      	lsls	r2, r2, #2
 8006e52:	300c      	adds	r0, #12
 8006e54:	f000 fd36 	bl	80078c4 <memcpy>
 8006e58:	0021      	movs	r1, r4
 8006e5a:	9801      	ldr	r0, [sp, #4]
 8006e5c:	f7ff ffa6 	bl	8006dac <_Bfree>
 8006e60:	003c      	movs	r4, r7
 8006e62:	1d2b      	adds	r3, r5, #4
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	18e3      	adds	r3, r4, r3
 8006e68:	3501      	adds	r5, #1
 8006e6a:	605e      	str	r6, [r3, #4]
 8006e6c:	6125      	str	r5, [r4, #16]
 8006e6e:	0020      	movs	r0, r4
 8006e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	08008158 	.word	0x08008158
 8006e78:	08008169 	.word	0x08008169

08006e7c <__hi0bits>:
 8006e7c:	2280      	movs	r2, #128	@ 0x80
 8006e7e:	0003      	movs	r3, r0
 8006e80:	0252      	lsls	r2, r2, #9
 8006e82:	2000      	movs	r0, #0
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d201      	bcs.n	8006e8c <__hi0bits+0x10>
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	3010      	adds	r0, #16
 8006e8c:	2280      	movs	r2, #128	@ 0x80
 8006e8e:	0452      	lsls	r2, r2, #17
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d201      	bcs.n	8006e98 <__hi0bits+0x1c>
 8006e94:	3008      	adds	r0, #8
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	2280      	movs	r2, #128	@ 0x80
 8006e9a:	0552      	lsls	r2, r2, #21
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d201      	bcs.n	8006ea4 <__hi0bits+0x28>
 8006ea0:	3004      	adds	r0, #4
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	2280      	movs	r2, #128	@ 0x80
 8006ea6:	05d2      	lsls	r2, r2, #23
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d201      	bcs.n	8006eb0 <__hi0bits+0x34>
 8006eac:	3002      	adds	r0, #2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db03      	blt.n	8006ebc <__hi0bits+0x40>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	4213      	tst	r3, r2
 8006eb8:	d100      	bne.n	8006ebc <__hi0bits+0x40>
 8006eba:	2020      	movs	r0, #32
 8006ebc:	4770      	bx	lr

08006ebe <__lo0bits>:
 8006ebe:	6803      	ldr	r3, [r0, #0]
 8006ec0:	0001      	movs	r1, r0
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	4010      	ands	r0, r2
 8006ec8:	4213      	tst	r3, r2
 8006eca:	d00d      	beq.n	8006ee8 <__lo0bits+0x2a>
 8006ecc:	3a06      	subs	r2, #6
 8006ece:	2000      	movs	r0, #0
 8006ed0:	4213      	tst	r3, r2
 8006ed2:	d105      	bne.n	8006ee0 <__lo0bits+0x22>
 8006ed4:	3002      	adds	r0, #2
 8006ed6:	4203      	tst	r3, r0
 8006ed8:	d003      	beq.n	8006ee2 <__lo0bits+0x24>
 8006eda:	40d3      	lsrs	r3, r2
 8006edc:	0010      	movs	r0, r2
 8006ede:	600b      	str	r3, [r1, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	600b      	str	r3, [r1, #0]
 8006ee6:	e7fb      	b.n	8006ee0 <__lo0bits+0x22>
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	d101      	bne.n	8006ef2 <__lo0bits+0x34>
 8006eee:	2010      	movs	r0, #16
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	d101      	bne.n	8006efc <__lo0bits+0x3e>
 8006ef8:	3008      	adds	r0, #8
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	071a      	lsls	r2, r3, #28
 8006efe:	d101      	bne.n	8006f04 <__lo0bits+0x46>
 8006f00:	3004      	adds	r0, #4
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	079a      	lsls	r2, r3, #30
 8006f06:	d101      	bne.n	8006f0c <__lo0bits+0x4e>
 8006f08:	3002      	adds	r0, #2
 8006f0a:	089b      	lsrs	r3, r3, #2
 8006f0c:	07da      	lsls	r2, r3, #31
 8006f0e:	d4e9      	bmi.n	8006ee4 <__lo0bits+0x26>
 8006f10:	3001      	adds	r0, #1
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	d1e6      	bne.n	8006ee4 <__lo0bits+0x26>
 8006f16:	2020      	movs	r0, #32
 8006f18:	e7e2      	b.n	8006ee0 <__lo0bits+0x22>
	...

08006f1c <__i2b>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	000c      	movs	r4, r1
 8006f20:	2101      	movs	r1, #1
 8006f22:	f7ff feff 	bl	8006d24 <_Balloc>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d107      	bne.n	8006f3a <__i2b+0x1e>
 8006f2a:	2146      	movs	r1, #70	@ 0x46
 8006f2c:	4c05      	ldr	r4, [pc, #20]	@ (8006f44 <__i2b+0x28>)
 8006f2e:	0002      	movs	r2, r0
 8006f30:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <__i2b+0x2c>)
 8006f32:	0020      	movs	r0, r4
 8006f34:	31ff      	adds	r1, #255	@ 0xff
 8006f36:	f000 fccf 	bl	80078d8 <__assert_func>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	6144      	str	r4, [r0, #20]
 8006f3e:	6103      	str	r3, [r0, #16]
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	08008169 	.word	0x08008169
 8006f48:	08008158 	.word	0x08008158

08006f4c <__multiply>:
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	0014      	movs	r4, r2
 8006f50:	690a      	ldr	r2, [r1, #16]
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	000d      	movs	r5, r1
 8006f56:	b089      	sub	sp, #36	@ 0x24
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	db02      	blt.n	8006f62 <__multiply+0x16>
 8006f5c:	0023      	movs	r3, r4
 8006f5e:	000c      	movs	r4, r1
 8006f60:	001d      	movs	r5, r3
 8006f62:	6927      	ldr	r7, [r4, #16]
 8006f64:	692e      	ldr	r6, [r5, #16]
 8006f66:	6861      	ldr	r1, [r4, #4]
 8006f68:	19bb      	adds	r3, r7, r6
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	68a3      	ldr	r3, [r4, #8]
 8006f6e:	19ba      	adds	r2, r7, r6
 8006f70:	4293      	cmp	r3, r2
 8006f72:	da00      	bge.n	8006f76 <__multiply+0x2a>
 8006f74:	3101      	adds	r1, #1
 8006f76:	f7ff fed5 	bl	8006d24 <_Balloc>
 8006f7a:	4684      	mov	ip, r0
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d106      	bne.n	8006f8e <__multiply+0x42>
 8006f80:	21b1      	movs	r1, #177	@ 0xb1
 8006f82:	4662      	mov	r2, ip
 8006f84:	4b44      	ldr	r3, [pc, #272]	@ (8007098 <__multiply+0x14c>)
 8006f86:	4845      	ldr	r0, [pc, #276]	@ (800709c <__multiply+0x150>)
 8006f88:	0049      	lsls	r1, r1, #1
 8006f8a:	f000 fca5 	bl	80078d8 <__assert_func>
 8006f8e:	0002      	movs	r2, r0
 8006f90:	19bb      	adds	r3, r7, r6
 8006f92:	3214      	adds	r2, #20
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	18d3      	adds	r3, r2, r3
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	0013      	movs	r3, r2
 8006f9e:	9801      	ldr	r0, [sp, #4]
 8006fa0:	4283      	cmp	r3, r0
 8006fa2:	d328      	bcc.n	8006ff6 <__multiply+0xaa>
 8006fa4:	0023      	movs	r3, r4
 8006fa6:	00bf      	lsls	r7, r7, #2
 8006fa8:	3314      	adds	r3, #20
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	3514      	adds	r5, #20
 8006fae:	19db      	adds	r3, r3, r7
 8006fb0:	00b6      	lsls	r6, r6, #2
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	19ab      	adds	r3, r5, r6
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	2304      	movs	r3, #4
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	0023      	movs	r3, r4
 8006fbe:	9902      	ldr	r1, [sp, #8]
 8006fc0:	3315      	adds	r3, #21
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	d305      	bcc.n	8006fd2 <__multiply+0x86>
 8006fc6:	1b0c      	subs	r4, r1, r4
 8006fc8:	3c15      	subs	r4, #21
 8006fca:	08a4      	lsrs	r4, r4, #2
 8006fcc:	3401      	adds	r4, #1
 8006fce:	00a3      	lsls	r3, r4, #2
 8006fd0:	9305      	str	r3, [sp, #20]
 8006fd2:	9b07      	ldr	r3, [sp, #28]
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	d310      	bcc.n	8006ffa <__multiply+0xae>
 8006fd8:	9b00      	ldr	r3, [sp, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dd05      	ble.n	8006fea <__multiply+0x9e>
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d052      	beq.n	8007090 <__multiply+0x144>
 8006fea:	4663      	mov	r3, ip
 8006fec:	4660      	mov	r0, ip
 8006fee:	9a00      	ldr	r2, [sp, #0]
 8006ff0:	611a      	str	r2, [r3, #16]
 8006ff2:	b009      	add	sp, #36	@ 0x24
 8006ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff6:	c302      	stmia	r3!, {r1}
 8006ff8:	e7d1      	b.n	8006f9e <__multiply+0x52>
 8006ffa:	682c      	ldr	r4, [r5, #0]
 8006ffc:	b2a4      	uxth	r4, r4
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d01f      	beq.n	8007042 <__multiply+0xf6>
 8007002:	2300      	movs	r3, #0
 8007004:	0017      	movs	r7, r2
 8007006:	9e04      	ldr	r6, [sp, #16]
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	ce08      	ldmia	r6!, {r3}
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	9306      	str	r3, [sp, #24]
 8007010:	466b      	mov	r3, sp
 8007012:	8b1b      	ldrh	r3, [r3, #24]
 8007014:	b288      	uxth	r0, r1
 8007016:	4363      	muls	r3, r4
 8007018:	181b      	adds	r3, r3, r0
 800701a:	9803      	ldr	r0, [sp, #12]
 800701c:	0c09      	lsrs	r1, r1, #16
 800701e:	181b      	adds	r3, r3, r0
 8007020:	9806      	ldr	r0, [sp, #24]
 8007022:	0c00      	lsrs	r0, r0, #16
 8007024:	4360      	muls	r0, r4
 8007026:	1840      	adds	r0, r0, r1
 8007028:	0c19      	lsrs	r1, r3, #16
 800702a:	1841      	adds	r1, r0, r1
 800702c:	0c08      	lsrs	r0, r1, #16
 800702e:	b29b      	uxth	r3, r3
 8007030:	0409      	lsls	r1, r1, #16
 8007032:	4319      	orrs	r1, r3
 8007034:	9b02      	ldr	r3, [sp, #8]
 8007036:	9003      	str	r0, [sp, #12]
 8007038:	c702      	stmia	r7!, {r1}
 800703a:	42b3      	cmp	r3, r6
 800703c:	d8e5      	bhi.n	800700a <__multiply+0xbe>
 800703e:	9b05      	ldr	r3, [sp, #20]
 8007040:	50d0      	str	r0, [r2, r3]
 8007042:	682c      	ldr	r4, [r5, #0]
 8007044:	0c24      	lsrs	r4, r4, #16
 8007046:	d020      	beq.n	800708a <__multiply+0x13e>
 8007048:	2100      	movs	r1, #0
 800704a:	0010      	movs	r0, r2
 800704c:	6813      	ldr	r3, [r2, #0]
 800704e:	9e04      	ldr	r6, [sp, #16]
 8007050:	9103      	str	r1, [sp, #12]
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	6807      	ldr	r7, [r0, #0]
 8007056:	b289      	uxth	r1, r1
 8007058:	4361      	muls	r1, r4
 800705a:	0c3f      	lsrs	r7, r7, #16
 800705c:	19c9      	adds	r1, r1, r7
 800705e:	9f03      	ldr	r7, [sp, #12]
 8007060:	b29b      	uxth	r3, r3
 8007062:	19c9      	adds	r1, r1, r7
 8007064:	040f      	lsls	r7, r1, #16
 8007066:	431f      	orrs	r7, r3
 8007068:	6007      	str	r7, [r0, #0]
 800706a:	ce80      	ldmia	r6!, {r7}
 800706c:	6843      	ldr	r3, [r0, #4]
 800706e:	0c3f      	lsrs	r7, r7, #16
 8007070:	4367      	muls	r7, r4
 8007072:	b29b      	uxth	r3, r3
 8007074:	0c09      	lsrs	r1, r1, #16
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	185b      	adds	r3, r3, r1
 800707a:	0c19      	lsrs	r1, r3, #16
 800707c:	9103      	str	r1, [sp, #12]
 800707e:	9902      	ldr	r1, [sp, #8]
 8007080:	3004      	adds	r0, #4
 8007082:	42b1      	cmp	r1, r6
 8007084:	d8e5      	bhi.n	8007052 <__multiply+0x106>
 8007086:	9905      	ldr	r1, [sp, #20]
 8007088:	5053      	str	r3, [r2, r1]
 800708a:	3504      	adds	r5, #4
 800708c:	3204      	adds	r2, #4
 800708e:	e7a0      	b.n	8006fd2 <__multiply+0x86>
 8007090:	9b00      	ldr	r3, [sp, #0]
 8007092:	3b01      	subs	r3, #1
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	e79f      	b.n	8006fd8 <__multiply+0x8c>
 8007098:	08008158 	.word	0x08008158
 800709c:	08008169 	.word	0x08008169

080070a0 <__pow5mult>:
 80070a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a2:	2303      	movs	r3, #3
 80070a4:	0015      	movs	r5, r2
 80070a6:	0007      	movs	r7, r0
 80070a8:	000e      	movs	r6, r1
 80070aa:	401a      	ands	r2, r3
 80070ac:	421d      	tst	r5, r3
 80070ae:	d008      	beq.n	80070c2 <__pow5mult+0x22>
 80070b0:	4925      	ldr	r1, [pc, #148]	@ (8007148 <__pow5mult+0xa8>)
 80070b2:	3a01      	subs	r2, #1
 80070b4:	0092      	lsls	r2, r2, #2
 80070b6:	5852      	ldr	r2, [r2, r1]
 80070b8:	2300      	movs	r3, #0
 80070ba:	0031      	movs	r1, r6
 80070bc:	f7ff fe9a 	bl	8006df4 <__multadd>
 80070c0:	0006      	movs	r6, r0
 80070c2:	10ad      	asrs	r5, r5, #2
 80070c4:	d03d      	beq.n	8007142 <__pow5mult+0xa2>
 80070c6:	69fc      	ldr	r4, [r7, #28]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d10f      	bne.n	80070ec <__pow5mult+0x4c>
 80070cc:	2010      	movs	r0, #16
 80070ce:	f7ff fd6d 	bl	8006bac <malloc>
 80070d2:	1e02      	subs	r2, r0, #0
 80070d4:	61f8      	str	r0, [r7, #28]
 80070d6:	d105      	bne.n	80070e4 <__pow5mult+0x44>
 80070d8:	21b4      	movs	r1, #180	@ 0xb4
 80070da:	4b1c      	ldr	r3, [pc, #112]	@ (800714c <__pow5mult+0xac>)
 80070dc:	481c      	ldr	r0, [pc, #112]	@ (8007150 <__pow5mult+0xb0>)
 80070de:	31ff      	adds	r1, #255	@ 0xff
 80070e0:	f000 fbfa 	bl	80078d8 <__assert_func>
 80070e4:	6044      	str	r4, [r0, #4]
 80070e6:	6084      	str	r4, [r0, #8]
 80070e8:	6004      	str	r4, [r0, #0]
 80070ea:	60c4      	str	r4, [r0, #12]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	689c      	ldr	r4, [r3, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	2c00      	cmp	r4, #0
 80070f4:	d108      	bne.n	8007108 <__pow5mult+0x68>
 80070f6:	0038      	movs	r0, r7
 80070f8:	4916      	ldr	r1, [pc, #88]	@ (8007154 <__pow5mult+0xb4>)
 80070fa:	f7ff ff0f 	bl	8006f1c <__i2b>
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	0004      	movs	r4, r0
 8007102:	6098      	str	r0, [r3, #8]
 8007104:	2300      	movs	r3, #0
 8007106:	6003      	str	r3, [r0, #0]
 8007108:	2301      	movs	r3, #1
 800710a:	421d      	tst	r5, r3
 800710c:	d00a      	beq.n	8007124 <__pow5mult+0x84>
 800710e:	0031      	movs	r1, r6
 8007110:	0022      	movs	r2, r4
 8007112:	0038      	movs	r0, r7
 8007114:	f7ff ff1a 	bl	8006f4c <__multiply>
 8007118:	0031      	movs	r1, r6
 800711a:	9001      	str	r0, [sp, #4]
 800711c:	0038      	movs	r0, r7
 800711e:	f7ff fe45 	bl	8006dac <_Bfree>
 8007122:	9e01      	ldr	r6, [sp, #4]
 8007124:	106d      	asrs	r5, r5, #1
 8007126:	d00c      	beq.n	8007142 <__pow5mult+0xa2>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	2800      	cmp	r0, #0
 800712c:	d107      	bne.n	800713e <__pow5mult+0x9e>
 800712e:	0022      	movs	r2, r4
 8007130:	0021      	movs	r1, r4
 8007132:	0038      	movs	r0, r7
 8007134:	f7ff ff0a 	bl	8006f4c <__multiply>
 8007138:	2300      	movs	r3, #0
 800713a:	6020      	str	r0, [r4, #0]
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	0004      	movs	r4, r0
 8007140:	e7e2      	b.n	8007108 <__pow5mult+0x68>
 8007142:	0030      	movs	r0, r6
 8007144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007146:	46c0      	nop			@ (mov r8, r8)
 8007148:	0800821c 	.word	0x0800821c
 800714c:	080080e9 	.word	0x080080e9
 8007150:	08008169 	.word	0x08008169
 8007154:	00000271 	.word	0x00000271

08007158 <__lshift>:
 8007158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800715a:	000c      	movs	r4, r1
 800715c:	0016      	movs	r6, r2
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	1157      	asrs	r7, r2, #5
 8007162:	b085      	sub	sp, #20
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	3301      	adds	r3, #1
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	6849      	ldr	r1, [r1, #4]
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	9002      	str	r0, [sp, #8]
 8007172:	9a00      	ldr	r2, [sp, #0]
 8007174:	4293      	cmp	r3, r2
 8007176:	db10      	blt.n	800719a <__lshift+0x42>
 8007178:	9802      	ldr	r0, [sp, #8]
 800717a:	f7ff fdd3 	bl	8006d24 <_Balloc>
 800717e:	2300      	movs	r3, #0
 8007180:	0001      	movs	r1, r0
 8007182:	0005      	movs	r5, r0
 8007184:	001a      	movs	r2, r3
 8007186:	3114      	adds	r1, #20
 8007188:	4298      	cmp	r0, r3
 800718a:	d10c      	bne.n	80071a6 <__lshift+0x4e>
 800718c:	21ef      	movs	r1, #239	@ 0xef
 800718e:	002a      	movs	r2, r5
 8007190:	4b25      	ldr	r3, [pc, #148]	@ (8007228 <__lshift+0xd0>)
 8007192:	4826      	ldr	r0, [pc, #152]	@ (800722c <__lshift+0xd4>)
 8007194:	0049      	lsls	r1, r1, #1
 8007196:	f000 fb9f 	bl	80078d8 <__assert_func>
 800719a:	3101      	adds	r1, #1
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	e7e8      	b.n	8007172 <__lshift+0x1a>
 80071a0:	0098      	lsls	r0, r3, #2
 80071a2:	500a      	str	r2, [r1, r0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	42bb      	cmp	r3, r7
 80071a8:	dbfa      	blt.n	80071a0 <__lshift+0x48>
 80071aa:	43fb      	mvns	r3, r7
 80071ac:	17db      	asrs	r3, r3, #31
 80071ae:	401f      	ands	r7, r3
 80071b0:	00bf      	lsls	r7, r7, #2
 80071b2:	0023      	movs	r3, r4
 80071b4:	201f      	movs	r0, #31
 80071b6:	19c9      	adds	r1, r1, r7
 80071b8:	0037      	movs	r7, r6
 80071ba:	6922      	ldr	r2, [r4, #16]
 80071bc:	3314      	adds	r3, #20
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	189a      	adds	r2, r3, r2
 80071c2:	4007      	ands	r7, r0
 80071c4:	4206      	tst	r6, r0
 80071c6:	d029      	beq.n	800721c <__lshift+0xc4>
 80071c8:	3001      	adds	r0, #1
 80071ca:	1bc0      	subs	r0, r0, r7
 80071cc:	9003      	str	r0, [sp, #12]
 80071ce:	468c      	mov	ip, r1
 80071d0:	2000      	movs	r0, #0
 80071d2:	681e      	ldr	r6, [r3, #0]
 80071d4:	40be      	lsls	r6, r7
 80071d6:	4306      	orrs	r6, r0
 80071d8:	4660      	mov	r0, ip
 80071da:	c040      	stmia	r0!, {r6}
 80071dc:	4684      	mov	ip, r0
 80071de:	9e03      	ldr	r6, [sp, #12]
 80071e0:	cb01      	ldmia	r3!, {r0}
 80071e2:	40f0      	lsrs	r0, r6
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d8f4      	bhi.n	80071d2 <__lshift+0x7a>
 80071e8:	0026      	movs	r6, r4
 80071ea:	3615      	adds	r6, #21
 80071ec:	2304      	movs	r3, #4
 80071ee:	42b2      	cmp	r2, r6
 80071f0:	d304      	bcc.n	80071fc <__lshift+0xa4>
 80071f2:	1b13      	subs	r3, r2, r4
 80071f4:	3b15      	subs	r3, #21
 80071f6:	089b      	lsrs	r3, r3, #2
 80071f8:	3301      	adds	r3, #1
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	50c8      	str	r0, [r1, r3]
 80071fe:	2800      	cmp	r0, #0
 8007200:	d002      	beq.n	8007208 <__lshift+0xb0>
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	3302      	adds	r3, #2
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	9b00      	ldr	r3, [sp, #0]
 800720a:	9802      	ldr	r0, [sp, #8]
 800720c:	3b01      	subs	r3, #1
 800720e:	0021      	movs	r1, r4
 8007210:	612b      	str	r3, [r5, #16]
 8007212:	f7ff fdcb 	bl	8006dac <_Bfree>
 8007216:	0028      	movs	r0, r5
 8007218:	b005      	add	sp, #20
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721c:	cb01      	ldmia	r3!, {r0}
 800721e:	c101      	stmia	r1!, {r0}
 8007220:	429a      	cmp	r2, r3
 8007222:	d8fb      	bhi.n	800721c <__lshift+0xc4>
 8007224:	e7f0      	b.n	8007208 <__lshift+0xb0>
 8007226:	46c0      	nop			@ (mov r8, r8)
 8007228:	08008158 	.word	0x08008158
 800722c:	08008169 	.word	0x08008169

08007230 <__mcmp>:
 8007230:	b530      	push	{r4, r5, lr}
 8007232:	690b      	ldr	r3, [r1, #16]
 8007234:	6904      	ldr	r4, [r0, #16]
 8007236:	0002      	movs	r2, r0
 8007238:	1ae0      	subs	r0, r4, r3
 800723a:	429c      	cmp	r4, r3
 800723c:	d10f      	bne.n	800725e <__mcmp+0x2e>
 800723e:	3214      	adds	r2, #20
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	3114      	adds	r1, #20
 8007244:	0014      	movs	r4, r2
 8007246:	18c9      	adds	r1, r1, r3
 8007248:	18d2      	adds	r2, r2, r3
 800724a:	3a04      	subs	r2, #4
 800724c:	3904      	subs	r1, #4
 800724e:	6815      	ldr	r5, [r2, #0]
 8007250:	680b      	ldr	r3, [r1, #0]
 8007252:	429d      	cmp	r5, r3
 8007254:	d004      	beq.n	8007260 <__mcmp+0x30>
 8007256:	2001      	movs	r0, #1
 8007258:	429d      	cmp	r5, r3
 800725a:	d200      	bcs.n	800725e <__mcmp+0x2e>
 800725c:	3802      	subs	r0, #2
 800725e:	bd30      	pop	{r4, r5, pc}
 8007260:	4294      	cmp	r4, r2
 8007262:	d3f2      	bcc.n	800724a <__mcmp+0x1a>
 8007264:	e7fb      	b.n	800725e <__mcmp+0x2e>
	...

08007268 <__mdiff>:
 8007268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800726a:	000c      	movs	r4, r1
 800726c:	b087      	sub	sp, #28
 800726e:	9000      	str	r0, [sp, #0]
 8007270:	0011      	movs	r1, r2
 8007272:	0020      	movs	r0, r4
 8007274:	0017      	movs	r7, r2
 8007276:	f7ff ffdb 	bl	8007230 <__mcmp>
 800727a:	1e05      	subs	r5, r0, #0
 800727c:	d110      	bne.n	80072a0 <__mdiff+0x38>
 800727e:	0001      	movs	r1, r0
 8007280:	9800      	ldr	r0, [sp, #0]
 8007282:	f7ff fd4f 	bl	8006d24 <_Balloc>
 8007286:	1e02      	subs	r2, r0, #0
 8007288:	d104      	bne.n	8007294 <__mdiff+0x2c>
 800728a:	4b40      	ldr	r3, [pc, #256]	@ (800738c <__mdiff+0x124>)
 800728c:	4840      	ldr	r0, [pc, #256]	@ (8007390 <__mdiff+0x128>)
 800728e:	4941      	ldr	r1, [pc, #260]	@ (8007394 <__mdiff+0x12c>)
 8007290:	f000 fb22 	bl	80078d8 <__assert_func>
 8007294:	2301      	movs	r3, #1
 8007296:	6145      	str	r5, [r0, #20]
 8007298:	6103      	str	r3, [r0, #16]
 800729a:	0010      	movs	r0, r2
 800729c:	b007      	add	sp, #28
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a0:	2600      	movs	r6, #0
 80072a2:	42b0      	cmp	r0, r6
 80072a4:	da03      	bge.n	80072ae <__mdiff+0x46>
 80072a6:	0023      	movs	r3, r4
 80072a8:	003c      	movs	r4, r7
 80072aa:	001f      	movs	r7, r3
 80072ac:	3601      	adds	r6, #1
 80072ae:	6861      	ldr	r1, [r4, #4]
 80072b0:	9800      	ldr	r0, [sp, #0]
 80072b2:	f7ff fd37 	bl	8006d24 <_Balloc>
 80072b6:	1e02      	subs	r2, r0, #0
 80072b8:	d103      	bne.n	80072c2 <__mdiff+0x5a>
 80072ba:	4b34      	ldr	r3, [pc, #208]	@ (800738c <__mdiff+0x124>)
 80072bc:	4834      	ldr	r0, [pc, #208]	@ (8007390 <__mdiff+0x128>)
 80072be:	4936      	ldr	r1, [pc, #216]	@ (8007398 <__mdiff+0x130>)
 80072c0:	e7e6      	b.n	8007290 <__mdiff+0x28>
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	3414      	adds	r4, #20
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	18e3      	adds	r3, r4, r3
 80072cc:	0021      	movs	r1, r4
 80072ce:	9401      	str	r4, [sp, #4]
 80072d0:	003c      	movs	r4, r7
 80072d2:	9302      	str	r3, [sp, #8]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3414      	adds	r4, #20
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	18e3      	adds	r3, r4, r3
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	0003      	movs	r3, r0
 80072e0:	60c6      	str	r6, [r0, #12]
 80072e2:	468c      	mov	ip, r1
 80072e4:	2000      	movs	r0, #0
 80072e6:	3314      	adds	r3, #20
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	4663      	mov	r3, ip
 80072ee:	cb20      	ldmia	r3!, {r5}
 80072f0:	b2a9      	uxth	r1, r5
 80072f2:	000e      	movs	r6, r1
 80072f4:	469c      	mov	ip, r3
 80072f6:	cc08      	ldmia	r4!, {r3}
 80072f8:	0c2d      	lsrs	r5, r5, #16
 80072fa:	b299      	uxth	r1, r3
 80072fc:	1a71      	subs	r1, r6, r1
 80072fe:	1809      	adds	r1, r1, r0
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	1408      	asrs	r0, r1, #16
 8007304:	1aeb      	subs	r3, r5, r3
 8007306:	181b      	adds	r3, r3, r0
 8007308:	1418      	asrs	r0, r3, #16
 800730a:	b289      	uxth	r1, r1
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	4319      	orrs	r1, r3
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	c302      	stmia	r3!, {r1}
 8007314:	9305      	str	r3, [sp, #20]
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	42a3      	cmp	r3, r4
 800731a:	d8e7      	bhi.n	80072ec <__mdiff+0x84>
 800731c:	0039      	movs	r1, r7
 800731e:	9c03      	ldr	r4, [sp, #12]
 8007320:	3115      	adds	r1, #21
 8007322:	2304      	movs	r3, #4
 8007324:	428c      	cmp	r4, r1
 8007326:	d304      	bcc.n	8007332 <__mdiff+0xca>
 8007328:	1be3      	subs	r3, r4, r7
 800732a:	3b15      	subs	r3, #21
 800732c:	089b      	lsrs	r3, r3, #2
 800732e:	3301      	adds	r3, #1
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	9901      	ldr	r1, [sp, #4]
 8007334:	18cd      	adds	r5, r1, r3
 8007336:	9904      	ldr	r1, [sp, #16]
 8007338:	002e      	movs	r6, r5
 800733a:	18cb      	adds	r3, r1, r3
 800733c:	001f      	movs	r7, r3
 800733e:	9902      	ldr	r1, [sp, #8]
 8007340:	428e      	cmp	r6, r1
 8007342:	d311      	bcc.n	8007368 <__mdiff+0x100>
 8007344:	9c02      	ldr	r4, [sp, #8]
 8007346:	1ee9      	subs	r1, r5, #3
 8007348:	2000      	movs	r0, #0
 800734a:	428c      	cmp	r4, r1
 800734c:	d304      	bcc.n	8007358 <__mdiff+0xf0>
 800734e:	0021      	movs	r1, r4
 8007350:	3103      	adds	r1, #3
 8007352:	1b49      	subs	r1, r1, r5
 8007354:	0889      	lsrs	r1, r1, #2
 8007356:	0088      	lsls	r0, r1, #2
 8007358:	181b      	adds	r3, r3, r0
 800735a:	3b04      	subs	r3, #4
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	2900      	cmp	r1, #0
 8007360:	d010      	beq.n	8007384 <__mdiff+0x11c>
 8007362:	9b00      	ldr	r3, [sp, #0]
 8007364:	6113      	str	r3, [r2, #16]
 8007366:	e798      	b.n	800729a <__mdiff+0x32>
 8007368:	4684      	mov	ip, r0
 800736a:	ce02      	ldmia	r6!, {r1}
 800736c:	b288      	uxth	r0, r1
 800736e:	4460      	add	r0, ip
 8007370:	1400      	asrs	r0, r0, #16
 8007372:	0c0c      	lsrs	r4, r1, #16
 8007374:	1904      	adds	r4, r0, r4
 8007376:	4461      	add	r1, ip
 8007378:	1420      	asrs	r0, r4, #16
 800737a:	b289      	uxth	r1, r1
 800737c:	0424      	lsls	r4, r4, #16
 800737e:	4321      	orrs	r1, r4
 8007380:	c702      	stmia	r7!, {r1}
 8007382:	e7dc      	b.n	800733e <__mdiff+0xd6>
 8007384:	9900      	ldr	r1, [sp, #0]
 8007386:	3901      	subs	r1, #1
 8007388:	9100      	str	r1, [sp, #0]
 800738a:	e7e6      	b.n	800735a <__mdiff+0xf2>
 800738c:	08008158 	.word	0x08008158
 8007390:	08008169 	.word	0x08008169
 8007394:	00000237 	.word	0x00000237
 8007398:	00000245 	.word	0x00000245

0800739c <__d2b>:
 800739c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800739e:	2101      	movs	r1, #1
 80073a0:	0016      	movs	r6, r2
 80073a2:	001f      	movs	r7, r3
 80073a4:	f7ff fcbe 	bl	8006d24 <_Balloc>
 80073a8:	1e04      	subs	r4, r0, #0
 80073aa:	d105      	bne.n	80073b8 <__d2b+0x1c>
 80073ac:	0022      	movs	r2, r4
 80073ae:	4b25      	ldr	r3, [pc, #148]	@ (8007444 <__d2b+0xa8>)
 80073b0:	4825      	ldr	r0, [pc, #148]	@ (8007448 <__d2b+0xac>)
 80073b2:	4926      	ldr	r1, [pc, #152]	@ (800744c <__d2b+0xb0>)
 80073b4:	f000 fa90 	bl	80078d8 <__assert_func>
 80073b8:	033b      	lsls	r3, r7, #12
 80073ba:	007d      	lsls	r5, r7, #1
 80073bc:	0b1b      	lsrs	r3, r3, #12
 80073be:	0d6d      	lsrs	r5, r5, #21
 80073c0:	d002      	beq.n	80073c8 <__d2b+0x2c>
 80073c2:	2280      	movs	r2, #128	@ 0x80
 80073c4:	0352      	lsls	r2, r2, #13
 80073c6:	4313      	orrs	r3, r2
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d025      	beq.n	800741a <__d2b+0x7e>
 80073ce:	4668      	mov	r0, sp
 80073d0:	9600      	str	r6, [sp, #0]
 80073d2:	f7ff fd74 	bl	8006ebe <__lo0bits>
 80073d6:	9b01      	ldr	r3, [sp, #4]
 80073d8:	9900      	ldr	r1, [sp, #0]
 80073da:	2800      	cmp	r0, #0
 80073dc:	d01b      	beq.n	8007416 <__d2b+0x7a>
 80073de:	2220      	movs	r2, #32
 80073e0:	001e      	movs	r6, r3
 80073e2:	1a12      	subs	r2, r2, r0
 80073e4:	4096      	lsls	r6, r2
 80073e6:	0032      	movs	r2, r6
 80073e8:	40c3      	lsrs	r3, r0
 80073ea:	430a      	orrs	r2, r1
 80073ec:	6162      	str	r2, [r4, #20]
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	9e01      	ldr	r6, [sp, #4]
 80073f2:	61a6      	str	r6, [r4, #24]
 80073f4:	1e73      	subs	r3, r6, #1
 80073f6:	419e      	sbcs	r6, r3
 80073f8:	3601      	adds	r6, #1
 80073fa:	6126      	str	r6, [r4, #16]
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	d014      	beq.n	800742a <__d2b+0x8e>
 8007400:	2635      	movs	r6, #53	@ 0x35
 8007402:	4b13      	ldr	r3, [pc, #76]	@ (8007450 <__d2b+0xb4>)
 8007404:	18ed      	adds	r5, r5, r3
 8007406:	9b08      	ldr	r3, [sp, #32]
 8007408:	182d      	adds	r5, r5, r0
 800740a:	601d      	str	r5, [r3, #0]
 800740c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740e:	1a36      	subs	r6, r6, r0
 8007410:	601e      	str	r6, [r3, #0]
 8007412:	0020      	movs	r0, r4
 8007414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007416:	6161      	str	r1, [r4, #20]
 8007418:	e7ea      	b.n	80073f0 <__d2b+0x54>
 800741a:	a801      	add	r0, sp, #4
 800741c:	f7ff fd4f 	bl	8006ebe <__lo0bits>
 8007420:	9b01      	ldr	r3, [sp, #4]
 8007422:	2601      	movs	r6, #1
 8007424:	6163      	str	r3, [r4, #20]
 8007426:	3020      	adds	r0, #32
 8007428:	e7e7      	b.n	80073fa <__d2b+0x5e>
 800742a:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <__d2b+0xb8>)
 800742c:	18c0      	adds	r0, r0, r3
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	6018      	str	r0, [r3, #0]
 8007432:	4b09      	ldr	r3, [pc, #36]	@ (8007458 <__d2b+0xbc>)
 8007434:	18f3      	adds	r3, r6, r3
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	18e3      	adds	r3, r4, r3
 800743a:	6958      	ldr	r0, [r3, #20]
 800743c:	f7ff fd1e 	bl	8006e7c <__hi0bits>
 8007440:	0176      	lsls	r6, r6, #5
 8007442:	e7e3      	b.n	800740c <__d2b+0x70>
 8007444:	08008158 	.word	0x08008158
 8007448:	08008169 	.word	0x08008169
 800744c:	0000030f 	.word	0x0000030f
 8007450:	fffffbcd 	.word	0xfffffbcd
 8007454:	fffffbce 	.word	0xfffffbce
 8007458:	3fffffff 	.word	0x3fffffff

0800745c <__ssputs_r>:
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745e:	688e      	ldr	r6, [r1, #8]
 8007460:	b085      	sub	sp, #20
 8007462:	001f      	movs	r7, r3
 8007464:	000c      	movs	r4, r1
 8007466:	680b      	ldr	r3, [r1, #0]
 8007468:	9002      	str	r0, [sp, #8]
 800746a:	9203      	str	r2, [sp, #12]
 800746c:	42be      	cmp	r6, r7
 800746e:	d830      	bhi.n	80074d2 <__ssputs_r+0x76>
 8007470:	210c      	movs	r1, #12
 8007472:	5e62      	ldrsh	r2, [r4, r1]
 8007474:	2190      	movs	r1, #144	@ 0x90
 8007476:	00c9      	lsls	r1, r1, #3
 8007478:	420a      	tst	r2, r1
 800747a:	d028      	beq.n	80074ce <__ssputs_r+0x72>
 800747c:	2003      	movs	r0, #3
 800747e:	6921      	ldr	r1, [r4, #16]
 8007480:	1a5b      	subs	r3, r3, r1
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	6963      	ldr	r3, [r4, #20]
 8007486:	4343      	muls	r3, r0
 8007488:	9801      	ldr	r0, [sp, #4]
 800748a:	0fdd      	lsrs	r5, r3, #31
 800748c:	18ed      	adds	r5, r5, r3
 800748e:	1c7b      	adds	r3, r7, #1
 8007490:	181b      	adds	r3, r3, r0
 8007492:	106d      	asrs	r5, r5, #1
 8007494:	42ab      	cmp	r3, r5
 8007496:	d900      	bls.n	800749a <__ssputs_r+0x3e>
 8007498:	001d      	movs	r5, r3
 800749a:	0552      	lsls	r2, r2, #21
 800749c:	d528      	bpl.n	80074f0 <__ssputs_r+0x94>
 800749e:	0029      	movs	r1, r5
 80074a0:	9802      	ldr	r0, [sp, #8]
 80074a2:	f7ff fbaf 	bl	8006c04 <_malloc_r>
 80074a6:	1e06      	subs	r6, r0, #0
 80074a8:	d02c      	beq.n	8007504 <__ssputs_r+0xa8>
 80074aa:	9a01      	ldr	r2, [sp, #4]
 80074ac:	6921      	ldr	r1, [r4, #16]
 80074ae:	f000 fa09 	bl	80078c4 <memcpy>
 80074b2:	89a2      	ldrh	r2, [r4, #12]
 80074b4:	4b18      	ldr	r3, [pc, #96]	@ (8007518 <__ssputs_r+0xbc>)
 80074b6:	401a      	ands	r2, r3
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	4313      	orrs	r3, r2
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	6126      	str	r6, [r4, #16]
 80074c2:	18f6      	adds	r6, r6, r3
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	003e      	movs	r6, r7
 80074c8:	6165      	str	r5, [r4, #20]
 80074ca:	1aed      	subs	r5, r5, r3
 80074cc:	60a5      	str	r5, [r4, #8]
 80074ce:	42be      	cmp	r6, r7
 80074d0:	d900      	bls.n	80074d4 <__ssputs_r+0x78>
 80074d2:	003e      	movs	r6, r7
 80074d4:	0032      	movs	r2, r6
 80074d6:	9903      	ldr	r1, [sp, #12]
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	f000 f9ce 	bl	800787a <memmove>
 80074de:	2000      	movs	r0, #0
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	1b9b      	subs	r3, r3, r6
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	199b      	adds	r3, r3, r6
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	b005      	add	sp, #20
 80074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f0:	002a      	movs	r2, r5
 80074f2:	9802      	ldr	r0, [sp, #8]
 80074f4:	f000 fa4d 	bl	8007992 <_realloc_r>
 80074f8:	1e06      	subs	r6, r0, #0
 80074fa:	d1e0      	bne.n	80074be <__ssputs_r+0x62>
 80074fc:	6921      	ldr	r1, [r4, #16]
 80074fe:	9802      	ldr	r0, [sp, #8]
 8007500:	f7ff fb0a 	bl	8006b18 <_free_r>
 8007504:	230c      	movs	r3, #12
 8007506:	2001      	movs	r0, #1
 8007508:	9a02      	ldr	r2, [sp, #8]
 800750a:	4240      	negs	r0, r0
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	89a2      	ldrh	r2, [r4, #12]
 8007510:	3334      	adds	r3, #52	@ 0x34
 8007512:	4313      	orrs	r3, r2
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	e7e9      	b.n	80074ec <__ssputs_r+0x90>
 8007518:	fffffb7f 	.word	0xfffffb7f

0800751c <_svfiprintf_r>:
 800751c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751e:	b0a1      	sub	sp, #132	@ 0x84
 8007520:	9003      	str	r0, [sp, #12]
 8007522:	001d      	movs	r5, r3
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	000f      	movs	r7, r1
 8007528:	0016      	movs	r6, r2
 800752a:	061b      	lsls	r3, r3, #24
 800752c:	d511      	bpl.n	8007552 <_svfiprintf_r+0x36>
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10e      	bne.n	8007552 <_svfiprintf_r+0x36>
 8007534:	2140      	movs	r1, #64	@ 0x40
 8007536:	f7ff fb65 	bl	8006c04 <_malloc_r>
 800753a:	6038      	str	r0, [r7, #0]
 800753c:	6138      	str	r0, [r7, #16]
 800753e:	2800      	cmp	r0, #0
 8007540:	d105      	bne.n	800754e <_svfiprintf_r+0x32>
 8007542:	230c      	movs	r3, #12
 8007544:	9a03      	ldr	r2, [sp, #12]
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	2001      	movs	r0, #1
 800754a:	4240      	negs	r0, r0
 800754c:	e0cf      	b.n	80076ee <_svfiprintf_r+0x1d2>
 800754e:	2340      	movs	r3, #64	@ 0x40
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	2300      	movs	r3, #0
 8007554:	ac08      	add	r4, sp, #32
 8007556:	6163      	str	r3, [r4, #20]
 8007558:	3320      	adds	r3, #32
 800755a:	7663      	strb	r3, [r4, #25]
 800755c:	3310      	adds	r3, #16
 800755e:	76a3      	strb	r3, [r4, #26]
 8007560:	9507      	str	r5, [sp, #28]
 8007562:	0035      	movs	r5, r6
 8007564:	782b      	ldrb	r3, [r5, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <_svfiprintf_r+0x52>
 800756a:	2b25      	cmp	r3, #37	@ 0x25
 800756c:	d148      	bne.n	8007600 <_svfiprintf_r+0xe4>
 800756e:	1bab      	subs	r3, r5, r6
 8007570:	9305      	str	r3, [sp, #20]
 8007572:	42b5      	cmp	r5, r6
 8007574:	d00b      	beq.n	800758e <_svfiprintf_r+0x72>
 8007576:	0032      	movs	r2, r6
 8007578:	0039      	movs	r1, r7
 800757a:	9803      	ldr	r0, [sp, #12]
 800757c:	f7ff ff6e 	bl	800745c <__ssputs_r>
 8007580:	3001      	adds	r0, #1
 8007582:	d100      	bne.n	8007586 <_svfiprintf_r+0x6a>
 8007584:	e0ae      	b.n	80076e4 <_svfiprintf_r+0x1c8>
 8007586:	6963      	ldr	r3, [r4, #20]
 8007588:	9a05      	ldr	r2, [sp, #20]
 800758a:	189b      	adds	r3, r3, r2
 800758c:	6163      	str	r3, [r4, #20]
 800758e:	782b      	ldrb	r3, [r5, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d100      	bne.n	8007596 <_svfiprintf_r+0x7a>
 8007594:	e0a6      	b.n	80076e4 <_svfiprintf_r+0x1c8>
 8007596:	2201      	movs	r2, #1
 8007598:	2300      	movs	r3, #0
 800759a:	4252      	negs	r2, r2
 800759c:	6062      	str	r2, [r4, #4]
 800759e:	a904      	add	r1, sp, #16
 80075a0:	3254      	adds	r2, #84	@ 0x54
 80075a2:	1852      	adds	r2, r2, r1
 80075a4:	1c6e      	adds	r6, r5, #1
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	60e3      	str	r3, [r4, #12]
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	7013      	strb	r3, [r2, #0]
 80075ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80075b0:	4b54      	ldr	r3, [pc, #336]	@ (8007704 <_svfiprintf_r+0x1e8>)
 80075b2:	2205      	movs	r2, #5
 80075b4:	0018      	movs	r0, r3
 80075b6:	7831      	ldrb	r1, [r6, #0]
 80075b8:	9305      	str	r3, [sp, #20]
 80075ba:	f7fe fc2c 	bl	8005e16 <memchr>
 80075be:	1c75      	adds	r5, r6, #1
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d11f      	bne.n	8007604 <_svfiprintf_r+0xe8>
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	06d3      	lsls	r3, r2, #27
 80075c8:	d504      	bpl.n	80075d4 <_svfiprintf_r+0xb8>
 80075ca:	2353      	movs	r3, #83	@ 0x53
 80075cc:	a904      	add	r1, sp, #16
 80075ce:	185b      	adds	r3, r3, r1
 80075d0:	2120      	movs	r1, #32
 80075d2:	7019      	strb	r1, [r3, #0]
 80075d4:	0713      	lsls	r3, r2, #28
 80075d6:	d504      	bpl.n	80075e2 <_svfiprintf_r+0xc6>
 80075d8:	2353      	movs	r3, #83	@ 0x53
 80075da:	a904      	add	r1, sp, #16
 80075dc:	185b      	adds	r3, r3, r1
 80075de:	212b      	movs	r1, #43	@ 0x2b
 80075e0:	7019      	strb	r1, [r3, #0]
 80075e2:	7833      	ldrb	r3, [r6, #0]
 80075e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e6:	d016      	beq.n	8007616 <_svfiprintf_r+0xfa>
 80075e8:	0035      	movs	r5, r6
 80075ea:	2100      	movs	r1, #0
 80075ec:	200a      	movs	r0, #10
 80075ee:	68e3      	ldr	r3, [r4, #12]
 80075f0:	782a      	ldrb	r2, [r5, #0]
 80075f2:	1c6e      	adds	r6, r5, #1
 80075f4:	3a30      	subs	r2, #48	@ 0x30
 80075f6:	2a09      	cmp	r2, #9
 80075f8:	d950      	bls.n	800769c <_svfiprintf_r+0x180>
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d111      	bne.n	8007622 <_svfiprintf_r+0x106>
 80075fe:	e017      	b.n	8007630 <_svfiprintf_r+0x114>
 8007600:	3501      	adds	r5, #1
 8007602:	e7af      	b.n	8007564 <_svfiprintf_r+0x48>
 8007604:	9b05      	ldr	r3, [sp, #20]
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	1ac0      	subs	r0, r0, r3
 800760a:	2301      	movs	r3, #1
 800760c:	4083      	lsls	r3, r0
 800760e:	4313      	orrs	r3, r2
 8007610:	002e      	movs	r6, r5
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	e7cc      	b.n	80075b0 <_svfiprintf_r+0x94>
 8007616:	9b07      	ldr	r3, [sp, #28]
 8007618:	1d19      	adds	r1, r3, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	9107      	str	r1, [sp, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	db01      	blt.n	8007626 <_svfiprintf_r+0x10a>
 8007622:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007624:	e004      	b.n	8007630 <_svfiprintf_r+0x114>
 8007626:	425b      	negs	r3, r3
 8007628:	60e3      	str	r3, [r4, #12]
 800762a:	2302      	movs	r3, #2
 800762c:	4313      	orrs	r3, r2
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	782b      	ldrb	r3, [r5, #0]
 8007632:	2b2e      	cmp	r3, #46	@ 0x2e
 8007634:	d10c      	bne.n	8007650 <_svfiprintf_r+0x134>
 8007636:	786b      	ldrb	r3, [r5, #1]
 8007638:	2b2a      	cmp	r3, #42	@ 0x2a
 800763a:	d134      	bne.n	80076a6 <_svfiprintf_r+0x18a>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	3502      	adds	r5, #2
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	9207      	str	r2, [sp, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	da01      	bge.n	800764e <_svfiprintf_r+0x132>
 800764a:	2301      	movs	r3, #1
 800764c:	425b      	negs	r3, r3
 800764e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007650:	4e2d      	ldr	r6, [pc, #180]	@ (8007708 <_svfiprintf_r+0x1ec>)
 8007652:	2203      	movs	r2, #3
 8007654:	0030      	movs	r0, r6
 8007656:	7829      	ldrb	r1, [r5, #0]
 8007658:	f7fe fbdd 	bl	8005e16 <memchr>
 800765c:	2800      	cmp	r0, #0
 800765e:	d006      	beq.n	800766e <_svfiprintf_r+0x152>
 8007660:	2340      	movs	r3, #64	@ 0x40
 8007662:	1b80      	subs	r0, r0, r6
 8007664:	4083      	lsls	r3, r0
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	3501      	adds	r5, #1
 800766a:	4313      	orrs	r3, r2
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	7829      	ldrb	r1, [r5, #0]
 8007670:	2206      	movs	r2, #6
 8007672:	4826      	ldr	r0, [pc, #152]	@ (800770c <_svfiprintf_r+0x1f0>)
 8007674:	1c6e      	adds	r6, r5, #1
 8007676:	7621      	strb	r1, [r4, #24]
 8007678:	f7fe fbcd 	bl	8005e16 <memchr>
 800767c:	2800      	cmp	r0, #0
 800767e:	d038      	beq.n	80076f2 <_svfiprintf_r+0x1d6>
 8007680:	4b23      	ldr	r3, [pc, #140]	@ (8007710 <_svfiprintf_r+0x1f4>)
 8007682:	2b00      	cmp	r3, #0
 8007684:	d122      	bne.n	80076cc <_svfiprintf_r+0x1b0>
 8007686:	2207      	movs	r2, #7
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	3307      	adds	r3, #7
 800768c:	4393      	bics	r3, r2
 800768e:	3308      	adds	r3, #8
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	6963      	ldr	r3, [r4, #20]
 8007694:	9a04      	ldr	r2, [sp, #16]
 8007696:	189b      	adds	r3, r3, r2
 8007698:	6163      	str	r3, [r4, #20]
 800769a:	e762      	b.n	8007562 <_svfiprintf_r+0x46>
 800769c:	4343      	muls	r3, r0
 800769e:	0035      	movs	r5, r6
 80076a0:	2101      	movs	r1, #1
 80076a2:	189b      	adds	r3, r3, r2
 80076a4:	e7a4      	b.n	80075f0 <_svfiprintf_r+0xd4>
 80076a6:	2300      	movs	r3, #0
 80076a8:	200a      	movs	r0, #10
 80076aa:	0019      	movs	r1, r3
 80076ac:	3501      	adds	r5, #1
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	782a      	ldrb	r2, [r5, #0]
 80076b2:	1c6e      	adds	r6, r5, #1
 80076b4:	3a30      	subs	r2, #48	@ 0x30
 80076b6:	2a09      	cmp	r2, #9
 80076b8:	d903      	bls.n	80076c2 <_svfiprintf_r+0x1a6>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0c8      	beq.n	8007650 <_svfiprintf_r+0x134>
 80076be:	9109      	str	r1, [sp, #36]	@ 0x24
 80076c0:	e7c6      	b.n	8007650 <_svfiprintf_r+0x134>
 80076c2:	4341      	muls	r1, r0
 80076c4:	0035      	movs	r5, r6
 80076c6:	2301      	movs	r3, #1
 80076c8:	1889      	adds	r1, r1, r2
 80076ca:	e7f1      	b.n	80076b0 <_svfiprintf_r+0x194>
 80076cc:	aa07      	add	r2, sp, #28
 80076ce:	9200      	str	r2, [sp, #0]
 80076d0:	0021      	movs	r1, r4
 80076d2:	003a      	movs	r2, r7
 80076d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007714 <_svfiprintf_r+0x1f8>)
 80076d6:	9803      	ldr	r0, [sp, #12]
 80076d8:	f7fd fe2a 	bl	8005330 <_printf_float>
 80076dc:	9004      	str	r0, [sp, #16]
 80076de:	9b04      	ldr	r3, [sp, #16]
 80076e0:	3301      	adds	r3, #1
 80076e2:	d1d6      	bne.n	8007692 <_svfiprintf_r+0x176>
 80076e4:	89bb      	ldrh	r3, [r7, #12]
 80076e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80076e8:	065b      	lsls	r3, r3, #25
 80076ea:	d500      	bpl.n	80076ee <_svfiprintf_r+0x1d2>
 80076ec:	e72c      	b.n	8007548 <_svfiprintf_r+0x2c>
 80076ee:	b021      	add	sp, #132	@ 0x84
 80076f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f2:	aa07      	add	r2, sp, #28
 80076f4:	9200      	str	r2, [sp, #0]
 80076f6:	0021      	movs	r1, r4
 80076f8:	003a      	movs	r2, r7
 80076fa:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <_svfiprintf_r+0x1f8>)
 80076fc:	9803      	ldr	r0, [sp, #12]
 80076fe:	f7fe f8c5 	bl	800588c <_printf_i>
 8007702:	e7eb      	b.n	80076dc <_svfiprintf_r+0x1c0>
 8007704:	080081c2 	.word	0x080081c2
 8007708:	080081c8 	.word	0x080081c8
 800770c:	080081cc 	.word	0x080081cc
 8007710:	08005331 	.word	0x08005331
 8007714:	0800745d 	.word	0x0800745d

08007718 <__sflush_r>:
 8007718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771a:	220c      	movs	r2, #12
 800771c:	5e8b      	ldrsh	r3, [r1, r2]
 800771e:	0005      	movs	r5, r0
 8007720:	000c      	movs	r4, r1
 8007722:	071a      	lsls	r2, r3, #28
 8007724:	d456      	bmi.n	80077d4 <__sflush_r+0xbc>
 8007726:	684a      	ldr	r2, [r1, #4]
 8007728:	2a00      	cmp	r2, #0
 800772a:	dc02      	bgt.n	8007732 <__sflush_r+0x1a>
 800772c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800772e:	2a00      	cmp	r2, #0
 8007730:	dd4e      	ble.n	80077d0 <__sflush_r+0xb8>
 8007732:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007734:	2f00      	cmp	r7, #0
 8007736:	d04b      	beq.n	80077d0 <__sflush_r+0xb8>
 8007738:	2200      	movs	r2, #0
 800773a:	2080      	movs	r0, #128	@ 0x80
 800773c:	682e      	ldr	r6, [r5, #0]
 800773e:	602a      	str	r2, [r5, #0]
 8007740:	001a      	movs	r2, r3
 8007742:	0140      	lsls	r0, r0, #5
 8007744:	6a21      	ldr	r1, [r4, #32]
 8007746:	4002      	ands	r2, r0
 8007748:	4203      	tst	r3, r0
 800774a:	d033      	beq.n	80077b4 <__sflush_r+0x9c>
 800774c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	075b      	lsls	r3, r3, #29
 8007752:	d506      	bpl.n	8007762 <__sflush_r+0x4a>
 8007754:	6863      	ldr	r3, [r4, #4]
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <__sflush_r+0x4a>
 800775e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007760:	1ad2      	subs	r2, r2, r3
 8007762:	2300      	movs	r3, #0
 8007764:	0028      	movs	r0, r5
 8007766:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007768:	6a21      	ldr	r1, [r4, #32]
 800776a:	47b8      	blx	r7
 800776c:	89a2      	ldrh	r2, [r4, #12]
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d106      	bne.n	8007780 <__sflush_r+0x68>
 8007772:	6829      	ldr	r1, [r5, #0]
 8007774:	291d      	cmp	r1, #29
 8007776:	d846      	bhi.n	8007806 <__sflush_r+0xee>
 8007778:	4b29      	ldr	r3, [pc, #164]	@ (8007820 <__sflush_r+0x108>)
 800777a:	40cb      	lsrs	r3, r1
 800777c:	07db      	lsls	r3, r3, #31
 800777e:	d542      	bpl.n	8007806 <__sflush_r+0xee>
 8007780:	2300      	movs	r3, #0
 8007782:	6063      	str	r3, [r4, #4]
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	04d2      	lsls	r2, r2, #19
 800778a:	d505      	bpl.n	8007798 <__sflush_r+0x80>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <__sflush_r+0x7e>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d100      	bne.n	8007798 <__sflush_r+0x80>
 8007796:	6560      	str	r0, [r4, #84]	@ 0x54
 8007798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800779a:	602e      	str	r6, [r5, #0]
 800779c:	2900      	cmp	r1, #0
 800779e:	d017      	beq.n	80077d0 <__sflush_r+0xb8>
 80077a0:	0023      	movs	r3, r4
 80077a2:	3344      	adds	r3, #68	@ 0x44
 80077a4:	4299      	cmp	r1, r3
 80077a6:	d002      	beq.n	80077ae <__sflush_r+0x96>
 80077a8:	0028      	movs	r0, r5
 80077aa:	f7ff f9b5 	bl	8006b18 <_free_r>
 80077ae:	2300      	movs	r3, #0
 80077b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80077b2:	e00d      	b.n	80077d0 <__sflush_r+0xb8>
 80077b4:	2301      	movs	r3, #1
 80077b6:	0028      	movs	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	0002      	movs	r2, r0
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d1c6      	bne.n	800774e <__sflush_r+0x36>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0c3      	beq.n	800774e <__sflush_r+0x36>
 80077c6:	2b1d      	cmp	r3, #29
 80077c8:	d001      	beq.n	80077ce <__sflush_r+0xb6>
 80077ca:	2b16      	cmp	r3, #22
 80077cc:	d11a      	bne.n	8007804 <__sflush_r+0xec>
 80077ce:	602e      	str	r6, [r5, #0]
 80077d0:	2000      	movs	r0, #0
 80077d2:	e01e      	b.n	8007812 <__sflush_r+0xfa>
 80077d4:	690e      	ldr	r6, [r1, #16]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d0fa      	beq.n	80077d0 <__sflush_r+0xb8>
 80077da:	680f      	ldr	r7, [r1, #0]
 80077dc:	600e      	str	r6, [r1, #0]
 80077de:	1bba      	subs	r2, r7, r6
 80077e0:	9201      	str	r2, [sp, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	079b      	lsls	r3, r3, #30
 80077e6:	d100      	bne.n	80077ea <__sflush_r+0xd2>
 80077e8:	694a      	ldr	r2, [r1, #20]
 80077ea:	60a2      	str	r2, [r4, #8]
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	ddee      	ble.n	80077d0 <__sflush_r+0xb8>
 80077f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80077f4:	0032      	movs	r2, r6
 80077f6:	001f      	movs	r7, r3
 80077f8:	0028      	movs	r0, r5
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	6a21      	ldr	r1, [r4, #32]
 80077fe:	47b8      	blx	r7
 8007800:	2800      	cmp	r0, #0
 8007802:	dc07      	bgt.n	8007814 <__sflush_r+0xfc>
 8007804:	89a2      	ldrh	r2, [r4, #12]
 8007806:	2340      	movs	r3, #64	@ 0x40
 8007808:	2001      	movs	r0, #1
 800780a:	4313      	orrs	r3, r2
 800780c:	b21b      	sxth	r3, r3
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	4240      	negs	r0, r0
 8007812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007814:	9b01      	ldr	r3, [sp, #4]
 8007816:	1836      	adds	r6, r6, r0
 8007818:	1a1b      	subs	r3, r3, r0
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	e7e6      	b.n	80077ec <__sflush_r+0xd4>
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	20400001 	.word	0x20400001

08007824 <_fflush_r>:
 8007824:	690b      	ldr	r3, [r1, #16]
 8007826:	b570      	push	{r4, r5, r6, lr}
 8007828:	0005      	movs	r5, r0
 800782a:	000c      	movs	r4, r1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <_fflush_r+0x12>
 8007830:	2500      	movs	r5, #0
 8007832:	0028      	movs	r0, r5
 8007834:	bd70      	pop	{r4, r5, r6, pc}
 8007836:	2800      	cmp	r0, #0
 8007838:	d004      	beq.n	8007844 <_fflush_r+0x20>
 800783a:	6a03      	ldr	r3, [r0, #32]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <_fflush_r+0x20>
 8007840:	f7fe f9c0 	bl	8005bc4 <__sinit>
 8007844:	220c      	movs	r2, #12
 8007846:	5ea3      	ldrsh	r3, [r4, r2]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f1      	beq.n	8007830 <_fflush_r+0xc>
 800784c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800784e:	07d2      	lsls	r2, r2, #31
 8007850:	d404      	bmi.n	800785c <_fflush_r+0x38>
 8007852:	059b      	lsls	r3, r3, #22
 8007854:	d402      	bmi.n	800785c <_fflush_r+0x38>
 8007856:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007858:	f7fe fadb 	bl	8005e12 <__retarget_lock_acquire_recursive>
 800785c:	0028      	movs	r0, r5
 800785e:	0021      	movs	r1, r4
 8007860:	f7ff ff5a 	bl	8007718 <__sflush_r>
 8007864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007866:	0005      	movs	r5, r0
 8007868:	07db      	lsls	r3, r3, #31
 800786a:	d4e2      	bmi.n	8007832 <_fflush_r+0xe>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	059b      	lsls	r3, r3, #22
 8007870:	d4df      	bmi.n	8007832 <_fflush_r+0xe>
 8007872:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007874:	f7fe face 	bl	8005e14 <__retarget_lock_release_recursive>
 8007878:	e7db      	b.n	8007832 <_fflush_r+0xe>

0800787a <memmove>:
 800787a:	b510      	push	{r4, lr}
 800787c:	4288      	cmp	r0, r1
 800787e:	d902      	bls.n	8007886 <memmove+0xc>
 8007880:	188b      	adds	r3, r1, r2
 8007882:	4298      	cmp	r0, r3
 8007884:	d308      	bcc.n	8007898 <memmove+0x1e>
 8007886:	2300      	movs	r3, #0
 8007888:	429a      	cmp	r2, r3
 800788a:	d007      	beq.n	800789c <memmove+0x22>
 800788c:	5ccc      	ldrb	r4, [r1, r3]
 800788e:	54c4      	strb	r4, [r0, r3]
 8007890:	3301      	adds	r3, #1
 8007892:	e7f9      	b.n	8007888 <memmove+0xe>
 8007894:	5c8b      	ldrb	r3, [r1, r2]
 8007896:	5483      	strb	r3, [r0, r2]
 8007898:	3a01      	subs	r2, #1
 800789a:	d2fb      	bcs.n	8007894 <memmove+0x1a>
 800789c:	bd10      	pop	{r4, pc}
	...

080078a0 <_sbrk_r>:
 80078a0:	2300      	movs	r3, #0
 80078a2:	b570      	push	{r4, r5, r6, lr}
 80078a4:	4d06      	ldr	r5, [pc, #24]	@ (80078c0 <_sbrk_r+0x20>)
 80078a6:	0004      	movs	r4, r0
 80078a8:	0008      	movs	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fb fb08 	bl	8002ec0 <_sbrk>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d103      	bne.n	80078bc <_sbrk_r+0x1c>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d000      	beq.n	80078bc <_sbrk_r+0x1c>
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	46c0      	nop			@ (mov r8, r8)
 80078c0:	20000414 	.word	0x20000414

080078c4 <memcpy>:
 80078c4:	2300      	movs	r3, #0
 80078c6:	b510      	push	{r4, lr}
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d100      	bne.n	80078ce <memcpy+0xa>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	5ccc      	ldrb	r4, [r1, r3]
 80078d0:	54c4      	strb	r4, [r0, r3]
 80078d2:	3301      	adds	r3, #1
 80078d4:	e7f8      	b.n	80078c8 <memcpy+0x4>
	...

080078d8 <__assert_func>:
 80078d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078da:	0014      	movs	r4, r2
 80078dc:	001a      	movs	r2, r3
 80078de:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <__assert_func+0x2c>)
 80078e0:	0005      	movs	r5, r0
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	000e      	movs	r6, r1
 80078e6:	68d8      	ldr	r0, [r3, #12]
 80078e8:	4b07      	ldr	r3, [pc, #28]	@ (8007908 <__assert_func+0x30>)
 80078ea:	2c00      	cmp	r4, #0
 80078ec:	d101      	bne.n	80078f2 <__assert_func+0x1a>
 80078ee:	4b07      	ldr	r3, [pc, #28]	@ (800790c <__assert_func+0x34>)
 80078f0:	001c      	movs	r4, r3
 80078f2:	4907      	ldr	r1, [pc, #28]	@ (8007910 <__assert_func+0x38>)
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	9402      	str	r4, [sp, #8]
 80078f8:	002b      	movs	r3, r5
 80078fa:	9600      	str	r6, [sp, #0]
 80078fc:	f000 f886 	bl	8007a0c <fiprintf>
 8007900:	f000 f894 	bl	8007a2c <abort>
 8007904:	20000018 	.word	0x20000018
 8007908:	080081dd 	.word	0x080081dd
 800790c:	08008218 	.word	0x08008218
 8007910:	080081ea 	.word	0x080081ea

08007914 <_calloc_r>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	0c0b      	lsrs	r3, r1, #16
 8007918:	0c15      	lsrs	r5, r2, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	d11e      	bne.n	800795c <_calloc_r+0x48>
 800791e:	2d00      	cmp	r5, #0
 8007920:	d10c      	bne.n	800793c <_calloc_r+0x28>
 8007922:	b289      	uxth	r1, r1
 8007924:	b294      	uxth	r4, r2
 8007926:	434c      	muls	r4, r1
 8007928:	0021      	movs	r1, r4
 800792a:	f7ff f96b 	bl	8006c04 <_malloc_r>
 800792e:	1e05      	subs	r5, r0, #0
 8007930:	d01b      	beq.n	800796a <_calloc_r+0x56>
 8007932:	0022      	movs	r2, r4
 8007934:	2100      	movs	r1, #0
 8007936:	f7fe f9e7 	bl	8005d08 <memset>
 800793a:	e016      	b.n	800796a <_calloc_r+0x56>
 800793c:	1c2b      	adds	r3, r5, #0
 800793e:	1c0c      	adds	r4, r1, #0
 8007940:	b289      	uxth	r1, r1
 8007942:	b292      	uxth	r2, r2
 8007944:	434a      	muls	r2, r1
 8007946:	b29b      	uxth	r3, r3
 8007948:	b2a1      	uxth	r1, r4
 800794a:	4359      	muls	r1, r3
 800794c:	0c14      	lsrs	r4, r2, #16
 800794e:	190c      	adds	r4, r1, r4
 8007950:	0c23      	lsrs	r3, r4, #16
 8007952:	d107      	bne.n	8007964 <_calloc_r+0x50>
 8007954:	0424      	lsls	r4, r4, #16
 8007956:	b292      	uxth	r2, r2
 8007958:	4314      	orrs	r4, r2
 800795a:	e7e5      	b.n	8007928 <_calloc_r+0x14>
 800795c:	2d00      	cmp	r5, #0
 800795e:	d101      	bne.n	8007964 <_calloc_r+0x50>
 8007960:	1c14      	adds	r4, r2, #0
 8007962:	e7ed      	b.n	8007940 <_calloc_r+0x2c>
 8007964:	230c      	movs	r3, #12
 8007966:	2500      	movs	r5, #0
 8007968:	6003      	str	r3, [r0, #0]
 800796a:	0028      	movs	r0, r5
 800796c:	bd70      	pop	{r4, r5, r6, pc}

0800796e <__ascii_mbtowc>:
 800796e:	b082      	sub	sp, #8
 8007970:	2900      	cmp	r1, #0
 8007972:	d100      	bne.n	8007976 <__ascii_mbtowc+0x8>
 8007974:	a901      	add	r1, sp, #4
 8007976:	1e10      	subs	r0, r2, #0
 8007978:	d006      	beq.n	8007988 <__ascii_mbtowc+0x1a>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <__ascii_mbtowc+0x1e>
 800797e:	7813      	ldrb	r3, [r2, #0]
 8007980:	600b      	str	r3, [r1, #0]
 8007982:	7810      	ldrb	r0, [r2, #0]
 8007984:	1e43      	subs	r3, r0, #1
 8007986:	4198      	sbcs	r0, r3
 8007988:	b002      	add	sp, #8
 800798a:	4770      	bx	lr
 800798c:	2002      	movs	r0, #2
 800798e:	4240      	negs	r0, r0
 8007990:	e7fa      	b.n	8007988 <__ascii_mbtowc+0x1a>

08007992 <_realloc_r>:
 8007992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007994:	0006      	movs	r6, r0
 8007996:	000c      	movs	r4, r1
 8007998:	0015      	movs	r5, r2
 800799a:	2900      	cmp	r1, #0
 800799c:	d105      	bne.n	80079aa <_realloc_r+0x18>
 800799e:	0011      	movs	r1, r2
 80079a0:	f7ff f930 	bl	8006c04 <_malloc_r>
 80079a4:	0004      	movs	r4, r0
 80079a6:	0020      	movs	r0, r4
 80079a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d103      	bne.n	80079b6 <_realloc_r+0x24>
 80079ae:	f7ff f8b3 	bl	8006b18 <_free_r>
 80079b2:	002c      	movs	r4, r5
 80079b4:	e7f7      	b.n	80079a6 <_realloc_r+0x14>
 80079b6:	f000 f840 	bl	8007a3a <_malloc_usable_size_r>
 80079ba:	0007      	movs	r7, r0
 80079bc:	4285      	cmp	r5, r0
 80079be:	d802      	bhi.n	80079c6 <_realloc_r+0x34>
 80079c0:	0843      	lsrs	r3, r0, #1
 80079c2:	42ab      	cmp	r3, r5
 80079c4:	d3ef      	bcc.n	80079a6 <_realloc_r+0x14>
 80079c6:	0029      	movs	r1, r5
 80079c8:	0030      	movs	r0, r6
 80079ca:	f7ff f91b 	bl	8006c04 <_malloc_r>
 80079ce:	9001      	str	r0, [sp, #4]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d101      	bne.n	80079d8 <_realloc_r+0x46>
 80079d4:	9c01      	ldr	r4, [sp, #4]
 80079d6:	e7e6      	b.n	80079a6 <_realloc_r+0x14>
 80079d8:	002a      	movs	r2, r5
 80079da:	42bd      	cmp	r5, r7
 80079dc:	d900      	bls.n	80079e0 <_realloc_r+0x4e>
 80079de:	003a      	movs	r2, r7
 80079e0:	0021      	movs	r1, r4
 80079e2:	9801      	ldr	r0, [sp, #4]
 80079e4:	f7ff ff6e 	bl	80078c4 <memcpy>
 80079e8:	0021      	movs	r1, r4
 80079ea:	0030      	movs	r0, r6
 80079ec:	f7ff f894 	bl	8006b18 <_free_r>
 80079f0:	e7f0      	b.n	80079d4 <_realloc_r+0x42>

080079f2 <__ascii_wctomb>:
 80079f2:	0003      	movs	r3, r0
 80079f4:	1e08      	subs	r0, r1, #0
 80079f6:	d005      	beq.n	8007a04 <__ascii_wctomb+0x12>
 80079f8:	2aff      	cmp	r2, #255	@ 0xff
 80079fa:	d904      	bls.n	8007a06 <__ascii_wctomb+0x14>
 80079fc:	228a      	movs	r2, #138	@ 0x8a
 80079fe:	2001      	movs	r0, #1
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	4240      	negs	r0, r0
 8007a04:	4770      	bx	lr
 8007a06:	2001      	movs	r0, #1
 8007a08:	700a      	strb	r2, [r1, #0]
 8007a0a:	e7fb      	b.n	8007a04 <__ascii_wctomb+0x12>

08007a0c <fiprintf>:
 8007a0c:	b40e      	push	{r1, r2, r3}
 8007a0e:	b517      	push	{r0, r1, r2, r4, lr}
 8007a10:	4c05      	ldr	r4, [pc, #20]	@ (8007a28 <fiprintf+0x1c>)
 8007a12:	ab05      	add	r3, sp, #20
 8007a14:	cb04      	ldmia	r3!, {r2}
 8007a16:	0001      	movs	r1, r0
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	f000 f83c 	bl	8007a98 <_vfiprintf_r>
 8007a20:	bc1e      	pop	{r1, r2, r3, r4}
 8007a22:	bc08      	pop	{r3}
 8007a24:	b003      	add	sp, #12
 8007a26:	4718      	bx	r3
 8007a28:	20000018 	.word	0x20000018

08007a2c <abort>:
 8007a2c:	2006      	movs	r0, #6
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	f000 fa18 	bl	8007e64 <raise>
 8007a34:	2001      	movs	r0, #1
 8007a36:	f7fb f9d0 	bl	8002dda <_exit>

08007a3a <_malloc_usable_size_r>:
 8007a3a:	1f0b      	subs	r3, r1, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	1f18      	subs	r0, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	da01      	bge.n	8007a48 <_malloc_usable_size_r+0xe>
 8007a44:	580b      	ldr	r3, [r1, r0]
 8007a46:	18c0      	adds	r0, r0, r3
 8007a48:	4770      	bx	lr

08007a4a <__sfputc_r>:
 8007a4a:	6893      	ldr	r3, [r2, #8]
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	6093      	str	r3, [r2, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da04      	bge.n	8007a60 <__sfputc_r+0x16>
 8007a56:	6994      	ldr	r4, [r2, #24]
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	db07      	blt.n	8007a6c <__sfputc_r+0x22>
 8007a5c:	290a      	cmp	r1, #10
 8007a5e:	d005      	beq.n	8007a6c <__sfputc_r+0x22>
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	1c58      	adds	r0, r3, #1
 8007a64:	6010      	str	r0, [r2, #0]
 8007a66:	7019      	strb	r1, [r3, #0]
 8007a68:	0008      	movs	r0, r1
 8007a6a:	bd10      	pop	{r4, pc}
 8007a6c:	f000 f930 	bl	8007cd0 <__swbuf_r>
 8007a70:	0001      	movs	r1, r0
 8007a72:	e7f9      	b.n	8007a68 <__sfputc_r+0x1e>

08007a74 <__sfputs_r>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	0006      	movs	r6, r0
 8007a78:	000f      	movs	r7, r1
 8007a7a:	0014      	movs	r4, r2
 8007a7c:	18d5      	adds	r5, r2, r3
 8007a7e:	42ac      	cmp	r4, r5
 8007a80:	d101      	bne.n	8007a86 <__sfputs_r+0x12>
 8007a82:	2000      	movs	r0, #0
 8007a84:	e007      	b.n	8007a96 <__sfputs_r+0x22>
 8007a86:	7821      	ldrb	r1, [r4, #0]
 8007a88:	003a      	movs	r2, r7
 8007a8a:	0030      	movs	r0, r6
 8007a8c:	f7ff ffdd 	bl	8007a4a <__sfputc_r>
 8007a90:	3401      	adds	r4, #1
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	d1f3      	bne.n	8007a7e <__sfputs_r+0xa>
 8007a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a98 <_vfiprintf_r>:
 8007a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9a:	b0a1      	sub	sp, #132	@ 0x84
 8007a9c:	000f      	movs	r7, r1
 8007a9e:	0015      	movs	r5, r2
 8007aa0:	001e      	movs	r6, r3
 8007aa2:	9003      	str	r0, [sp, #12]
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d004      	beq.n	8007ab2 <_vfiprintf_r+0x1a>
 8007aa8:	6a03      	ldr	r3, [r0, #32]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <_vfiprintf_r+0x1a>
 8007aae:	f7fe f889 	bl	8005bc4 <__sinit>
 8007ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ab4:	07db      	lsls	r3, r3, #31
 8007ab6:	d405      	bmi.n	8007ac4 <_vfiprintf_r+0x2c>
 8007ab8:	89bb      	ldrh	r3, [r7, #12]
 8007aba:	059b      	lsls	r3, r3, #22
 8007abc:	d402      	bmi.n	8007ac4 <_vfiprintf_r+0x2c>
 8007abe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007ac0:	f7fe f9a7 	bl	8005e12 <__retarget_lock_acquire_recursive>
 8007ac4:	89bb      	ldrh	r3, [r7, #12]
 8007ac6:	071b      	lsls	r3, r3, #28
 8007ac8:	d502      	bpl.n	8007ad0 <_vfiprintf_r+0x38>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d113      	bne.n	8007af8 <_vfiprintf_r+0x60>
 8007ad0:	0039      	movs	r1, r7
 8007ad2:	9803      	ldr	r0, [sp, #12]
 8007ad4:	f000 f93e 	bl	8007d54 <__swsetup_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d00d      	beq.n	8007af8 <_vfiprintf_r+0x60>
 8007adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ade:	07db      	lsls	r3, r3, #31
 8007ae0:	d503      	bpl.n	8007aea <_vfiprintf_r+0x52>
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	4240      	negs	r0, r0
 8007ae6:	b021      	add	sp, #132	@ 0x84
 8007ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aea:	89bb      	ldrh	r3, [r7, #12]
 8007aec:	059b      	lsls	r3, r3, #22
 8007aee:	d4f8      	bmi.n	8007ae2 <_vfiprintf_r+0x4a>
 8007af0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007af2:	f7fe f98f 	bl	8005e14 <__retarget_lock_release_recursive>
 8007af6:	e7f4      	b.n	8007ae2 <_vfiprintf_r+0x4a>
 8007af8:	2300      	movs	r3, #0
 8007afa:	ac08      	add	r4, sp, #32
 8007afc:	6163      	str	r3, [r4, #20]
 8007afe:	3320      	adds	r3, #32
 8007b00:	7663      	strb	r3, [r4, #25]
 8007b02:	3310      	adds	r3, #16
 8007b04:	76a3      	strb	r3, [r4, #26]
 8007b06:	9607      	str	r6, [sp, #28]
 8007b08:	002e      	movs	r6, r5
 8007b0a:	7833      	ldrb	r3, [r6, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <_vfiprintf_r+0x7c>
 8007b10:	2b25      	cmp	r3, #37	@ 0x25
 8007b12:	d148      	bne.n	8007ba6 <_vfiprintf_r+0x10e>
 8007b14:	1b73      	subs	r3, r6, r5
 8007b16:	9305      	str	r3, [sp, #20]
 8007b18:	42ae      	cmp	r6, r5
 8007b1a:	d00b      	beq.n	8007b34 <_vfiprintf_r+0x9c>
 8007b1c:	002a      	movs	r2, r5
 8007b1e:	0039      	movs	r1, r7
 8007b20:	9803      	ldr	r0, [sp, #12]
 8007b22:	f7ff ffa7 	bl	8007a74 <__sfputs_r>
 8007b26:	3001      	adds	r0, #1
 8007b28:	d100      	bne.n	8007b2c <_vfiprintf_r+0x94>
 8007b2a:	e0ae      	b.n	8007c8a <_vfiprintf_r+0x1f2>
 8007b2c:	6963      	ldr	r3, [r4, #20]
 8007b2e:	9a05      	ldr	r2, [sp, #20]
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	6163      	str	r3, [r4, #20]
 8007b34:	7833      	ldrb	r3, [r6, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d100      	bne.n	8007b3c <_vfiprintf_r+0xa4>
 8007b3a:	e0a6      	b.n	8007c8a <_vfiprintf_r+0x1f2>
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4252      	negs	r2, r2
 8007b42:	6062      	str	r2, [r4, #4]
 8007b44:	a904      	add	r1, sp, #16
 8007b46:	3254      	adds	r2, #84	@ 0x54
 8007b48:	1852      	adds	r2, r2, r1
 8007b4a:	1c75      	adds	r5, r6, #1
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	60e3      	str	r3, [r4, #12]
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	7013      	strb	r3, [r2, #0]
 8007b54:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007b56:	4b59      	ldr	r3, [pc, #356]	@ (8007cbc <_vfiprintf_r+0x224>)
 8007b58:	2205      	movs	r2, #5
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	7829      	ldrb	r1, [r5, #0]
 8007b5e:	9305      	str	r3, [sp, #20]
 8007b60:	f7fe f959 	bl	8005e16 <memchr>
 8007b64:	1c6e      	adds	r6, r5, #1
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d11f      	bne.n	8007baa <_vfiprintf_r+0x112>
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	06d3      	lsls	r3, r2, #27
 8007b6e:	d504      	bpl.n	8007b7a <_vfiprintf_r+0xe2>
 8007b70:	2353      	movs	r3, #83	@ 0x53
 8007b72:	a904      	add	r1, sp, #16
 8007b74:	185b      	adds	r3, r3, r1
 8007b76:	2120      	movs	r1, #32
 8007b78:	7019      	strb	r1, [r3, #0]
 8007b7a:	0713      	lsls	r3, r2, #28
 8007b7c:	d504      	bpl.n	8007b88 <_vfiprintf_r+0xf0>
 8007b7e:	2353      	movs	r3, #83	@ 0x53
 8007b80:	a904      	add	r1, sp, #16
 8007b82:	185b      	adds	r3, r3, r1
 8007b84:	212b      	movs	r1, #43	@ 0x2b
 8007b86:	7019      	strb	r1, [r3, #0]
 8007b88:	782b      	ldrb	r3, [r5, #0]
 8007b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b8c:	d016      	beq.n	8007bbc <_vfiprintf_r+0x124>
 8007b8e:	002e      	movs	r6, r5
 8007b90:	2100      	movs	r1, #0
 8007b92:	200a      	movs	r0, #10
 8007b94:	68e3      	ldr	r3, [r4, #12]
 8007b96:	7832      	ldrb	r2, [r6, #0]
 8007b98:	1c75      	adds	r5, r6, #1
 8007b9a:	3a30      	subs	r2, #48	@ 0x30
 8007b9c:	2a09      	cmp	r2, #9
 8007b9e:	d950      	bls.n	8007c42 <_vfiprintf_r+0x1aa>
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	d111      	bne.n	8007bc8 <_vfiprintf_r+0x130>
 8007ba4:	e017      	b.n	8007bd6 <_vfiprintf_r+0x13e>
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7af      	b.n	8007b0a <_vfiprintf_r+0x72>
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	6822      	ldr	r2, [r4, #0]
 8007bae:	1ac0      	subs	r0, r0, r3
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4083      	lsls	r3, r0
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	0035      	movs	r5, r6
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	e7cc      	b.n	8007b56 <_vfiprintf_r+0xbe>
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	1d19      	adds	r1, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	9107      	str	r1, [sp, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	db01      	blt.n	8007bcc <_vfiprintf_r+0x134>
 8007bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bca:	e004      	b.n	8007bd6 <_vfiprintf_r+0x13e>
 8007bcc:	425b      	negs	r3, r3
 8007bce:	60e3      	str	r3, [r4, #12]
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	7833      	ldrb	r3, [r6, #0]
 8007bd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bda:	d10c      	bne.n	8007bf6 <_vfiprintf_r+0x15e>
 8007bdc:	7873      	ldrb	r3, [r6, #1]
 8007bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8007be0:	d134      	bne.n	8007c4c <_vfiprintf_r+0x1b4>
 8007be2:	9b07      	ldr	r3, [sp, #28]
 8007be4:	3602      	adds	r6, #2
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	9207      	str	r2, [sp, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da01      	bge.n	8007bf4 <_vfiprintf_r+0x15c>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	425b      	negs	r3, r3
 8007bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf6:	4d32      	ldr	r5, [pc, #200]	@ (8007cc0 <_vfiprintf_r+0x228>)
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	0028      	movs	r0, r5
 8007bfc:	7831      	ldrb	r1, [r6, #0]
 8007bfe:	f7fe f90a 	bl	8005e16 <memchr>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d006      	beq.n	8007c14 <_vfiprintf_r+0x17c>
 8007c06:	2340      	movs	r3, #64	@ 0x40
 8007c08:	1b40      	subs	r0, r0, r5
 8007c0a:	4083      	lsls	r3, r0
 8007c0c:	6822      	ldr	r2, [r4, #0]
 8007c0e:	3601      	adds	r6, #1
 8007c10:	4313      	orrs	r3, r2
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	7831      	ldrb	r1, [r6, #0]
 8007c16:	2206      	movs	r2, #6
 8007c18:	482a      	ldr	r0, [pc, #168]	@ (8007cc4 <_vfiprintf_r+0x22c>)
 8007c1a:	1c75      	adds	r5, r6, #1
 8007c1c:	7621      	strb	r1, [r4, #24]
 8007c1e:	f7fe f8fa 	bl	8005e16 <memchr>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d040      	beq.n	8007ca8 <_vfiprintf_r+0x210>
 8007c26:	4b28      	ldr	r3, [pc, #160]	@ (8007cc8 <_vfiprintf_r+0x230>)
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d122      	bne.n	8007c72 <_vfiprintf_r+0x1da>
 8007c2c:	2207      	movs	r2, #7
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	3307      	adds	r3, #7
 8007c32:	4393      	bics	r3, r2
 8007c34:	3308      	adds	r3, #8
 8007c36:	9307      	str	r3, [sp, #28]
 8007c38:	6963      	ldr	r3, [r4, #20]
 8007c3a:	9a04      	ldr	r2, [sp, #16]
 8007c3c:	189b      	adds	r3, r3, r2
 8007c3e:	6163      	str	r3, [r4, #20]
 8007c40:	e762      	b.n	8007b08 <_vfiprintf_r+0x70>
 8007c42:	4343      	muls	r3, r0
 8007c44:	002e      	movs	r6, r5
 8007c46:	2101      	movs	r1, #1
 8007c48:	189b      	adds	r3, r3, r2
 8007c4a:	e7a4      	b.n	8007b96 <_vfiprintf_r+0xfe>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	200a      	movs	r0, #10
 8007c50:	0019      	movs	r1, r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	6063      	str	r3, [r4, #4]
 8007c56:	7832      	ldrb	r2, [r6, #0]
 8007c58:	1c75      	adds	r5, r6, #1
 8007c5a:	3a30      	subs	r2, #48	@ 0x30
 8007c5c:	2a09      	cmp	r2, #9
 8007c5e:	d903      	bls.n	8007c68 <_vfiprintf_r+0x1d0>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0c8      	beq.n	8007bf6 <_vfiprintf_r+0x15e>
 8007c64:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c66:	e7c6      	b.n	8007bf6 <_vfiprintf_r+0x15e>
 8007c68:	4341      	muls	r1, r0
 8007c6a:	002e      	movs	r6, r5
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	1889      	adds	r1, r1, r2
 8007c70:	e7f1      	b.n	8007c56 <_vfiprintf_r+0x1be>
 8007c72:	aa07      	add	r2, sp, #28
 8007c74:	9200      	str	r2, [sp, #0]
 8007c76:	0021      	movs	r1, r4
 8007c78:	003a      	movs	r2, r7
 8007c7a:	4b14      	ldr	r3, [pc, #80]	@ (8007ccc <_vfiprintf_r+0x234>)
 8007c7c:	9803      	ldr	r0, [sp, #12]
 8007c7e:	f7fd fb57 	bl	8005330 <_printf_float>
 8007c82:	9004      	str	r0, [sp, #16]
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	3301      	adds	r3, #1
 8007c88:	d1d6      	bne.n	8007c38 <_vfiprintf_r+0x1a0>
 8007c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c8c:	07db      	lsls	r3, r3, #31
 8007c8e:	d405      	bmi.n	8007c9c <_vfiprintf_r+0x204>
 8007c90:	89bb      	ldrh	r3, [r7, #12]
 8007c92:	059b      	lsls	r3, r3, #22
 8007c94:	d402      	bmi.n	8007c9c <_vfiprintf_r+0x204>
 8007c96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007c98:	f7fe f8bc 	bl	8005e14 <__retarget_lock_release_recursive>
 8007c9c:	89bb      	ldrh	r3, [r7, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	d500      	bpl.n	8007ca4 <_vfiprintf_r+0x20c>
 8007ca2:	e71e      	b.n	8007ae2 <_vfiprintf_r+0x4a>
 8007ca4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007ca6:	e71e      	b.n	8007ae6 <_vfiprintf_r+0x4e>
 8007ca8:	aa07      	add	r2, sp, #28
 8007caa:	9200      	str	r2, [sp, #0]
 8007cac:	0021      	movs	r1, r4
 8007cae:	003a      	movs	r2, r7
 8007cb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ccc <_vfiprintf_r+0x234>)
 8007cb2:	9803      	ldr	r0, [sp, #12]
 8007cb4:	f7fd fdea 	bl	800588c <_printf_i>
 8007cb8:	e7e3      	b.n	8007c82 <_vfiprintf_r+0x1ea>
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	080081c2 	.word	0x080081c2
 8007cc0:	080081c8 	.word	0x080081c8
 8007cc4:	080081cc 	.word	0x080081cc
 8007cc8:	08005331 	.word	0x08005331
 8007ccc:	08007a75 	.word	0x08007a75

08007cd0 <__swbuf_r>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	0006      	movs	r6, r0
 8007cd4:	000d      	movs	r5, r1
 8007cd6:	0014      	movs	r4, r2
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d004      	beq.n	8007ce6 <__swbuf_r+0x16>
 8007cdc:	6a03      	ldr	r3, [r0, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <__swbuf_r+0x16>
 8007ce2:	f7fd ff6f 	bl	8005bc4 <__sinit>
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	071b      	lsls	r3, r3, #28
 8007cee:	d502      	bpl.n	8007cf6 <__swbuf_r+0x26>
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <__swbuf_r+0x3a>
 8007cf6:	0021      	movs	r1, r4
 8007cf8:	0030      	movs	r0, r6
 8007cfa:	f000 f82b 	bl	8007d54 <__swsetup_r>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d003      	beq.n	8007d0a <__swbuf_r+0x3a>
 8007d02:	2501      	movs	r5, #1
 8007d04:	426d      	negs	r5, r5
 8007d06:	0028      	movs	r0, r5
 8007d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	b2ef      	uxtb	r7, r5
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	6963      	ldr	r3, [r4, #20]
 8007d14:	b2ed      	uxtb	r5, r5
 8007d16:	4283      	cmp	r3, r0
 8007d18:	dc05      	bgt.n	8007d26 <__swbuf_r+0x56>
 8007d1a:	0021      	movs	r1, r4
 8007d1c:	0030      	movs	r0, r6
 8007d1e:	f7ff fd81 	bl	8007824 <_fflush_r>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d1ed      	bne.n	8007d02 <__swbuf_r+0x32>
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	3001      	adds	r0, #1
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	701f      	strb	r7, [r3, #0]
 8007d36:	6963      	ldr	r3, [r4, #20]
 8007d38:	4283      	cmp	r3, r0
 8007d3a:	d004      	beq.n	8007d46 <__swbuf_r+0x76>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	07db      	lsls	r3, r3, #31
 8007d40:	d5e1      	bpl.n	8007d06 <__swbuf_r+0x36>
 8007d42:	2d0a      	cmp	r5, #10
 8007d44:	d1df      	bne.n	8007d06 <__swbuf_r+0x36>
 8007d46:	0021      	movs	r1, r4
 8007d48:	0030      	movs	r0, r6
 8007d4a:	f7ff fd6b 	bl	8007824 <_fflush_r>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d0d9      	beq.n	8007d06 <__swbuf_r+0x36>
 8007d52:	e7d6      	b.n	8007d02 <__swbuf_r+0x32>

08007d54 <__swsetup_r>:
 8007d54:	4b2d      	ldr	r3, [pc, #180]	@ (8007e0c <__swsetup_r+0xb8>)
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	0005      	movs	r5, r0
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	000c      	movs	r4, r1
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d004      	beq.n	8007d6c <__swsetup_r+0x18>
 8007d62:	6a03      	ldr	r3, [r0, #32]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <__swsetup_r+0x18>
 8007d68:	f7fd ff2c 	bl	8005bc4 <__sinit>
 8007d6c:	220c      	movs	r2, #12
 8007d6e:	5ea3      	ldrsh	r3, [r4, r2]
 8007d70:	071a      	lsls	r2, r3, #28
 8007d72:	d423      	bmi.n	8007dbc <__swsetup_r+0x68>
 8007d74:	06da      	lsls	r2, r3, #27
 8007d76:	d407      	bmi.n	8007d88 <__swsetup_r+0x34>
 8007d78:	2209      	movs	r2, #9
 8007d7a:	602a      	str	r2, [r5, #0]
 8007d7c:	2240      	movs	r2, #64	@ 0x40
 8007d7e:	2001      	movs	r0, #1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	4240      	negs	r0, r0
 8007d86:	e03a      	b.n	8007dfe <__swsetup_r+0xaa>
 8007d88:	075b      	lsls	r3, r3, #29
 8007d8a:	d513      	bpl.n	8007db4 <__swsetup_r+0x60>
 8007d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d008      	beq.n	8007da4 <__swsetup_r+0x50>
 8007d92:	0023      	movs	r3, r4
 8007d94:	3344      	adds	r3, #68	@ 0x44
 8007d96:	4299      	cmp	r1, r3
 8007d98:	d002      	beq.n	8007da0 <__swsetup_r+0x4c>
 8007d9a:	0028      	movs	r0, r5
 8007d9c:	f7fe febc 	bl	8006b18 <_free_r>
 8007da0:	2300      	movs	r3, #0
 8007da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007da4:	2224      	movs	r2, #36	@ 0x24
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	4393      	bics	r3, r2
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	2300      	movs	r3, #0
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	2308      	movs	r3, #8
 8007db6:	89a2      	ldrh	r2, [r4, #12]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <__swsetup_r+0x86>
 8007dc2:	21a0      	movs	r1, #160	@ 0xa0
 8007dc4:	2280      	movs	r2, #128	@ 0x80
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	0089      	lsls	r1, r1, #2
 8007dca:	0092      	lsls	r2, r2, #2
 8007dcc:	400b      	ands	r3, r1
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <__swsetup_r+0x86>
 8007dd2:	0021      	movs	r1, r4
 8007dd4:	0028      	movs	r0, r5
 8007dd6:	f000 f88f 	bl	8007ef8 <__smakebuf_r>
 8007dda:	220c      	movs	r2, #12
 8007ddc:	5ea3      	ldrsh	r3, [r4, r2]
 8007dde:	2101      	movs	r1, #1
 8007de0:	001a      	movs	r2, r3
 8007de2:	400a      	ands	r2, r1
 8007de4:	420b      	tst	r3, r1
 8007de6:	d00b      	beq.n	8007e00 <__swsetup_r+0xac>
 8007de8:	2200      	movs	r2, #0
 8007dea:	60a2      	str	r2, [r4, #8]
 8007dec:	6962      	ldr	r2, [r4, #20]
 8007dee:	4252      	negs	r2, r2
 8007df0:	61a2      	str	r2, [r4, #24]
 8007df2:	2000      	movs	r0, #0
 8007df4:	6922      	ldr	r2, [r4, #16]
 8007df6:	4282      	cmp	r2, r0
 8007df8:	d101      	bne.n	8007dfe <__swsetup_r+0xaa>
 8007dfa:	061a      	lsls	r2, r3, #24
 8007dfc:	d4be      	bmi.n	8007d7c <__swsetup_r+0x28>
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	0799      	lsls	r1, r3, #30
 8007e02:	d400      	bmi.n	8007e06 <__swsetup_r+0xb2>
 8007e04:	6962      	ldr	r2, [r4, #20]
 8007e06:	60a2      	str	r2, [r4, #8]
 8007e08:	e7f3      	b.n	8007df2 <__swsetup_r+0x9e>
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	20000018 	.word	0x20000018

08007e10 <_raise_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	0004      	movs	r4, r0
 8007e14:	000d      	movs	r5, r1
 8007e16:	291f      	cmp	r1, #31
 8007e18:	d904      	bls.n	8007e24 <_raise_r+0x14>
 8007e1a:	2316      	movs	r3, #22
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	4240      	negs	r0, r0
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <_raise_r+0x24>
 8007e2a:	008a      	lsls	r2, r1, #2
 8007e2c:	189b      	adds	r3, r3, r2
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d108      	bne.n	8007e46 <_raise_r+0x36>
 8007e34:	0020      	movs	r0, r4
 8007e36:	f000 f831 	bl	8007e9c <_getpid_r>
 8007e3a:	002a      	movs	r2, r5
 8007e3c:	0001      	movs	r1, r0
 8007e3e:	0020      	movs	r0, r4
 8007e40:	f000 f81a 	bl	8007e78 <_kill_r>
 8007e44:	e7ed      	b.n	8007e22 <_raise_r+0x12>
 8007e46:	2a01      	cmp	r2, #1
 8007e48:	d009      	beq.n	8007e5e <_raise_r+0x4e>
 8007e4a:	1c51      	adds	r1, r2, #1
 8007e4c:	d103      	bne.n	8007e56 <_raise_r+0x46>
 8007e4e:	2316      	movs	r3, #22
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	2001      	movs	r0, #1
 8007e54:	e7e5      	b.n	8007e22 <_raise_r+0x12>
 8007e56:	2100      	movs	r1, #0
 8007e58:	0028      	movs	r0, r5
 8007e5a:	6019      	str	r1, [r3, #0]
 8007e5c:	4790      	blx	r2
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e7df      	b.n	8007e22 <_raise_r+0x12>
	...

08007e64 <raise>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	4b03      	ldr	r3, [pc, #12]	@ (8007e74 <raise+0x10>)
 8007e68:	0001      	movs	r1, r0
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	f7ff ffd0 	bl	8007e10 <_raise_r>
 8007e70:	bd10      	pop	{r4, pc}
 8007e72:	46c0      	nop			@ (mov r8, r8)
 8007e74:	20000018 	.word	0x20000018

08007e78 <_kill_r>:
 8007e78:	2300      	movs	r3, #0
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	4d06      	ldr	r5, [pc, #24]	@ (8007e98 <_kill_r+0x20>)
 8007e7e:	0004      	movs	r4, r0
 8007e80:	0008      	movs	r0, r1
 8007e82:	0011      	movs	r1, r2
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	f7fa ff98 	bl	8002dba <_kill>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d103      	bne.n	8007e96 <_kill_r+0x1e>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d000      	beq.n	8007e96 <_kill_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	20000414 	.word	0x20000414

08007e9c <_getpid_r>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	f7fa ff86 	bl	8002dae <_getpid>
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <__swhatbuf_r>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	000e      	movs	r6, r1
 8007ea8:	001d      	movs	r5, r3
 8007eaa:	230e      	movs	r3, #14
 8007eac:	5ec9      	ldrsh	r1, [r1, r3]
 8007eae:	0014      	movs	r4, r2
 8007eb0:	b096      	sub	sp, #88	@ 0x58
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	da0c      	bge.n	8007ed0 <__swhatbuf_r+0x2c>
 8007eb6:	89b2      	ldrh	r2, [r6, #12]
 8007eb8:	2380      	movs	r3, #128	@ 0x80
 8007eba:	0011      	movs	r1, r2
 8007ebc:	4019      	ands	r1, r3
 8007ebe:	421a      	tst	r2, r3
 8007ec0:	d114      	bne.n	8007eec <__swhatbuf_r+0x48>
 8007ec2:	2380      	movs	r3, #128	@ 0x80
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	6029      	str	r1, [r5, #0]
 8007eca:	6023      	str	r3, [r4, #0]
 8007ecc:	b016      	add	sp, #88	@ 0x58
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	466a      	mov	r2, sp
 8007ed2:	f000 f853 	bl	8007f7c <_fstat_r>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	dbed      	blt.n	8007eb6 <__swhatbuf_r+0x12>
 8007eda:	23f0      	movs	r3, #240	@ 0xf0
 8007edc:	9901      	ldr	r1, [sp, #4]
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	4019      	ands	r1, r3
 8007ee2:	4b04      	ldr	r3, [pc, #16]	@ (8007ef4 <__swhatbuf_r+0x50>)
 8007ee4:	18c9      	adds	r1, r1, r3
 8007ee6:	424b      	negs	r3, r1
 8007ee8:	4159      	adcs	r1, r3
 8007eea:	e7ea      	b.n	8007ec2 <__swhatbuf_r+0x1e>
 8007eec:	2100      	movs	r1, #0
 8007eee:	2340      	movs	r3, #64	@ 0x40
 8007ef0:	e7e9      	b.n	8007ec6 <__swhatbuf_r+0x22>
 8007ef2:	46c0      	nop			@ (mov r8, r8)
 8007ef4:	ffffe000 	.word	0xffffe000

08007ef8 <__smakebuf_r>:
 8007ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efa:	2602      	movs	r6, #2
 8007efc:	898b      	ldrh	r3, [r1, #12]
 8007efe:	0005      	movs	r5, r0
 8007f00:	000c      	movs	r4, r1
 8007f02:	b085      	sub	sp, #20
 8007f04:	4233      	tst	r3, r6
 8007f06:	d007      	beq.n	8007f18 <__smakebuf_r+0x20>
 8007f08:	0023      	movs	r3, r4
 8007f0a:	3347      	adds	r3, #71	@ 0x47
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	2301      	movs	r3, #1
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	b005      	add	sp, #20
 8007f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f18:	ab03      	add	r3, sp, #12
 8007f1a:	aa02      	add	r2, sp, #8
 8007f1c:	f7ff ffc2 	bl	8007ea4 <__swhatbuf_r>
 8007f20:	9f02      	ldr	r7, [sp, #8]
 8007f22:	9001      	str	r0, [sp, #4]
 8007f24:	0039      	movs	r1, r7
 8007f26:	0028      	movs	r0, r5
 8007f28:	f7fe fe6c 	bl	8006c04 <_malloc_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d108      	bne.n	8007f42 <__smakebuf_r+0x4a>
 8007f30:	220c      	movs	r2, #12
 8007f32:	5ea3      	ldrsh	r3, [r4, r2]
 8007f34:	059a      	lsls	r2, r3, #22
 8007f36:	d4ed      	bmi.n	8007f14 <__smakebuf_r+0x1c>
 8007f38:	2203      	movs	r2, #3
 8007f3a:	4393      	bics	r3, r2
 8007f3c:	431e      	orrs	r6, r3
 8007f3e:	81a6      	strh	r6, [r4, #12]
 8007f40:	e7e2      	b.n	8007f08 <__smakebuf_r+0x10>
 8007f42:	2380      	movs	r3, #128	@ 0x80
 8007f44:	89a2      	ldrh	r2, [r4, #12]
 8007f46:	6020      	str	r0, [r4, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	6120      	str	r0, [r4, #16]
 8007f50:	6167      	str	r7, [r4, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00c      	beq.n	8007f70 <__smakebuf_r+0x78>
 8007f56:	0028      	movs	r0, r5
 8007f58:	230e      	movs	r3, #14
 8007f5a:	5ee1      	ldrsh	r1, [r4, r3]
 8007f5c:	f000 f820 	bl	8007fa0 <_isatty_r>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d005      	beq.n	8007f70 <__smakebuf_r+0x78>
 8007f64:	2303      	movs	r3, #3
 8007f66:	89a2      	ldrh	r2, [r4, #12]
 8007f68:	439a      	bics	r2, r3
 8007f6a:	3b02      	subs	r3, #2
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	9a01      	ldr	r2, [sp, #4]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	e7cc      	b.n	8007f14 <__smakebuf_r+0x1c>
	...

08007f7c <_fstat_r>:
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	b570      	push	{r4, r5, r6, lr}
 8007f80:	4d06      	ldr	r5, [pc, #24]	@ (8007f9c <_fstat_r+0x20>)
 8007f82:	0004      	movs	r4, r0
 8007f84:	0008      	movs	r0, r1
 8007f86:	0011      	movs	r1, r2
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	f7fa ff76 	bl	8002e7a <_fstat>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	d103      	bne.n	8007f9a <_fstat_r+0x1e>
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d000      	beq.n	8007f9a <_fstat_r+0x1e>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	20000414 	.word	0x20000414

08007fa0 <_isatty_r>:
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	4d06      	ldr	r5, [pc, #24]	@ (8007fc0 <_isatty_r+0x20>)
 8007fa6:	0004      	movs	r4, r0
 8007fa8:	0008      	movs	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7fa ff73 	bl	8002e96 <_isatty>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d103      	bne.n	8007fbc <_isatty_r+0x1c>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d000      	beq.n	8007fbc <_isatty_r+0x1c>
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	46c0      	nop			@ (mov r8, r8)
 8007fc0:	20000414 	.word	0x20000414

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DELAY_BOUCING 10
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

uint8_t count 	  		= 0,
		countDeca 		= 0,
		countCent 		= 0,
		miliseconds     = 0,
		atualDisp 		= 0,
		setMode   		= 0,
		newState    	= 1,
		aux         	= 0,
		bset        	= 0,
		boucingTime 	= 0,
		brefBoucingTime = 0,
		atualColumn     = 0;

char result = 0;

char numbers[10][7] = { {1, 1, 1, 1, 1, 1, 0},  // count = 0
						{0, 1, 1, 0, 0, 0, 0},  // count = 1
						{1, 1, 0, 1, 1, 0, 1},  // count = 2
						{1, 1, 1, 1, 0, 0, 1},  // count = 3
						{0, 1, 1, 0, 0, 1, 1},  // count = 4
						{1, 0, 1, 1, 0, 1, 1},  // count = 5
						{1, 0, 1, 1, 1, 1, 1},  // count = 6
						{1, 1, 1, 0, 0, 0, 0},  // count = 7
						{1, 1, 1, 1, 1, 1, 1},  // count = 8
						{1, 1, 1, 1, 0, 1, 1}}; // count = 9

char tmap[4][3] = {
					{'3', '2', '1'},
					{'6', '5', '4'},
					{'9', '8', '7'},
					{'#', '0', '*'}
				  };

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Twist_disp(void);
void Verify_disp(void);
void Keyboard_check(void);
void Show_disp(uint8_t atualCount);
void Line_Check(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t atualLine, uint8_t atualColumn);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (setMode) Keyboard_check();

	  bset = HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin);

	  if (!bset){
		  boucingTime = HAL_GetTick();
		  if ((boucingTime - brefBoucingTime) > DELAY_BOUCING){
			  aux = newState;
			  newState = setMode;
			  setMode = aux;
		  }
		  brefBoucingTime = boucingTime;
	  }

	  Twist_disp();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if (!setMode) miliseconds++;
}

void Keyboard_check(void){
	switch(atualColumn){
		case 0:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 0);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);

			Line_Check(LINE_01_GPIO_Port, LINE_01_Pin, 0, 0);
			Line_Check(LINE_02_GPIO_Port, LINE_02_Pin, 1, 0);
			Line_Check(LINE_03_GPIO_Port, LINE_03_Pin, 2, 0);
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 0);

			atualColumn = 1;
			break;
		case 1:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 0);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);

			Line_Check(LINE_01_GPIO_Port, LINE_01_Pin, 0, 1);
			Line_Check(LINE_02_GPIO_Port, LINE_02_Pin, 1, 1);
			Line_Check(LINE_03_GPIO_Port, LINE_03_Pin, 2, 1);
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 1);

			atualColumn = 2;
			break;
		case 2:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 0);

			Line_Check(LINE_01_GPIO_Port, LINE_01_Pin, 0, 2);
			Line_Check(LINE_02_GPIO_Port, LINE_02_Pin, 1, 2);
			Line_Check(LINE_03_GPIO_Port, LINE_03_Pin, 2, 2);
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 2);

			atualColumn = 0;
			break;
	}
}

void Line_Check(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t atualLine, uint8_t atualColumn){
	int bline = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);

	if (!bline){
		boucingTime = HAL_GetTick();

		if (boucingTime - brefBoucingTime > DELAY_BOUCING){
			result = tmap[atualLine][atualColumn];

			switch(result){
				case '#':
					atualDisp++;
					break;

				case '*':
					atualDisp--;
					break;
			}
		}

		brefBoucingTime = boucingTime;
	}
}

void Show_disp(uint8_t atualCount){
	HAL_GPIO_WritePin(PORT_A_GPIO_Port, PORT_A_Pin, numbers[atualCount][0]);
	HAL_GPIO_WritePin(PORT_B_GPIO_Port, PORT_B_Pin, numbers[atualCount][1]);
	HAL_GPIO_WritePin(PORT_C_GPIO_Port, PORT_C_Pin, numbers[atualCount][2]);
	HAL_GPIO_WritePin(PORT_D_GPIO_Port, PORT_D_Pin, numbers[atualCount][3]);
	HAL_GPIO_WritePin(PORT_E_GPIO_Port, PORT_E_Pin, numbers[atualCount][4]);
	HAL_GPIO_WritePin(PORT_F_GPIO_Port, PORT_F_Pin, numbers[atualCount][5]);
	HAL_GPIO_WritePin(PORT_G_GPIO_Port, PORT_G_Pin, numbers[atualCount][6]);
}

void Verify_disp(void){
	switch(atualDisp){
		case 0:
			HAL_GPIO_WritePin(DISP_01_GPIO_Port, DISP_01_Pin, 1);
			HAL_GPIO_WritePin(DISP_02_GPIO_Port, DISP_02_Pin, 0);
			HAL_GPIO_WritePin(DISP_03_GPIO_Port, DISP_03_Pin, 0);
			break;

		case 1:
			HAL_GPIO_WritePin(DISP_01_GPIO_Port, DISP_01_Pin, 0);
			HAL_GPIO_WritePin(DISP_02_GPIO_Port, DISP_02_Pin, 1);
			HAL_GPIO_WritePin(DISP_03_GPIO_Port, DISP_03_Pin, 0);
			break;

		case 2:
			HAL_GPIO_WritePin(DISP_01_GPIO_Port, DISP_01_Pin, 0);
			HAL_GPIO_WritePin(DISP_02_GPIO_Port, DISP_02_Pin, 0);
			HAL_GPIO_WritePin(DISP_03_GPIO_Port, DISP_03_Pin, 1);
			break;
		}
	// Time for stable info.
	HAL_Delay(1);
}

void Twist_disp(void){
	switch(atualDisp){
		case 0:
			Show_disp(countCent);
			Verify_disp();
			if (!setMode) atualDisp = 1;
			break;

		case 1:
			Show_disp(countDeca);
			Verify_disp();
			if (!setMode) atualDisp = 2;
			break;

		case 2:
			Show_disp(count);
			Verify_disp();
			if (!setMode) atualDisp = 0;
			break;
	}

	if (miliseconds >= 100){
		miliseconds = 0;
		count++;
	}

	if (count >= 10){
		count = 0;
		countDeca++;
	}

	if (countDeca >= 10){
		countDeca = 0;
		countCent++;
	}

	if(countCent >= 10){
		countCent = 0;
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

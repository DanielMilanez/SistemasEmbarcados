
Contador Matricial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002418  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080024d8  080024d8  000034d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f4  080024f4  00004064  2**0
                  CONTENTS
  4 .ARM          00000008  080024f4  080024f4  000034f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024fc  080024fc  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024fc  080024fc  000034fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002500  08002500  00003500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002504  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000064  08002568  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002568  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072e1  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176e  00000000  00000000  0000b36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0000cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000624  00000000  00000000  0000d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013127  00000000  00000000  0000d924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099bc  00000000  00000000  00020a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007651b  00000000  00000000  0002a407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c58  00000000  00000000  000a0968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000a25c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024c0 	.word	0x080024c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080024c0 	.word	0x080024c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b089      	sub	sp, #36	@ 0x24
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	240c      	movs	r4, #12
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f001 ffd5 	bl	8002468 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b58      	ldr	r3, [pc, #352]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c2:	4b57      	ldr	r3, [pc, #348]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004c4:	2104      	movs	r1, #4
 80004c6:	430a      	orrs	r2, r1
 80004c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ca:	4b55      	ldr	r3, [pc, #340]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ce:	2204      	movs	r2, #4
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b52      	ldr	r3, [pc, #328]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004da:	4b51      	ldr	r3, [pc, #324]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004f4:	2102      	movs	r1, #2
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fa:	4b49      	ldr	r3, [pc, #292]	@ (8000620 <MX_GPIO_Init+0x178>)
 80004fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004fe:	2202      	movs	r2, #2
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PORT_C_Pin|PORT_D_Pin|PORT_G_Pin|DISP_03_Pin, GPIO_PIN_RESET);
 8000506:	23cc      	movs	r3, #204	@ 0xcc
 8000508:	00d9      	lsls	r1, r3, #3
 800050a:	23a0      	movs	r3, #160	@ 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2200      	movs	r2, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f000 ff9a 	bl	800144a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COLUMN_03_Pin|COLUMN_02_Pin|PORT_F_Pin|COLUMN_01_Pin, GPIO_PIN_RESET);
 8000516:	23f0      	movs	r3, #240	@ 0xf0
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4842      	ldr	r0, [pc, #264]	@ (8000624 <MX_GPIO_Init+0x17c>)
 800051c:	2200      	movs	r2, #0
 800051e:	0019      	movs	r1, r3
 8000520:	f000 ff93 	bl	800144a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_02_Pin|DISP_01_Pin|PORT_E_Pin|PORT_A_Pin
 8000524:	23da      	movs	r3, #218	@ 0xda
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	483f      	ldr	r0, [pc, #252]	@ (8000628 <MX_GPIO_Init+0x180>)
 800052a:	2200      	movs	r2, #0
 800052c:	0019      	movs	r1, r3
 800052e:	f000 ff8c 	bl	800144a <HAL_GPIO_WritePin>
                          |PORT_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SET_BTN_Pin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0192      	lsls	r2, r2, #6
 8000538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2201      	movs	r2, #1
 8000544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 8000546:	193b      	adds	r3, r7, r4
 8000548:	4a36      	ldr	r2, [pc, #216]	@ (8000624 <MX_GPIO_Init+0x17c>)
 800054a:	0019      	movs	r1, r3
 800054c:	0010      	movs	r0, r2
 800054e:	f000 fde9 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PORT_C_Pin PORT_D_Pin PORT_G_Pin DISP_03_Pin */
  GPIO_InitStruct.Pin = PORT_C_Pin|PORT_D_Pin|PORT_G_Pin|DISP_03_Pin;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	22cc      	movs	r2, #204	@ 0xcc
 8000558:	00d2      	lsls	r2, r2, #3
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	000c      	movs	r4, r1
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2201      	movs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	193a      	adds	r2, r7, r4
 8000572:	23a0      	movs	r3, #160	@ 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fdd3 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_03_Pin COLUMN_02_Pin PORT_F_Pin COLUMN_01_Pin */
  GPIO_InitStruct.Pin = COLUMN_03_Pin|COLUMN_02_Pin|PORT_F_Pin|COLUMN_01_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	22f0      	movs	r2, #240	@ 0xf0
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	000c      	movs	r4, r1
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059c:	193b      	adds	r3, r7, r4
 800059e:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <MX_GPIO_Init+0x17c>)
 80005a0:	0019      	movs	r1, r3
 80005a2:	0010      	movs	r0, r2
 80005a4:	f000 fdbe 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_01_Pin LINE_02_Pin */
  GPIO_InitStruct.Pin = LINE_01_Pin|LINE_02_Pin;
 80005a8:	0021      	movs	r1, r4
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	22c0      	movs	r2, #192	@ 0xc0
 80005ae:	0152      	lsls	r2, r2, #5
 80005b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	000c      	movs	r4, r1
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2201      	movs	r2, #1
 80005be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	4a19      	ldr	r2, [pc, #100]	@ (8000628 <MX_GPIO_Init+0x180>)
 80005c4:	0019      	movs	r1, r3
 80005c6:	0010      	movs	r0, r2
 80005c8:	f000 fdac 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_03_Pin LINE_04_Pin */
  GPIO_InitStruct.Pin = LINE_03_Pin|LINE_04_Pin;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	22c0      	movs	r2, #192	@ 0xc0
 80005d0:	0152      	lsls	r2, r2, #5
 80005d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2201      	movs	r2, #1
 80005de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	193a      	adds	r2, r7, r4
 80005e2:	23a0      	movs	r3, #160	@ 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fd9b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_02_Pin DISP_01_Pin PORT_E_Pin PORT_A_Pin
                           PORT_B_Pin */
  GPIO_InitStruct.Pin = DISP_02_Pin|DISP_01_Pin|PORT_E_Pin|PORT_A_Pin
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	22da      	movs	r2, #218	@ 0xda
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	601a      	str	r2, [r3, #0]
                          |PORT_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	187b      	adds	r3, r7, r1
 800060c:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <MX_GPIO_Init+0x180>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f000 fd87 	bl	8001124 <HAL_GPIO_Init>

}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b009      	add	sp, #36	@ 0x24
 800061c:	bd90      	pop	{r4, r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	40021000 	.word	0x40021000
 8000624:	50000800 	.word	0x50000800
 8000628:	50000400 	.word	0x50000400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fc06 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f84e 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff36 	bl	80004a8 <MX_GPIO_Init>
  MX_TIM6_Init();
 800063c:	f000 fb7a 	bl	8000d34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <main+0x88>)
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fd10 	bl	8002068 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (setMode) Keyboard_check();
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <main+0x8c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <main+0x28>
 8000650:	f000 f8b0 	bl	80007b4 <Keyboard_check>

	  bset = HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin);
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	019b      	lsls	r3, r3, #6
 8000658:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <main+0x90>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f000 fed7 	bl	8001410 <HAL_GPIO_ReadPin>
 8000662:	0003      	movs	r3, r0
 8000664:	001a      	movs	r2, r3
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <main+0x94>)
 8000668:	701a      	strb	r2, [r3, #0]

	  if (!bset){
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <main+0x94>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d11d      	bne.n	80006ae <main+0x82>
		  boucingTime = HAL_GetTick();
 8000672:	f000 fc4b 	bl	8000f0c <HAL_GetTick>
 8000676:	0003      	movs	r3, r0
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <main+0x98>)
 800067c:	701a      	strb	r2, [r3, #0]
		  if ((boucingTime - brefBoucingTime) > DELAY_BOUCING){
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <main+0x98>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	001a      	movs	r2, r3
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <main+0x9c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	2b0a      	cmp	r3, #10
 800068c:	dd0b      	ble.n	80006a6 <main+0x7a>
			  aux = newState;
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <main+0xa0>)
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <main+0xa4>)
 8000694:	701a      	strb	r2, [r3, #0]
			  newState = setMode;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <main+0x8c>)
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <main+0xa0>)
 800069c:	701a      	strb	r2, [r3, #0]
			  setMode = aux;
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <main+0xa4>)
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <main+0x8c>)
 80006a4:	701a      	strb	r2, [r3, #0]
		  }
		  brefBoucingTime = boucingTime;
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <main+0x98>)
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <main+0x9c>)
 80006ac:	701a      	strb	r2, [r3, #0]
	  }

	  Twist_disp();
 80006ae:	f000 fa7f 	bl	8000bb0 <Twist_disp>
	  if (setMode) Keyboard_check();
 80006b2:	e7c9      	b.n	8000648 <main+0x1c>
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	20000085 	.word	0x20000085
 80006bc:	50000800 	.word	0x50000800
 80006c0:	20000087 	.word	0x20000087
 80006c4:	20000088 	.word	0x20000088
 80006c8:	20000089 	.word	0x20000089
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000086 	.word	0x20000086

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b095      	sub	sp, #84	@ 0x54
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	2418      	movs	r4, #24
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2338      	movs	r3, #56	@ 0x38
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f001 febf 	bl	8002468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2314      	movs	r3, #20
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f001 feb8 	bl	8002468 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <SystemClock_Config+0xac>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xb0>)
 80006fe:	401a      	ands	r2, r3
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <SystemClock_Config+0xac>)
 8000702:	2180      	movs	r1, #128	@ 0x80
 8000704:	0109      	lsls	r1, r1, #4
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	0021      	movs	r1, r4
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2202      	movs	r2, #2
 8000710:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2201      	movs	r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2210      	movs	r2, #16
 800071c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2202      	movs	r2, #2
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	0412      	lsls	r2, r2, #16
 8000736:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	187b      	adds	r3, r7, r1
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fea2 	bl	8001484 <HAL_RCC_OscConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000744:	f000 fab0 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	220f      	movs	r2, #15
 800074c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2203      	movs	r2, #3
 8000752:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2100      	movs	r1, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fa4e 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000774:	f000 fa98 	bl	8000ca8 <Error_Handler>
  }
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b015      	add	sp, #84	@ 0x54
 800077e:	bd90      	pop	{r4, r7, pc}
 8000780:	40007000 	.word	0x40007000
 8000784:	ffffe7ff 	.word	0xffffe7ff

08000788 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if (!setMode) miliseconds++;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b03      	ldr	r3, [pc, #12]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000085 	.word	0x20000085
 80007b0:	20000083 	.word	0x20000083

080007b4 <Keyboard_check>:

void Keyboard_check(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	switch(atualColumn){
 80007b8:	4b56      	ldr	r3, [pc, #344]	@ (8000914 <Keyboard_check+0x160>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d070      	beq.n	80008a2 <Keyboard_check+0xee>
 80007c0:	dd00      	ble.n	80007c4 <Keyboard_check+0x10>
 80007c2:	e0a3      	b.n	800090c <Keyboard_check+0x158>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d002      	beq.n	80007ce <Keyboard_check+0x1a>
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d035      	beq.n	8000838 <Keyboard_check+0x84>
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 2);

			atualColumn = 0;
			break;
	}
}
 80007cc:	e09e      	b.n	800090c <Keyboard_check+0x158>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 0);
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4851      	ldr	r0, [pc, #324]	@ (8000918 <Keyboard_check+0x164>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	0019      	movs	r1, r3
 80007d8:	f000 fe37 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
 80007dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000918 <Keyboard_check+0x164>)
 80007de:	2201      	movs	r2, #1
 80007e0:	2140      	movs	r1, #64	@ 0x40
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fe31 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);
 80007e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000918 <Keyboard_check+0x164>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	2120      	movs	r1, #32
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fe2b 	bl	800144a <HAL_GPIO_WritePin>
			Line_Check(LINE_01_GPIO_Port, LINE_01_Pin, 0, 0);
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	0119      	lsls	r1, r3, #4
 80007f8:	4848      	ldr	r0, [pc, #288]	@ (800091c <Keyboard_check+0x168>)
 80007fa:	2300      	movs	r3, #0
 80007fc:	2200      	movs	r2, #0
 80007fe:	f000 f88f 	bl	8000920 <Line_Check>
			Line_Check(LINE_02_GPIO_Port, LINE_02_Pin, 1, 0);
 8000802:	2380      	movs	r3, #128	@ 0x80
 8000804:	0159      	lsls	r1, r3, #5
 8000806:	4845      	ldr	r0, [pc, #276]	@ (800091c <Keyboard_check+0x168>)
 8000808:	2300      	movs	r3, #0
 800080a:	2201      	movs	r2, #1
 800080c:	f000 f888 	bl	8000920 <Line_Check>
			Line_Check(LINE_03_GPIO_Port, LINE_03_Pin, 2, 0);
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	0119      	lsls	r1, r3, #4
 8000814:	23a0      	movs	r3, #160	@ 0xa0
 8000816:	05d8      	lsls	r0, r3, #23
 8000818:	2300      	movs	r3, #0
 800081a:	2202      	movs	r2, #2
 800081c:	f000 f880 	bl	8000920 <Line_Check>
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 0);
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	0159      	lsls	r1, r3, #5
 8000824:	23a0      	movs	r3, #160	@ 0xa0
 8000826:	05d8      	lsls	r0, r3, #23
 8000828:	2300      	movs	r3, #0
 800082a:	2203      	movs	r2, #3
 800082c:	f000 f878 	bl	8000920 <Line_Check>
			atualColumn = 1;
 8000830:	4b38      	ldr	r3, [pc, #224]	@ (8000914 <Keyboard_check+0x160>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
			break;
 8000836:	e069      	b.n	800090c <Keyboard_check+0x158>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4836      	ldr	r0, [pc, #216]	@ (8000918 <Keyboard_check+0x164>)
 800083e:	2201      	movs	r2, #1
 8000840:	0019      	movs	r1, r3
 8000842:	f000 fe02 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 0);
 8000846:	4b34      	ldr	r3, [pc, #208]	@ (8000918 <Keyboard_check+0x164>)
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fdfc 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);
 8000852:	4b31      	ldr	r3, [pc, #196]	@ (8000918 <Keyboard_check+0x164>)
 8000854:	2201      	movs	r2, #1
 8000856:	2120      	movs	r1, #32
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fdf6 	bl	800144a <HAL_GPIO_WritePin>
			Line_Check(LINE_01_GPIO_Port, LINE_01_Pin, 0, 1);
 800085e:	2380      	movs	r3, #128	@ 0x80
 8000860:	0119      	lsls	r1, r3, #4
 8000862:	482e      	ldr	r0, [pc, #184]	@ (800091c <Keyboard_check+0x168>)
 8000864:	2301      	movs	r3, #1
 8000866:	2200      	movs	r2, #0
 8000868:	f000 f85a 	bl	8000920 <Line_Check>
			Line_Check(LINE_02_GPIO_Port, LINE_02_Pin, 1, 1);
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	0159      	lsls	r1, r3, #5
 8000870:	482a      	ldr	r0, [pc, #168]	@ (800091c <Keyboard_check+0x168>)
 8000872:	2301      	movs	r3, #1
 8000874:	2201      	movs	r2, #1
 8000876:	f000 f853 	bl	8000920 <Line_Check>
			Line_Check(LINE_03_GPIO_Port, LINE_03_Pin, 2, 1);
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	0119      	lsls	r1, r3, #4
 800087e:	23a0      	movs	r3, #160	@ 0xa0
 8000880:	05d8      	lsls	r0, r3, #23
 8000882:	2301      	movs	r3, #1
 8000884:	2202      	movs	r2, #2
 8000886:	f000 f84b 	bl	8000920 <Line_Check>
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 1);
 800088a:	2380      	movs	r3, #128	@ 0x80
 800088c:	0159      	lsls	r1, r3, #5
 800088e:	23a0      	movs	r3, #160	@ 0xa0
 8000890:	05d8      	lsls	r0, r3, #23
 8000892:	2301      	movs	r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	f000 f843 	bl	8000920 <Line_Check>
			atualColumn = 2;
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <Keyboard_check+0x160>)
 800089c:	2202      	movs	r2, #2
 800089e:	701a      	strb	r2, [r3, #0]
			break;
 80008a0:	e034      	b.n	800090c <Keyboard_check+0x158>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
 80008a2:	2380      	movs	r3, #128	@ 0x80
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	481c      	ldr	r0, [pc, #112]	@ (8000918 <Keyboard_check+0x164>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	0019      	movs	r1, r3
 80008ac:	f000 fdcd 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <Keyboard_check+0x164>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	2140      	movs	r1, #64	@ 0x40
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fdc7 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 0);
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <Keyboard_check+0x164>)
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fdc1 	bl	800144a <HAL_GPIO_WritePin>
			Line_Check(LINE_01_GPIO_Port, LINE_01_Pin, 0, 2);
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	0119      	lsls	r1, r3, #4
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <Keyboard_check+0x168>)
 80008ce:	2302      	movs	r3, #2
 80008d0:	2200      	movs	r2, #0
 80008d2:	f000 f825 	bl	8000920 <Line_Check>
			Line_Check(LINE_02_GPIO_Port, LINE_02_Pin, 1, 2);
 80008d6:	2380      	movs	r3, #128	@ 0x80
 80008d8:	0159      	lsls	r1, r3, #5
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <Keyboard_check+0x168>)
 80008dc:	2302      	movs	r3, #2
 80008de:	2201      	movs	r2, #1
 80008e0:	f000 f81e 	bl	8000920 <Line_Check>
			Line_Check(LINE_03_GPIO_Port, LINE_03_Pin, 2, 2);
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	0119      	lsls	r1, r3, #4
 80008e8:	23a0      	movs	r3, #160	@ 0xa0
 80008ea:	05d8      	lsls	r0, r3, #23
 80008ec:	2302      	movs	r3, #2
 80008ee:	2202      	movs	r2, #2
 80008f0:	f000 f816 	bl	8000920 <Line_Check>
			Line_Check(LINE_04_GPIO_Port, LINE_04_Pin, 3, 2);
 80008f4:	2380      	movs	r3, #128	@ 0x80
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	23a0      	movs	r3, #160	@ 0xa0
 80008fa:	05d8      	lsls	r0, r3, #23
 80008fc:	2302      	movs	r3, #2
 80008fe:	2203      	movs	r2, #3
 8000900:	f000 f80e 	bl	8000920 <Line_Check>
			atualColumn = 0;
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <Keyboard_check+0x160>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
			break;
 800090a:	46c0      	nop			@ (mov r8, r8)
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	2000008a 	.word	0x2000008a
 8000918:	50000800 	.word	0x50000800
 800091c:	50000400 	.word	0x50000400

08000920 <Line_Check>:

void Line_Check(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t atualLine, uint8_t atualColumn){
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	000c      	movs	r4, r1
 800092a:	0010      	movs	r0, r2
 800092c:	0019      	movs	r1, r3
 800092e:	1cbb      	adds	r3, r7, #2
 8000930:	1c22      	adds	r2, r4, #0
 8000932:	801a      	strh	r2, [r3, #0]
 8000934:	1c7b      	adds	r3, r7, #1
 8000936:	1c02      	adds	r2, r0, #0
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	003b      	movs	r3, r7
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	701a      	strb	r2, [r3, #0]
	int bline = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000940:	1cbb      	adds	r3, r7, #2
 8000942:	881a      	ldrh	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fd61 	bl	8001410 <HAL_GPIO_ReadPin>
 800094e:	0003      	movs	r3, r0
 8000950:	60fb      	str	r3, [r7, #12]

	if (!bline){
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d14a      	bne.n	80009ee <Line_Check+0xce>
		boucingTime = HAL_GetTick();
 8000958:	f000 fad8 	bl	8000f0c <HAL_GetTick>
 800095c:	0003      	movs	r3, r0
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <Line_Check+0xd8>)
 8000962:	701a      	strb	r2, [r3, #0]

		if (boucingTime - brefBoucingTime > DELAY_BOUCING){
 8000964:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <Line_Check+0xd8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <Line_Check+0xdc>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	2b0a      	cmp	r3, #10
 8000972:	dd38      	ble.n	80009e6 <Line_Check+0xc6>
			result = tmap[atualLine][atualColumn];
 8000974:	1c7b      	adds	r3, r7, #1
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	003b      	movs	r3, r7
 800097a:	7819      	ldrb	r1, [r3, #0]
 800097c:	4820      	ldr	r0, [pc, #128]	@ (8000a00 <Line_Check+0xe0>)
 800097e:	0013      	movs	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	189b      	adds	r3, r3, r2
 8000984:	18c3      	adds	r3, r0, r3
 8000986:	5c5a      	ldrb	r2, [r3, r1]
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <Line_Check+0xe4>)
 800098a:	701a      	strb	r2, [r3, #0]

			switch(result){
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <Line_Check+0xe4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b0a      	cmp	r3, #10
 8000992:	d002      	beq.n	800099a <Line_Check+0x7a>
 8000994:	2b0c      	cmp	r3, #12
 8000996:	d007      	beq.n	80009a8 <Line_Check+0x88>
 8000998:	e00d      	b.n	80009b6 <Line_Check+0x96>
				case 10:
					atualDisp++;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <Line_Check+0xe8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <Line_Check+0xe8>)
 80009a4:	701a      	strb	r2, [r3, #0]
					break;
 80009a6:	e01e      	b.n	80009e6 <Line_Check+0xc6>

				case 12:
					atualDisp--;
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <Line_Check+0xe8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <Line_Check+0xe8>)
 80009b2:	701a      	strb	r2, [r3, #0]
					break;
 80009b4:	e017      	b.n	80009e6 <Line_Check+0xc6>

				default:
					if (atualDisp == 0) countCent = result;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <Line_Check+0xe8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <Line_Check+0xa6>
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <Line_Check+0xe4>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <Line_Check+0xec>)
 80009c4:	701a      	strb	r2, [r3, #0]
					if (atualDisp == 1) countDeca = result;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <Line_Check+0xe8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d103      	bne.n	80009d6 <Line_Check+0xb6>
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <Line_Check+0xe4>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <Line_Check+0xf0>)
 80009d4:	701a      	strb	r2, [r3, #0]
					if (atualDisp == 2) count     = result;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <Line_Check+0xe8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d103      	bne.n	80009e6 <Line_Check+0xc6>
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <Line_Check+0xe4>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <Line_Check+0xf4>)
 80009e4:	701a      	strb	r2, [r3, #0]
			}


		}

		brefBoucingTime = boucingTime;
 80009e6:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <Line_Check+0xd8>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <Line_Check+0xdc>)
 80009ec:	701a      	strb	r2, [r3, #0]
	}
}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b005      	add	sp, #20
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	20000088 	.word	0x20000088
 80009fc:	20000089 	.word	0x20000089
 8000a00:	2000004c 	.word	0x2000004c
 8000a04:	2000008b 	.word	0x2000008b
 8000a08:	20000084 	.word	0x20000084
 8000a0c:	20000082 	.word	0x20000082
 8000a10:	20000081 	.word	0x20000081
 8000a14:	20000080 	.word	0x20000080

08000a18 <Show_disp>:

void Show_disp(uint8_t atualCount){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	0002      	movs	r2, r0
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PORT_A_GPIO_Port, PORT_A_Pin, numbers[atualCount][0]);
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	4933      	ldr	r1, [pc, #204]	@ (8000af8 <Show_disp+0xe0>)
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	5c5a      	ldrb	r2, [r3, r1]
 8000a32:	2380      	movs	r3, #128	@ 0x80
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4831      	ldr	r0, [pc, #196]	@ (8000afc <Show_disp+0xe4>)
 8000a38:	0019      	movs	r1, r3
 8000a3a:	f000 fd06 	bl	800144a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_B_GPIO_Port, PORT_B_Pin, numbers[atualCount][1]);
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	492d      	ldr	r1, [pc, #180]	@ (8000af8 <Show_disp+0xe0>)
 8000a44:	0013      	movs	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	1a9b      	subs	r3, r3, r2
 8000a4a:	18cb      	adds	r3, r1, r3
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4829      	ldr	r0, [pc, #164]	@ (8000afc <Show_disp+0xe4>)
 8000a56:	0019      	movs	r1, r3
 8000a58:	f000 fcf7 	bl	800144a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_C_GPIO_Port, PORT_C_Pin, numbers[atualCount][2]);
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4925      	ldr	r1, [pc, #148]	@ (8000af8 <Show_disp+0xe0>)
 8000a62:	0013      	movs	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	18cb      	adds	r3, r1, r3
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2120      	movs	r1, #32
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fce8 	bl	800144a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_D_GPIO_Port, PORT_D_Pin, numbers[atualCount][3]);
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	491e      	ldr	r1, [pc, #120]	@ (8000af8 <Show_disp+0xe0>)
 8000a80:	0013      	movs	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	18cb      	adds	r3, r1, r3
 8000a88:	3303      	adds	r3, #3
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	23a0      	movs	r3, #160	@ 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2140      	movs	r1, #64	@ 0x40
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fcd9 	bl	800144a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_E_GPIO_Port, PORT_E_Pin, numbers[atualCount][4]);
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4916      	ldr	r1, [pc, #88]	@ (8000af8 <Show_disp+0xe0>)
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	18cb      	adds	r3, r1, r3
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4814      	ldr	r0, [pc, #80]	@ (8000afc <Show_disp+0xe4>)
 8000aac:	001a      	movs	r2, r3
 8000aae:	2140      	movs	r1, #64	@ 0x40
 8000ab0:	f000 fccb 	bl	800144a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_F_GPIO_Port, PORT_F_Pin, numbers[atualCount][5]);
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	490f      	ldr	r1, [pc, #60]	@ (8000af8 <Show_disp+0xe0>)
 8000aba:	0013      	movs	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	18cb      	adds	r3, r1, r3
 8000ac2:	3305      	adds	r3, #5
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <Show_disp+0xe8>)
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	f000 fcbd 	bl	800144a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_G_GPIO_Port, PORT_G_Pin, numbers[atualCount][6]);
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	4908      	ldr	r1, [pc, #32]	@ (8000af8 <Show_disp+0xe0>)
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	18cb      	adds	r3, r1, r3
 8000ade:	3306      	adds	r3, #6
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	2380      	movs	r3, #128	@ 0x80
 8000ae4:	0099      	lsls	r1, r3, #2
 8000ae6:	23a0      	movs	r3, #160	@ 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fcad 	bl	800144a <HAL_GPIO_WritePin>
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000004 	.word	0x20000004
 8000afc:	50000400 	.word	0x50000400
 8000b00:	50000800 	.word	0x50000800

08000b04 <Verify_disp>:

void Verify_disp(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	switch(atualDisp){
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <Verify_disp+0xa4>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d02f      	beq.n	8000b70 <Verify_disp+0x6c>
 8000b10:	dc43      	bgt.n	8000b9a <Verify_disp+0x96>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <Verify_disp+0x18>
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d015      	beq.n	8000b46 <Verify_disp+0x42>
 8000b1a:	e03e      	b.n	8000b9a <Verify_disp+0x96>
		case 0:
			HAL_GPIO_WritePin(DISP_01_GPIO_Port, DISP_01_Pin, 1);
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <Verify_disp+0xa8>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2120      	movs	r1, #32
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fc91 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_02_GPIO_Port, DISP_02_Pin, 0);
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <Verify_disp+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fc8b 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_03_GPIO_Port, DISP_03_Pin, 0);
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	00d9      	lsls	r1, r3, #3
 8000b38:	23a0      	movs	r3, #160	@ 0xa0
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fc83 	bl	800144a <HAL_GPIO_WritePin>
			break;
 8000b44:	e029      	b.n	8000b9a <Verify_disp+0x96>

		case 1:
			HAL_GPIO_WritePin(DISP_01_GPIO_Port, DISP_01_Pin, 0);
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <Verify_disp+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fc7c 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_02_GPIO_Port, DISP_02_Pin, 1);
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <Verify_disp+0xa8>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fc76 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_03_GPIO_Port, DISP_03_Pin, 0);
 8000b5e:	2380      	movs	r3, #128	@ 0x80
 8000b60:	00d9      	lsls	r1, r3, #3
 8000b62:	23a0      	movs	r3, #160	@ 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	2200      	movs	r2, #0
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fc6e 	bl	800144a <HAL_GPIO_WritePin>
			break;
 8000b6e:	e014      	b.n	8000b9a <Verify_disp+0x96>

		case 2:
			HAL_GPIO_WritePin(DISP_01_GPIO_Port, DISP_01_Pin, 0);
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <Verify_disp+0xa8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fc67 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_02_GPIO_Port, DISP_02_Pin, 0);
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <Verify_disp+0xa8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2108      	movs	r1, #8
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fc61 	bl	800144a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_03_GPIO_Port, DISP_03_Pin, 1);
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	00d9      	lsls	r1, r3, #3
 8000b8c:	23a0      	movs	r3, #160	@ 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	2201      	movs	r2, #1
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 fc59 	bl	800144a <HAL_GPIO_WritePin>
			break;
 8000b98:	46c0      	nop			@ (mov r8, r8)
		}
	// Time for stable info.
	HAL_Delay(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 f9c0 	bl	8000f20 <HAL_Delay>
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	50000400 	.word	0x50000400

08000bb0 <Twist_disp>:

void Twist_disp(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	switch(atualDisp){
 8000bb4:	4b36      	ldr	r3, [pc, #216]	@ (8000c90 <Twist_disp+0xe0>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d023      	beq.n	8000c04 <Twist_disp+0x54>
 8000bbc:	dc36      	bgt.n	8000c2c <Twist_disp+0x7c>
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <Twist_disp+0x18>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d00f      	beq.n	8000be6 <Twist_disp+0x36>
 8000bc6:	e031      	b.n	8000c2c <Twist_disp+0x7c>
		case 0:
			Show_disp(countCent);
 8000bc8:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <Twist_disp+0xe4>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff23 	bl	8000a18 <Show_disp>
			Verify_disp();
 8000bd2:	f7ff ff97 	bl	8000b04 <Verify_disp>
			if (!setMode) atualDisp = 1;
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <Twist_disp+0xe8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d121      	bne.n	8000c22 <Twist_disp+0x72>
 8000bde:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <Twist_disp+0xe0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
			break;
 8000be4:	e01d      	b.n	8000c22 <Twist_disp+0x72>

		case 1:
			Show_disp(countDeca);
 8000be6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <Twist_disp+0xec>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff ff14 	bl	8000a18 <Show_disp>
			Verify_disp();
 8000bf0:	f7ff ff88 	bl	8000b04 <Verify_disp>
			if (!setMode) atualDisp = 2;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	@ (8000c98 <Twist_disp+0xe8>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d114      	bne.n	8000c26 <Twist_disp+0x76>
 8000bfc:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <Twist_disp+0xe0>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	701a      	strb	r2, [r3, #0]
			break;
 8000c02:	e010      	b.n	8000c26 <Twist_disp+0x76>

		case 2:
			Show_disp(count);
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <Twist_disp+0xf0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff05 	bl	8000a18 <Show_disp>
			Verify_disp();
 8000c0e:	f7ff ff79 	bl	8000b04 <Verify_disp>
			if (!setMode) atualDisp = 0;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <Twist_disp+0xe8>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d107      	bne.n	8000c2a <Twist_disp+0x7a>
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <Twist_disp+0xe0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
			break;
 8000c20:	e003      	b.n	8000c2a <Twist_disp+0x7a>
			break;
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	e002      	b.n	8000c2c <Twist_disp+0x7c>
			break;
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	e000      	b.n	8000c2c <Twist_disp+0x7c>
			break;
 8000c2a:	46c0      	nop			@ (mov r8, r8)
	}

	if (miliseconds >= 100){
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <Twist_disp+0xf4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b63      	cmp	r3, #99	@ 0x63
 8000c32:	d908      	bls.n	8000c46 <Twist_disp+0x96>
		miliseconds = 0;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <Twist_disp+0xf4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
		count++;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <Twist_disp+0xf0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <Twist_disp+0xf0>)
 8000c44:	701a      	strb	r2, [r3, #0]
	}

	if (count >= 10){
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <Twist_disp+0xf0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b09      	cmp	r3, #9
 8000c4c:	d908      	bls.n	8000c60 <Twist_disp+0xb0>
		count = 0;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <Twist_disp+0xf0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		countDeca++;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <Twist_disp+0xec>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <Twist_disp+0xec>)
 8000c5e:	701a      	strb	r2, [r3, #0]
	}

	if (countDeca >= 10){
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <Twist_disp+0xec>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b09      	cmp	r3, #9
 8000c66:	d908      	bls.n	8000c7a <Twist_disp+0xca>
		countDeca = 0;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <Twist_disp+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		countCent++;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <Twist_disp+0xe4>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <Twist_disp+0xe4>)
 8000c78:	701a      	strb	r2, [r3, #0]
	}

	if(countCent >= 10){
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <Twist_disp+0xe4>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d902      	bls.n	8000c88 <Twist_disp+0xd8>
		countCent = 0;
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <Twist_disp+0xe4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
	}
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000084 	.word	0x20000084
 8000c94:	20000082 	.word	0x20000082
 8000c98:	20000085 	.word	0x20000085
 8000c9c:	20000081 	.word	0x20000081
 8000ca0:	20000080 	.word	0x20000080
 8000ca4:	20000083 	.word	0x20000083

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0549      	lsls	r1, r1, #21
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f8f0 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <TIM6_DAC_IRQHandler+0x14>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 f9f2 	bl	8002100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	2000008c 	.word	0x2000008c

08000d28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2308      	movs	r3, #8
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f001 fb90 	bl	8002468 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d4a:	4a16      	ldr	r2, [pc, #88]	@ (8000da4 <MX_TIM6_Init+0x70>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12000-1;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d50:	4a15      	ldr	r2, [pc, #84]	@ (8000da8 <MX_TIM6_Init+0x74>)
 8000d52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d5c:	2209      	movs	r2, #9
 8000d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 f93d 	bl	8001fe8 <HAL_TIM_Base_Init>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d72:	f7ff ff99 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d82:	003a      	movs	r2, r7
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_TIM6_Init+0x6c>)
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 fb15 	bl	80023b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000d92:	f7ff ff89 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	2000008c 	.word	0x2000008c
 8000da4:	40001000 	.word	0x40001000
 8000da8:	00002edf 	.word	0x00002edf

08000dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <HAL_TIM_Base_MspInit+0x38>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10d      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2011      	movs	r0, #17
 8000dd0:	f000 f976 	bl	80010c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f000 f988 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	40001000 	.word	0x40001000
 8000de8:	40021000 	.word	0x40021000

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f7ff ff9a 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f001 fb2d 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fc05 	bl	800062c <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e30:	08002504 	.word	0x08002504
  ldr r2, =_sbss
 8000e34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e38:	200000d0 	.word	0x200000d0

08000e3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_COMP_IRQHandler>
	...

08000e40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <HAL_Init+0x3c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_Init+0x3c>)
 8000e52:	2140      	movs	r1, #64	@ 0x40
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 f811 	bl	8000e80 <HAL_InitTick>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e001      	b.n	8000e6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6a:	f7ff ff23 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_InitTick+0x5c>)
 8000e8a:	681c      	ldr	r4, [r3, #0]
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_InitTick+0x60>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	0019      	movs	r1, r3
 8000e92:	23fa      	movs	r3, #250	@ 0xfa
 8000e94:	0098      	lsls	r0, r3, #2
 8000e96:	f7ff f937 	bl	8000108 <__udivsi3>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f7ff f932 	bl	8000108 <__udivsi3>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 f92f 	bl	800110a <HAL_SYSTICK_Config>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e00f      	b.n	8000ed4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d80b      	bhi.n	8000ed2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 f8fc 	bl	80010c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x64>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b003      	add	sp, #12
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	20000058 	.word	0x20000058
 8000ee0:	20000060 	.word	0x20000060
 8000ee4:	2000005c 	.word	0x2000005c

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_IncTick+0x1c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x20>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	18d2      	adds	r2, r2, r3
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_IncTick+0x20>)
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	20000060 	.word	0x20000060
 8000f08:	200000cc 	.word	0x200000cc

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b02      	ldr	r3, [pc, #8]	@ (8000f1c <HAL_GetTick+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	200000cc 	.word	0x200000cc

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff fff0 	bl	8000f0c <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	001a      	movs	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	189b      	adds	r3, r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	f7ff ffe0 	bl	8000f0c <HAL_GetTick>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	20000060 	.word	0x20000060

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	0002      	movs	r2, r0
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f7a:	d809      	bhi.n	8000f90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	001a      	movs	r2, r3
 8000f82:	231f      	movs	r3, #31
 8000f84:	401a      	ands	r2, r3
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <__NVIC_EnableIRQ+0x30>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
  }
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fb0:	d828      	bhi.n	8001004 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <__NVIC_SetPriority+0xd4>)
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	33c0      	adds	r3, #192	@ 0xc0
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	589b      	ldr	r3, [r3, r2]
 8000fc2:	1dfa      	adds	r2, r7, #7
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	2203      	movs	r2, #3
 8000fca:	400a      	ands	r2, r1
 8000fcc:	00d2      	lsls	r2, r2, #3
 8000fce:	21ff      	movs	r1, #255	@ 0xff
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	43d2      	mvns	r2, r2
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	019b      	lsls	r3, r3, #6
 8000fde:	22ff      	movs	r2, #255	@ 0xff
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2303      	movs	r3, #3
 8000fea:	4003      	ands	r3, r0
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff0:	481f      	ldr	r0, [pc, #124]	@ (8001070 <__NVIC_SetPriority+0xd4>)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	33c0      	adds	r3, #192	@ 0xc0
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001002:	e031      	b.n	8001068 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001004:	4a1b      	ldr	r2, [pc, #108]	@ (8001074 <__NVIC_SetPriority+0xd8>)
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	0019      	movs	r1, r3
 800100c:	230f      	movs	r3, #15
 800100e:	400b      	ands	r3, r1
 8001010:	3b08      	subs	r3, #8
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3306      	adds	r3, #6
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	3304      	adds	r3, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1dfa      	adds	r2, r7, #7
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	0011      	movs	r1, r2
 8001024:	2203      	movs	r2, #3
 8001026:	400a      	ands	r2, r1
 8001028:	00d2      	lsls	r2, r2, #3
 800102a:	21ff      	movs	r1, #255	@ 0xff
 800102c:	4091      	lsls	r1, r2
 800102e:	000a      	movs	r2, r1
 8001030:	43d2      	mvns	r2, r2
 8001032:	401a      	ands	r2, r3
 8001034:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	019b      	lsls	r3, r3, #6
 800103a:	22ff      	movs	r2, #255	@ 0xff
 800103c:	401a      	ands	r2, r3
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	0018      	movs	r0, r3
 8001044:	2303      	movs	r3, #3
 8001046:	4003      	ands	r3, r0
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104c:	4809      	ldr	r0, [pc, #36]	@ (8001074 <__NVIC_SetPriority+0xd8>)
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	001c      	movs	r4, r3
 8001054:	230f      	movs	r3, #15
 8001056:	4023      	ands	r3, r4
 8001058:	3b08      	subs	r3, #8
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	430a      	orrs	r2, r1
 800105e:	3306      	adds	r3, #6
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	18c3      	adds	r3, r0, r3
 8001064:	3304      	adds	r3, #4
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b003      	add	sp, #12
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	045b      	lsls	r3, r3, #17
 8001088:	429a      	cmp	r2, r3
 800108a:	d301      	bcc.n	8001090 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108c:	2301      	movs	r3, #1
 800108e:	e010      	b.n	80010b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <SysTick_Config+0x44>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	3a01      	subs	r2, #1
 8001096:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001098:	2301      	movs	r3, #1
 800109a:	425b      	negs	r3, r3
 800109c:	2103      	movs	r1, #3
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff7c 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x44>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x44>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	210f      	movs	r1, #15
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	1c02      	adds	r2, r0, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	0002      	movs	r2, r0
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff ff33 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff ffaf 	bl	8001078 <SysTick_Config>
 800111a:	0003      	movs	r3, r0
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800113a:	e14f      	b.n	80013dc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x30>
 8001152:	e140      	b.n	80013d6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	409a      	lsls	r2, r3
 800118e:	0013      	movs	r3, r2
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	2201      	movs	r2, #1
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	4013      	ands	r3, r2
 8001212:	2b02      	cmp	r3, #2
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	58d3      	ldr	r3, [r2, r3]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2207      	movs	r2, #7
 8001228:	4013      	ands	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2107      	movs	r1, #7
 8001242:	400b      	ands	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	6939      	ldr	r1, [r7, #16]
 800125c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	401a      	ands	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	23c0      	movs	r3, #192	@ 0xc0
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_GPIO_Init+0x17c>
 800129e:	e09a      	b.n	80013d6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a4:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ac:	4a52      	ldr	r2, [pc, #328]	@ (80013f8 <HAL_GPIO_Init+0x2d4>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	589b      	ldr	r3, [r3, r2]
 80012b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23a0      	movs	r3, #160	@ 0xa0
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x1ea>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a47      	ldr	r2, [pc, #284]	@ (80013fc <HAL_GPIO_Init+0x2d8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x1e6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a46      	ldr	r2, [pc, #280]	@ (8001400 <HAL_GPIO_Init+0x2dc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x1e2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a45      	ldr	r2, [pc, #276]	@ (8001404 <HAL_GPIO_Init+0x2e0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x1de>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a44      	ldr	r2, [pc, #272]	@ (8001408 <HAL_GPIO_Init+0x2e4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x1da>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012fe:	2306      	movs	r3, #6
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x1ec>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x1ec>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x1ec>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x1ec>
 800130e:	2300      	movs	r3, #0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	2103      	movs	r1, #3
 8001314:	400a      	ands	r2, r1
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	@ (80013f8 <HAL_GPIO_Init+0x2d4>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	035b      	lsls	r3, r3, #13
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001352:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	039b      	lsls	r3, r3, #14
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	029b      	lsls	r3, r3, #10
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	4013      	ands	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_GPIO_Init+0x2e8>)
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	40da      	lsrs	r2, r3
 80013e4:	1e13      	subs	r3, r2, #0
 80013e6:	d000      	beq.n	80013ea <HAL_GPIO_Init+0x2c6>
 80013e8:	e6a8      	b.n	800113c <HAL_GPIO_Init+0x18>
  }
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b006      	add	sp, #24
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	50000400 	.word	0x50000400
 8001400:	50000800 	.word	0x50000800
 8001404:	50000c00 	.word	0x50000c00
 8001408:	50001c00 	.word	0x50001c00
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	000a      	movs	r2, r1
 800141a:	1cbb      	adds	r3, r7, #2
 800141c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	1cba      	adds	r2, r7, #2
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	4013      	ands	r3, r2
 8001428:	d004      	beq.n	8001434 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800142a:	230f      	movs	r3, #15
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e003      	b.n	800143c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800143c:	230f      	movs	r3, #15
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	781b      	ldrb	r3, [r3, #0]
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	0008      	movs	r0, r1
 8001454:	0011      	movs	r1, r2
 8001456:	1cbb      	adds	r3, r7, #2
 8001458:	1c02      	adds	r2, r0, #0
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	1c7b      	adds	r3, r7, #1
 800145e:	1c0a      	adds	r2, r1, #0
 8001460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001462:	1c7b      	adds	r3, r7, #1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	1cbb      	adds	r3, r7, #2
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001472:	e003      	b.n	800147c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f000 fbaf 	bl	8001bf6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001498:	4bcf      	ldr	r3, [pc, #828]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	220c      	movs	r2, #12
 800149e:	4013      	ands	r3, r2
 80014a0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a2:	4bcd      	ldr	r3, [pc, #820]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	025b      	lsls	r3, r3, #9
 80014aa:	4013      	ands	r3, r2
 80014ac:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x36>
 80014b8:	e07e      	b.n	80015b8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d007      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d112      	bne.n	80014ec <HAL_RCC_OscConfig+0x68>
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d10d      	bne.n	80014ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	4bc1      	ldr	r3, [pc, #772]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	029b      	lsls	r3, r3, #10
 80014d8:	4013      	ands	r3, r2
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x5a>
 80014dc:	e06b      	b.n	80015b6 <HAL_RCC_OscConfig+0x132>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d167      	bne.n	80015b6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f000 fb85 	bl	8001bf6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x84>
 80014f8:	4bb7      	ldr	r3, [pc, #732]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4bb6      	ldr	r3, [pc, #728]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80014fe:	2180      	movs	r1, #128	@ 0x80
 8001500:	0249      	lsls	r1, r1, #9
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e027      	b.n	8001558 <HAL_RCC_OscConfig+0xd4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	23a0      	movs	r3, #160	@ 0xa0
 800150e:	02db      	lsls	r3, r3, #11
 8001510:	429a      	cmp	r2, r3
 8001512:	d10e      	bne.n	8001532 <HAL_RCC_OscConfig+0xae>
 8001514:	4bb0      	ldr	r3, [pc, #704]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4baf      	ldr	r3, [pc, #700]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800151a:	2180      	movs	r1, #128	@ 0x80
 800151c:	02c9      	lsls	r1, r1, #11
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4bad      	ldr	r3, [pc, #692]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4bac      	ldr	r3, [pc, #688]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	0249      	lsls	r1, r1, #9
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e012      	b.n	8001558 <HAL_RCC_OscConfig+0xd4>
 8001532:	4ba9      	ldr	r3, [pc, #676]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4ba8      	ldr	r3, [pc, #672]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001538:	49a8      	ldr	r1, [pc, #672]	@ (80017dc <HAL_RCC_OscConfig+0x358>)
 800153a:	400a      	ands	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4ba6      	ldr	r3, [pc, #664]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4ba2      	ldr	r3, [pc, #648]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4ba1      	ldr	r3, [pc, #644]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001552:	49a3      	ldr	r1, [pc, #652]	@ (80017e0 <HAL_RCC_OscConfig+0x35c>)
 8001554:	400a      	ands	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fcd4 	bl	8000f0c <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001568:	e009      	b.n	800157e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156a:	f7ff fccf 	bl	8000f0c <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	@ 0x64
 8001576:	d902      	bls.n	800157e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	f000 fb3c 	bl	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800157e:	4b96      	ldr	r3, [pc, #600]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	029b      	lsls	r3, r3, #10
 8001586:	4013      	ands	r3, r2
 8001588:	d0ef      	beq.n	800156a <HAL_RCC_OscConfig+0xe6>
 800158a:	e015      	b.n	80015b8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fcbe 	bl	8000f0c <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001596:	f7ff fcb9 	bl	8000f0c <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b64      	cmp	r3, #100	@ 0x64
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e326      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015a8:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x112>
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d100      	bne.n	80015c4 <HAL_RCC_OscConfig+0x140>
 80015c2:	e08b      	b.n	80016dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d13e      	bne.n	8001654 <HAL_RCC_OscConfig+0x1d0>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d13b      	bne.n	8001654 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015dc:	4b7e      	ldr	r3, [pc, #504]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2204      	movs	r2, #4
 80015e2:	4013      	ands	r3, r2
 80015e4:	d004      	beq.n	80015f0 <HAL_RCC_OscConfig+0x16c>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e302      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b79      	ldr	r3, [pc, #484]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a7b      	ldr	r2, [pc, #492]	@ (80017e4 <HAL_RCC_OscConfig+0x360>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	021a      	lsls	r2, r3, #8
 8001600:	4b75      	ldr	r3, [pc, #468]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001606:	4b74      	ldr	r3, [pc, #464]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2209      	movs	r2, #9
 800160c:	4393      	bics	r3, r2
 800160e:	0019      	movs	r1, r3
 8001610:	4b71      	ldr	r3, [pc, #452]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001618:	f000 fc40 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 800161c:	0001      	movs	r1, r0
 800161e:	4b6e      	ldr	r3, [pc, #440]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	220f      	movs	r2, #15
 8001626:	4013      	ands	r3, r2
 8001628:	4a6f      	ldr	r2, [pc, #444]	@ (80017e8 <HAL_RCC_OscConfig+0x364>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	000a      	movs	r2, r1
 800162e:	40da      	lsrs	r2, r3
 8001630:	4b6e      	ldr	r3, [pc, #440]	@ (80017ec <HAL_RCC_OscConfig+0x368>)
 8001632:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001634:	4b6e      	ldr	r3, [pc, #440]	@ (80017f0 <HAL_RCC_OscConfig+0x36c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2513      	movs	r5, #19
 800163a:	197c      	adds	r4, r7, r5
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fc1f 	bl	8000e80 <HAL_InitTick>
 8001642:	0003      	movs	r3, r0
 8001644:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001646:	197b      	adds	r3, r7, r5
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d046      	beq.n	80016dc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800164e:	197b      	adds	r3, r7, r5
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	e2d0      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d027      	beq.n	80016aa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800165a:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2209      	movs	r2, #9
 8001660:	4393      	bics	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	4b5c      	ldr	r3, [pc, #368]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc4e 	bl	8000f0c <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fc49 	bl	8000f0c <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e2b6      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2204      	movs	r2, #4
 800168e:	4013      	ands	r3, r2
 8001690:	d0f1      	beq.n	8001676 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a53      	ldr	r2, [pc, #332]	@ (80017e4 <HAL_RCC_OscConfig+0x360>)
 8001698:	4013      	ands	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	021a      	lsls	r2, r3, #8
 80016a2:	4b4d      	ldr	r3, [pc, #308]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b4a      	ldr	r3, [pc, #296]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	438a      	bics	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fc29 	bl	8000f0c <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc24 	bl	8000f0c <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e291      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016d2:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2204      	movs	r2, #4
 80016d8:	4013      	ands	r3, r2
 80016da:	d1f1      	bne.n	80016c0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2210      	movs	r2, #16
 80016e2:	4013      	ands	r3, r2
 80016e4:	d100      	bne.n	80016e8 <HAL_RCC_OscConfig+0x264>
 80016e6:	e0a1      	b.n	800182c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d140      	bne.n	8001770 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x282>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e277      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a3a      	ldr	r2, [pc, #232]	@ (80017f4 <HAL_RCC_OscConfig+0x370>)
 800170c:	4013      	ands	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001714:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	0a19      	lsrs	r1, r3, #8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	061a      	lsls	r2, r3, #24
 8001728:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	0b5b      	lsrs	r3, r3, #13
 8001734:	3301      	adds	r3, #1
 8001736:	2280      	movs	r2, #128	@ 0x80
 8001738:	0212      	lsls	r2, r2, #8
 800173a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	210f      	movs	r1, #15
 8001744:	400b      	ands	r3, r1
 8001746:	4928      	ldr	r1, [pc, #160]	@ (80017e8 <HAL_RCC_OscConfig+0x364>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <HAL_RCC_OscConfig+0x368>)
 800174e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <HAL_RCC_OscConfig+0x36c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2513      	movs	r5, #19
 8001756:	197c      	adds	r4, r7, r5
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fb91 	bl	8000e80 <HAL_InitTick>
 800175e:	0003      	movs	r3, r0
 8001760:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001762:	197b      	adds	r3, r7, r5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d060      	beq.n	800182c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800176a:	197b      	adds	r3, r7, r5
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	e242      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03f      	beq.n	80017f8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001778:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	0049      	lsls	r1, r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fbc1 	bl	8000f0c <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001790:	f7ff fbbc 	bl	8000f0c <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e229      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <HAL_RCC_OscConfig+0x370>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	0a19      	lsrs	r1, r3, #8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	061a      	lsls	r2, r3, #24
 80017d0:	4b01      	ldr	r3, [pc, #4]	@ (80017d8 <HAL_RCC_OscConfig+0x354>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	e029      	b.n	800182c <HAL_RCC_OscConfig+0x3a8>
 80017d8:	40021000 	.word	0x40021000
 80017dc:	fffeffff 	.word	0xfffeffff
 80017e0:	fffbffff 	.word	0xfffbffff
 80017e4:	ffffe0ff 	.word	0xffffe0ff
 80017e8:	080024d8 	.word	0x080024d8
 80017ec:	20000058 	.word	0x20000058
 80017f0:	2000005c 	.word	0x2000005c
 80017f4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f8:	4bbd      	ldr	r3, [pc, #756]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4bbc      	ldr	r3, [pc, #752]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80017fe:	49bd      	ldr	r1, [pc, #756]	@ (8001af4 <HAL_RCC_OscConfig+0x670>)
 8001800:	400a      	ands	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb82 	bl	8000f0c <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800180e:	f7ff fb7d 	bl	8000f0c <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1ea      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001820:	4bb3      	ldr	r3, [pc, #716]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2208      	movs	r2, #8
 8001832:	4013      	ands	r3, r2
 8001834:	d036      	beq.n	80018a4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4bac      	ldr	r3, [pc, #688]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001840:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001842:	4bab      	ldr	r3, [pc, #684]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001844:	2101      	movs	r1, #1
 8001846:	430a      	orrs	r2, r1
 8001848:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb5f 	bl	8000f0c <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fb5a 	bl	8000f0c <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1c7      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001866:	4ba2      	ldr	r3, [pc, #648]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d0f1      	beq.n	8001854 <HAL_RCC_OscConfig+0x3d0>
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001872:	4b9f      	ldr	r3, [pc, #636]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001876:	4b9e      	ldr	r3, [pc, #632]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001878:	2101      	movs	r1, #1
 800187a:	438a      	bics	r2, r1
 800187c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb45 	bl	8000f0c <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fb40 	bl	8000f0c <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1ad      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800189a:	4b95      	ldr	r3, [pc, #596]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 800189c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d1f1      	bne.n	8001888 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2204      	movs	r2, #4
 80018aa:	4013      	ands	r3, r2
 80018ac:	d100      	bne.n	80018b0 <HAL_RCC_OscConfig+0x42c>
 80018ae:	e0ae      	b.n	8001a0e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b0:	2027      	movs	r0, #39	@ 0x27
 80018b2:	183b      	adds	r3, r7, r0
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b8:	4b8d      	ldr	r3, [pc, #564]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80018ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	055b      	lsls	r3, r3, #21
 80018c0:	4013      	ands	r3, r2
 80018c2:	d109      	bne.n	80018d8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80018c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018c8:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	0549      	lsls	r1, r1, #21
 80018ce:	430a      	orrs	r2, r1
 80018d0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80018d2:	183b      	adds	r3, r7, r0
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b87      	ldr	r3, [pc, #540]	@ (8001af8 <HAL_RCC_OscConfig+0x674>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d11a      	bne.n	800191a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e4:	4b84      	ldr	r3, [pc, #528]	@ (8001af8 <HAL_RCC_OscConfig+0x674>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b83      	ldr	r3, [pc, #524]	@ (8001af8 <HAL_RCC_OscConfig+0x674>)
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	0049      	lsls	r1, r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb0b 	bl	8000f0c <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fc:	f7ff fb06 	bl	8000f0c <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e173      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b7a      	ldr	r3, [pc, #488]	@ (8001af8 <HAL_RCC_OscConfig+0x674>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4013      	ands	r3, r2
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	429a      	cmp	r2, r3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_OscConfig+0x4b2>
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800192a:	4b71      	ldr	r3, [pc, #452]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	0049      	lsls	r1, r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	651a      	str	r2, [r3, #80]	@ 0x50
 8001934:	e031      	b.n	800199a <HAL_RCC_OscConfig+0x516>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x4d4>
 800193e:	4b6c      	ldr	r3, [pc, #432]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001942:	4b6b      	ldr	r3, [pc, #428]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001944:	496b      	ldr	r1, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x670>)
 8001946:	400a      	ands	r2, r1
 8001948:	651a      	str	r2, [r3, #80]	@ 0x50
 800194a:	4b69      	ldr	r3, [pc, #420]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 800194c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800194e:	4b68      	ldr	r3, [pc, #416]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001950:	496a      	ldr	r1, [pc, #424]	@ (8001afc <HAL_RCC_OscConfig+0x678>)
 8001952:	400a      	ands	r2, r1
 8001954:	651a      	str	r2, [r3, #80]	@ 0x50
 8001956:	e020      	b.n	800199a <HAL_RCC_OscConfig+0x516>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	23a0      	movs	r3, #160	@ 0xa0
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	429a      	cmp	r2, r3
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0x4fe>
 8001964:	4b62      	ldr	r3, [pc, #392]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001968:	4b61      	ldr	r3, [pc, #388]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 800196a:	2180      	movs	r1, #128	@ 0x80
 800196c:	00c9      	lsls	r1, r1, #3
 800196e:	430a      	orrs	r2, r1
 8001970:	651a      	str	r2, [r3, #80]	@ 0x50
 8001972:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001976:	4b5e      	ldr	r3, [pc, #376]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	0049      	lsls	r1, r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x516>
 8001982:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001984:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001986:	4b5a      	ldr	r3, [pc, #360]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001988:	495a      	ldr	r1, [pc, #360]	@ (8001af4 <HAL_RCC_OscConfig+0x670>)
 800198a:	400a      	ands	r2, r1
 800198c:	651a      	str	r2, [r3, #80]	@ 0x50
 800198e:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001992:	4b57      	ldr	r3, [pc, #348]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001994:	4959      	ldr	r1, [pc, #356]	@ (8001afc <HAL_RCC_OscConfig+0x678>)
 8001996:	400a      	ands	r2, r1
 8001998:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fab3 	bl	8000f0c <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff faae 	bl	8000f0c <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a52      	ldr	r2, [pc, #328]	@ (8001b00 <HAL_RCC_OscConfig+0x67c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e11a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c0:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80019c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0ef      	beq.n	80019ac <HAL_RCC_OscConfig+0x528>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fa9d 	bl	8000f0c <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d6:	e009      	b.n	80019ec <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff fa98 	bl	8000f0c <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a47      	ldr	r2, [pc, #284]	@ (8001b00 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e104      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ec:	4b40      	ldr	r3, [pc, #256]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 80019ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1ef      	bne.n	80019d8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019f8:	2327      	movs	r3, #39	@ 0x27
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a06:	4b3a      	ldr	r3, [pc, #232]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a08:	493e      	ldr	r1, [pc, #248]	@ (8001b04 <HAL_RCC_OscConfig+0x680>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2220      	movs	r2, #32
 8001a14:	4013      	ands	r3, r2
 8001a16:	d049      	beq.n	8001aac <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d026      	beq.n	8001a6e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a30:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	430a      	orrs	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a38:	4b33      	ldr	r3, [pc, #204]	@ (8001b08 <HAL_RCC_OscConfig+0x684>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4b32      	ldr	r3, [pc, #200]	@ (8001b08 <HAL_RCC_OscConfig+0x684>)
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	0189      	lsls	r1, r1, #6
 8001a42:	430a      	orrs	r2, r1
 8001a44:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fa61 	bl	8000f0c <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a50:	f7ff fa5c 	bl	8000f0c <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0c9      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f1      	beq.n	8001a50 <HAL_RCC_OscConfig+0x5cc>
 8001a6c:	e01e      	b.n	8001aac <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	438a      	bics	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_RCC_OscConfig+0x684>)
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_RCC_OscConfig+0x684>)
 8001a80:	4922      	ldr	r1, [pc, #136]	@ (8001b0c <HAL_RCC_OscConfig+0x688>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa41 	bl	8000f0c <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a90:	f7ff fa3c 	bl	8000f0c <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0a9      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d1f1      	bne.n	8001a90 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x632>
 8001ab4:	e09e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d100      	bne.n	8001abe <HAL_RCC_OscConfig+0x63a>
 8001abc:	e077      	b.n	8001bae <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d158      	bne.n	8001b78 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_RCC_OscConfig+0x66c>)
 8001acc:	4910      	ldr	r1, [pc, #64]	@ (8001b10 <HAL_RCC_OscConfig+0x68c>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa1b 	bl	8000f0c <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ada:	e01b      	b.n	8001b14 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fa16 	bl	8000f0c <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d914      	bls.n	8001b14 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e083      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	40021000 	.word	0x40021000
 8001af4:	fffffeff 	.word	0xfffffeff
 8001af8:	40007000 	.word	0x40007000
 8001afc:	fffffbff 	.word	0xfffffbff
 8001b00:	00001388 	.word	0x00001388
 8001b04:	efffffff 	.word	0xefffffff
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	ffffdfff 	.word	0xffffdfff
 8001b10:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b14:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d1dd      	bne.n	8001adc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <HAL_RCC_OscConfig+0x780>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	4b2f      	ldr	r3, [pc, #188]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b46:	2180      	movs	r1, #128	@ 0x80
 8001b48:	0449      	lsls	r1, r1, #17
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f9dd 	bl	8000f0c <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f9d8 	bl	8000f0c <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e045      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b6a:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x6d4>
 8001b76:	e03d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b7e:	4922      	ldr	r1, [pc, #136]	@ (8001c08 <HAL_RCC_OscConfig+0x784>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff f9c2 	bl	8000f0c <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f9bd 	bl	8000f0c <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e02a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ba0:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	049b      	lsls	r3, r3, #18
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x70a>
 8001bac:	e022      	b.n	8001bf4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e01d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d10f      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	23f0      	movs	r3, #240	@ 0xf0
 8001bd4:	039b      	lsls	r3, r3, #14
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	23c0      	movs	r3, #192	@ 0xc0
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	401a      	ands	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b00a      	add	sp, #40	@ 0x28
 8001bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	40021000 	.word	0x40021000
 8001c04:	ff02ffff 	.word	0xff02ffff
 8001c08:	feffffff 	.word	0xfeffffff

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e128      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b96      	ldr	r3, [pc, #600]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d91e      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b93      	ldr	r3, [pc, #588]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4393      	bics	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b90      	ldr	r3, [pc, #576]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c40:	f7ff f964 	bl	8000f0c <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7ff f95f 	bl	8000f0c <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a8a      	ldr	r2, [pc, #552]	@ (8001e80 <HAL_RCC_ClockConfig+0x274>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e109      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b87      	ldr	r3, [pc, #540]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2202      	movs	r2, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c76:	4b83      	ldr	r3, [pc, #524]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	22f0      	movs	r2, #240	@ 0xf0
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d100      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
 8001c94:	e089      	b.n	8001daa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c9e:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	029b      	lsls	r3, r3, #10
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d120      	bne.n	8001cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0e1      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cb6:	4b73      	ldr	r3, [pc, #460]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	049b      	lsls	r3, r3, #18
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d114      	bne.n	8001cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0d5      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cce:	4b6d      	ldr	r3, [pc, #436]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d109      	bne.n	8001cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0ca      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cdc:	4b69      	ldr	r3, [pc, #420]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0c2      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cec:	4b65      	ldr	r3, [pc, #404]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b62      	ldr	r3, [pc, #392]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f904 	bl	8000f0c <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d111      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d10:	e009      	b.n	8001d26 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff f8fb 	bl	8000f0c <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	4a58      	ldr	r2, [pc, #352]	@ (8001e80 <HAL_RCC_ClockConfig+0x274>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0a5      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d26:	4b57      	ldr	r3, [pc, #348]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d1ef      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x106>
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d111      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3e:	f7ff f8e5 	bl	8000f0c <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4a4d      	ldr	r2, [pc, #308]	@ (8001e80 <HAL_RCC_ClockConfig+0x274>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e08f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d52:	4b4c      	ldr	r3, [pc, #304]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	220c      	movs	r2, #12
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d1ef      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x132>
 8001d5e:	e024      	b.n	8001daa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d11b      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff f8cf 	bl	8000f0c <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a42      	ldr	r2, [pc, #264]	@ (8001e80 <HAL_RCC_ClockConfig+0x274>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e079      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7e:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	220c      	movs	r2, #12
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d1ef      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x15e>
 8001d8a:	e00e      	b.n	8001daa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff f8be 	bl	8000f0c <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	4a3a      	ldr	r2, [pc, #232]	@ (8001e80 <HAL_RCC_ClockConfig+0x274>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e068      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	220c      	movs	r2, #12
 8001da6:	4013      	ands	r3, r2
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001daa:	4b34      	ldr	r3, [pc, #208]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d21e      	bcs.n	8001df6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db8:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4393      	bics	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dca:	f7ff f89f 	bl	8000f0c <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	e009      	b.n	8001de8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f89a 	bl	8000f0c <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	4a28      	ldr	r2, [pc, #160]	@ (8001e80 <HAL_RCC_ClockConfig+0x274>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e044      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <HAL_RCC_ClockConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a20      	ldr	r2, [pc, #128]	@ (8001e88 <HAL_RCC_ClockConfig+0x27c>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d00a      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4a1a      	ldr	r2, [pc, #104]	@ (8001e8c <HAL_RCC_ClockConfig+0x280>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00da      	lsls	r2, r3, #3
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e34:	f000 f832 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e38:	0001      	movs	r1, r0
 8001e3a:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_RCC_ClockConfig+0x278>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	220f      	movs	r2, #15
 8001e42:	4013      	ands	r3, r2
 8001e44:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <HAL_RCC_ClockConfig+0x284>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	000a      	movs	r2, r1
 8001e4a:	40da      	lsrs	r2, r3
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_RCC_ClockConfig+0x288>)
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_RCC_ClockConfig+0x28c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	250b      	movs	r5, #11
 8001e56:	197c      	adds	r4, r7, r5
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff f811 	bl	8000e80 <HAL_InitTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e6a:	197b      	adds	r3, r7, r5
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	00001388 	.word	0x00001388
 8001e84:	40021000 	.word	0x40021000
 8001e88:	fffff8ff 	.word	0xfffff8ff
 8001e8c:	ffffc7ff 	.word	0xffffc7ff
 8001e90:	080024d8 	.word	0x080024d8
 8001e94:	20000058 	.word	0x20000058
 8001e98:	2000005c 	.word	0x2000005c

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b5b0      	push	{r4, r5, r7, lr}
 8001e9e:	b08e      	sub	sp, #56	@ 0x38
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eaa:	230c      	movs	r3, #12
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d014      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x40>
 8001eb2:	d900      	bls.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001eb4:	e07b      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x112>
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d002      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x24>
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ebe:	e076      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ec0:	4b44      	ldr	r3, [pc, #272]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001eca:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ecc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ece:	e07c      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ed0:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x140>)
 8001ed2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ed4:	e079      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b42      	ldr	r3, [pc, #264]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ed8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001eda:	e076      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ede:	0c9a      	lsrs	r2, r3, #18
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ee6:	5c9b      	ldrb	r3, [r3, r2]
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eec:	0d9a      	lsrs	r2, r3, #22
 8001eee:	2303      	movs	r3, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef6:	4b37      	ldr	r3, [pc, #220]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	4013      	ands	r3, r2
 8001f00:	d01a      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	4a35      	ldr	r2, [pc, #212]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	69b8      	ldr	r0, [r7, #24]
 8001f10:	69f9      	ldr	r1, [r7, #28]
 8001f12:	f7fe f9a5 	bl	8000260 <__aeabi_lmul>
 8001f16:	0002      	movs	r2, r0
 8001f18:	000b      	movs	r3, r1
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f7fe f979 	bl	8000220 <__aeabi_uldivmod>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	000b      	movs	r3, r1
 8001f32:	0013      	movs	r3, r2
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f36:	e037      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f38:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d01a      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	68b8      	ldr	r0, [r7, #8]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	f7fe f985 	bl	8000260 <__aeabi_lmul>
 8001f56:	0002      	movs	r2, r0
 8001f58:	000b      	movs	r3, r1
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f7fe f959 	bl	8000220 <__aeabi_uldivmod>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	000b      	movs	r3, r1
 8001f72:	0013      	movs	r3, r2
 8001f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f76:	e017      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	0019      	movs	r1, r3
 8001f80:	4a16      	ldr	r2, [pc, #88]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x140>)
 8001f82:	2300      	movs	r3, #0
 8001f84:	f7fe f96c 	bl	8000260 <__aeabi_lmul>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	000b      	movs	r3, r1
 8001f8c:	0010      	movs	r0, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	001c      	movs	r4, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	001d      	movs	r5, r3
 8001f98:	0022      	movs	r2, r4
 8001f9a:	002b      	movs	r3, r5
 8001f9c:	f7fe f940 	bl	8000220 <__aeabi_uldivmod>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	000b      	movs	r3, r1
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001fac:	e00d      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	0212      	lsls	r2, r2, #8
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001fc8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b00e      	add	sp, #56	@ 0x38
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	003d0900 	.word	0x003d0900
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	080024e8 	.word	0x080024e8

08001fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e032      	b.n	8002060 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2239      	movs	r2, #57	@ 0x39
 8001ffe:	5c9b      	ldrb	r3, [r3, r2]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2238      	movs	r2, #56	@ 0x38
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f7fe fecb 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2239      	movs	r2, #57	@ 0x39
 800201a:	2102      	movs	r1, #2
 800201c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	0019      	movs	r1, r3
 8002028:	0010      	movs	r0, r2
 800202a:	f000 f971 	bl	8002310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	223e      	movs	r2, #62	@ 0x3e
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	223a      	movs	r2, #58	@ 0x3a
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223b      	movs	r2, #59	@ 0x3b
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223c      	movs	r2, #60	@ 0x3c
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223d      	movs	r2, #61	@ 0x3d
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2239      	movs	r2, #57	@ 0x39
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2239      	movs	r2, #57	@ 0x39
 8002074:	5c9b      	ldrb	r3, [r3, r2]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e036      	b.n	80020ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2239      	movs	r2, #57	@ 0x39
 8002084:	2102      	movs	r1, #2
 8002086:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	05db      	lsls	r3, r3, #23
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d009      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x50>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <HAL_TIM_Base_Start_IT+0x90>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x50>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <HAL_TIM_Base_Start_IT+0x94>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2207      	movs	r2, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d010      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	e007      	b.n	80020ec <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40011400 	.word	0x40011400

08002100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d124      	bne.n	8002160 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2202      	movs	r2, #2
 800211e:	4013      	ands	r3, r2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d11d      	bne.n	8002160 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2203      	movs	r2, #3
 800212a:	4252      	negs	r2, r2
 800212c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2203      	movs	r2, #3
 800213c:	4013      	ands	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f8cc 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8002148:	e007      	b.n	800215a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 f8bf 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f000 f8cb 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2204      	movs	r2, #4
 8002168:	4013      	ands	r3, r2
 800216a:	2b04      	cmp	r3, #4
 800216c:	d125      	bne.n	80021ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2204      	movs	r2, #4
 8002176:	4013      	ands	r3, r2
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11e      	bne.n	80021ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2205      	movs	r2, #5
 8002182:	4252      	negs	r2, r2
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	23c0      	movs	r3, #192	@ 0xc0
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 f89f 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 80021a2:	e007      	b.n	80021b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f892 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f89e 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2208      	movs	r2, #8
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d124      	bne.n	8002212 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2208      	movs	r2, #8
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d11d      	bne.n	8002212 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2209      	movs	r2, #9
 80021dc:	4252      	negs	r2, r2
 80021de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2204      	movs	r2, #4
 80021e4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2203      	movs	r2, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f873 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 80021fa:	e007      	b.n	800220c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f866 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f872 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2210      	movs	r2, #16
 800221a:	4013      	ands	r3, r2
 800221c:	2b10      	cmp	r3, #16
 800221e:	d125      	bne.n	800226c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2210      	movs	r2, #16
 8002228:	4013      	ands	r3, r2
 800222a:	2b10      	cmp	r3, #16
 800222c:	d11e      	bne.n	800226c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2211      	movs	r2, #17
 8002234:	4252      	negs	r2, r2
 8002236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2208      	movs	r2, #8
 800223c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	23c0      	movs	r3, #192	@ 0xc0
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f846 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8002254:	e007      	b.n	8002266 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f839 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 f845 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2201      	movs	r2, #1
 8002274:	4013      	ands	r3, r2
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10f      	bne.n	800229a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	2b01      	cmp	r3, #1
 8002286:	d108      	bne.n	800229a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2202      	movs	r2, #2
 800228e:	4252      	negs	r2, r2
 8002290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f7fe fa77 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2240      	movs	r2, #64	@ 0x40
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b40      	cmp	r3, #64	@ 0x40
 80022a6:	d10f      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2240      	movs	r2, #64	@ 0x40
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b40      	cmp	r3, #64	@ 0x40
 80022b4:	d108      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2241      	movs	r2, #65	@ 0x41
 80022bc:	4252      	negs	r2, r2
 80022be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f81c 	bl	8002300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c8:	46c0      	nop			@ (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d8:	46c0      	nop			@ (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e8:	46c0      	nop			@ (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	05db      	lsls	r3, r3, #23
 8002326:	429a      	cmp	r2, r3
 8002328:	d007      	beq.n	800233a <TIM_Base_SetConfig+0x2a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <TIM_Base_SetConfig+0x9c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_Base_SetConfig+0x2a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <TIM_Base_SetConfig+0xa0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d108      	bne.n	800234c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2270      	movs	r2, #112	@ 0x70
 800233e:	4393      	bics	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	05db      	lsls	r3, r3, #23
 8002352:	429a      	cmp	r2, r3
 8002354:	d007      	beq.n	8002366 <TIM_Base_SetConfig+0x56>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <TIM_Base_SetConfig+0x9c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d003      	beq.n	8002366 <TIM_Base_SetConfig+0x56>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a13      	ldr	r2, [pc, #76]	@ (80023b0 <TIM_Base_SetConfig+0xa0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d108      	bne.n	8002378 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <TIM_Base_SetConfig+0xa4>)
 800236a:	4013      	ands	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	4393      	bics	r3, r2
 800237e:	001a      	movs	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	615a      	str	r2, [r3, #20]
}
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40011400 	.word	0x40011400
 80023b4:	fffffcff 	.word	0xfffffcff

080023b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2238      	movs	r2, #56	@ 0x38
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e042      	b.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2238      	movs	r2, #56	@ 0x38
 80023d4:	2101      	movs	r1, #1
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2239      	movs	r2, #57	@ 0x39
 80023dc:	2102      	movs	r1, #2
 80023de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2270      	movs	r2, #112	@ 0x70
 80023f4:	4393      	bics	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	429a      	cmp	r2, r3
 8002414:	d009      	beq.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a11      	ldr	r2, [pc, #68]	@ (8002460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	@ (8002464 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10c      	bne.n	8002444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	4393      	bics	r3, r2
 8002430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2239      	movs	r2, #57	@ 0x39
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2238      	movs	r2, #56	@ 0x38
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	40010800 	.word	0x40010800
 8002464:	40011400 	.word	0x40011400

08002468 <memset>:
 8002468:	0003      	movs	r3, r0
 800246a:	1882      	adds	r2, r0, r2
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <memset+0xa>
 8002470:	4770      	bx	lr
 8002472:	7019      	strb	r1, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	e7f9      	b.n	800246c <memset+0x4>

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	2600      	movs	r6, #0
 800247c:	4c0c      	ldr	r4, [pc, #48]	@ (80024b0 <__libc_init_array+0x38>)
 800247e:	4d0d      	ldr	r5, [pc, #52]	@ (80024b4 <__libc_init_array+0x3c>)
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	2600      	movs	r6, #0
 800248a:	f000 f819 	bl	80024c0 <_init>
 800248e:	4c0a      	ldr	r4, [pc, #40]	@ (80024b8 <__libc_init_array+0x40>)
 8002490:	4d0a      	ldr	r5, [pc, #40]	@ (80024bc <__libc_init_array+0x44>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	00b3      	lsls	r3, r6, #2
 800249e:	58eb      	ldr	r3, [r5, r3]
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	00b3      	lsls	r3, r6, #2
 80024a8:	58eb      	ldr	r3, [r5, r3]
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	080024fc 	.word	0x080024fc
 80024b4:	080024fc 	.word	0x080024fc
 80024b8:	08002500 	.word	0x08002500
 80024bc:	080024fc 	.word	0x080024fc

080024c0 <_init>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr

080024cc <_fini>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d2:	bc08      	pop	{r3}
 80024d4:	469e      	mov	lr, r3
 80024d6:	4770      	bx	lr

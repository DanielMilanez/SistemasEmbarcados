
RTC DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004d68  08004d68  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004d68  08004d68  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00005d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00005d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004d70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000060  08004dd0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004dd0  00006310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccae  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ee  00000000  00000000  00012d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00014e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000add  00000000  00000000  00015c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149ae  00000000  00000000  0001670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a76  00000000  00000000  0002b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e20c  00000000  00000000  0003bb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9d3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003760  00000000  00000000  000b9d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000bd4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c40 	.word	0x08004c40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004c40 	.word	0x08004c40

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <LcdStart>:

#include "display16x2.h"

static bit port;

void LcdStart(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	ControlLcd(0x33, LCD_INSTRUCT);
 800040c:	2100      	movs	r1, #0
 800040e:	2033      	movs	r0, #51	@ 0x33
 8000410:	f000 f818 	bl	8000444 <ControlLcd>
	ControlLcd(0x32, LCD_INSTRUCT);
 8000414:	2100      	movs	r1, #0
 8000416:	2032      	movs	r0, #50	@ 0x32
 8000418:	f000 f814 	bl	8000444 <ControlLcd>
	ControlLcd(0x28, LCD_INSTRUCT);
 800041c:	2100      	movs	r1, #0
 800041e:	2028      	movs	r0, #40	@ 0x28
 8000420:	f000 f810 	bl	8000444 <ControlLcd>
	ControlLcd(0x0C, LCD_INSTRUCT);
 8000424:	2100      	movs	r1, #0
 8000426:	200c      	movs	r0, #12
 8000428:	f000 f80c 	bl	8000444 <ControlLcd>
	ControlLcd(0x06, LCD_INSTRUCT);
 800042c:	2100      	movs	r1, #0
 800042e:	2006      	movs	r0, #6
 8000430:	f000 f808 	bl	8000444 <ControlLcd>
	ControlLcd(0x01, LCD_INSTRUCT);
 8000434:	2100      	movs	r1, #0
 8000436:	2001      	movs	r0, #1
 8000438:	f000 f804 	bl	8000444 <ControlLcd>
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <ControlLcd>:
	uint8_t i;
	for(i = 0; message[i] != '\0'; ++i);
	return i + 1;
}

void ControlLcd(uint8_t data, uint8_t state){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	0002      	movs	r2, r0
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	1dbb      	adds	r3, r7, #6
 8000452:	1c0a      	adds	r2, r1, #0
 8000454:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
 8000456:	1dbb      	adds	r3, r7, #6
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4896      	ldr	r0, [pc, #600]	@ (80006b4 <ControlLcd+0x270>)
 800045c:	001a      	movs	r2, r3
 800045e:	2140      	movs	r1, #64	@ 0x40
 8000460:	f001 fbd4 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000464:	4b94      	ldr	r3, [pc, #592]	@ (80006b8 <ControlLcd+0x274>)
 8000466:	2200      	movs	r2, #0
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fbce 	bl	8001c0c <HAL_GPIO_WritePin>

	port.P0 = (data >> 0) & 1;
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2201      	movs	r2, #1
 8000476:	4013      	ands	r3, r2
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b90      	ldr	r3, [pc, #576]	@ (80006bc <ControlLcd+0x278>)
 800047c:	2101      	movs	r1, #1
 800047e:	400a      	ands	r2, r1
 8000480:	0010      	movs	r0, r2
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	2101      	movs	r1, #1
 8000486:	438a      	bics	r2, r1
 8000488:	1c11      	adds	r1, r2, #0
 800048a:	1c02      	adds	r2, r0, #0
 800048c:	430a      	orrs	r2, r1
 800048e:	701a      	strb	r2, [r3, #0]
	port.P1 = (data >> 1) & 1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	085b      	lsrs	r3, r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	1c1a      	adds	r2, r3, #0
 800049a:	2301      	movs	r3, #1
 800049c:	4013      	ands	r3, r2
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b86      	ldr	r3, [pc, #536]	@ (80006bc <ControlLcd+0x278>)
 80004a2:	2101      	movs	r1, #1
 80004a4:	400a      	ands	r2, r1
 80004a6:	1890      	adds	r0, r2, r2
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	2102      	movs	r1, #2
 80004ac:	438a      	bics	r2, r1
 80004ae:	1c11      	adds	r1, r2, #0
 80004b0:	1c02      	adds	r2, r0, #0
 80004b2:	430a      	orrs	r2, r1
 80004b4:	701a      	strb	r2, [r3, #0]
	port.P2 = (data >> 2) & 1;
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	089b      	lsrs	r3, r3, #2
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	1c1a      	adds	r2, r3, #0
 80004c0:	2301      	movs	r3, #1
 80004c2:	4013      	ands	r3, r2
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b7d      	ldr	r3, [pc, #500]	@ (80006bc <ControlLcd+0x278>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	400a      	ands	r2, r1
 80004cc:	0090      	lsls	r0, r2, #2
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	2104      	movs	r1, #4
 80004d2:	438a      	bics	r2, r1
 80004d4:	1c11      	adds	r1, r2, #0
 80004d6:	1c02      	adds	r2, r0, #0
 80004d8:	430a      	orrs	r2, r1
 80004da:	701a      	strb	r2, [r3, #0]
	port.P3 = (data >> 3) & 1;
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	08db      	lsrs	r3, r3, #3
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	1c1a      	adds	r2, r3, #0
 80004e6:	2301      	movs	r3, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b73      	ldr	r3, [pc, #460]	@ (80006bc <ControlLcd+0x278>)
 80004ee:	2101      	movs	r1, #1
 80004f0:	400a      	ands	r2, r1
 80004f2:	00d0      	lsls	r0, r2, #3
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	2108      	movs	r1, #8
 80004f8:	438a      	bics	r2, r1
 80004fa:	1c11      	adds	r1, r2, #0
 80004fc:	1c02      	adds	r2, r0, #0
 80004fe:	430a      	orrs	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
	port.P4 = (data >> 4) & 1;
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	091b      	lsrs	r3, r3, #4
 8000508:	b2db      	uxtb	r3, r3
 800050a:	1c1a      	adds	r2, r3, #0
 800050c:	2301      	movs	r3, #1
 800050e:	4013      	ands	r3, r2
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b6a      	ldr	r3, [pc, #424]	@ (80006bc <ControlLcd+0x278>)
 8000514:	2101      	movs	r1, #1
 8000516:	400a      	ands	r2, r1
 8000518:	0110      	lsls	r0, r2, #4
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	2110      	movs	r1, #16
 800051e:	438a      	bics	r2, r1
 8000520:	1c11      	adds	r1, r2, #0
 8000522:	1c02      	adds	r2, r0, #0
 8000524:	430a      	orrs	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
	port.P5 = (data >> 5) & 1;
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	095b      	lsrs	r3, r3, #5
 800052e:	b2db      	uxtb	r3, r3
 8000530:	1c1a      	adds	r2, r3, #0
 8000532:	2301      	movs	r3, #1
 8000534:	4013      	ands	r3, r2
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b60      	ldr	r3, [pc, #384]	@ (80006bc <ControlLcd+0x278>)
 800053a:	2101      	movs	r1, #1
 800053c:	400a      	ands	r2, r1
 800053e:	0150      	lsls	r0, r2, #5
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	2120      	movs	r1, #32
 8000544:	438a      	bics	r2, r1
 8000546:	1c11      	adds	r1, r2, #0
 8000548:	1c02      	adds	r2, r0, #0
 800054a:	430a      	orrs	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
	port.P6 = (data >> 6) & 1;
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	099b      	lsrs	r3, r3, #6
 8000554:	b2db      	uxtb	r3, r3
 8000556:	1c1a      	adds	r2, r3, #0
 8000558:	2301      	movs	r3, #1
 800055a:	4013      	ands	r3, r2
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b57      	ldr	r3, [pc, #348]	@ (80006bc <ControlLcd+0x278>)
 8000560:	2101      	movs	r1, #1
 8000562:	400a      	ands	r2, r1
 8000564:	0190      	lsls	r0, r2, #6
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	2140      	movs	r1, #64	@ 0x40
 800056a:	438a      	bics	r2, r1
 800056c:	1c11      	adds	r1, r2, #0
 800056e:	1c02      	adds	r2, r0, #0
 8000570:	430a      	orrs	r2, r1
 8000572:	701a      	strb	r2, [r3, #0]
	port.P7 = (data >> 7) & 1;
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	09db      	lsrs	r3, r3, #7
 800057a:	b2db      	uxtb	r3, r3
 800057c:	1c1a      	adds	r2, r3, #0
 800057e:	2301      	movs	r3, #1
 8000580:	4013      	ands	r3, r2
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b4d      	ldr	r3, [pc, #308]	@ (80006bc <ControlLcd+0x278>)
 8000586:	01d0      	lsls	r0, r2, #7
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	217f      	movs	r1, #127	@ 0x7f
 800058c:	400a      	ands	r2, r1
 800058e:	1c11      	adds	r1, r2, #0
 8000590:	1c02      	adds	r2, r0, #0
 8000592:	430a      	orrs	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, port.P4);
 8000596:	4b49      	ldr	r3, [pc, #292]	@ (80006bc <ControlLcd+0x278>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	06db      	lsls	r3, r3, #27
 800059c:	0fdb      	lsrs	r3, r3, #31
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	001a      	movs	r2, r3
 80005a2:	2380      	movs	r3, #128	@ 0x80
 80005a4:	0059      	lsls	r1, r3, #1
 80005a6:	23a0      	movs	r3, #160	@ 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fb2e 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, port.P5);
 80005b0:	4b42      	ldr	r3, [pc, #264]	@ (80006bc <ControlLcd+0x278>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	069b      	lsls	r3, r3, #26
 80005b6:	0fdb      	lsrs	r3, r3, #31
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	001a      	movs	r2, r3
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	483c      	ldr	r0, [pc, #240]	@ (80006b4 <ControlLcd+0x270>)
 80005c2:	0019      	movs	r1, r3
 80005c4:	f001 fb22 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, port.P6);
 80005c8:	4b3c      	ldr	r3, [pc, #240]	@ (80006bc <ControlLcd+0x278>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	065b      	lsls	r3, r3, #25
 80005ce:	0fdb      	lsrs	r3, r3, #31
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <ControlLcd+0x270>)
 80005d6:	2110      	movs	r1, #16
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fb17 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, port.P7);
 80005de:	4b37      	ldr	r3, [pc, #220]	@ (80006bc <ControlLcd+0x278>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	061b      	lsls	r3, r3, #24
 80005e4:	0fdb      	lsrs	r3, r3, #31
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b32      	ldr	r3, [pc, #200]	@ (80006b4 <ControlLcd+0x270>)
 80005ec:	2120      	movs	r1, #32
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fb0c 	bl	8001c0c <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	009a      	lsls	r2, r3, #2
 80005f8:	23a0      	movs	r3, #160	@ 0xa0
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fb21 	bl	8001c46 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 f889 	bl	800171c <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800060a:	2380      	movs	r3, #128	@ 0x80
 800060c:	009a      	lsls	r2, r3, #2
 800060e:	23a0      	movs	r3, #160	@ 0xa0
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fb16 	bl	8001c46 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 f87e 	bl	800171c <HAL_Delay>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, port.P0);
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <ControlLcd+0x278>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	07db      	lsls	r3, r3, #31
 8000626:	0fdb      	lsrs	r3, r3, #31
 8000628:	b2db      	uxtb	r3, r3
 800062a:	001a      	movs	r2, r3
 800062c:	2380      	movs	r3, #128	@ 0x80
 800062e:	0059      	lsls	r1, r3, #1
 8000630:	23a0      	movs	r3, #160	@ 0xa0
 8000632:	05db      	lsls	r3, r3, #23
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fae9 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, port.P1);
 800063a:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <ControlLcd+0x278>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	079b      	lsls	r3, r3, #30
 8000640:	0fdb      	lsrs	r3, r3, #31
 8000642:	b2db      	uxtb	r3, r3
 8000644:	001a      	movs	r2, r3
 8000646:	2380      	movs	r3, #128	@ 0x80
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <ControlLcd+0x270>)
 800064c:	0019      	movs	r1, r3
 800064e:	f001 fadd 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, port.P2);
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <ControlLcd+0x278>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	075b      	lsls	r3, r3, #29
 8000658:	0fdb      	lsrs	r3, r3, #31
 800065a:	b2db      	uxtb	r3, r3
 800065c:	001a      	movs	r2, r3
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <ControlLcd+0x270>)
 8000660:	2110      	movs	r1, #16
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fad2 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, port.P3);
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <ControlLcd+0x278>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	071b      	lsls	r3, r3, #28
 800066e:	0fdb      	lsrs	r3, r3, #31
 8000670:	b2db      	uxtb	r3, r3
 8000672:	001a      	movs	r2, r3
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <ControlLcd+0x270>)
 8000676:	2120      	movs	r1, #32
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fac7 	bl	8001c0c <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800067e:	2380      	movs	r3, #128	@ 0x80
 8000680:	009a      	lsls	r2, r3, #2
 8000682:	23a0      	movs	r3, #160	@ 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fadc 	bl	8001c46 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f001 f844 	bl	800171c <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	009a      	lsls	r2, r3, #2
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 fad1 	bl	8001c46 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f001 f839 	bl	800171c <HAL_Delay>
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	50000400 	.word	0x50000400
 80006b8:	50000800 	.word	0x50000800
 80006bc:	2000007c 	.word	0x2000007c

080006c0 <SendMessage>:

void SendMessage(uint8_t x, uint8_t y, char *message){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	603a      	str	r2, [r7, #0]
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	1c02      	adds	r2, r0, #0
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	1dbb      	adds	r3, r7, #6
 80006d0:	1c0a      	adds	r2, r1, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	switch(y){
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <SendMessage+0x22>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d05b      	beq.n	8000798 <SendMessage+0xd8>
 80006e0:	e0b7      	b.n	8000852 <SendMessage+0x192>
		case 0:
			switch(x){
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d900      	bls.n	80006ec <SendMessage+0x2c>
 80006ea:	e0af      	b.n	800084c <SendMessage+0x18c>
 80006ec:	009a      	lsls	r2, r3, #2
 80006ee:	4b65      	ldr	r3, [pc, #404]	@ (8000884 <SendMessage+0x1c4>)
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	469f      	mov	pc, r3
				case 0: ControlLcd(0x80, LCD_INSTRUCT); break;
 80006f6:	2100      	movs	r1, #0
 80006f8:	2080      	movs	r0, #128	@ 0x80
 80006fa:	f7ff fea3 	bl	8000444 <ControlLcd>
 80006fe:	e04a      	b.n	8000796 <SendMessage+0xd6>
				case 1: ControlLcd(0x81, LCD_INSTRUCT); break;
 8000700:	2100      	movs	r1, #0
 8000702:	2081      	movs	r0, #129	@ 0x81
 8000704:	f7ff fe9e 	bl	8000444 <ControlLcd>
 8000708:	e045      	b.n	8000796 <SendMessage+0xd6>
				case 2: ControlLcd(0x82, LCD_INSTRUCT); break;
 800070a:	2100      	movs	r1, #0
 800070c:	2082      	movs	r0, #130	@ 0x82
 800070e:	f7ff fe99 	bl	8000444 <ControlLcd>
 8000712:	e040      	b.n	8000796 <SendMessage+0xd6>
				case 3: ControlLcd(0x83, LCD_INSTRUCT); break;
 8000714:	2100      	movs	r1, #0
 8000716:	2083      	movs	r0, #131	@ 0x83
 8000718:	f7ff fe94 	bl	8000444 <ControlLcd>
 800071c:	e03b      	b.n	8000796 <SendMessage+0xd6>
				case 4: ControlLcd(0x84, LCD_INSTRUCT); break;
 800071e:	2100      	movs	r1, #0
 8000720:	2084      	movs	r0, #132	@ 0x84
 8000722:	f7ff fe8f 	bl	8000444 <ControlLcd>
 8000726:	e036      	b.n	8000796 <SendMessage+0xd6>
				case 5: ControlLcd(0x85, LCD_INSTRUCT); break;
 8000728:	2100      	movs	r1, #0
 800072a:	2085      	movs	r0, #133	@ 0x85
 800072c:	f7ff fe8a 	bl	8000444 <ControlLcd>
 8000730:	e031      	b.n	8000796 <SendMessage+0xd6>
				case 6: ControlLcd(0x86, LCD_INSTRUCT); break;
 8000732:	2100      	movs	r1, #0
 8000734:	2086      	movs	r0, #134	@ 0x86
 8000736:	f7ff fe85 	bl	8000444 <ControlLcd>
 800073a:	e02c      	b.n	8000796 <SendMessage+0xd6>
				case 7: ControlLcd(0x87, LCD_INSTRUCT); break;
 800073c:	2100      	movs	r1, #0
 800073e:	2087      	movs	r0, #135	@ 0x87
 8000740:	f7ff fe80 	bl	8000444 <ControlLcd>
 8000744:	e027      	b.n	8000796 <SendMessage+0xd6>
				case 8: ControlLcd(0x88, LCD_INSTRUCT); break;
 8000746:	2100      	movs	r1, #0
 8000748:	2088      	movs	r0, #136	@ 0x88
 800074a:	f7ff fe7b 	bl	8000444 <ControlLcd>
 800074e:	e022      	b.n	8000796 <SendMessage+0xd6>
				case 9: ControlLcd(0x89, LCD_INSTRUCT); break;
 8000750:	2100      	movs	r1, #0
 8000752:	2089      	movs	r0, #137	@ 0x89
 8000754:	f7ff fe76 	bl	8000444 <ControlLcd>
 8000758:	e01d      	b.n	8000796 <SendMessage+0xd6>
				case 10: ControlLcd(0x8A, LCD_INSTRUCT); break;
 800075a:	2100      	movs	r1, #0
 800075c:	208a      	movs	r0, #138	@ 0x8a
 800075e:	f7ff fe71 	bl	8000444 <ControlLcd>
 8000762:	e018      	b.n	8000796 <SendMessage+0xd6>
				case 11: ControlLcd(0x8B, LCD_INSTRUCT); break;
 8000764:	2100      	movs	r1, #0
 8000766:	208b      	movs	r0, #139	@ 0x8b
 8000768:	f7ff fe6c 	bl	8000444 <ControlLcd>
 800076c:	e013      	b.n	8000796 <SendMessage+0xd6>
				case 12: ControlLcd(0x8C, LCD_INSTRUCT); break;
 800076e:	2100      	movs	r1, #0
 8000770:	208c      	movs	r0, #140	@ 0x8c
 8000772:	f7ff fe67 	bl	8000444 <ControlLcd>
 8000776:	e00e      	b.n	8000796 <SendMessage+0xd6>
				case 13: ControlLcd(0x8D, LCD_INSTRUCT); break;
 8000778:	2100      	movs	r1, #0
 800077a:	208d      	movs	r0, #141	@ 0x8d
 800077c:	f7ff fe62 	bl	8000444 <ControlLcd>
 8000780:	e009      	b.n	8000796 <SendMessage+0xd6>
				case 14: ControlLcd(0x8E, LCD_INSTRUCT); break;
 8000782:	2100      	movs	r1, #0
 8000784:	208e      	movs	r0, #142	@ 0x8e
 8000786:	f7ff fe5d 	bl	8000444 <ControlLcd>
 800078a:	e004      	b.n	8000796 <SendMessage+0xd6>
				case 15: ControlLcd(0x8F, LCD_INSTRUCT); break;
 800078c:	2100      	movs	r1, #0
 800078e:	208f      	movs	r0, #143	@ 0x8f
 8000790:	f7ff fe58 	bl	8000444 <ControlLcd>
 8000794:	46c0      	nop			@ (mov r8, r8)
			}
			break;
 8000796:	e059      	b.n	800084c <SendMessage+0x18c>
		case 1:
			switch(x){
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d857      	bhi.n	8000850 <SendMessage+0x190>
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <SendMessage+0x1c8>)
 80007a4:	18d3      	adds	r3, r2, r3
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	469f      	mov	pc, r3
				case 0: ControlLcd(0xC0, LCD_INSTRUCT); break;
 80007aa:	2100      	movs	r1, #0
 80007ac:	20c0      	movs	r0, #192	@ 0xc0
 80007ae:	f7ff fe49 	bl	8000444 <ControlLcd>
 80007b2:	e04a      	b.n	800084a <SendMessage+0x18a>
				case 1: ControlLcd(0xC1, LCD_INSTRUCT); break;
 80007b4:	2100      	movs	r1, #0
 80007b6:	20c1      	movs	r0, #193	@ 0xc1
 80007b8:	f7ff fe44 	bl	8000444 <ControlLcd>
 80007bc:	e045      	b.n	800084a <SendMessage+0x18a>
				case 2: ControlLcd(0xC2, LCD_INSTRUCT); break;
 80007be:	2100      	movs	r1, #0
 80007c0:	20c2      	movs	r0, #194	@ 0xc2
 80007c2:	f7ff fe3f 	bl	8000444 <ControlLcd>
 80007c6:	e040      	b.n	800084a <SendMessage+0x18a>
				case 3: ControlLcd(0xC3, LCD_INSTRUCT); break;
 80007c8:	2100      	movs	r1, #0
 80007ca:	20c3      	movs	r0, #195	@ 0xc3
 80007cc:	f7ff fe3a 	bl	8000444 <ControlLcd>
 80007d0:	e03b      	b.n	800084a <SendMessage+0x18a>
				case 4: ControlLcd(0xC4, LCD_INSTRUCT); break;
 80007d2:	2100      	movs	r1, #0
 80007d4:	20c4      	movs	r0, #196	@ 0xc4
 80007d6:	f7ff fe35 	bl	8000444 <ControlLcd>
 80007da:	e036      	b.n	800084a <SendMessage+0x18a>
				case 5: ControlLcd(0xC5, LCD_INSTRUCT); break;
 80007dc:	2100      	movs	r1, #0
 80007de:	20c5      	movs	r0, #197	@ 0xc5
 80007e0:	f7ff fe30 	bl	8000444 <ControlLcd>
 80007e4:	e031      	b.n	800084a <SendMessage+0x18a>
				case 6: ControlLcd(0xC6, LCD_INSTRUCT); break;
 80007e6:	2100      	movs	r1, #0
 80007e8:	20c6      	movs	r0, #198	@ 0xc6
 80007ea:	f7ff fe2b 	bl	8000444 <ControlLcd>
 80007ee:	e02c      	b.n	800084a <SendMessage+0x18a>
				case 7: ControlLcd(0xC7, LCD_INSTRUCT); break;
 80007f0:	2100      	movs	r1, #0
 80007f2:	20c7      	movs	r0, #199	@ 0xc7
 80007f4:	f7ff fe26 	bl	8000444 <ControlLcd>
 80007f8:	e027      	b.n	800084a <SendMessage+0x18a>
				case 8: ControlLcd(0xC8, LCD_INSTRUCT); break;
 80007fa:	2100      	movs	r1, #0
 80007fc:	20c8      	movs	r0, #200	@ 0xc8
 80007fe:	f7ff fe21 	bl	8000444 <ControlLcd>
 8000802:	e022      	b.n	800084a <SendMessage+0x18a>
				case 9: ControlLcd(0xC9, LCD_INSTRUCT); break;
 8000804:	2100      	movs	r1, #0
 8000806:	20c9      	movs	r0, #201	@ 0xc9
 8000808:	f7ff fe1c 	bl	8000444 <ControlLcd>
 800080c:	e01d      	b.n	800084a <SendMessage+0x18a>
				case 10: ControlLcd(0xCA, LCD_INSTRUCT); break;
 800080e:	2100      	movs	r1, #0
 8000810:	20ca      	movs	r0, #202	@ 0xca
 8000812:	f7ff fe17 	bl	8000444 <ControlLcd>
 8000816:	e018      	b.n	800084a <SendMessage+0x18a>
				case 11: ControlLcd(0xCB, LCD_INSTRUCT); break;
 8000818:	2100      	movs	r1, #0
 800081a:	20cb      	movs	r0, #203	@ 0xcb
 800081c:	f7ff fe12 	bl	8000444 <ControlLcd>
 8000820:	e013      	b.n	800084a <SendMessage+0x18a>
				case 12: ControlLcd(0xCC, LCD_INSTRUCT); break;
 8000822:	2100      	movs	r1, #0
 8000824:	20cc      	movs	r0, #204	@ 0xcc
 8000826:	f7ff fe0d 	bl	8000444 <ControlLcd>
 800082a:	e00e      	b.n	800084a <SendMessage+0x18a>
				case 13: ControlLcd(0xCD, LCD_INSTRUCT); break;
 800082c:	2100      	movs	r1, #0
 800082e:	20cd      	movs	r0, #205	@ 0xcd
 8000830:	f7ff fe08 	bl	8000444 <ControlLcd>
 8000834:	e009      	b.n	800084a <SendMessage+0x18a>
				case 14: ControlLcd(0xCE, LCD_INSTRUCT); break;
 8000836:	2100      	movs	r1, #0
 8000838:	20ce      	movs	r0, #206	@ 0xce
 800083a:	f7ff fe03 	bl	8000444 <ControlLcd>
 800083e:	e004      	b.n	800084a <SendMessage+0x18a>
				case 15: ControlLcd(0xCF, LCD_INSTRUCT); break;
 8000840:	2100      	movs	r1, #0
 8000842:	20cf      	movs	r0, #207	@ 0xcf
 8000844:	f7ff fdfe 	bl	8000444 <ControlLcd>
 8000848:	46c0      	nop			@ (mov r8, r8)
			}
			break;
 800084a:	e001      	b.n	8000850 <SendMessage+0x190>
			break;
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e000      	b.n	8000852 <SendMessage+0x192>
			break;
 8000850:	46c0      	nop			@ (mov r8, r8)
	}

	for(int i = 0; message[i] != '\0'; ++i){
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e00a      	b.n	800086e <SendMessage+0x1ae>
		ControlLcd(message[i], LCD_DATA);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2101      	movs	r1, #1
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fdee 	bl	8000444 <ControlLcd>
	for(int i = 0; message[i] != '\0'; ++i){
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	18d3      	adds	r3, r2, r3
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1ee      	bne.n	8000858 <SendMessage+0x198>
	}
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bd80      	pop	{r7, pc}
 8000884:	08004c78 	.word	0x08004c78
 8000888:	08004cb8 	.word	0x08004cb8

0800088c <HAL_TIM_PeriodElapsedCallback>:
void MAX7219_WriteData(uint8_t addrs, uint8_t data);
void MAX7219_SendData(uint8_t display, uint8_t data);
void DS3231_SetDate(uint8_t date, uint8_t month, uint8_t year);
void DS3231_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d120      	bne.n	80008e0 <HAL_TIM_PeriodElapsedCallback+0x54>
        miliseconds++;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008a8:	701a      	strb	r2, [r3, #0]

        if(miliseconds >= 100){
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b63      	cmp	r3, #99	@ 0x63
 80008b0:	d902      	bls.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x2c>
            miliseconds = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
        }

        times.milisecond 	  = (miliseconds) % 10;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	210a      	movs	r1, #10
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fcb2 	bl	8000228 <__aeabi_uidivmod>
 80008c4:	000b      	movs	r3, r1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008ca:	705a      	strb	r2, [r3, #1]
        times.milisecond_deca = (miliseconds) % 100;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2164      	movs	r1, #100	@ 0x64
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fca8 	bl	8000228 <__aeabi_uidivmod>
 80008d8:	000b      	movs	r3, r1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008de:	701a      	strb	r2, [r3, #0]
    }
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40001000 	.word	0x40001000
 80008ec:	20000187 	.word	0x20000187
 80008f0:	20000178 	.word	0x20000178

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b089      	sub	sp, #36	@ 0x24
 80008f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fe9f 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f8c5 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 f9dd 	bl	8000cc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000906:	f000 f929 	bl	8000b5c <MX_I2C1_Init>
  MX_SPI1_Init();
 800090a:	f000 f967 	bl	8000bdc <MX_SPI1_Init>
  MX_TIM6_Init();
 800090e:	f000 f99d 	bl	8000c4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Initialize();
 8000912:	f000 fb31 	bl	8000f78 <MAX7219_Initialize>


  LcdStart();
 8000916:	f7ff fd77 	bl	8000408 <LcdStart>
  status = HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDR, 3, 1000);
 800091a:	23fa      	movs	r3, #250	@ 0xfa
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	484e      	ldr	r0, [pc, #312]	@ (8000a58 <main+0x164>)
 8000920:	2203      	movs	r2, #3
 8000922:	21d0      	movs	r1, #208	@ 0xd0
 8000924:	f001 fcae 	bl	8002284 <HAL_I2C_IsDeviceReady>
 8000928:	0003      	movs	r3, r0
 800092a:	001a      	movs	r2, r3
 800092c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a5c <main+0x168>)
 800092e:	701a      	strb	r2, [r3, #0]
  if(status == HAL_ERROR) verify = ERR_COMMUNICATION;
 8000930:	4b4a      	ldr	r3, [pc, #296]	@ (8000a5c <main+0x168>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d102      	bne.n	800093e <main+0x4a>
 8000938:	4b49      	ldr	r3, [pc, #292]	@ (8000a60 <main+0x16c>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
  if(status == HAL_BUSY) verify = ERR_START;
 800093e:	4b47      	ldr	r3, [pc, #284]	@ (8000a5c <main+0x168>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d102      	bne.n	800094c <main+0x58>
 8000946:	4b46      	ldr	r3, [pc, #280]	@ (8000a60 <main+0x16c>)
 8000948:	2202      	movs	r2, #2
 800094a:	701a      	strb	r2, [r3, #0]
  if(status == HAL_OK) verify = NON_ERR;
 800094c:	4b43      	ldr	r3, [pc, #268]	@ (8000a5c <main+0x168>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <main+0x66>
 8000954:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <main+0x16c>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]

  DS3231_SetTime(01, 13, 00);
 800095a:	2200      	movs	r2, #0
 800095c:	210d      	movs	r1, #13
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fbc4 	bl	80010ec <DS3231_SetTime>
  DS3231_SetDate(17, 8, 25);
 8000964:	2219      	movs	r2, #25
 8000966:	2108      	movs	r1, #8
 8000968:	2011      	movs	r0, #17
 800096a:	f000 fc15 	bl	8001198 <DS3231_SetDate>
  char buffer[16];


  HAL_Delay(10);
 800096e:	200a      	movs	r0, #10
 8000970:	f000 fed4 	bl	800171c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(verify == NON_ERR){
 8000974:	4b3a      	ldr	r3, [pc, #232]	@ (8000a60 <main+0x16c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d14a      	bne.n	8000a12 <main+0x11e>
		  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, 1, date, 7, 100);
 800097c:	4836      	ldr	r0, [pc, #216]	@ (8000a58 <main+0x164>)
 800097e:	2364      	movs	r3, #100	@ 0x64
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2307      	movs	r3, #7
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <main+0x170>)
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	2200      	movs	r2, #0
 800098e:	21d0      	movs	r1, #208	@ 0xd0
 8000990:	f001 fb44 	bl	800201c <HAL_I2C_Mem_Read>

		  tim.seconds = Converter(BCD_TO_DEC, date[0]);
 8000994:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <main+0x170>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	0019      	movs	r1, r3
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fb54 	bl	8001048 <Converter>
 80009a0:	0003      	movs	r3, r0
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <main+0x174>)
 80009a6:	701a      	strb	r2, [r3, #0]
		  tim.minutes = Converter(BCD_TO_DEC, date[1]);
 80009a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <main+0x170>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	0019      	movs	r1, r3
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fb4a 	bl	8001048 <Converter>
 80009b4:	0003      	movs	r3, r0
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <main+0x174>)
 80009ba:	705a      	strb	r2, [r3, #1]
		  tim.hours   = Converter(BCD_TO_DEC, date[2]);
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <main+0x170>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	0019      	movs	r1, r3
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fb40 	bl	8001048 <Converter>
 80009c8:	0003      	movs	r3, r0
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <main+0x174>)
 80009ce:	709a      	strb	r2, [r3, #2]
		  tim.date    = Converter(BCD_TO_DEC, date[4]);
 80009d0:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <main+0x170>)
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	0019      	movs	r1, r3
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fb36 	bl	8001048 <Converter>
 80009dc:	0003      	movs	r3, r0
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <main+0x174>)
 80009e2:	711a      	strb	r2, [r3, #4]
		  tim.month   = Converter(BCD_TO_DEC, date[5]);
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <main+0x170>)
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	0019      	movs	r1, r3
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 fb2c 	bl	8001048 <Converter>
 80009f0:	0003      	movs	r3, r0
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <main+0x174>)
 80009f6:	715a      	strb	r2, [r3, #5]
		  tim.year    = Converter(BCD_TO_DEC, date[6]);
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <main+0x170>)
 80009fa:	799b      	ldrb	r3, [r3, #6]
 80009fc:	0019      	movs	r1, r3
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fb22 	bl	8001048 <Converter>
 8000a04:	0003      	movs	r3, r0
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <main+0x174>)
 8000a0a:	719a      	strb	r2, [r3, #6]
		  HAL_Delay(5);
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f000 fe85 	bl	800171c <HAL_Delay>
	  }

	  sprintf(buffer, "%s:%s:%s", bf_hours, bf_min, bf_sec);
 8000a12:	4c16      	ldr	r4, [pc, #88]	@ (8000a6c <main+0x178>)
 8000a14:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <main+0x17c>)
 8000a16:	4917      	ldr	r1, [pc, #92]	@ (8000a74 <main+0x180>)
 8000a18:	0038      	movs	r0, r7
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <main+0x184>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	0023      	movs	r3, r4
 8000a20:	f003 fc72 	bl	8004308 <siprintf>
	  SendMessage(4, 0, buffer);
 8000a24:	003b      	movs	r3, r7
 8000a26:	001a      	movs	r2, r3
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f7ff fe48 	bl	80006c0 <SendMessage>
	  sprintf(buffer, "%s/%s/%s", bf_date, bf_month, bf_year);
 8000a30:	4c12      	ldr	r4, [pc, #72]	@ (8000a7c <main+0x188>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <main+0x18c>)
 8000a34:	4913      	ldr	r1, [pc, #76]	@ (8000a84 <main+0x190>)
 8000a36:	0038      	movs	r0, r7
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <main+0x194>)
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	0023      	movs	r3, r4
 8000a3e:	f003 fc63 	bl	8004308 <siprintf>
	  SendMessage(4, 1, buffer);
 8000a42:	003b      	movs	r3, r7
 8000a44:	001a      	movs	r2, r3
 8000a46:	2101      	movs	r1, #1
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f7ff fe39 	bl	80006c0 <SendMessage>

	  MAX7219_Times();
 8000a4e:	f000 f9c1 	bl	8000dd4 <MAX7219_Times>
	  ConvertDataForLcd();
 8000a52:	f000 fbf7 	bl	8001244 <ConvertDataForLcd>
	  if(verify == NON_ERR){
 8000a56:	e78d      	b.n	8000974 <main+0x80>
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	2000016c 	.word	0x2000016c
 8000a60:	2000016d 	.word	0x2000016d
 8000a64:	20000170 	.word	0x20000170
 8000a68:	20000180 	.word	0x20000180
 8000a6c:	20000190 	.word	0x20000190
 8000a70:	20000188 	.word	0x20000188
 8000a74:	08004c58 	.word	0x08004c58
 8000a78:	20000198 	.word	0x20000198
 8000a7c:	200001b0 	.word	0x200001b0
 8000a80:	200001a8 	.word	0x200001a8
 8000a84:	08004c64 	.word	0x08004c64
 8000a88:	200001b8 	.word	0x200001b8

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b09d      	sub	sp, #116	@ 0x74
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	2438      	movs	r4, #56	@ 0x38
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	0018      	movs	r0, r3
 8000a98:	2338      	movs	r3, #56	@ 0x38
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f003 fc55 	bl	800434c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	2324      	movs	r3, #36	@ 0x24
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2314      	movs	r3, #20
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f003 fc4d 	bl	800434c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2324      	movs	r3, #36	@ 0x24
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f003 fc46 	bl	800434c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <SystemClock_Config+0xc8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a24      	ldr	r2, [pc, #144]	@ (8000b58 <SystemClock_Config+0xcc>)
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <SystemClock_Config+0xc8>)
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	0109      	lsls	r1, r1, #4
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad2:	0021      	movs	r1, r4
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fff4 	bl	8002adc <HAL_RCC_OscConfig>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000af8:	f000 fc50 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	2124      	movs	r1, #36	@ 0x24
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	220f      	movs	r2, #15
 8000b02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2201      	movs	r2, #1
 8000b08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2100      	movs	r1, #0
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 fb9f 	bl	8003264 <HAL_RCC_ClockConfig>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b2a:	f000 fc37 	bl	800139c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2208      	movs	r2, #8
 8000b32:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fd5f 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b46:	f000 fc29 	bl	800139c <Error_Handler>
  }
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b01d      	add	sp, #116	@ 0x74
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	40007000 	.word	0x40007000
 8000b58:	ffffe7ff 	.word	0xffffe7ff

08000b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <MX_I2C1_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <MX_I2C1_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f86f 	bl	8001c7c <HAL_I2C_Init>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 fbfb 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 fefe 	bl	80029ac <HAL_I2CEx_ConfigAnalogFilter>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 fbf2 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 ff41 	bl	8002a44 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 fbe9 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000080 	.word	0x20000080
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	0010020a 	.word	0x0010020a

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000be2:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <MX_SPI1_Init+0x6c>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000be8:	2282      	movs	r2, #130	@ 0x82
 8000bea:	0052      	lsls	r2, r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	0212      	lsls	r2, r2, #8
 8000bf4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c0a:	2280      	movs	r2, #128	@ 0x80
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <MX_SPI1_Init+0x68>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 fe73 	bl	800391c <HAL_SPI_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000c3a:	f000 fbaf 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000d4 	.word	0x200000d4
 8000c48:	40013000 	.word	0x40013000

08000c4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	003b      	movs	r3, r7
 8000c54:	0018      	movs	r0, r3
 8000c56:	2308      	movs	r3, #8
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f003 fb76 	bl	800434c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c62:	4a16      	ldr	r2, [pc, #88]	@ (8000cbc <MX_TIM6_Init+0x70>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c74:	2263      	movs	r2, #99	@ 0x63
 8000c76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f003 f917 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000c8a:	f000 fb87 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	003b      	movs	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c9a:	003a      	movs	r2, r7
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_TIM6_Init+0x6c>)
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f003 fad9 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000caa:	f000 fb77 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	2000012c 	.word	0x2000012c
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	240c      	movs	r4, #12
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2314      	movs	r3, #20
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f003 fb3b 	bl	800434c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cda:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ce2:	4b39      	ldr	r3, [pc, #228]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf2:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfe:	2202      	movs	r2, #2
 8000d00:	4013      	ands	r3, r2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d12:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	2204      	movs	r2, #4
 8000d18:	4013      	ands	r3, r2
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|D4_Pin|EN_Pin, GPIO_PIN_RESET);
 8000d1e:	23d0      	movs	r3, #208	@ 0xd0
 8000d20:	0099      	lsls	r1, r3, #2
 8000d22:	23a0      	movs	r3, #160	@ 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	2200      	movs	r2, #0
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 ff6f 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);
 8000d2e:	238e      	movs	r3, #142	@ 0x8e
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4826      	ldr	r0, [pc, #152]	@ (8000dcc <MX_GPIO_Init+0x10c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	0019      	movs	r1, r3
 8000d38:	f000 ff68 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_GPIO_Init+0x110>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 ff62 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin D4_Pin EN_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D4_Pin|EN_Pin;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	22d0      	movs	r2, #208	@ 0xd0
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2201      	movs	r2, #1
 8000d54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	193a      	adds	r2, r7, r4
 8000d64:	23a0      	movs	r3, #160	@ 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fdd8 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D6_Pin D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin|RS_Pin;
 8000d70:	0021      	movs	r1, r4
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	228e      	movs	r2, #142	@ 0x8e
 8000d76:	00d2      	lsls	r2, r2, #3
 8000d78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	000c      	movs	r4, r1
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2201      	movs	r2, #1
 8000d80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <MX_GPIO_Init+0x10c>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	0010      	movs	r0, r2
 8000d96:	f000 fdc3 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : RW_Pin */
  GPIO_InitStruct.Pin = RW_Pin;
 8000d9a:	0021      	movs	r1, r4
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2280      	movs	r2, #128	@ 0x80
 8000da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <MX_GPIO_Init+0x110>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f000 fdb0 	bl	8001920 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b009      	add	sp, #36	@ 0x24
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	50000400 	.word	0x50000400
 8000dd0:	50000800 	.word	0x50000800

08000dd4 <MAX7219_Times>:

/* USER CODE BEGIN 4 */

void MAX7219_Times(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	times.hours_deca   = Converter(DECA, tim.hours);
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <MAX7219_Times+0xf4>)
 8000dda:	789b      	ldrb	r3, [r3, #2]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	2002      	movs	r0, #2
 8000de0:	f000 f932 	bl	8001048 <Converter>
 8000de4:	0003      	movs	r3, r0
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b38      	ldr	r3, [pc, #224]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000dea:	719a      	strb	r2, [r3, #6]
	times.hours 	   = Converter(UNITY, tim.hours);
 8000dec:	4b36      	ldr	r3, [pc, #216]	@ (8000ec8 <MAX7219_Times+0xf4>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	0019      	movs	r1, r3
 8000df2:	2003      	movs	r0, #3
 8000df4:	f000 f928 	bl	8001048 <Converter>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000dfe:	71da      	strb	r2, [r3, #7]
	times.minutes_deca = Converter(DECA, tim.minutes);
 8000e00:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <MAX7219_Times+0xf4>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	0019      	movs	r1, r3
 8000e06:	2002      	movs	r0, #2
 8000e08:	f000 f91e 	bl	8001048 <Converter>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e12:	711a      	strb	r2, [r3, #4]
	times.minutes      = Converter(UNITY, tim.minutes);
 8000e14:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <MAX7219_Times+0xf4>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	0019      	movs	r1, r3
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 f914 	bl	8001048 <Converter>
 8000e20:	0003      	movs	r3, r0
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e26:	715a      	strb	r2, [r3, #5]
	times.second_deca  = Converter(DECA, tim.seconds);
 8000e28:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <MAX7219_Times+0xf4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f000 f90a 	bl	8001048 <Converter>
 8000e34:	0003      	movs	r3, r0
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e3a:	709a      	strb	r2, [r3, #2]
	times.second 	   = Converter(UNITY, tim.seconds);
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MAX7219_Times+0xf4>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	0019      	movs	r1, r3
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 f900 	bl	8001048 <Converter>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e4e:	70da      	strb	r2, [r3, #3]

	MAX7219_SendData(1, times.hours_deca);
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	0019      	movs	r1, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 f83e 	bl	8000ed8 <MAX7219_SendData>
	MAX7219_SendData(2, times.hours);
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e5e:	79db      	ldrb	r3, [r3, #7]
 8000e60:	0019      	movs	r1, r3
 8000e62:	2002      	movs	r0, #2
 8000e64:	f000 f838 	bl	8000ed8 <MAX7219_SendData>
	MAX7219_SendData(3, times.minutes_deca);
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f832 	bl	8000ed8 <MAX7219_SendData>
	MAX7219_SendData(4, times.minutes);
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e76:	795b      	ldrb	r3, [r3, #5]
 8000e78:	0019      	movs	r1, r3
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f000 f82c 	bl	8000ed8 <MAX7219_SendData>
	MAX7219_SendData(5, times.second_deca);
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	0019      	movs	r1, r3
 8000e86:	2005      	movs	r0, #5
 8000e88:	f000 f826 	bl	8000ed8 <MAX7219_SendData>
	MAX7219_SendData(6, times.second);
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	0019      	movs	r1, r3
 8000e92:	2006      	movs	r0, #6
 8000e94:	f000 f820 	bl	8000ed8 <MAX7219_SendData>

	if(flag) HAL_TIM_Base_Start_IT(&htim6);
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <MAX7219_Times+0xfc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <MAX7219_Times+0xd4>
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MAX7219_Times+0x100>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f003 f846 	bl	8003f34 <HAL_TIM_Base_Start_IT>
	MAX7219_SendData(7, times.milisecond_deca);
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	0019      	movs	r1, r3
 8000eae:	2007      	movs	r0, #7
 8000eb0:	f000 f812 	bl	8000ed8 <MAX7219_SendData>
	MAX7219_SendData(8, times.milisecond);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <MAX7219_Times+0xf8>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	2008      	movs	r0, #8
 8000ebc:	f000 f80c 	bl	8000ed8 <MAX7219_SendData>


}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	20000180 	.word	0x20000180
 8000ecc:	20000178 	.word	0x20000178
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	2000012c 	.word	0x2000012c

08000ed8 <MAX7219_SendData>:

void MAX7219_SendData(uint8_t display, uint8_t data){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	1dbb      	adds	r3, r7, #6
 8000ee6:	1c0a      	adds	r2, r1, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
	switch(display){
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d83c      	bhi.n	8000f6c <MAX7219_SendData+0x94>
 8000ef2:	009a      	lsls	r2, r3, #2
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MAX7219_SendData+0x9c>)
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	469f      	mov	pc, r3
		case 1: MAX7219_WriteData(0x08, data); break;
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	0019      	movs	r1, r3
 8000f02:	2008      	movs	r0, #8
 8000f04:	f000 f872 	bl	8000fec <MAX7219_WriteData>
 8000f08:	e030      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 2: MAX7219_WriteData(0x07, data); break;
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	2007      	movs	r0, #7
 8000f12:	f000 f86b 	bl	8000fec <MAX7219_WriteData>
 8000f16:	e029      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 3: MAX7219_WriteData(0x06, data); break;
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f000 f864 	bl	8000fec <MAX7219_WriteData>
 8000f24:	e022      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 4: MAX7219_WriteData(0x05, data); break;
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f000 f85d 	bl	8000fec <MAX7219_WriteData>
 8000f32:	e01b      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 5: MAX7219_WriteData(0x04, data); break;
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	0019      	movs	r1, r3
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	f000 f856 	bl	8000fec <MAX7219_WriteData>
 8000f40:	e014      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 6: MAX7219_WriteData(0x03, data); break;
 8000f42:	1dbb      	adds	r3, r7, #6
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0019      	movs	r1, r3
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f84f 	bl	8000fec <MAX7219_WriteData>
 8000f4e:	e00d      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 7: MAX7219_WriteData(0x02, data); break;
 8000f50:	1dbb      	adds	r3, r7, #6
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	0019      	movs	r1, r3
 8000f56:	2002      	movs	r0, #2
 8000f58:	f000 f848 	bl	8000fec <MAX7219_WriteData>
 8000f5c:	e006      	b.n	8000f6c <MAX7219_SendData+0x94>
		case 8: MAX7219_WriteData(0x01, data); break;
 8000f5e:	1dbb      	adds	r3, r7, #6
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0019      	movs	r1, r3
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 f841 	bl	8000fec <MAX7219_WriteData>
 8000f6a:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08004cf8 	.word	0x08004cf8

08000f78 <MAX7219_Initialize>:

void MAX7219_Initialize(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	MAX7219_WriteData(0x0C, 0x01); // Liga o display (sai do shutdown)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	200c      	movs	r0, #12
 8000f80:	f000 f834 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x0F, 0x00); // Sai do modo de teste
 8000f84:	2100      	movs	r1, #0
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f830 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x09, 0xFF); // Configura decode para todos os dígitos
 8000f8c:	21ff      	movs	r1, #255	@ 0xff
 8000f8e:	2009      	movs	r0, #9
 8000f90:	f000 f82c 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x0A, 0x05); // Ajusta a intensidade (brilho)
 8000f94:	2105      	movs	r1, #5
 8000f96:	200a      	movs	r0, #10
 8000f98:	f000 f828 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x0B, 0x07); // Configura o scan limit (habilita 8 dígitos)
 8000f9c:	2107      	movs	r1, #7
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f000 f824 	bl	8000fec <MAX7219_WriteData>

	// Zerando display
	MAX7219_WriteData(0x01, 0x00);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 f820 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x02, 0x00);
 8000fac:	2100      	movs	r1, #0
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f000 f81c 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x03, 0x00);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f818 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x04, 0x00);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2004      	movs	r0, #4
 8000fc0:	f000 f814 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x05, 0x00);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f000 f810 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x06, 0x00);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2006      	movs	r0, #6
 8000fd0:	f000 f80c 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x07, 0x00);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f000 f808 	bl	8000fec <MAX7219_WriteData>
	MAX7219_WriteData(0x08, 0x00);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2008      	movs	r0, #8
 8000fe0:	f000 f804 	bl	8000fec <MAX7219_WriteData>
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MAX7219_WriteData>:

void MAX7219_WriteData(uint8_t addrs, uint8_t data){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	1c0a      	adds	r2, r1, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000ffe:	23a0      	movs	r3, #160	@ 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2200      	movs	r2, #0
 8001004:	2140      	movs	r1, #64	@ 0x40
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fe00 	bl	8001c0c <HAL_GPIO_WritePin>
	uint8_t buff[2] = {addrs, data};
 800100c:	210c      	movs	r1, #12
 800100e:	187b      	adds	r3, r7, r1
 8001010:	1dfa      	adds	r2, r7, #7
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	187b      	adds	r3, r7, r1
 8001018:	1dba      	adds	r2, r7, #6
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buff, 2, HAL_MAX_DELAY);
 800101e:	2301      	movs	r3, #1
 8001020:	425b      	negs	r3, r3
 8001022:	1879      	adds	r1, r7, r1
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MAX7219_WriteData+0x58>)
 8001026:	2202      	movs	r2, #2
 8001028:	f002 fd0c 	bl	8003a44 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800102c:	23a0      	movs	r3, #160	@ 0xa0
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	2201      	movs	r2, #1
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	0018      	movs	r0, r3
 8001036:	f000 fde9 	bl	8001c0c <HAL_GPIO_WritePin>
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	200000d4 	.word	0x200000d4

08001048 <Converter>:

int Converter(DS3231_Converter mode, int num){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	0002      	movs	r2, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	701a      	strb	r2, [r3, #0]
	int result;

	switch(mode){
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d010      	beq.n	8001080 <Converter+0x38>
 800105e:	dc3e      	bgt.n	80010de <Converter+0x96>
 8001060:	2b02      	cmp	r3, #2
 8001062:	d005      	beq.n	8001070 <Converter+0x28>
 8001064:	dc3b      	bgt.n	80010de <Converter+0x96>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d012      	beq.n	8001090 <Converter+0x48>
 800106a:	2b01      	cmp	r3, #1
 800106c:	d027      	beq.n	80010be <Converter+0x76>
 800106e:	e036      	b.n	80010de <Converter+0x96>
		case DECA: result = (int)(num / 10); break;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	210a      	movs	r1, #10
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff f8db 	bl	8000230 <__divsi3>
 800107a:	0003      	movs	r3, r0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e02e      	b.n	80010de <Converter+0x96>
		case UNITY: result = (int)(num % 10); break;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	210a      	movs	r1, #10
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff f9b9 	bl	80003fc <__aeabi_idivmod>
 800108a:	000b      	movs	r3, r1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e026      	b.n	80010de <Converter+0x96>
		case BCD_TO_DEC: result = (int)((num / 16 * 10) + (num % 16)); break;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	da00      	bge.n	8001098 <Converter+0x50>
 8001096:	330f      	adds	r3, #15
 8001098:	111b      	asrs	r3, r3, #4
 800109a:	001a      	movs	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	189b      	adds	r3, r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	0019      	movs	r1, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <Converter+0xa0>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	d504      	bpl.n	80010b8 <Converter+0x70>
 80010ae:	3b01      	subs	r3, #1
 80010b0:	2210      	movs	r2, #16
 80010b2:	4252      	negs	r2, r2
 80010b4:	4313      	orrs	r3, r2
 80010b6:	3301      	adds	r3, #1
 80010b8:	18cb      	adds	r3, r1, r3
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e00f      	b.n	80010de <Converter+0x96>
		case DEC_TO_BCD: result = (int)((num / 10 * 16) + (num % 10)); break;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	210a      	movs	r1, #10
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff f8b4 	bl	8000230 <__divsi3>
 80010c8:	0003      	movs	r3, r0
 80010ca:	011c      	lsls	r4, r3, #4
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	210a      	movs	r1, #10
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff f993 	bl	80003fc <__aeabi_idivmod>
 80010d6:	000b      	movs	r3, r1
 80010d8:	18e3      	adds	r3, r4, r3
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	46c0      	nop			@ (mov r8, r8)
	}

	return result;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b005      	add	sp, #20
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	8000000f 	.word	0x8000000f

080010ec <DS3231_SetTime>:

void DS3231_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds){
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	0004      	movs	r4, r0
 80010f4:	0008      	movs	r0, r1
 80010f6:	0011      	movs	r1, r2
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	1c22      	adds	r2, r4, #0
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	1dbb      	adds	r3, r7, #6
 8001100:	1c02      	adds	r2, r0, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	1d7b      	adds	r3, r7, #5
 8001106:	1c0a      	adds	r2, r1, #0
 8001108:	701a      	strb	r2, [r3, #0]
  uint8_t datin[2];

  datin[0] = 0x00;
 800110a:	240c      	movs	r4, #12
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
  datin[1] = Converter(DEC_TO_BCD, seconds);
 8001112:	1d7b      	adds	r3, r7, #5
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0019      	movs	r1, r3
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff95 	bl	8001048 <Converter>
 800111e:	0003      	movs	r3, r0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	193b      	adds	r3, r7, r4
 8001124:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
 8001126:	193a      	adds	r2, r7, r4
 8001128:	481a      	ldr	r0, [pc, #104]	@ (8001194 <DS3231_SetTime+0xa8>)
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2302      	movs	r3, #2
 8001130:	21d0      	movs	r1, #208	@ 0xd0
 8001132:	f000 fe49 	bl	8001dc8 <HAL_I2C_Master_Transmit>

  datin[0] = 0x01;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
  datin[1] = Converter(DEC_TO_BCD, minutes);
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0019      	movs	r1, r3
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff ff80 	bl	8001048 <Converter>
 8001148:	0003      	movs	r3, r0
 800114a:	b2da      	uxtb	r2, r3
 800114c:	193b      	adds	r3, r7, r4
 800114e:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
 8001150:	193a      	adds	r2, r7, r4
 8001152:	4810      	ldr	r0, [pc, #64]	@ (8001194 <DS3231_SetTime+0xa8>)
 8001154:	2364      	movs	r3, #100	@ 0x64
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	21d0      	movs	r1, #208	@ 0xd0
 800115c:	f000 fe34 	bl	8001dc8 <HAL_I2C_Master_Transmit>

  datin[0] = 0x02;
 8001160:	193b      	adds	r3, r7, r4
 8001162:	2202      	movs	r2, #2
 8001164:	701a      	strb	r2, [r3, #0]
  datin[1] = Converter(DEC_TO_BCD, hours);
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0019      	movs	r1, r3
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff6b 	bl	8001048 <Converter>
 8001172:	0003      	movs	r3, r0
 8001174:	b2da      	uxtb	r2, r3
 8001176:	193b      	adds	r3, r7, r4
 8001178:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
 800117a:	193a      	adds	r2, r7, r4
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <DS3231_SetTime+0xa8>)
 800117e:	2364      	movs	r3, #100	@ 0x64
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2302      	movs	r3, #2
 8001184:	21d0      	movs	r1, #208	@ 0xd0
 8001186:	f000 fe1f 	bl	8001dc8 <HAL_I2C_Master_Transmit>
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b005      	add	sp, #20
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	20000080 	.word	0x20000080

08001198 <DS3231_SetDate>:

void DS3231_SetDate(uint8_t date, uint8_t month, uint8_t year){
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b087      	sub	sp, #28
 800119c:	af02      	add	r7, sp, #8
 800119e:	0004      	movs	r4, r0
 80011a0:	0008      	movs	r0, r1
 80011a2:	0011      	movs	r1, r2
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	1c22      	adds	r2, r4, #0
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	1c02      	adds	r2, r0, #0
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	1d7b      	adds	r3, r7, #5
 80011b2:	1c0a      	adds	r2, r1, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  uint8_t datin[2];

  datin[0] = 0x04;
 80011b6:	240c      	movs	r4, #12
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2204      	movs	r2, #4
 80011bc:	701a      	strb	r2, [r3, #0]
  datin[1] = Converter(DEC_TO_BCD, date);
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	0019      	movs	r1, r3
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff3f 	bl	8001048 <Converter>
 80011ca:	0003      	movs	r3, r0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
 80011d2:	193a      	adds	r2, r7, r4
 80011d4:	481a      	ldr	r0, [pc, #104]	@ (8001240 <DS3231_SetDate+0xa8>)
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2302      	movs	r3, #2
 80011dc:	21d0      	movs	r1, #208	@ 0xd0
 80011de:	f000 fdf3 	bl	8001dc8 <HAL_I2C_Master_Transmit>

  datin[0] = 0x05;
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	2205      	movs	r2, #5
 80011e6:	701a      	strb	r2, [r3, #0]
  datin[1] = Converter(DEC_TO_BCD, month);
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	0019      	movs	r1, r3
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff ff2a 	bl	8001048 <Converter>
 80011f4:	0003      	movs	r3, r0
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
 80011fc:	193a      	adds	r2, r7, r4
 80011fe:	4810      	ldr	r0, [pc, #64]	@ (8001240 <DS3231_SetDate+0xa8>)
 8001200:	2364      	movs	r3, #100	@ 0x64
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2302      	movs	r3, #2
 8001206:	21d0      	movs	r1, #208	@ 0xd0
 8001208:	f000 fdde 	bl	8001dc8 <HAL_I2C_Master_Transmit>

  datin[0] = 0x06;
 800120c:	193b      	adds	r3, r7, r4
 800120e:	2206      	movs	r2, #6
 8001210:	701a      	strb	r2, [r3, #0]
  datin[1] = Converter(DEC_TO_BCD, year);
 8001212:	1d7b      	adds	r3, r7, #5
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0019      	movs	r1, r3
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff15 	bl	8001048 <Converter>
 800121e:	0003      	movs	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	193b      	adds	r3, r7, r4
 8001224:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
 8001226:	193a      	adds	r2, r7, r4
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <DS3231_SetDate+0xa8>)
 800122a:	2364      	movs	r3, #100	@ 0x64
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2302      	movs	r3, #2
 8001230:	21d0      	movs	r1, #208	@ 0xd0
 8001232:	f000 fdc9 	bl	8001dc8 <HAL_I2C_Master_Transmit>
}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b005      	add	sp, #20
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	20000080 	.word	0x20000080

08001244 <ConvertDataForLcd>:

void ConvertDataForLcd(void){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  if(tim.hours < 10) sprintf(bf_hours, "0%d", tim.hours);
 8001248:	4b4a      	ldr	r3, [pc, #296]	@ (8001374 <ConvertDataForLcd+0x130>)
 800124a:	789b      	ldrb	r3, [r3, #2]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d808      	bhi.n	8001262 <ConvertDataForLcd+0x1e>
 8001250:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001252:	789b      	ldrb	r3, [r3, #2]
 8001254:	001a      	movs	r2, r3
 8001256:	4948      	ldr	r1, [pc, #288]	@ (8001378 <ConvertDataForLcd+0x134>)
 8001258:	4b48      	ldr	r3, [pc, #288]	@ (800137c <ConvertDataForLcd+0x138>)
 800125a:	0018      	movs	r0, r3
 800125c:	f003 f854 	bl	8004308 <siprintf>
 8001260:	e007      	b.n	8001272 <ConvertDataForLcd+0x2e>
  else sprintf(bf_hours, "%d", tim.hours);
 8001262:	4b44      	ldr	r3, [pc, #272]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001264:	789b      	ldrb	r3, [r3, #2]
 8001266:	001a      	movs	r2, r3
 8001268:	4945      	ldr	r1, [pc, #276]	@ (8001380 <ConvertDataForLcd+0x13c>)
 800126a:	4b44      	ldr	r3, [pc, #272]	@ (800137c <ConvertDataForLcd+0x138>)
 800126c:	0018      	movs	r0, r3
 800126e:	f003 f84b 	bl	8004308 <siprintf>

  if(tim.minutes < 10) sprintf(bf_min, "0%d", tim.minutes);
 8001272:	4b40      	ldr	r3, [pc, #256]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	2b09      	cmp	r3, #9
 8001278:	d808      	bhi.n	800128c <ConvertDataForLcd+0x48>
 800127a:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <ConvertDataForLcd+0x130>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	001a      	movs	r2, r3
 8001280:	493d      	ldr	r1, [pc, #244]	@ (8001378 <ConvertDataForLcd+0x134>)
 8001282:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <ConvertDataForLcd+0x140>)
 8001284:	0018      	movs	r0, r3
 8001286:	f003 f83f 	bl	8004308 <siprintf>
 800128a:	e007      	b.n	800129c <ConvertDataForLcd+0x58>
  else sprintf(bf_min, "%d", tim.minutes);
 800128c:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <ConvertDataForLcd+0x130>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	001a      	movs	r2, r3
 8001292:	493b      	ldr	r1, [pc, #236]	@ (8001380 <ConvertDataForLcd+0x13c>)
 8001294:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <ConvertDataForLcd+0x140>)
 8001296:	0018      	movs	r0, r3
 8001298:	f003 f836 	bl	8004308 <siprintf>

  if(tim.seconds < 10) sprintf(bf_sec, "0%d", tim.seconds);
 800129c:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <ConvertDataForLcd+0x130>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d808      	bhi.n	80012b6 <ConvertDataForLcd+0x72>
 80012a4:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	001a      	movs	r2, r3
 80012aa:	4933      	ldr	r1, [pc, #204]	@ (8001378 <ConvertDataForLcd+0x134>)
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <ConvertDataForLcd+0x144>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f003 f82a 	bl	8004308 <siprintf>
 80012b4:	e007      	b.n	80012c6 <ConvertDataForLcd+0x82>
  else sprintf(bf_sec, "%d", tim.seconds);
 80012b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	001a      	movs	r2, r3
 80012bc:	4930      	ldr	r1, [pc, #192]	@ (8001380 <ConvertDataForLcd+0x13c>)
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <ConvertDataForLcd+0x144>)
 80012c0:	0018      	movs	r0, r3
 80012c2:	f003 f821 	bl	8004308 <siprintf>

  if(tim.day < 10) sprintf(bf_day, "0%d", tim.day);
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012c8:	78db      	ldrb	r3, [r3, #3]
 80012ca:	2b09      	cmp	r3, #9
 80012cc:	d808      	bhi.n	80012e0 <ConvertDataForLcd+0x9c>
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	001a      	movs	r2, r3
 80012d4:	4928      	ldr	r1, [pc, #160]	@ (8001378 <ConvertDataForLcd+0x134>)
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <ConvertDataForLcd+0x148>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f003 f815 	bl	8004308 <siprintf>
 80012de:	e007      	b.n	80012f0 <ConvertDataForLcd+0xac>
  else sprintf(bf_day, "%d", tim.day);
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	001a      	movs	r2, r3
 80012e6:	4926      	ldr	r1, [pc, #152]	@ (8001380 <ConvertDataForLcd+0x13c>)
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <ConvertDataForLcd+0x148>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f003 f80c 	bl	8004308 <siprintf>

  if(tim.date < 10) sprintf(bf_date, "0%d", tim.date);
 80012f0:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d808      	bhi.n	800130a <ConvertDataForLcd+0xc6>
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <ConvertDataForLcd+0x130>)
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	001a      	movs	r2, r3
 80012fe:	491e      	ldr	r1, [pc, #120]	@ (8001378 <ConvertDataForLcd+0x134>)
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <ConvertDataForLcd+0x14c>)
 8001302:	0018      	movs	r0, r3
 8001304:	f003 f800 	bl	8004308 <siprintf>
 8001308:	e007      	b.n	800131a <ConvertDataForLcd+0xd6>
  else sprintf(bf_date, "%d", tim.date);
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <ConvertDataForLcd+0x130>)
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	001a      	movs	r2, r3
 8001310:	491b      	ldr	r1, [pc, #108]	@ (8001380 <ConvertDataForLcd+0x13c>)
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <ConvertDataForLcd+0x14c>)
 8001314:	0018      	movs	r0, r3
 8001316:	f002 fff7 	bl	8004308 <siprintf>

  if(tim.month < 10) sprintf(bf_month, "0%d", tim.month);
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <ConvertDataForLcd+0x130>)
 800131c:	795b      	ldrb	r3, [r3, #5]
 800131e:	2b09      	cmp	r3, #9
 8001320:	d808      	bhi.n	8001334 <ConvertDataForLcd+0xf0>
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001324:	795b      	ldrb	r3, [r3, #5]
 8001326:	001a      	movs	r2, r3
 8001328:	4913      	ldr	r1, [pc, #76]	@ (8001378 <ConvertDataForLcd+0x134>)
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <ConvertDataForLcd+0x150>)
 800132c:	0018      	movs	r0, r3
 800132e:	f002 ffeb 	bl	8004308 <siprintf>
 8001332:	e007      	b.n	8001344 <ConvertDataForLcd+0x100>
  else sprintf(bf_month, "%d", tim.month);
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	001a      	movs	r2, r3
 800133a:	4911      	ldr	r1, [pc, #68]	@ (8001380 <ConvertDataForLcd+0x13c>)
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <ConvertDataForLcd+0x150>)
 800133e:	0018      	movs	r0, r3
 8001340:	f002 ffe2 	bl	8004308 <siprintf>

  if(tim.year < 10) sprintf(bf_year, "0%d", tim.year);
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001346:	799b      	ldrb	r3, [r3, #6]
 8001348:	2b09      	cmp	r3, #9
 800134a:	d808      	bhi.n	800135e <ConvertDataForLcd+0x11a>
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <ConvertDataForLcd+0x130>)
 800134e:	799b      	ldrb	r3, [r3, #6]
 8001350:	001a      	movs	r2, r3
 8001352:	4909      	ldr	r1, [pc, #36]	@ (8001378 <ConvertDataForLcd+0x134>)
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <ConvertDataForLcd+0x154>)
 8001356:	0018      	movs	r0, r3
 8001358:	f002 ffd6 	bl	8004308 <siprintf>
  else sprintf(bf_year, "%d", tim.year);
}
 800135c:	e007      	b.n	800136e <ConvertDataForLcd+0x12a>
  else sprintf(bf_year, "%d", tim.year);
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <ConvertDataForLcd+0x130>)
 8001360:	799b      	ldrb	r3, [r3, #6]
 8001362:	001a      	movs	r2, r3
 8001364:	4906      	ldr	r1, [pc, #24]	@ (8001380 <ConvertDataForLcd+0x13c>)
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <ConvertDataForLcd+0x154>)
 8001368:	0018      	movs	r0, r3
 800136a:	f002 ffcd 	bl	8004308 <siprintf>
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000180 	.word	0x20000180
 8001378:	08004c70 	.word	0x08004c70
 800137c:	20000188 	.word	0x20000188
 8001380:	08004c74 	.word	0x08004c74
 8001384:	20000190 	.word	0x20000190
 8001388:	20000198 	.word	0x20000198
 800138c:	200001a0 	.word	0x200001a0
 8001390:	200001a8 	.word	0x200001a8
 8001394:	200001b0 	.word	0x200001b0
 8001398:	200001b8 	.word	0x200001b8

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_MspInit+0x24>)
 80013ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_MspInit+0x24>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <HAL_MspInit+0x24>)
 80013ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_MspInit+0x24>)
 80013be:	2180      	movs	r1, #128	@ 0x80
 80013c0:	0549      	lsls	r1, r1, #21
 80013c2:	430a      	orrs	r2, r1
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	240c      	movs	r4, #12
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	0018      	movs	r0, r3
 80013de:	2314      	movs	r3, #20
 80013e0:	001a      	movs	r2, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	f002 ffb2 	bl	800434c <memset>
  if(hi2c->Instance==I2C1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d129      	bne.n	8001446 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 80013f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 80013f8:	2102      	movs	r1, #2
 80013fa:	430a      	orrs	r2, r1
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 8001400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	22c0      	movs	r2, #192	@ 0xc0
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001412:	0021      	movs	r1, r4
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2212      	movs	r2, #18
 8001418:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2203      	movs	r2, #3
 8001424:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2204      	movs	r2, #4
 800142a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	187b      	adds	r3, r7, r1
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_I2C_MspInit+0x88>)
 8001430:	0019      	movs	r1, r3
 8001432:	0010      	movs	r0, r2
 8001434:	f000 fa74 	bl	8001920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 800143a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 800143e:	2180      	movs	r1, #128	@ 0x80
 8001440:	0389      	lsls	r1, r1, #14
 8001442:	430a      	orrs	r2, r1
 8001444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b009      	add	sp, #36	@ 0x24
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	40005400 	.word	0x40005400
 8001454:	40021000 	.word	0x40021000
 8001458:	50000400 	.word	0x50000400

0800145c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	240c      	movs	r4, #12
 8001466:	193b      	adds	r3, r7, r4
 8001468:	0018      	movs	r0, r3
 800146a:	2314      	movs	r3, #20
 800146c:	001a      	movs	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	f002 ff6c 	bl	800434c <memset>
  if(hspi->Instance==SPI1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <HAL_SPI_MspInit+0x80>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d129      	bne.n	80014d2 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <HAL_SPI_MspInit+0x84>)
 8001480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_SPI_MspInit+0x84>)
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	0149      	lsls	r1, r1, #5
 8001488:	430a      	orrs	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_SPI_MspInit+0x84>)
 800148e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <HAL_SPI_MspInit+0x84>)
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_SPI_MspInit+0x84>)
 800149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014a4:	0021      	movs	r1, r4
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	22a0      	movs	r2, #160	@ 0xa0
 80014aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2202      	movs	r2, #2
 80014b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2203      	movs	r2, #3
 80014bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	187a      	adds	r2, r7, r1
 80014c6:	23a0      	movs	r3, #160	@ 0xa0
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f000 fa27 	bl	8001920 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b009      	add	sp, #36	@ 0x24
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_TIM_Base_MspInit+0x38>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10d      	bne.n	8001512 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_TIM_Base_MspInit+0x3c>)
 80014f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_TIM_Base_MspInit+0x3c>)
 80014fc:	2110      	movs	r1, #16
 80014fe:	430a      	orrs	r2, r1
 8001500:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2011      	movs	r0, #17
 8001508:	f000 f9d8 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800150c:	2011      	movs	r0, #17
 800150e:	f000 f9ea 	bl	80018e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	40001000 	.word	0x40001000
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	46c0      	nop			@ (mov r8, r8)
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 f8ca 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	46c0      	nop			@ (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <TIM6_DAC_IRQHandler+0x14>)
 800155e:	0018      	movs	r0, r3
 8001560:	f002 fd34 	bl	8003fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	2000012c 	.word	0x2000012c

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	18d3      	adds	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f002 fedc 	bl	800435c <__errno>
 80015a4:	0003      	movs	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	425b      	negs	r3, r3
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	18d2      	adds	r2, r2, r3
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b006      	add	sp, #24
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20002000 	.word	0x20002000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200001c0 	.word	0x200001c0
 80015d8:	20000310 	.word	0x20000310

080015dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80015e8:	480d      	ldr	r0, [pc, #52]	@ (8001620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ec:	f7ff fff6 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	@ (8001628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <LoopForever+0xe>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	@ (8001634 <LoopForever+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001616:	f002 fea7 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff f96b 	bl	80008f4 <main>

0800161e <LoopForever>:

LoopForever:
    b LoopForever
 800161e:	e7fe      	b.n	800161e <LoopForever>
  ldr   r0, =_estack
 8001620:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800162c:	08004d70 	.word	0x08004d70
  ldr r2, =_sbss
 8001630:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001634:	20000310 	.word	0x20000310

08001638 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_COMP_IRQHandler>
	...

0800163c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_Init+0x3c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_Init+0x3c>)
 800164e:	2140      	movs	r1, #64	@ 0x40
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001654:	2000      	movs	r0, #0
 8001656:	f000 f811 	bl	800167c <HAL_InitTick>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d003      	beq.n	8001666 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e001      	b.n	800166a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001666:	f7ff fe9f 	bl	80013a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_InitTick+0x5c>)
 8001686:	681c      	ldr	r4, [r3, #0]
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_InitTick+0x60>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	0019      	movs	r1, r3
 800168e:	23fa      	movs	r3, #250	@ 0xfa
 8001690:	0098      	lsls	r0, r3, #2
 8001692:	f7fe fd43 	bl	800011c <__udivsi3>
 8001696:	0003      	movs	r3, r0
 8001698:	0019      	movs	r1, r3
 800169a:	0020      	movs	r0, r4
 800169c:	f7fe fd3e 	bl	800011c <__udivsi3>
 80016a0:	0003      	movs	r3, r0
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 f92f 	bl	8001906 <HAL_SYSTICK_Config>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00f      	b.n	80016d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d80b      	bhi.n	80016ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	2301      	movs	r3, #1
 80016ba:	425b      	negs	r3, r3
 80016bc:	2200      	movs	r2, #0
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 f8fc 	bl	80018bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_InitTick+0x64>)
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b003      	add	sp, #12
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	20000004 	.word	0x20000004
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_IncTick+0x1c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	001a      	movs	r2, r3
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_IncTick+0x20>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	18d2      	adds	r2, r2, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_IncTick+0x20>)
 80016f6:	601a      	str	r2, [r3, #0]
}
 80016f8:	46c0      	nop			@ (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	2000000c 	.word	0x2000000c
 8001704:	200001c4 	.word	0x200001c4

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b02      	ldr	r3, [pc, #8]	@ (8001718 <HAL_GetTick+0x10>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	200001c4 	.word	0x200001c4

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fff0 	bl	8001708 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	001a      	movs	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	189b      	adds	r3, r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	f7ff ffe0 	bl	8001708 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	2000000c 	.word	0x2000000c

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	0002      	movs	r2, r0
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b7f      	cmp	r3, #127	@ 0x7f
 8001776:	d809      	bhi.n	800178c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	231f      	movs	r3, #31
 8001780:	401a      	ands	r2, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <__NVIC_EnableIRQ+0x30>)
 8001784:	2101      	movs	r1, #1
 8001786:	4091      	lsls	r1, r2
 8001788:	000a      	movs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
  }
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	0002      	movs	r2, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ac:	d828      	bhi.n	8001800 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ae:	4a2f      	ldr	r2, [pc, #188]	@ (800186c <__NVIC_SetPriority+0xd4>)
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	33c0      	adds	r3, #192	@ 0xc0
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	589b      	ldr	r3, [r3, r2]
 80017be:	1dfa      	adds	r2, r7, #7
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	0011      	movs	r1, r2
 80017c4:	2203      	movs	r2, #3
 80017c6:	400a      	ands	r2, r1
 80017c8:	00d2      	lsls	r2, r2, #3
 80017ca:	21ff      	movs	r1, #255	@ 0xff
 80017cc:	4091      	lsls	r1, r2
 80017ce:	000a      	movs	r2, r1
 80017d0:	43d2      	mvns	r2, r2
 80017d2:	401a      	ands	r2, r3
 80017d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	22ff      	movs	r2, #255	@ 0xff
 80017dc:	401a      	ands	r2, r3
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0018      	movs	r0, r3
 80017e4:	2303      	movs	r3, #3
 80017e6:	4003      	ands	r3, r0
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ec:	481f      	ldr	r0, [pc, #124]	@ (800186c <__NVIC_SetPriority+0xd4>)
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	430a      	orrs	r2, r1
 80017f8:	33c0      	adds	r3, #192	@ 0xc0
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017fe:	e031      	b.n	8001864 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001800:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <__NVIC_SetPriority+0xd8>)
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0019      	movs	r1, r3
 8001808:	230f      	movs	r3, #15
 800180a:	400b      	ands	r3, r1
 800180c:	3b08      	subs	r3, #8
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3306      	adds	r3, #6
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1dfa      	adds	r2, r7, #7
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	0011      	movs	r1, r2
 8001820:	2203      	movs	r2, #3
 8001822:	400a      	ands	r2, r1
 8001824:	00d2      	lsls	r2, r2, #3
 8001826:	21ff      	movs	r1, #255	@ 0xff
 8001828:	4091      	lsls	r1, r2
 800182a:	000a      	movs	r2, r1
 800182c:	43d2      	mvns	r2, r2
 800182e:	401a      	ands	r2, r3
 8001830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	22ff      	movs	r2, #255	@ 0xff
 8001838:	401a      	ands	r2, r3
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	0018      	movs	r0, r3
 8001840:	2303      	movs	r3, #3
 8001842:	4003      	ands	r3, r0
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001848:	4809      	ldr	r0, [pc, #36]	@ (8001870 <__NVIC_SetPriority+0xd8>)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	001c      	movs	r4, r3
 8001850:	230f      	movs	r3, #15
 8001852:	4023      	ands	r3, r4
 8001854:	3b08      	subs	r3, #8
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	430a      	orrs	r2, r1
 800185a:	3306      	adds	r3, #6
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	18c3      	adds	r3, r0, r3
 8001860:	3304      	adds	r3, #4
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b003      	add	sp, #12
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	045b      	lsls	r3, r3, #17
 8001884:	429a      	cmp	r2, r3
 8001886:	d301      	bcc.n	800188c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001888:	2301      	movs	r3, #1
 800188a:	e010      	b.n	80018ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <SysTick_Config+0x44>)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	3a01      	subs	r2, #1
 8001892:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001894:	2301      	movs	r3, #1
 8001896:	425b      	negs	r3, r3
 8001898:	2103      	movs	r1, #3
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff ff7c 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <SysTick_Config+0x44>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <SysTick_Config+0x44>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	210f      	movs	r1, #15
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	0002      	movs	r2, r0
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff33 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ffaf 	bl	8001874 <SysTick_Config>
 8001916:	0003      	movs	r3, r0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001936:	e14f      	b.n	8001bd8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4091      	lsls	r1, r2
 8001942:	000a      	movs	r2, r1
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <HAL_GPIO_Init+0x30>
 800194e:	e140      	b.n	8001bd2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	4013      	ands	r3, r2
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	409a      	lsls	r2, r3
 8001976:	0013      	movs	r3, r2
 8001978:	43da      	mvns	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	0013      	movs	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	2201      	movs	r2, #1
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2203      	movs	r2, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2207      	movs	r2, #7
 8001a24:	4013      	ands	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	400b      	ands	r3, r1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	6939      	ldr	r1, [r7, #16]
 8001a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2203      	movs	r2, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	23c0      	movs	r3, #192	@ 0xc0
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	4013      	ands	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_GPIO_Init+0x17c>
 8001a9a:	e09a      	b.n	8001bd2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa0:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa8:	4a52      	ldr	r2, [pc, #328]	@ (8001bf4 <HAL_GPIO_Init+0x2d4>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	589b      	ldr	r3, [r3, r2]
 8001ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4013      	ands	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	23a0      	movs	r3, #160	@ 0xa0
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x1ea>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	@ (8001bf8 <HAL_GPIO_Init+0x2d8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1e6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a46      	ldr	r2, [pc, #280]	@ (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1de>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a44      	ldr	r2, [pc, #272]	@ (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1da>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	2103      	movs	r1, #3
 8001b10:	400a      	ands	r2, r1
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	@ (8001bf4 <HAL_GPIO_Init+0x2d4>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b37      	ldr	r3, [pc, #220]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	035b      	lsls	r3, r3, #13
 8001b42:	4013      	ands	r3, r2
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	039b      	lsls	r3, r3, #14
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b78:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b7e:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43da      	mvns	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	1e13      	subs	r3, r2, #0
 8001be2:	d000      	beq.n	8001be6 <HAL_GPIO_Init+0x2c6>
 8001be4:	e6a8      	b.n	8001938 <HAL_GPIO_Init+0x18>
  }
}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46c0      	nop			@ (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b006      	add	sp, #24
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	50000800 	.word	0x50000800
 8001c00:	50000c00 	.word	0x50000c00
 8001c04:	50001c00 	.word	0x50001c00
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	0008      	movs	r0, r1
 8001c16:	0011      	movs	r1, r2
 8001c18:	1cbb      	adds	r3, r7, #2
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	1c7b      	adds	r3, r7, #1
 8001c20:	1c0a      	adds	r2, r1, #0
 8001c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	1c7b      	adds	r3, r7, #1
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2c:	1cbb      	adds	r3, r7, #2
 8001c2e:	881a      	ldrh	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c34:	e003      	b.n	8001c3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	000a      	movs	r2, r1
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	041a      	lsls	r2, r3, #16
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	1cb9      	adds	r1, r7, #2
 8001c6a:	8809      	ldrh	r1, [r1, #0]
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	619a      	str	r2, [r3, #24]
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e08f      	b.n	8001dae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2241      	movs	r2, #65	@ 0x41
 8001c92:	5c9b      	ldrb	r3, [r3, r2]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2240      	movs	r2, #64	@ 0x40
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff fb93 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2241      	movs	r2, #65	@ 0x41
 8001cae:	2124      	movs	r1, #36	@ 0x24
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	493b      	ldr	r1, [pc, #236]	@ (8001db8 <HAL_I2C_Init+0x13c>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4938      	ldr	r1, [pc, #224]	@ (8001dbc <HAL_I2C_Init+0x140>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	0209      	lsls	r1, r1, #8
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e007      	b.n	8001d0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2184      	movs	r1, #132	@ 0x84
 8001d04:	0209      	lsls	r1, r1, #8
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d109      	bne.n	8001d26 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	0109      	lsls	r1, r1, #4
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	e007      	b.n	8001d36 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4923      	ldr	r1, [pc, #140]	@ (8001dc0 <HAL_I2C_Init+0x144>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4920      	ldr	r1, [pc, #128]	@ (8001dc4 <HAL_I2C_Init+0x148>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	491a      	ldr	r1, [pc, #104]	@ (8001dbc <HAL_I2C_Init+0x140>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69d9      	ldr	r1, [r3, #28]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1a      	ldr	r2, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2241      	movs	r2, #65	@ 0x41
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2242      	movs	r2, #66	@ 0x42
 8001da8:	2100      	movs	r1, #0
 8001daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	f0ffffff 	.word	0xf0ffffff
 8001dbc:	ffff7fff 	.word	0xffff7fff
 8001dc0:	fffff7ff 	.word	0xfffff7ff
 8001dc4:	02008000 	.word	0x02008000

08001dc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	0008      	movs	r0, r1
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	1c02      	adds	r2, r0, #0
 8001ddc:	801a      	strh	r2, [r3, #0]
 8001dde:	2308      	movs	r3, #8
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	1c0a      	adds	r2, r1, #0
 8001de4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2241      	movs	r2, #65	@ 0x41
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d000      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0x2c>
 8001df2:	e10a      	b.n	800200a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Master_Transmit+0x3a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e104      	b.n	800200c <HAL_I2C_Master_Transmit+0x244>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2240      	movs	r2, #64	@ 0x40
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e0a:	f7ff fc7d 	bl	8001708 <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	0219      	lsls	r1, r3, #8
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f000 fbb0 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0ef      	b.n	800200c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2241      	movs	r2, #65	@ 0x41
 8001e30:	2121      	movs	r1, #33	@ 0x21
 8001e32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2242      	movs	r2, #66	@ 0x42
 8001e38:	2110      	movs	r1, #16
 8001e3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	18ba      	adds	r2, r7, r2
 8001e4e:	8812      	ldrh	r2, [r2, #0]
 8001e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2bff      	cmp	r3, #255	@ 0xff
 8001e60:	d906      	bls.n	8001e70 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	22ff      	movs	r2, #255	@ 0xff
 8001e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	045b      	lsls	r3, r3, #17
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e007      	b.n	8001e80 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	049b      	lsls	r3, r3, #18
 8001e7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d027      	beq.n	8001ed8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	697c      	ldr	r4, [r7, #20]
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	8819      	ldrh	r1, [r3, #0]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	4b51      	ldr	r3, [pc, #324]	@ (8002014 <HAL_I2C_Master_Transmit+0x24c>)
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	0023      	movs	r3, r4
 8001ed2:	f000 fd31 	bl	8002938 <I2C_TransferConfig>
 8001ed6:	e06f      	b.n	8001fb8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	697c      	ldr	r4, [r7, #20]
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	8819      	ldrh	r1, [r3, #0]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8002014 <HAL_I2C_Master_Transmit+0x24c>)
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	0023      	movs	r3, r4
 8001eee:	f000 fd23 	bl	8002938 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ef2:	e061      	b.n	8001fb8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fb9a 	bl	8002634 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e081      	b.n	800200c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03a      	beq.n	8001fb8 <HAL_I2C_Master_Transmit+0x1f0>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d136      	bne.n	8001fb8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	0013      	movs	r3, r2
 8001f54:	2200      	movs	r2, #0
 8001f56:	2180      	movs	r1, #128	@ 0x80
 8001f58:	f000 fb14 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e053      	b.n	800200c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2bff      	cmp	r3, #255	@ 0xff
 8001f6c:	d911      	bls.n	8001f92 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	22ff      	movs	r2, #255	@ 0xff
 8001f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	045c      	lsls	r4, r3, #17
 8001f7e:	230a      	movs	r3, #10
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	8819      	ldrh	r1, [r3, #0]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	0023      	movs	r3, r4
 8001f8c:	f000 fcd4 	bl	8002938 <I2C_TransferConfig>
 8001f90:	e012      	b.n	8001fb8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	049c      	lsls	r4, r3, #18
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	8819      	ldrh	r1, [r3, #0]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	0023      	movs	r3, r4
 8001fb4:	f000 fcc0 	bl	8002938 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d198      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 fb79 	bl	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e01a      	b.n	800200c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	490b      	ldr	r1, [pc, #44]	@ (8002018 <HAL_I2C_Master_Transmit+0x250>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2241      	movs	r2, #65	@ 0x41
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2242      	movs	r2, #66	@ 0x42
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2240      	movs	r2, #64	@ 0x40
 8002002:	2100      	movs	r1, #0
 8002004:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
  }
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b007      	add	sp, #28
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	80002000 	.word	0x80002000
 8002018:	fe00e800 	.word	0xfe00e800

0800201c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	000c      	movs	r4, r1
 8002026:	0010      	movs	r0, r2
 8002028:	0019      	movs	r1, r3
 800202a:	230a      	movs	r3, #10
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	1c22      	adds	r2, r4, #0
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	2308      	movs	r3, #8
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	1c02      	adds	r2, r0, #0
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	1c0a      	adds	r2, r1, #0
 800203e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2241      	movs	r2, #65	@ 0x41
 8002044:	5c9b      	ldrb	r3, [r3, r2]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b20      	cmp	r3, #32
 800204a:	d000      	beq.n	800204e <HAL_I2C_Mem_Read+0x32>
 800204c:	e110      	b.n	8002270 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <HAL_I2C_Mem_Read+0x42>
 8002054:	232c      	movs	r3, #44	@ 0x2c
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2280      	movs	r2, #128	@ 0x80
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e103      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2240      	movs	r2, #64	@ 0x40
 800206e:	5c9b      	ldrb	r3, [r3, r2]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_I2C_Mem_Read+0x5c>
 8002074:	2302      	movs	r3, #2
 8002076:	e0fc      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2240      	movs	r2, #64	@ 0x40
 800207c:	2101      	movs	r1, #1
 800207e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002080:	f7ff fb42 	bl	8001708 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	0219      	lsls	r1, r3, #8
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2319      	movs	r3, #25
 8002094:	2201      	movs	r2, #1
 8002096:	f000 fa75 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0e7      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2241      	movs	r2, #65	@ 0x41
 80020a6:	2122      	movs	r1, #34	@ 0x22
 80020a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2242      	movs	r2, #66	@ 0x42
 80020ae:	2140      	movs	r1, #64	@ 0x40
 80020b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	222c      	movs	r2, #44	@ 0x2c
 80020c2:	18ba      	adds	r2, r7, r2
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ce:	1dbb      	adds	r3, r7, #6
 80020d0:	881c      	ldrh	r4, [r3, #0]
 80020d2:	2308      	movs	r3, #8
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	230a      	movs	r3, #10
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	8819      	ldrh	r1, [r3, #0]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	0023      	movs	r3, r4
 80020ea:	f000 f9c7 	bl	800247c <I2C_RequestMemoryRead>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d005      	beq.n	80020fe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0b9      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2bff      	cmp	r3, #255	@ 0xff
 8002106:	d911      	bls.n	800212c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	b2da      	uxtb	r2, r3
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	045c      	lsls	r4, r3, #17
 8002118:	230a      	movs	r3, #10
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	8819      	ldrh	r1, [r3, #0]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	4b56      	ldr	r3, [pc, #344]	@ (800227c <HAL_I2C_Mem_Read+0x260>)
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	0023      	movs	r3, r4
 8002126:	f000 fc07 	bl	8002938 <I2C_TransferConfig>
 800212a:	e012      	b.n	8002152 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213a:	b2da      	uxtb	r2, r3
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	049c      	lsls	r4, r3, #18
 8002140:	230a      	movs	r3, #10
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	8819      	ldrh	r1, [r3, #0]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <HAL_I2C_Mem_Read+0x260>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	0023      	movs	r3, r4
 800214e:	f000 fbf3 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	0013      	movs	r3, r2
 800215c:	2200      	movs	r2, #0
 800215e:	2104      	movs	r1, #4
 8002160:	f000 fa10 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e082      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03a      	beq.n	800221e <HAL_I2C_Mem_Read+0x202>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d136      	bne.n	800221e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	0013      	movs	r3, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	2180      	movs	r1, #128	@ 0x80
 80021be:	f000 f9e1 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e053      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2bff      	cmp	r3, #255	@ 0xff
 80021d2:	d911      	bls.n	80021f8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	045c      	lsls	r4, r3, #17
 80021e4:	230a      	movs	r3, #10
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	8819      	ldrh	r1, [r3, #0]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	0023      	movs	r3, r4
 80021f2:	f000 fba1 	bl	8002938 <I2C_TransferConfig>
 80021f6:	e012      	b.n	800221e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	049c      	lsls	r4, r3, #18
 800220c:	230a      	movs	r3, #10
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	8819      	ldrh	r1, [r3, #0]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	0023      	movs	r3, r4
 800221a:	f000 fb8d 	bl	8002938 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d194      	bne.n	8002152 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fa46 	bl	80026c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e01a      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2220      	movs	r2, #32
 8002242:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	490c      	ldr	r1, [pc, #48]	@ (8002280 <HAL_I2C_Mem_Read+0x264>)
 8002250:	400a      	ands	r2, r1
 8002252:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2241      	movs	r2, #65	@ 0x41
 8002258:	2120      	movs	r1, #32
 800225a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2242      	movs	r2, #66	@ 0x42
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2240      	movs	r2, #64	@ 0x40
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b007      	add	sp, #28
 8002278:	bd90      	pop	{r4, r7, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	80002400 	.word	0x80002400
 8002280:	fe00e800 	.word	0xfe00e800

08002284 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	230a      	movs	r3, #10
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	1c0a      	adds	r2, r1, #0
 8002296:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2241      	movs	r2, #65	@ 0x41
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d000      	beq.n	80022aa <HAL_I2C_IsDeviceReady+0x26>
 80022a8:	e0df      	b.n	800246a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	401a      	ands	r2, r3
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e0d4      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2240      	movs	r2, #64	@ 0x40
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_IsDeviceReady+0x4c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0cd      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	2101      	movs	r1, #1
 80022d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2241      	movs	r2, #65	@ 0x41
 80022dc:	2124      	movs	r1, #36	@ 0x24
 80022de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_I2C_IsDeviceReady+0x7a>
 80022ee:	230a      	movs	r3, #10
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	059b      	lsls	r3, r3, #22
 80022f6:	0d9b      	lsrs	r3, r3, #22
 80022f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002474 <HAL_I2C_IsDeviceReady+0x1f0>)
 80022fa:	431a      	orrs	r2, r3
 80022fc:	e006      	b.n	800230c <HAL_I2C_IsDeviceReady+0x88>
 80022fe:	230a      	movs	r3, #10
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	059b      	lsls	r3, r3, #22
 8002306:	0d9b      	lsrs	r3, r3, #22
 8002308:	4a5b      	ldr	r2, [pc, #364]	@ (8002478 <HAL_I2C_IsDeviceReady+0x1f4>)
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002312:	f7ff f9f9 	bl	8001708 <HAL_GetTick>
 8002316:	0003      	movs	r3, r0
 8002318:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2220      	movs	r2, #32
 8002322:	4013      	ands	r3, r2
 8002324:	3b20      	subs	r3, #32
 8002326:	425a      	negs	r2, r3
 8002328:	4153      	adcs	r3, r2
 800232a:	b2da      	uxtb	r2, r3
 800232c:	231f      	movs	r3, #31
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2210      	movs	r2, #16
 800233a:	4013      	ands	r3, r2
 800233c:	3b10      	subs	r3, #16
 800233e:	425a      	negs	r2, r3
 8002340:	4153      	adcs	r3, r2
 8002342:	b2da      	uxtb	r2, r3
 8002344:	231e      	movs	r3, #30
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800234a:	e035      	b.n	80023b8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	d01a      	beq.n	8002388 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7ff f9d9 	bl	8001708 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <HAL_I2C_IsDeviceReady+0xe4>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2241      	movs	r2, #65	@ 0x41
 800236c:	2120      	movs	r1, #32
 800236e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	2220      	movs	r2, #32
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e071      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2220      	movs	r2, #32
 8002390:	4013      	ands	r3, r2
 8002392:	3b20      	subs	r3, #32
 8002394:	425a      	negs	r2, r3
 8002396:	4153      	adcs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	231f      	movs	r3, #31
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2210      	movs	r2, #16
 80023a8:	4013      	ands	r3, r2
 80023aa:	3b10      	subs	r3, #16
 80023ac:	425a      	negs	r2, r3
 80023ae:	4153      	adcs	r3, r2
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	231e      	movs	r3, #30
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023b8:	231f      	movs	r3, #31
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d104      	bne.n	80023cc <HAL_I2C_IsDeviceReady+0x148>
 80023c2:	231e      	movs	r3, #30
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0bf      	beq.n	800234c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2210      	movs	r2, #16
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d01a      	beq.n	8002410 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	0013      	movs	r3, r2
 80023e4:	2200      	movs	r2, #0
 80023e6:	2120      	movs	r1, #32
 80023e8:	f000 f8cc 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e03b      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2220      	movs	r2, #32
 80023fa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2241      	movs	r2, #65	@ 0x41
 8002400:	2120      	movs	r1, #32
 8002402:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e02d      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	0013      	movs	r3, r2
 800241a:	2200      	movs	r2, #0
 800241c:	2120      	movs	r1, #32
 800241e:	f000 f8b1 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e020      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2210      	movs	r2, #16
 8002430:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d900      	bls.n	800244a <HAL_I2C_IsDeviceReady+0x1c6>
 8002448:	e74d      	b.n	80022e6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2241      	movs	r2, #65	@ 0x41
 800244e:	2120      	movs	r1, #32
 8002450:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	2220      	movs	r2, #32
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2240      	movs	r2, #64	@ 0x40
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
  }
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b008      	add	sp, #32
 8002472:	bd80      	pop	{r7, pc}
 8002474:	02002000 	.word	0x02002000
 8002478:	02002800 	.word	0x02002800

0800247c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	000c      	movs	r4, r1
 8002486:	0010      	movs	r0, r2
 8002488:	0019      	movs	r1, r3
 800248a:	250a      	movs	r5, #10
 800248c:	197b      	adds	r3, r7, r5
 800248e:	1c22      	adds	r2, r4, #0
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	2308      	movs	r3, #8
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	1c02      	adds	r2, r0, #0
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	1dbb      	adds	r3, r7, #6
 800249c:	1c0a      	adds	r2, r1, #0
 800249e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	197b      	adds	r3, r7, r5
 80024a8:	8819      	ldrh	r1, [r3, #0]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	4b23      	ldr	r3, [pc, #140]	@ (800253c <I2C_RequestMemoryRead+0xc0>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2300      	movs	r3, #0
 80024b2:	f000 fa41 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b8:	6a39      	ldr	r1, [r7, #32]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0018      	movs	r0, r3
 80024be:	f000 f8b9 	bl	8002634 <I2C_WaitOnTXISFlagUntilTimeout>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d001      	beq.n	80024ca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e033      	b.n	8002532 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024d2:	2308      	movs	r3, #8
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
 80024e0:	e019      	b.n	8002516 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024e2:	2308      	movs	r3, #8
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	6a39      	ldr	r1, [r7, #32]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 f89a 	bl	8002634 <I2C_WaitOnTXISFlagUntilTimeout>
 8002500:	1e03      	subs	r3, r0, #0
 8002502:	d001      	beq.n	8002508 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e014      	b.n	8002532 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002508:	2308      	movs	r3, #8
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	0013      	movs	r3, r2
 8002520:	2200      	movs	r2, #0
 8002522:	2140      	movs	r1, #64	@ 0x40
 8002524:	f000 f82e 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d001      	beq.n	8002530 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bdb0      	pop	{r4, r5, r7, pc}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	80002000 	.word	0x80002000

08002540 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d103      	bne.n	800255e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	2b01      	cmp	r3, #1
 800256a:	d007      	beq.n	800257c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	619a      	str	r2, [r3, #24]
  }
}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002594:	e03a      	b.n	800260c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f8d3 	bl	8002748 <I2C_IsErrorOccurred>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e040      	b.n	800262c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	d02d      	beq.n	800260c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b0:	f7ff f8aa 	bl	8001708 <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d302      	bcc.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d122      	bne.n	800260c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	425a      	negs	r2, r3
 80025d6:	4153      	adcs	r3, r2
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	001a      	movs	r2, r3
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d113      	bne.n	800260c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e8:	2220      	movs	r2, #32
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2241      	movs	r2, #65	@ 0x41
 80025f4:	2120      	movs	r1, #32
 80025f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2242      	movs	r2, #66	@ 0x42
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2240      	movs	r2, #64	@ 0x40
 8002604:	2100      	movs	r1, #0
 8002606:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e00f      	b.n	800262c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	4013      	ands	r3, r2
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	425a      	negs	r2, r3
 800261c:	4153      	adcs	r3, r2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	001a      	movs	r2, r3
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d0b5      	beq.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}

08002634 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002640:	e032      	b.n	80026a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f87d 	bl	8002748 <I2C_IsErrorOccurred>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e030      	b.n	80026b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	d025      	beq.n	80026a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7ff f854 	bl	8001708 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11a      	bne.n	80026a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2202      	movs	r2, #2
 800267a:	4013      	ands	r3, r2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d013      	beq.n	80026a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002684:	2220      	movs	r2, #32
 8002686:	431a      	orrs	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2241      	movs	r2, #65	@ 0x41
 8002690:	2120      	movs	r1, #32
 8002692:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2242      	movs	r2, #66	@ 0x42
 8002698:	2100      	movs	r1, #0
 800269a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2240      	movs	r2, #64	@ 0x40
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d1c5      	bne.n	8002642 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b004      	add	sp, #16
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026cc:	e02f      	b.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f837 	bl	8002748 <I2C_IsErrorOccurred>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d001      	beq.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e02d      	b.n	800273e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff f811 	bl	8001708 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11a      	bne.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2220      	movs	r2, #32
 8002700:	4013      	ands	r3, r2
 8002702:	2b20      	cmp	r3, #32
 8002704:	d013      	beq.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	2220      	movs	r2, #32
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2241      	movs	r2, #65	@ 0x41
 8002716:	2120      	movs	r1, #32
 8002718:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2242      	movs	r2, #66	@ 0x42
 800271e:	2100      	movs	r1, #0
 8002720:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2240      	movs	r2, #64	@ 0x40
 8002726:	2100      	movs	r1, #0
 8002728:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2220      	movs	r2, #32
 8002736:	4013      	ands	r3, r2
 8002738:	2b20      	cmp	r3, #32
 800273a:	d1c8      	bne.n	80026ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2327      	movs	r3, #39	@ 0x27
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2210      	movs	r2, #16
 8002770:	4013      	ands	r3, r2
 8002772:	d100      	bne.n	8002776 <I2C_IsErrorOccurred+0x2e>
 8002774:	e079      	b.n	800286a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2210      	movs	r2, #16
 800277c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800277e:	e057      	b.n	8002830 <I2C_IsErrorOccurred+0xe8>
 8002780:	2227      	movs	r2, #39	@ 0x27
 8002782:	18bb      	adds	r3, r7, r2
 8002784:	18ba      	adds	r2, r7, r2
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3301      	adds	r3, #1
 800278e:	d04f      	beq.n	8002830 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002790:	f7fe ffba 	bl	8001708 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	429a      	cmp	r2, r3
 800279e:	d302      	bcc.n	80027a6 <I2C_IsErrorOccurred+0x5e>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d144      	bne.n	8002830 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	01db      	lsls	r3, r3, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027b4:	2013      	movs	r0, #19
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	2142      	movs	r1, #66	@ 0x42
 80027bc:	5c52      	ldrb	r2, [r2, r1]
 80027be:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	401a      	ands	r2, r3
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d126      	bne.n	8002822 <I2C_IsErrorOccurred+0xda>
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	01db      	lsls	r3, r3, #7
 80027da:	429a      	cmp	r2, r3
 80027dc:	d021      	beq.n	8002822 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d01d      	beq.n	8002822 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	01c9      	lsls	r1, r1, #7
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027f8:	f7fe ff86 	bl	8001708 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	e00f      	b.n	8002822 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002802:	f7fe ff81 	bl	8001708 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b19      	cmp	r3, #25
 800280e:	d908      	bls.n	8002822 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2220      	movs	r2, #32
 8002814:	4313      	orrs	r3, r2
 8002816:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002818:	2327      	movs	r3, #39	@ 0x27
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]

              break;
 8002820:	e006      	b.n	8002830 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2220      	movs	r2, #32
 800282a:	4013      	ands	r3, r2
 800282c:	2b20      	cmp	r3, #32
 800282e:	d1e8      	bne.n	8002802 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2220      	movs	r2, #32
 8002838:	4013      	ands	r3, r2
 800283a:	2b20      	cmp	r3, #32
 800283c:	d004      	beq.n	8002848 <I2C_IsErrorOccurred+0x100>
 800283e:	2327      	movs	r3, #39	@ 0x27
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d09b      	beq.n	8002780 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002848:	2327      	movs	r3, #39	@ 0x27
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2220      	movs	r2, #32
 8002858:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2204      	movs	r2, #4
 800285e:	4313      	orrs	r3, r2
 8002860:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002862:	2327      	movs	r3, #39	@ 0x27
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d00c      	beq.n	8002896 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2201      	movs	r2, #1
 8002880:	4313      	orrs	r3, r2
 8002882:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	0052      	lsls	r2, r2, #1
 800288c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800288e:	2327      	movs	r3, #39	@ 0x27
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4013      	ands	r3, r2
 800289e:	d00c      	beq.n	80028ba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2208      	movs	r2, #8
 80028a4:	4313      	orrs	r3, r2
 80028a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	00d2      	lsls	r2, r2, #3
 80028b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b2:	2327      	movs	r3, #39	@ 0x27
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d00c      	beq.n	80028de <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4313      	orrs	r3, r2
 80028ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2280      	movs	r2, #128	@ 0x80
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d6:	2327      	movs	r3, #39	@ 0x27
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80028de:	2327      	movs	r3, #39	@ 0x27
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01d      	beq.n	8002924 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff fe28 	bl	8002540 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	490e      	ldr	r1, [pc, #56]	@ (8002934 <I2C_IsErrorOccurred+0x1ec>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2241      	movs	r2, #65	@ 0x41
 8002910:	2120      	movs	r1, #32
 8002912:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2242      	movs	r2, #66	@ 0x42
 8002918:	2100      	movs	r1, #0
 800291a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2240      	movs	r2, #64	@ 0x40
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002924:	2327      	movs	r3, #39	@ 0x27
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b00a      	add	sp, #40	@ 0x28
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	0008      	movs	r0, r1
 8002942:	0011      	movs	r1, r2
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	240a      	movs	r4, #10
 8002948:	193b      	adds	r3, r7, r4
 800294a:	1c02      	adds	r2, r0, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	2009      	movs	r0, #9
 8002950:	183b      	adds	r3, r7, r0
 8002952:	1c0a      	adds	r2, r1, #0
 8002954:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002956:	193b      	adds	r3, r7, r4
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	059b      	lsls	r3, r3, #22
 800295c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800295e:	183b      	adds	r3, r7, r0
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	0419      	lsls	r1, r3, #16
 8002964:	23ff      	movs	r3, #255	@ 0xff
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002972:	4313      	orrs	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002982:	0d51      	lsrs	r1, r2, #21
 8002984:	2280      	movs	r2, #128	@ 0x80
 8002986:	00d2      	lsls	r2, r2, #3
 8002988:	400a      	ands	r2, r1
 800298a:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <I2C_TransferConfig+0x70>)
 800298c:	430a      	orrs	r2, r1
 800298e:	43d2      	mvns	r2, r2
 8002990:	401a      	ands	r2, r3
 8002992:	0011      	movs	r1, r2
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b007      	add	sp, #28
 80029a4:	bd90      	pop	{r4, r7, pc}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	03ff63ff 	.word	0x03ff63ff

080029ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2241      	movs	r2, #65	@ 0x41
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d138      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e032      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	@ 0x40
 80029d4:	2101      	movs	r1, #1
 80029d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2241      	movs	r2, #65	@ 0x41
 80029dc:	2124      	movs	r1, #36	@ 0x24
 80029de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4911      	ldr	r1, [pc, #68]	@ (8002a40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2241      	movs	r2, #65	@ 0x41
 8002a24:	2120      	movs	r1, #32
 8002a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	ffffefff 	.word	0xffffefff

08002a44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2241      	movs	r2, #65	@ 0x41
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d139      	bne.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2240      	movs	r2, #64	@ 0x40
 8002a5e:	5c9b      	ldrb	r3, [r3, r2]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e033      	b.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	@ 0x40
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2241      	movs	r2, #65	@ 0x41
 8002a74:	2124      	movs	r1, #36	@ 0x24
 8002a76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2101      	movs	r1, #1
 8002a84:	438a      	bics	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a11      	ldr	r2, [pc, #68]	@ (8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2241      	movs	r2, #65	@ 0x41
 8002abe:	2120      	movs	r1, #32
 8002ac0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2240      	movs	r2, #64	@ 0x40
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b004      	add	sp, #16
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	fffff0ff 	.word	0xfffff0ff

08002adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f000 fbaf 	bl	800324e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af0:	4bcf      	ldr	r3, [pc, #828]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	220c      	movs	r2, #12
 8002af6:	4013      	ands	r3, r2
 8002af8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afa:	4bcd      	ldr	r3, [pc, #820]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	4013      	ands	r3, r2
 8002b04:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x36>
 8002b10:	e07e      	b.n	8002c10 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d007      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d112      	bne.n	8002b44 <HAL_RCC_OscConfig+0x68>
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	025b      	lsls	r3, r3, #9
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4bc1      	ldr	r3, [pc, #772]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	4013      	ands	r3, r2
 8002b32:	d100      	bne.n	8002b36 <HAL_RCC_OscConfig+0x5a>
 8002b34:	e06b      	b.n	8002c0e <HAL_RCC_OscConfig+0x132>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d167      	bne.n	8002c0e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f000 fb85 	bl	800324e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	025b      	lsls	r3, r3, #9
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x84>
 8002b50:	4bb7      	ldr	r3, [pc, #732]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4bb6      	ldr	r3, [pc, #728]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b56:	2180      	movs	r1, #128	@ 0x80
 8002b58:	0249      	lsls	r1, r1, #9
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e027      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	23a0      	movs	r3, #160	@ 0xa0
 8002b66:	02db      	lsls	r3, r3, #11
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10e      	bne.n	8002b8a <HAL_RCC_OscConfig+0xae>
 8002b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4baf      	ldr	r3, [pc, #700]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b72:	2180      	movs	r1, #128	@ 0x80
 8002b74:	02c9      	lsls	r1, r1, #11
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	4bad      	ldr	r3, [pc, #692]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4bac      	ldr	r3, [pc, #688]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b80:	2180      	movs	r1, #128	@ 0x80
 8002b82:	0249      	lsls	r1, r1, #9
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e012      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b8a:	4ba9      	ldr	r3, [pc, #676]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b90:	49a8      	ldr	r1, [pc, #672]	@ (8002e34 <HAL_RCC_OscConfig+0x358>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	4ba6      	ldr	r3, [pc, #664]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4ba2      	ldr	r3, [pc, #648]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002baa:	49a3      	ldr	r1, [pc, #652]	@ (8002e38 <HAL_RCC_OscConfig+0x35c>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fda6 	bl	8001708 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc0:	e009      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fda1 	bl	8001708 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	@ 0x64
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f000 fb3c 	bl	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd6:	4b96      	ldr	r3, [pc, #600]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d0ef      	beq.n	8002bc2 <HAL_RCC_OscConfig+0xe6>
 8002be2:	e015      	b.n	8002c10 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fd90 	bl	8001708 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bee:	f7fe fd8b 	bl	8001708 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	@ 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e326      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c00:	4b8b      	ldr	r3, [pc, #556]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	@ 0x80
 8002c06:	029b      	lsls	r3, r3, #10
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x112>
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d100      	bne.n	8002c1c <HAL_RCC_OscConfig+0x140>
 8002c1a:	e08b      	b.n	8002d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d13e      	bne.n	8002cac <HAL_RCC_OscConfig+0x1d0>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13b      	bne.n	8002cac <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c34:	4b7e      	ldr	r3, [pc, #504]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_RCC_OscConfig+0x16c>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e302      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b79      	ldr	r3, [pc, #484]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a7b      	ldr	r2, [pc, #492]	@ (8002e3c <HAL_RCC_OscConfig+0x360>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	021a      	lsls	r2, r3, #8
 8002c58:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c5e:	4b74      	ldr	r3, [pc, #464]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2209      	movs	r2, #9
 8002c64:	4393      	bics	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	4b71      	ldr	r3, [pc, #452]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c70:	f000 fc40 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8002c74:	0001      	movs	r1, r0
 8002c76:	4b6e      	ldr	r3, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	4013      	ands	r3, r2
 8002c80:	4a6f      	ldr	r2, [pc, #444]	@ (8002e40 <HAL_RCC_OscConfig+0x364>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	000a      	movs	r2, r1
 8002c86:	40da      	lsrs	r2, r3
 8002c88:	4b6e      	ldr	r3, [pc, #440]	@ (8002e44 <HAL_RCC_OscConfig+0x368>)
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <HAL_RCC_OscConfig+0x36c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2513      	movs	r5, #19
 8002c92:	197c      	adds	r4, r7, r5
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7fe fcf1 	bl	800167c <HAL_InitTick>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c9e:	197b      	adds	r3, r7, r5
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d046      	beq.n	8002d34 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002ca6:	197b      	adds	r3, r7, r5
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	e2d0      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d027      	beq.n	8002d02 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2209      	movs	r2, #9
 8002cb8:	4393      	bics	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fd20 	bl	8001708 <HAL_GetTick>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fe fd1b 	bl	8001708 <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e2b6      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d0f1      	beq.n	8002cce <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b51      	ldr	r3, [pc, #324]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a53      	ldr	r2, [pc, #332]	@ (8002e3c <HAL_RCC_OscConfig+0x360>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	021a      	lsls	r2, r3, #8
 8002cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	e018      	b.n	8002d34 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b4b      	ldr	r3, [pc, #300]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b4a      	ldr	r3, [pc, #296]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fcfb 	bl	8001708 <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe fcf6 	bl	8001708 <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e291      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d2a:	4b41      	ldr	r3, [pc, #260]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4013      	ands	r3, r2
 8002d32:	d1f1      	bne.n	8002d18 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2210      	movs	r2, #16
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <HAL_RCC_OscConfig+0x264>
 8002d3e:	e0a1      	b.n	8002e84 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d140      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d46:	4b3a      	ldr	r3, [pc, #232]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x282>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e277      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5e:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a3a      	ldr	r2, [pc, #232]	@ (8002e4c <HAL_RCC_OscConfig+0x370>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d6c:	4b30      	ldr	r3, [pc, #192]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d72:	4b2f      	ldr	r3, [pc, #188]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	0a19      	lsrs	r1, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	061a      	lsls	r2, r3, #24
 8002d80:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	0b5b      	lsrs	r3, r3, #13
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	0212      	lsls	r2, r2, #8
 8002d92:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d94:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	4928      	ldr	r1, [pc, #160]	@ (8002e40 <HAL_RCC_OscConfig+0x364>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002da4:	4b27      	ldr	r3, [pc, #156]	@ (8002e44 <HAL_RCC_OscConfig+0x368>)
 8002da6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCC_OscConfig+0x36c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2513      	movs	r5, #19
 8002dae:	197c      	adds	r4, r7, r5
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fe fc63 	bl	800167c <HAL_InitTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002dba:	197b      	adds	r3, r7, r5
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d060      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002dc2:	197b      	adds	r3, r7, r5
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	e242      	b.n	800324e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03f      	beq.n	8002e50 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dd0:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b16      	ldr	r3, [pc, #88]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002dd6:	2180      	movs	r1, #128	@ 0x80
 8002dd8:	0049      	lsls	r1, r1, #1
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fc93 	bl	8001708 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de8:	f7fe fc8e 	bl	8001708 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e229      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	2380      	movs	r3, #128	@ 0x80
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4013      	ands	r3, r2
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e06:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a10      	ldr	r2, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x370>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	0a19      	lsrs	r1, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	061a      	lsls	r2, r3, #24
 8002e28:	4b01      	ldr	r3, [pc, #4]	@ (8002e30 <HAL_RCC_OscConfig+0x354>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	e029      	b.n	8002e84 <HAL_RCC_OscConfig+0x3a8>
 8002e30:	40021000 	.word	0x40021000
 8002e34:	fffeffff 	.word	0xfffeffff
 8002e38:	fffbffff 	.word	0xfffbffff
 8002e3c:	ffffe0ff 	.word	0xffffe0ff
 8002e40:	08004d1c 	.word	0x08004d1c
 8002e44:	20000004 	.word	0x20000004
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e50:	4bbd      	ldr	r3, [pc, #756]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4bbc      	ldr	r3, [pc, #752]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002e56:	49bd      	ldr	r1, [pc, #756]	@ (800314c <HAL_RCC_OscConfig+0x670>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fc54 	bl	8001708 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e66:	f7fe fc4f 	bl	8001708 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1ea      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e78:	4bb3      	ldr	r3, [pc, #716]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d019      	beq.n	8002eca <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4bac      	ldr	r3, [pc, #688]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e9a:	4bab      	ldr	r3, [pc, #684]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fc31 	bl	8001708 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fc2c 	bl	8001708 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1c7      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ebe:	4ba2      	ldr	r3, [pc, #648]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d0f1      	beq.n	8002eac <HAL_RCC_OscConfig+0x3d0>
 8002ec8:	e018      	b.n	8002efc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eca:	4b9f      	ldr	r3, [pc, #636]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ece:	4b9e      	ldr	r3, [pc, #632]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	438a      	bics	r2, r1
 8002ed4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7fe fc17 	bl	8001708 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fc12 	bl	8001708 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1ad      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef2:	4b95      	ldr	r3, [pc, #596]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d1f1      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	d100      	bne.n	8002f08 <HAL_RCC_OscConfig+0x42c>
 8002f06:	e0ae      	b.n	8003066 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f08:	2027      	movs	r0, #39	@ 0x27
 8002f0a:	183b      	adds	r3, r7, r0
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f10:	4b8d      	ldr	r3, [pc, #564]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	055b      	lsls	r3, r3, #21
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d109      	bne.n	8002f30 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f20:	4b89      	ldr	r3, [pc, #548]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f22:	2180      	movs	r1, #128	@ 0x80
 8002f24:	0549      	lsls	r1, r1, #21
 8002f26:	430a      	orrs	r2, r1
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b87      	ldr	r3, [pc, #540]	@ (8003150 <HAL_RCC_OscConfig+0x674>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d11a      	bne.n	8002f72 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3c:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <HAL_RCC_OscConfig+0x674>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b83      	ldr	r3, [pc, #524]	@ (8003150 <HAL_RCC_OscConfig+0x674>)
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	0049      	lsls	r1, r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fbdd 	bl	8001708 <HAL_GetTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fbd8 	bl	8001708 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e173      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b7a      	ldr	r3, [pc, #488]	@ (8003150 <HAL_RCC_OscConfig+0x674>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2380      	movs	r3, #128	@ 0x80
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4b2>
 8002f7e:	4b72      	ldr	r3, [pc, #456]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f82:	4b71      	ldr	r3, [pc, #452]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f84:	2180      	movs	r1, #128	@ 0x80
 8002f86:	0049      	lsls	r1, r1, #1
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f8c:	e031      	b.n	8002ff2 <HAL_RCC_OscConfig+0x516>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4d4>
 8002f96:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002f9c:	496b      	ldr	r1, [pc, #428]	@ (800314c <HAL_RCC_OscConfig+0x670>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fa2:	4b69      	ldr	r3, [pc, #420]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fa6:	4b68      	ldr	r3, [pc, #416]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fa8:	496a      	ldr	r1, [pc, #424]	@ (8003154 <HAL_RCC_OscConfig+0x678>)
 8002faa:	400a      	ands	r2, r1
 8002fac:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fae:	e020      	b.n	8002ff2 <HAL_RCC_OscConfig+0x516>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	23a0      	movs	r3, #160	@ 0xa0
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10e      	bne.n	8002fda <HAL_RCC_OscConfig+0x4fe>
 8002fbc:	4b62      	ldr	r3, [pc, #392]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fc0:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fc2:	2180      	movs	r1, #128	@ 0x80
 8002fc4:	00c9      	lsls	r1, r1, #3
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fca:	4b5f      	ldr	r3, [pc, #380]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fce:	4b5e      	ldr	r3, [pc, #376]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fd0:	2180      	movs	r1, #128	@ 0x80
 8002fd2:	0049      	lsls	r1, r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fd8:	e00b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x516>
 8002fda:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fde:	4b5a      	ldr	r3, [pc, #360]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fe0:	495a      	ldr	r1, [pc, #360]	@ (800314c <HAL_RCC_OscConfig+0x670>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fe6:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fea:	4b57      	ldr	r3, [pc, #348]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8002fec:	4959      	ldr	r1, [pc, #356]	@ (8003154 <HAL_RCC_OscConfig+0x678>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fb85 	bl	8001708 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003002:	e009      	b.n	8003018 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fb80 	bl	8001708 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_RCC_OscConfig+0x67c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e11a      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003018:	4b4b      	ldr	r3, [pc, #300]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 800301a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d0ef      	beq.n	8003004 <HAL_RCC_OscConfig+0x528>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe fb6f 	bl	8001708 <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800302e:	e009      	b.n	8003044 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fb6a 	bl	8001708 <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	4a47      	ldr	r2, [pc, #284]	@ (8003158 <HAL_RCC_OscConfig+0x67c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e104      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003044:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8003046:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4013      	ands	r3, r2
 800304e:	d1ef      	bne.n	8003030 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003050:	2327      	movs	r3, #39	@ 0x27
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d105      	bne.n	8003066 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305a:	4b3b      	ldr	r3, [pc, #236]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 800305c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800305e:	4b3a      	ldr	r3, [pc, #232]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8003060:	493e      	ldr	r1, [pc, #248]	@ (800315c <HAL_RCC_OscConfig+0x680>)
 8003062:	400a      	ands	r2, r1
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	4013      	ands	r3, r2
 800306e:	d049      	beq.n	8003104 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d026      	beq.n	80030c6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 800307e:	2101      	movs	r1, #1
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	4b30      	ldr	r3, [pc, #192]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8003086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003088:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 800308a:	2101      	movs	r1, #1
 800308c:	430a      	orrs	r2, r1
 800308e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003090:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <HAL_RCC_OscConfig+0x684>)
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	4b32      	ldr	r3, [pc, #200]	@ (8003160 <HAL_RCC_OscConfig+0x684>)
 8003096:	2180      	movs	r1, #128	@ 0x80
 8003098:	0189      	lsls	r1, r1, #6
 800309a:	430a      	orrs	r2, r1
 800309c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe fb33 	bl	8001708 <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a8:	f7fe fb2e 	bl	8001708 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0c9      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030ba:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0f1      	beq.n	80030a8 <HAL_RCC_OscConfig+0x5cc>
 80030c4:	e01e      	b.n	8003104 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 80030cc:	2101      	movs	r1, #1
 80030ce:	438a      	bics	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_RCC_OscConfig+0x684>)
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	4b22      	ldr	r3, [pc, #136]	@ (8003160 <HAL_RCC_OscConfig+0x684>)
 80030d8:	4922      	ldr	r1, [pc, #136]	@ (8003164 <HAL_RCC_OscConfig+0x688>)
 80030da:	400a      	ands	r2, r1
 80030dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fb13 	bl	8001708 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e8:	f7fe fb0e 	bl	8001708 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0a9      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030fa:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2202      	movs	r2, #2
 8003100:	4013      	ands	r3, r2
 8003102:	d1f1      	bne.n	80030e8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d100      	bne.n	800310e <HAL_RCC_OscConfig+0x632>
 800310c:	e09e      	b.n	800324c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d100      	bne.n	8003116 <HAL_RCC_OscConfig+0x63a>
 8003114:	e077      	b.n	8003206 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	2b02      	cmp	r3, #2
 800311c:	d158      	bne.n	80031d0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <HAL_RCC_OscConfig+0x66c>)
 8003124:	4910      	ldr	r1, [pc, #64]	@ (8003168 <HAL_RCC_OscConfig+0x68c>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe faed 	bl	8001708 <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fae8 	bl	8001708 <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d914      	bls.n	800316c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e083      	b.n	800324e <HAL_RCC_OscConfig+0x772>
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	40021000 	.word	0x40021000
 800314c:	fffffeff 	.word	0xfffffeff
 8003150:	40007000 	.word	0x40007000
 8003154:	fffffbff 	.word	0xfffffbff
 8003158:	00001388 	.word	0x00001388
 800315c:	efffffff 	.word	0xefffffff
 8003160:	40010000 	.word	0x40010000
 8003164:	ffffdfff 	.word	0xffffdfff
 8003168:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800316c:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	049b      	lsls	r3, r3, #18
 8003174:	4013      	ands	r3, r2
 8003176:	d1dd      	bne.n	8003134 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a37      	ldr	r2, [pc, #220]	@ (800325c <HAL_RCC_OscConfig+0x780>)
 800317e:	4013      	ands	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003190:	431a      	orrs	r2, r3
 8003192:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 8003194:	430a      	orrs	r2, r1
 8003196:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	0449      	lsls	r1, r1, #17
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe faaf 	bl	8001708 <HAL_GetTick>
 80031aa:	0003      	movs	r3, r0
 80031ac:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe faaa 	bl	8001708 <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031c2:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	049b      	lsls	r3, r3, #18
 80031ca:	4013      	ands	r3, r2
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x6d4>
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 80031d6:	4922      	ldr	r1, [pc, #136]	@ (8003260 <HAL_RCC_OscConfig+0x784>)
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fa94 	bl	8001708 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe fa8f 	bl	8001708 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e02a      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	049b      	lsls	r3, r3, #18
 8003200:	4013      	ands	r3, r2
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x70a>
 8003204:	e022      	b.n	800324c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e01d      	b.n	800324e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <HAL_RCC_OscConfig+0x77c>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	025b      	lsls	r3, r3, #9
 800321e:	401a      	ands	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	429a      	cmp	r2, r3
 8003226:	d10f      	bne.n	8003248 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	23f0      	movs	r3, #240	@ 0xf0
 800322c:	039b      	lsls	r3, r3, #14
 800322e:	401a      	ands	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	23c0      	movs	r3, #192	@ 0xc0
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b00a      	add	sp, #40	@ 0x28
 8003254:	bdb0      	pop	{r4, r5, r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	40021000 	.word	0x40021000
 800325c:	ff02ffff 	.word	0xff02ffff
 8003260:	feffffff 	.word	0xfeffffff

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b5b0      	push	{r4, r5, r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e128      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b96      	ldr	r3, [pc, #600]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d91e      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b93      	ldr	r3, [pc, #588]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	4393      	bics	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	4b90      	ldr	r3, [pc, #576]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003298:	f7fe fa36 	bl	8001708 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a2:	f7fe fa31 	bl	8001708 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	4a8a      	ldr	r2, [pc, #552]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e109      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b87      	ldr	r3, [pc, #540]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1ee      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2202      	movs	r2, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ce:	4b83      	ldr	r3, [pc, #524]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	22f0      	movs	r2, #240	@ 0xf0
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b7f      	ldr	r3, [pc, #508]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 80032de:	430a      	orrs	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2201      	movs	r2, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	d100      	bne.n	80032ee <HAL_RCC_ClockConfig+0x8a>
 80032ec:	e089      	b.n	8003402 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032f6:	4b79      	ldr	r3, [pc, #484]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	4013      	ands	r3, r2
 8003300:	d120      	bne.n	8003344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0e1      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800330e:	4b73      	ldr	r3, [pc, #460]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	049b      	lsls	r3, r3, #18
 8003316:	4013      	ands	r3, r2
 8003318:	d114      	bne.n	8003344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0d5      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d106      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003326:	4b6d      	ldr	r3, [pc, #436]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2204      	movs	r2, #4
 800332c:	4013      	ands	r3, r2
 800332e:	d109      	bne.n	8003344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ca      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003334:	4b69      	ldr	r3, [pc, #420]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0c2      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003344:	4b65      	ldr	r3, [pc, #404]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2203      	movs	r2, #3
 800334a:	4393      	bics	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4b62      	ldr	r3, [pc, #392]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe f9d6 	bl	8001708 <HAL_GetTick>
 800335c:	0003      	movs	r3, r0
 800335e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d111      	bne.n	800338c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003368:	e009      	b.n	800337e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336a:	f7fe f9cd 	bl	8001708 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	4a58      	ldr	r2, [pc, #352]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0a5      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800337e:	4b57      	ldr	r3, [pc, #348]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	220c      	movs	r2, #12
 8003384:	4013      	ands	r3, r2
 8003386:	2b08      	cmp	r3, #8
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_ClockConfig+0x106>
 800338a:	e03a      	b.n	8003402 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe f9b7 	bl	8001708 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a4d      	ldr	r2, [pc, #308]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e08f      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	220c      	movs	r2, #12
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d1ef      	bne.n	8003396 <HAL_RCC_ClockConfig+0x132>
 80033b6:	e024      	b.n	8003402 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d11b      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c0:	e009      	b.n	80033d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7fe f9a1 	bl	8001708 <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	4a42      	ldr	r2, [pc, #264]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e079      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d6:	4b41      	ldr	r3, [pc, #260]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	220c      	movs	r2, #12
 80033dc:	4013      	ands	r3, r2
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d1ef      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x15e>
 80033e2:	e00e      	b.n	8003402 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fe f990 	bl	8001708 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	4a3a      	ldr	r2, [pc, #232]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e068      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033f8:	4b38      	ldr	r3, [pc, #224]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	220c      	movs	r2, #12
 80033fe:	4013      	ands	r3, r2
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003402:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d21e      	bcs.n	800344e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003410:	4b30      	ldr	r3, [pc, #192]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	4393      	bics	r3, r2
 8003418:	0019      	movs	r1, r3
 800341a:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003422:	f7fe f971 	bl	8001708 <HAL_GetTick>
 8003426:	0003      	movs	r3, r0
 8003428:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	e009      	b.n	8003440 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe f96c 	bl	8001708 <HAL_GetTick>
 8003430:	0002      	movs	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e044      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003440:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2204      	movs	r2, #4
 8003454:	4013      	ands	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a20      	ldr	r2, [pc, #128]	@ (80034e0 <HAL_RCC_ClockConfig+0x27c>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2208      	movs	r2, #8
 8003472:	4013      	ands	r3, r2
 8003474:	d00a      	beq.n	800348c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003476:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a1a      	ldr	r2, [pc, #104]	@ (80034e4 <HAL_RCC_ClockConfig+0x280>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	00da      	lsls	r2, r3, #3
 8003486:	4b15      	ldr	r3, [pc, #84]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003488:	430a      	orrs	r2, r1
 800348a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800348c:	f000 f832 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8003490:	0001      	movs	r1, r0
 8003492:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <HAL_RCC_ClockConfig+0x278>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	220f      	movs	r2, #15
 800349a:	4013      	ands	r3, r2
 800349c:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <HAL_RCC_ClockConfig+0x284>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	000a      	movs	r2, r1
 80034a2:	40da      	lsrs	r2, r3
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_RCC_ClockConfig+0x288>)
 80034a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_RCC_ClockConfig+0x28c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	250b      	movs	r5, #11
 80034ae:	197c      	adds	r4, r7, r5
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fe f8e3 	bl	800167c <HAL_InitTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80034ba:	197b      	adds	r3, r7, r5
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80034c2:	197b      	adds	r3, r7, r5
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	e000      	b.n	80034ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bdb0      	pop	{r4, r5, r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	40022000 	.word	0x40022000
 80034d8:	00001388 	.word	0x00001388
 80034dc:	40021000 	.word	0x40021000
 80034e0:	fffff8ff 	.word	0xfffff8ff
 80034e4:	ffffc7ff 	.word	0xffffc7ff
 80034e8:	08004d1c 	.word	0x08004d1c
 80034ec:	20000004 	.word	0x20000004
 80034f0:	20000008 	.word	0x20000008

080034f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034fa:	4b3c      	ldr	r3, [pc, #240]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	220c      	movs	r2, #12
 8003504:	4013      	ands	r3, r2
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d013      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x3e>
 800350a:	d85c      	bhi.n	80035c6 <HAL_RCC_GetSysClockFreq+0xd2>
 800350c:	2b04      	cmp	r3, #4
 800350e:	d002      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x22>
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00b      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x38>
 8003514:	e057      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003516:	4b35      	ldr	r3, [pc, #212]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2210      	movs	r2, #16
 800351c:	4013      	ands	r3, r2
 800351e:	d002      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003520:	4b33      	ldr	r3, [pc, #204]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003522:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003524:	e05d      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003526:	4b33      	ldr	r3, [pc, #204]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003528:	613b      	str	r3, [r7, #16]
      break;
 800352a:	e05a      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352c:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800352e:	613b      	str	r3, [r7, #16]
      break;
 8003530:	e057      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0c9b      	lsrs	r3, r3, #18
 8003536:	220f      	movs	r2, #15
 8003538:	4013      	ands	r3, r2
 800353a:	4a30      	ldr	r2, [pc, #192]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	0d9b      	lsrs	r3, r3, #22
 8003544:	2203      	movs	r2, #3
 8003546:	4013      	ands	r3, r2
 8003548:	3301      	adds	r3, #1
 800354a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354c:	4b27      	ldr	r3, [pc, #156]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	4013      	ands	r3, r2
 8003556:	d00f      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	000a      	movs	r2, r1
 800355c:	0152      	lsls	r2, r2, #5
 800355e:	1a52      	subs	r2, r2, r1
 8003560:	0193      	lsls	r3, r2, #6
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	185b      	adds	r3, r3, r1
 8003568:	025b      	lsls	r3, r3, #9
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f7fc fdd5 	bl	800011c <__udivsi3>
 8003572:	0003      	movs	r3, r0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e023      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003578:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2210      	movs	r2, #16
 800357e:	4013      	ands	r3, r2
 8003580:	d00f      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	000a      	movs	r2, r1
 8003586:	0152      	lsls	r2, r2, #5
 8003588:	1a52      	subs	r2, r2, r1
 800358a:	0193      	lsls	r3, r2, #6
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	185b      	adds	r3, r3, r1
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f7fc fdc0 	bl	800011c <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e00e      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	000a      	movs	r2, r1
 80035a6:	0152      	lsls	r2, r2, #5
 80035a8:	1a52      	subs	r2, r2, r1
 80035aa:	0193      	lsls	r3, r2, #6
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	185b      	adds	r3, r3, r1
 80035b2:	029b      	lsls	r3, r3, #10
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fc fdb0 	bl	800011c <__udivsi3>
 80035bc:	0003      	movs	r3, r0
 80035be:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
      break;
 80035c4:	e00d      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	2207      	movs	r2, #7
 80035ce:	4013      	ands	r3, r2
 80035d0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	2280      	movs	r2, #128	@ 0x80
 80035d8:	0212      	lsls	r2, r2, #8
 80035da:	409a      	lsls	r2, r3
 80035dc:	0013      	movs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
      break;
 80035e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035e2:	693b      	ldr	r3, [r7, #16]
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b006      	add	sp, #24
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	003d0900 	.word	0x003d0900
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	08004d2c 	.word	0x08004d2c

08003600 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003608:	2317      	movs	r3, #23
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2220      	movs	r2, #32
 8003616:	4013      	ands	r3, r2
 8003618:	d106      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4013      	ands	r3, r2
 8003624:	d100      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003626:	e104      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003628:	4bb1      	ldr	r3, [pc, #708]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800362c:	2380      	movs	r3, #128	@ 0x80
 800362e:	055b      	lsls	r3, r3, #21
 8003630:	4013      	ands	r3, r2
 8003632:	d10a      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4bae      	ldr	r3, [pc, #696]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003638:	4bad      	ldr	r3, [pc, #692]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800363a:	2180      	movs	r1, #128	@ 0x80
 800363c:	0549      	lsls	r1, r1, #21
 800363e:	430a      	orrs	r2, r1
 8003640:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003642:	2317      	movs	r3, #23
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4baa      	ldr	r3, [pc, #680]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d11a      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4ba7      	ldr	r3, [pc, #668]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4ba6      	ldr	r3, [pc, #664]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800365c:	2180      	movs	r1, #128	@ 0x80
 800365e:	0049      	lsls	r1, r1, #1
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003664:	f7fe f850 	bl	8001708 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fe f84b 	bl	8001708 <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	@ 0x64
 800367a:	d901      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e133      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b9c      	ldr	r3, [pc, #624]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	@ 0x80
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4013      	ands	r3, r2
 800368a:	d0f0      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800368c:	4b98      	ldr	r3, [pc, #608]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	23c0      	movs	r3, #192	@ 0xc0
 8003692:	039b      	lsls	r3, r3, #14
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	23c0      	movs	r3, #192	@ 0xc0
 800369e:	039b      	lsls	r3, r3, #14
 80036a0:	4013      	ands	r3, r2
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	23c0      	movs	r3, #192	@ 0xc0
 80036ae:	039b      	lsls	r3, r3, #14
 80036b0:	4013      	ands	r3, r2
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d013      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	23c0      	movs	r3, #192	@ 0xc0
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	401a      	ands	r2, r3
 80036c2:	23c0      	movs	r3, #192	@ 0xc0
 80036c4:	029b      	lsls	r3, r3, #10
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d10a      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b89      	ldr	r3, [pc, #548]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	029b      	lsls	r3, r3, #10
 80036d2:	401a      	ands	r2, r3
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	429a      	cmp	r2, r3
 80036da:	d101      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e103      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036e0:	4b83      	ldr	r3, [pc, #524]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036e4:	23c0      	movs	r3, #192	@ 0xc0
 80036e6:	029b      	lsls	r3, r3, #10
 80036e8:	4013      	ands	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d049      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	23c0      	movs	r3, #192	@ 0xc0
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	4013      	ands	r3, r2
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d004      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	23c0      	movs	r3, #192	@ 0xc0
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	4013      	ands	r3, r2
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d034      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d02e      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003728:	4b71      	ldr	r3, [pc, #452]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	4a72      	ldr	r2, [pc, #456]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800372e:	4013      	ands	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003736:	4b6e      	ldr	r3, [pc, #440]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	0309      	lsls	r1, r1, #12
 800373c:	430a      	orrs	r2, r1
 800373e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003740:	4b6b      	ldr	r3, [pc, #428]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003744:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003746:	496d      	ldr	r1, [pc, #436]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003748:	400a      	ands	r2, r1
 800374a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800374c:	4b68      	ldr	r3, [pc, #416]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d014      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd ffd4 	bl	8001708 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003764:	e009      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fd ffcf 	bl	8001708 <HAL_GetTick>
 800376a:	0002      	movs	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	4a63      	ldr	r2, [pc, #396]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0b6      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377a:	4b5d      	ldr	r3, [pc, #372]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800377c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d0ef      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	4013      	ands	r3, r2
 8003790:	d01f      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	23c0      	movs	r3, #192	@ 0xc0
 8003798:	029b      	lsls	r3, r3, #10
 800379a:	401a      	ands	r2, r3
 800379c:	23c0      	movs	r3, #192	@ 0xc0
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80037a4:	4b52      	ldr	r3, [pc, #328]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a56      	ldr	r2, [pc, #344]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	23c0      	movs	r3, #192	@ 0xc0
 80037b4:	039b      	lsls	r3, r3, #14
 80037b6:	401a      	ands	r2, r3
 80037b8:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	4b4c      	ldr	r3, [pc, #304]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	23c0      	movs	r3, #192	@ 0xc0
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	401a      	ands	r2, r3
 80037cc:	4b48      	ldr	r3, [pc, #288]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	4013      	ands	r3, r2
 80037da:	d01f      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	23c0      	movs	r3, #192	@ 0xc0
 80037e2:	029b      	lsls	r3, r3, #10
 80037e4:	401a      	ands	r2, r3
 80037e6:	23c0      	movs	r3, #192	@ 0xc0
 80037e8:	029b      	lsls	r3, r3, #10
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80037ee:	4b40      	ldr	r3, [pc, #256]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a44      	ldr	r2, [pc, #272]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	23c0      	movs	r3, #192	@ 0xc0
 80037fe:	039b      	lsls	r3, r3, #14
 8003800:	401a      	ands	r2, r3
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800380a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	23c0      	movs	r3, #192	@ 0xc0
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	401a      	ands	r2, r3
 8003816:	4b36      	ldr	r3, [pc, #216]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003818:	430a      	orrs	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800381c:	2317      	movs	r3, #23
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800382c:	4936      	ldr	r1, [pc, #216]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382e:	400a      	ands	r2, r1
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383c:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003840:	2203      	movs	r2, #3
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800384c:	430a      	orrs	r2, r1
 800384e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2202      	movs	r2, #2
 8003856:	4013      	ands	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385a:	4b25      	ldr	r3, [pc, #148]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	220c      	movs	r2, #12
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	4b21      	ldr	r3, [pc, #132]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800386a:	430a      	orrs	r2, r1
 800386c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	4013      	ands	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003878:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387c:	4a23      	ldr	r2, [pc, #140]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003888:	430a      	orrs	r2, r1
 800388a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2208      	movs	r2, #8
 8003892:	4013      	ands	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003896:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389a:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800389c:	4013      	ands	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2240      	movs	r2, #64	@ 0x40
 80038b0:	4013      	ands	r3, r2
 80038b2:	d009      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b8:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038c4:	430a      	orrs	r2, r1
 80038c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2280      	movs	r2, #128	@ 0x80
 80038ce:	4013      	ands	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	4a10      	ldr	r2, [pc, #64]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038e2:	430a      	orrs	r2, r1
 80038e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b006      	add	sp, #24
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	fffcffff 	.word	0xfffcffff
 80038fc:	fff7ffff 	.word	0xfff7ffff
 8003900:	00001388 	.word	0x00001388
 8003904:	ffcfffff 	.word	0xffcfffff
 8003908:	efffffff 	.word	0xefffffff
 800390c:	fffff3ff 	.word	0xfffff3ff
 8003910:	ffffcfff 	.word	0xffffcfff
 8003914:	fbffffff 	.word	0xfbffffff
 8003918:	fff3ffff 	.word	0xfff3ffff

0800391c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e083      	b.n	8003a36 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	2382      	movs	r3, #130	@ 0x82
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	429a      	cmp	r2, r3
 8003940:	d009      	beq.n	8003956 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	61da      	str	r2, [r3, #28]
 8003948:	e005      	b.n	8003956 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2251      	movs	r2, #81	@ 0x51
 8003960:	5c9b      	ldrb	r3, [r3, r2]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2250      	movs	r2, #80	@ 0x50
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f7fd fd72 	bl	800145c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2251      	movs	r2, #81	@ 0x51
 800397c:	2102      	movs	r1, #2
 800397e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2140      	movs	r1, #64	@ 0x40
 800398c:	438a      	bics	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	2382      	movs	r3, #130	@ 0x82
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	401a      	ands	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6899      	ldr	r1, [r3, #8]
 800399e:	2384      	movs	r3, #132	@ 0x84
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	400b      	ands	r3, r1
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68d9      	ldr	r1, [r3, #12]
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	400b      	ands	r3, r1
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2102      	movs	r1, #2
 80039b8:	400b      	ands	r3, r1
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2101      	movs	r1, #1
 80039c2:	400b      	ands	r3, r1
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6999      	ldr	r1, [r3, #24]
 80039ca:	2380      	movs	r3, #128	@ 0x80
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	400b      	ands	r3, r1
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2138      	movs	r1, #56	@ 0x38
 80039d8:	400b      	ands	r3, r1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2180      	movs	r1, #128	@ 0x80
 80039e2:	400b      	ands	r3, r1
 80039e4:	431a      	orrs	r2, r3
 80039e6:	0011      	movs	r1, r2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ec:	2380      	movs	r3, #128	@ 0x80
 80039ee:	019b      	lsls	r3, r3, #6
 80039f0:	401a      	ands	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	2204      	movs	r2, #4
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4907      	ldr	r1, [pc, #28]	@ (8003a40 <HAL_SPI_Init+0x124>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2251      	movs	r2, #81	@ 0x51
 8003a30:	2101      	movs	r1, #1
 8003a32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	fffff7ff 	.word	0xfffff7ff

08003a44 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	1dbb      	adds	r3, r7, #6
 8003a52:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a54:	f7fd fe58 	bl	8001708 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a5c:	231a      	movs	r3, #26
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	1dba      	adds	r2, r7, #6
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2251      	movs	r2, #81	@ 0x51
 8003a6a:	5c9b      	ldrb	r3, [r3, r2]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
 8003a74:	e132      	b.n	8003cdc <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_SPI_Transmit+0x40>
 8003a7c:	1dbb      	adds	r3, r7, #6
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e129      	b.n	8003cdc <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2250      	movs	r2, #80	@ 0x50
 8003a8c:	5c9b      	ldrb	r3, [r3, r2]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Transmit+0x52>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e122      	b.n	8003cdc <HAL_SPI_Transmit+0x298>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2250      	movs	r2, #80	@ 0x50
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2251      	movs	r2, #81	@ 0x51
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1dba      	adds	r2, r7, #6
 8003ab6:	8812      	ldrh	r2, [r2, #0]
 8003ab8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1dba      	adds	r2, r7, #6
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d110      	bne.n	8003b0e <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2140      	movs	r1, #64	@ 0x40
 8003af8:	438a      	bics	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	01c9      	lsls	r1, r1, #7
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2240      	movs	r2, #64	@ 0x40
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b40      	cmp	r3, #64	@ 0x40
 8003b1a:	d007      	beq.n	8003b2c <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2140      	movs	r1, #64	@ 0x40
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d153      	bne.n	8003be0 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_SPI_Transmit+0x106>
 8003b40:	231a      	movs	r3, #26
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d144      	bne.n	8003bd4 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	881a      	ldrh	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	1c9a      	adds	r2, r3, #2
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b6e:	e031      	b.n	8003bd4 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d112      	bne.n	8003ba4 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	1c9a      	adds	r2, r3, #2
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ba2:	e017      	b.n	8003bd4 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba4:	f7fd fdb0 	bl	8001708 <HAL_GetTick>
 8003ba8:	0002      	movs	r2, r0
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d802      	bhi.n	8003bba <HAL_SPI_Transmit+0x176>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_SPI_Transmit+0x17c>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2251      	movs	r2, #81	@ 0x51
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2250      	movs	r2, #80	@ 0x50
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e083      	b.n	8003cdc <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1c8      	bne.n	8003b70 <HAL_SPI_Transmit+0x12c>
 8003bde:	e054      	b.n	8003c8a <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_SPI_Transmit+0x1ae>
 8003be8:	231a      	movs	r3, #26
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d146      	bne.n	8003c80 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c18:	e032      	b.n	8003c80 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d113      	bne.n	8003c50 <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c4e:	e017      	b.n	8003c80 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c50:	f7fd fd5a 	bl	8001708 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d802      	bhi.n	8003c66 <HAL_SPI_Transmit+0x222>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	d102      	bne.n	8003c6c <HAL_SPI_Transmit+0x228>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2251      	movs	r2, #81	@ 0x51
 8003c70:	2101      	movs	r1, #1
 8003c72:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2250      	movs	r2, #80	@ 0x50
 8003c78:	2100      	movs	r1, #0
 8003c7a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e02d      	b.n	8003cdc <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1c7      	bne.n	8003c1a <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 f8b5 	bl	8003e00 <SPI_EndRxTxTransaction>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2251      	movs	r2, #81	@ 0x51
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2250      	movs	r2, #80	@ 0x50
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
  }
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b008      	add	sp, #32
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	1dfb      	adds	r3, r7, #7
 8003cf2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cf4:	f7fd fd08 	bl	8001708 <HAL_GetTick>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	18d3      	adds	r3, r2, r3
 8003d02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d04:	f7fd fd00 	bl	8001708 <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003df8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	015b      	lsls	r3, r3, #5
 8003d12:	0d1b      	lsrs	r3, r3, #20
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	4353      	muls	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1a:	e059      	b.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	d056      	beq.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d22:	f7fd fcf1 	bl	8001708 <HAL_GetTick>
 8003d26:	0002      	movs	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d902      	bls.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d142      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	21e0      	movs	r1, #224	@ 0xe0
 8003d44:	438a      	bics	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	2382      	movs	r3, #130	@ 0x82
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d113      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d005      	beq.n	8003d6c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2140      	movs	r1, #64	@ 0x40
 8003d78:	438a      	bics	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	019b      	lsls	r3, r3, #6
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d110      	bne.n	8003daa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	491a      	ldr	r1, [pc, #104]	@ (8003dfc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2180      	movs	r1, #128	@ 0x80
 8003da4:	0189      	lsls	r1, r1, #6
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2251      	movs	r2, #81	@ 0x51
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2250      	movs	r2, #80	@ 0x50
 8003db6:	2100      	movs	r1, #0
 8003db8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e018      	b.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e002      	b.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	425a      	negs	r2, r3
 8003de0:	4153      	adcs	r3, r2
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	001a      	movs	r2, r3
 8003de6:	1dfb      	adds	r3, r7, #7
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d196      	bne.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b008      	add	sp, #32
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	ffffdfff 	.word	0xffffdfff

08003e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	0013      	movs	r3, r2
 8003e16:	2201      	movs	r2, #1
 8003e18:	2102      	movs	r1, #2
 8003e1a:	f7ff ff63 	bl	8003ce4 <SPI_WaitFlagStateUntilTimeout>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d007      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	2220      	movs	r2, #32
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e037      	b.n	8003ea2 <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <SPI_EndRxTxTransaction+0xac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	491e      	ldr	r1, [pc, #120]	@ (8003eb0 <SPI_EndRxTxTransaction+0xb0>)
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7fc f96f 	bl	800011c <__udivsi3>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	0013      	movs	r3, r2
 8003e44:	015b      	lsls	r3, r3, #5
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	2382      	movs	r3, #130	@ 0x82
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d112      	bne.n	8003e82 <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	0013      	movs	r3, r2
 8003e66:	2200      	movs	r2, #0
 8003e68:	2180      	movs	r1, #128	@ 0x80
 8003e6a:	f7ff ff3b 	bl	8003ce4 <SPI_WaitFlagStateUntilTimeout>
 8003e6e:	1e03      	subs	r3, r0, #0
 8003e70:	d016      	beq.n	8003ea0 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	2220      	movs	r2, #32
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e00f      	b.n	8003ea2 <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2280      	movs	r2, #128	@ 0x80
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d0f2      	beq.n	8003e82 <SPI_EndRxTxTransaction+0x82>
 8003e9c:	e000      	b.n	8003ea0 <SPI_EndRxTxTransaction+0xa0>
        break;
 8003e9e:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b006      	add	sp, #24
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	20000004 	.word	0x20000004
 8003eb0:	016e3600 	.word	0x016e3600

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e032      	b.n	8003f2c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2239      	movs	r2, #57	@ 0x39
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2238      	movs	r2, #56	@ 0x38
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fd fb01 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2239      	movs	r2, #57	@ 0x39
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	0010      	movs	r0, r2
 8003ef6:	f000 f955 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	223e      	movs	r2, #62	@ 0x3e
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	223a      	movs	r2, #58	@ 0x3a
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	223b      	movs	r2, #59	@ 0x3b
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	223c      	movs	r2, #60	@ 0x3c
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	223d      	movs	r2, #61	@ 0x3d
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2239      	movs	r2, #57	@ 0x39
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b002      	add	sp, #8
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2239      	movs	r2, #57	@ 0x39
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e036      	b.n	8003fba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2239      	movs	r2, #57	@ 0x39
 8003f50:	2102      	movs	r1, #2
 8003f52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	@ 0x80
 8003f6a:	05db      	lsls	r3, r3, #23
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x50>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a13      	ldr	r2, [pc, #76]	@ (8003fc4 <HAL_TIM_Base_Start_IT+0x90>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x50>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a12      	ldr	r2, [pc, #72]	@ (8003fc8 <HAL_TIM_Base_Start_IT+0x94>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d111      	bne.n	8003fa8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d010      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	e007      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	40010800 	.word	0x40010800
 8003fc8:	40011400 	.word	0x40011400

08003fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d021      	beq.n	8004030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	4252      	negs	r2, r2
 8003ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2203      	movs	r2, #3
 800400c:	4013      	ands	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f8ae 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8004018:	e007      	b.n	800402a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 f8a1 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f000 f8ad 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2204      	movs	r2, #4
 8004034:	4013      	ands	r3, r2
 8004036:	d022      	beq.n	800407e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2204      	movs	r2, #4
 800403c:	4013      	ands	r3, r2
 800403e:	d01e      	beq.n	800407e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2205      	movs	r2, #5
 8004046:	4252      	negs	r2, r2
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	23c0      	movs	r3, #192	@ 0xc0
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4013      	ands	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f000 f887 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8004066:	e007      	b.n	8004078 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f87a 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0018      	movs	r0, r3
 8004074:	f000 f886 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2208      	movs	r2, #8
 8004082:	4013      	ands	r3, r2
 8004084:	d021      	beq.n	80040ca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2208      	movs	r2, #8
 800408a:	4013      	ands	r3, r2
 800408c:	d01d      	beq.n	80040ca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2209      	movs	r2, #9
 8004094:	4252      	negs	r2, r2
 8004096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2204      	movs	r2, #4
 800409c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2203      	movs	r2, #3
 80040a6:	4013      	ands	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 f861 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 80040b2:	e007      	b.n	80040c4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 f854 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 f860 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2210      	movs	r2, #16
 80040ce:	4013      	ands	r3, r2
 80040d0:	d022      	beq.n	8004118 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2210      	movs	r2, #16
 80040d6:	4013      	ands	r3, r2
 80040d8:	d01e      	beq.n	8004118 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2211      	movs	r2, #17
 80040e0:	4252      	negs	r2, r2
 80040e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2208      	movs	r2, #8
 80040e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	23c0      	movs	r3, #192	@ 0xc0
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f83a 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8004100:	e007      	b.n	8004112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f000 f82d 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 f839 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2201      	movs	r2, #1
 800411c:	4013      	ands	r3, r2
 800411e:	d00c      	beq.n	800413a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	4013      	ands	r3, r2
 8004126:	d008      	beq.n	800413a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2202      	movs	r2, #2
 800412e:	4252      	negs	r2, r2
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7fc fba9 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2240      	movs	r2, #64	@ 0x40
 800413e:	4013      	ands	r3, r2
 8004140:	d00c      	beq.n	800415c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2240      	movs	r2, #64	@ 0x40
 8004146:	4013      	ands	r3, r2
 8004148:	d008      	beq.n	800415c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2241      	movs	r2, #65	@ 0x41
 8004150:	4252      	negs	r2, r2
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 f81c 	bl	8004194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	46c0      	nop			@ (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b004      	add	sp, #16
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417c:	46c0      	nop			@ (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	05db      	lsls	r3, r3, #23
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0x2a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a22      	ldr	r2, [pc, #136]	@ (800424c <TIM_Base_SetConfig+0xa8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0x2a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a21      	ldr	r2, [pc, #132]	@ (8004250 <TIM_Base_SetConfig+0xac>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2270      	movs	r2, #112	@ 0x70
 80041d2:	4393      	bics	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	05db      	lsls	r3, r3, #23
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d007      	beq.n	80041fa <TIM_Base_SetConfig+0x56>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a17      	ldr	r2, [pc, #92]	@ (800424c <TIM_Base_SetConfig+0xa8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_Base_SetConfig+0x56>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a16      	ldr	r2, [pc, #88]	@ (8004250 <TIM_Base_SetConfig+0xac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d108      	bne.n	800420c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <TIM_Base_SetConfig+0xb0>)
 80041fe:	4013      	ands	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2280      	movs	r2, #128	@ 0x80
 8004210:	4393      	bics	r3, r2
 8004212:	001a      	movs	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2204      	movs	r2, #4
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b004      	add	sp, #16
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40010800 	.word	0x40010800
 8004250:	40011400 	.word	0x40011400
 8004254:	fffffcff 	.word	0xfffffcff

08004258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2238      	movs	r2, #56	@ 0x38
 8004266:	5c9b      	ldrb	r3, [r3, r2]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800426c:	2302      	movs	r3, #2
 800426e:	e042      	b.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2238      	movs	r2, #56	@ 0x38
 8004274:	2101      	movs	r1, #1
 8004276:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2239      	movs	r2, #57	@ 0x39
 800427c:	2102      	movs	r1, #2
 800427e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2270      	movs	r2, #112	@ 0x70
 8004294:	4393      	bics	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	05db      	lsls	r3, r3, #23
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d009      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a11      	ldr	r2, [pc, #68]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10c      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2280      	movs	r2, #128	@ 0x80
 80042ce:	4393      	bics	r3, r2
 80042d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2239      	movs	r2, #57	@ 0x39
 80042e8:	2101      	movs	r1, #1
 80042ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2238      	movs	r2, #56	@ 0x38
 80042f0:	2100      	movs	r1, #0
 80042f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	40010800 	.word	0x40010800
 8004304:	40011400 	.word	0x40011400

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b510      	push	{r4, lr}
 800430c:	2400      	movs	r4, #0
 800430e:	490c      	ldr	r1, [pc, #48]	@ (8004340 <siprintf+0x38>)
 8004310:	b09d      	sub	sp, #116	@ 0x74
 8004312:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004314:	9002      	str	r0, [sp, #8]
 8004316:	9006      	str	r0, [sp, #24]
 8004318:	9107      	str	r1, [sp, #28]
 800431a:	9104      	str	r1, [sp, #16]
 800431c:	4809      	ldr	r0, [pc, #36]	@ (8004344 <siprintf+0x3c>)
 800431e:	490a      	ldr	r1, [pc, #40]	@ (8004348 <siprintf+0x40>)
 8004320:	cb04      	ldmia	r3!, {r2}
 8004322:	9105      	str	r1, [sp, #20]
 8004324:	6800      	ldr	r0, [r0, #0]
 8004326:	a902      	add	r1, sp, #8
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800432c:	f000 f99e 	bl	800466c <_svfiprintf_r>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	701c      	strb	r4, [r3, #0]
 8004334:	b01d      	add	sp, #116	@ 0x74
 8004336:	bc10      	pop	{r4}
 8004338:	bc08      	pop	{r3}
 800433a:	b003      	add	sp, #12
 800433c:	4718      	bx	r3
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	7fffffff 	.word	0x7fffffff
 8004344:	20000010 	.word	0x20000010
 8004348:	ffff0208 	.word	0xffff0208

0800434c <memset>:
 800434c:	0003      	movs	r3, r0
 800434e:	1882      	adds	r2, r0, r2
 8004350:	4293      	cmp	r3, r2
 8004352:	d100      	bne.n	8004356 <memset+0xa>
 8004354:	4770      	bx	lr
 8004356:	7019      	strb	r1, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	e7f9      	b.n	8004350 <memset+0x4>

0800435c <__errno>:
 800435c:	4b01      	ldr	r3, [pc, #4]	@ (8004364 <__errno+0x8>)
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	4770      	bx	lr
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	20000010 	.word	0x20000010

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	2600      	movs	r6, #0
 800436c:	4c0c      	ldr	r4, [pc, #48]	@ (80043a0 <__libc_init_array+0x38>)
 800436e:	4d0d      	ldr	r5, [pc, #52]	@ (80043a4 <__libc_init_array+0x3c>)
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	42a6      	cmp	r6, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	2600      	movs	r6, #0
 800437a:	f000 fc61 	bl	8004c40 <_init>
 800437e:	4c0a      	ldr	r4, [pc, #40]	@ (80043a8 <__libc_init_array+0x40>)
 8004380:	4d0a      	ldr	r5, [pc, #40]	@ (80043ac <__libc_init_array+0x44>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	42a6      	cmp	r6, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	00b3      	lsls	r3, r6, #2
 800438e:	58eb      	ldr	r3, [r5, r3]
 8004390:	4798      	blx	r3
 8004392:	3601      	adds	r6, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	00b3      	lsls	r3, r6, #2
 8004398:	58eb      	ldr	r3, [r5, r3]
 800439a:	4798      	blx	r3
 800439c:	3601      	adds	r6, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	08004d68 	.word	0x08004d68
 80043a4:	08004d68 	.word	0x08004d68
 80043a8:	08004d6c 	.word	0x08004d6c
 80043ac:	08004d68 	.word	0x08004d68

080043b0 <__retarget_lock_acquire_recursive>:
 80043b0:	4770      	bx	lr

080043b2 <__retarget_lock_release_recursive>:
 80043b2:	4770      	bx	lr

080043b4 <_free_r>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	0005      	movs	r5, r0
 80043b8:	1e0c      	subs	r4, r1, #0
 80043ba:	d010      	beq.n	80043de <_free_r+0x2a>
 80043bc:	3c04      	subs	r4, #4
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da00      	bge.n	80043c6 <_free_r+0x12>
 80043c4:	18e4      	adds	r4, r4, r3
 80043c6:	0028      	movs	r0, r5
 80043c8:	f000 f8e0 	bl	800458c <__malloc_lock>
 80043cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004444 <_free_r+0x90>)
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <_free_r+0x2c>
 80043d4:	6063      	str	r3, [r4, #4]
 80043d6:	6014      	str	r4, [r2, #0]
 80043d8:	0028      	movs	r0, r5
 80043da:	f000 f8df 	bl	800459c <__malloc_unlock>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d908      	bls.n	80043f6 <_free_r+0x42>
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	1821      	adds	r1, r4, r0
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d1f3      	bne.n	80043d4 <_free_r+0x20>
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	1809      	adds	r1, r1, r0
 80043f2:	6021      	str	r1, [r4, #0]
 80043f4:	e7ee      	b.n	80043d4 <_free_r+0x20>
 80043f6:	001a      	movs	r2, r3
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <_free_r+0x4e>
 80043fe:	42a3      	cmp	r3, r4
 8004400:	d9f9      	bls.n	80043f6 <_free_r+0x42>
 8004402:	6811      	ldr	r1, [r2, #0]
 8004404:	1850      	adds	r0, r2, r1
 8004406:	42a0      	cmp	r0, r4
 8004408:	d10b      	bne.n	8004422 <_free_r+0x6e>
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	1809      	adds	r1, r1, r0
 800440e:	1850      	adds	r0, r2, r1
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	4283      	cmp	r3, r0
 8004414:	d1e0      	bne.n	80043d8 <_free_r+0x24>
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	1841      	adds	r1, r0, r1
 800441c:	6011      	str	r1, [r2, #0]
 800441e:	6053      	str	r3, [r2, #4]
 8004420:	e7da      	b.n	80043d8 <_free_r+0x24>
 8004422:	42a0      	cmp	r0, r4
 8004424:	d902      	bls.n	800442c <_free_r+0x78>
 8004426:	230c      	movs	r3, #12
 8004428:	602b      	str	r3, [r5, #0]
 800442a:	e7d5      	b.n	80043d8 <_free_r+0x24>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	1821      	adds	r1, r4, r0
 8004430:	428b      	cmp	r3, r1
 8004432:	d103      	bne.n	800443c <_free_r+0x88>
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	1809      	adds	r1, r1, r0
 800443a:	6021      	str	r1, [r4, #0]
 800443c:	6063      	str	r3, [r4, #4]
 800443e:	6054      	str	r4, [r2, #4]
 8004440:	e7ca      	b.n	80043d8 <_free_r+0x24>
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	2000030c 	.word	0x2000030c

08004448 <sbrk_aligned>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	4e0f      	ldr	r6, [pc, #60]	@ (8004488 <sbrk_aligned+0x40>)
 800444c:	000d      	movs	r5, r1
 800444e:	6831      	ldr	r1, [r6, #0]
 8004450:	0004      	movs	r4, r0
 8004452:	2900      	cmp	r1, #0
 8004454:	d102      	bne.n	800445c <sbrk_aligned+0x14>
 8004456:	f000 fb95 	bl	8004b84 <_sbrk_r>
 800445a:	6030      	str	r0, [r6, #0]
 800445c:	0029      	movs	r1, r5
 800445e:	0020      	movs	r0, r4
 8004460:	f000 fb90 	bl	8004b84 <_sbrk_r>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d103      	bne.n	8004470 <sbrk_aligned+0x28>
 8004468:	2501      	movs	r5, #1
 800446a:	426d      	negs	r5, r5
 800446c:	0028      	movs	r0, r5
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	2303      	movs	r3, #3
 8004472:	1cc5      	adds	r5, r0, #3
 8004474:	439d      	bics	r5, r3
 8004476:	42a8      	cmp	r0, r5
 8004478:	d0f8      	beq.n	800446c <sbrk_aligned+0x24>
 800447a:	1a29      	subs	r1, r5, r0
 800447c:	0020      	movs	r0, r4
 800447e:	f000 fb81 	bl	8004b84 <_sbrk_r>
 8004482:	3001      	adds	r0, #1
 8004484:	d1f2      	bne.n	800446c <sbrk_aligned+0x24>
 8004486:	e7ef      	b.n	8004468 <sbrk_aligned+0x20>
 8004488:	20000308 	.word	0x20000308

0800448c <_malloc_r>:
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	2203      	movs	r2, #3
 8004490:	1ccb      	adds	r3, r1, #3
 8004492:	4393      	bics	r3, r2
 8004494:	3308      	adds	r3, #8
 8004496:	0005      	movs	r5, r0
 8004498:	001f      	movs	r7, r3
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d234      	bcs.n	8004508 <_malloc_r+0x7c>
 800449e:	270c      	movs	r7, #12
 80044a0:	42b9      	cmp	r1, r7
 80044a2:	d833      	bhi.n	800450c <_malloc_r+0x80>
 80044a4:	0028      	movs	r0, r5
 80044a6:	f000 f871 	bl	800458c <__malloc_lock>
 80044aa:	4e37      	ldr	r6, [pc, #220]	@ (8004588 <_malloc_r+0xfc>)
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	001c      	movs	r4, r3
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	d12f      	bne.n	8004514 <_malloc_r+0x88>
 80044b4:	0039      	movs	r1, r7
 80044b6:	0028      	movs	r0, r5
 80044b8:	f7ff ffc6 	bl	8004448 <sbrk_aligned>
 80044bc:	0004      	movs	r4, r0
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	d15f      	bne.n	8004582 <_malloc_r+0xf6>
 80044c2:	6834      	ldr	r4, [r6, #0]
 80044c4:	9400      	str	r4, [sp, #0]
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d14a      	bne.n	8004562 <_malloc_r+0xd6>
 80044cc:	2c00      	cmp	r4, #0
 80044ce:	d052      	beq.n	8004576 <_malloc_r+0xea>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	0028      	movs	r0, r5
 80044d4:	18e3      	adds	r3, r4, r3
 80044d6:	9900      	ldr	r1, [sp, #0]
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	f000 fb53 	bl	8004b84 <_sbrk_r>
 80044de:	9b01      	ldr	r3, [sp, #4]
 80044e0:	4283      	cmp	r3, r0
 80044e2:	d148      	bne.n	8004576 <_malloc_r+0xea>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	0028      	movs	r0, r5
 80044e8:	1aff      	subs	r7, r7, r3
 80044ea:	0039      	movs	r1, r7
 80044ec:	f7ff ffac 	bl	8004448 <sbrk_aligned>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d040      	beq.n	8004576 <_malloc_r+0xea>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	19db      	adds	r3, r3, r7
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	6833      	ldr	r3, [r6, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	2a00      	cmp	r2, #0
 8004500:	d133      	bne.n	800456a <_malloc_r+0xde>
 8004502:	9b00      	ldr	r3, [sp, #0]
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	e019      	b.n	800453c <_malloc_r+0xb0>
 8004508:	2b00      	cmp	r3, #0
 800450a:	dac9      	bge.n	80044a0 <_malloc_r+0x14>
 800450c:	230c      	movs	r3, #12
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	2000      	movs	r0, #0
 8004512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	1bc9      	subs	r1, r1, r7
 8004518:	d420      	bmi.n	800455c <_malloc_r+0xd0>
 800451a:	290b      	cmp	r1, #11
 800451c:	d90a      	bls.n	8004534 <_malloc_r+0xa8>
 800451e:	19e2      	adds	r2, r4, r7
 8004520:	6027      	str	r7, [r4, #0]
 8004522:	42a3      	cmp	r3, r4
 8004524:	d104      	bne.n	8004530 <_malloc_r+0xa4>
 8004526:	6032      	str	r2, [r6, #0]
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	6053      	str	r3, [r2, #4]
 800452e:	e005      	b.n	800453c <_malloc_r+0xb0>
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e7f9      	b.n	8004528 <_malloc_r+0x9c>
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	42a3      	cmp	r3, r4
 8004538:	d10e      	bne.n	8004558 <_malloc_r+0xcc>
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	0028      	movs	r0, r5
 800453e:	f000 f82d 	bl	800459c <__malloc_unlock>
 8004542:	0020      	movs	r0, r4
 8004544:	2207      	movs	r2, #7
 8004546:	300b      	adds	r0, #11
 8004548:	1d23      	adds	r3, r4, #4
 800454a:	4390      	bics	r0, r2
 800454c:	1ac2      	subs	r2, r0, r3
 800454e:	4298      	cmp	r0, r3
 8004550:	d0df      	beq.n	8004512 <_malloc_r+0x86>
 8004552:	1a1b      	subs	r3, r3, r0
 8004554:	50a3      	str	r3, [r4, r2]
 8004556:	e7dc      	b.n	8004512 <_malloc_r+0x86>
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e7ef      	b.n	800453c <_malloc_r+0xb0>
 800455c:	0023      	movs	r3, r4
 800455e:	6864      	ldr	r4, [r4, #4]
 8004560:	e7a6      	b.n	80044b0 <_malloc_r+0x24>
 8004562:	9c00      	ldr	r4, [sp, #0]
 8004564:	6863      	ldr	r3, [r4, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	e7ad      	b.n	80044c6 <_malloc_r+0x3a>
 800456a:	001a      	movs	r2, r3
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	42a3      	cmp	r3, r4
 8004570:	d1fb      	bne.n	800456a <_malloc_r+0xde>
 8004572:	2300      	movs	r3, #0
 8004574:	e7da      	b.n	800452c <_malloc_r+0xa0>
 8004576:	230c      	movs	r3, #12
 8004578:	0028      	movs	r0, r5
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	f000 f80e 	bl	800459c <__malloc_unlock>
 8004580:	e7c6      	b.n	8004510 <_malloc_r+0x84>
 8004582:	6007      	str	r7, [r0, #0]
 8004584:	e7da      	b.n	800453c <_malloc_r+0xb0>
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	2000030c 	.word	0x2000030c

0800458c <__malloc_lock>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4802      	ldr	r0, [pc, #8]	@ (8004598 <__malloc_lock+0xc>)
 8004590:	f7ff ff0e 	bl	80043b0 <__retarget_lock_acquire_recursive>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	20000304 	.word	0x20000304

0800459c <__malloc_unlock>:
 800459c:	b510      	push	{r4, lr}
 800459e:	4802      	ldr	r0, [pc, #8]	@ (80045a8 <__malloc_unlock+0xc>)
 80045a0:	f7ff ff07 	bl	80043b2 <__retarget_lock_release_recursive>
 80045a4:	bd10      	pop	{r4, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	20000304 	.word	0x20000304

080045ac <__ssputs_r>:
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	688e      	ldr	r6, [r1, #8]
 80045b0:	b085      	sub	sp, #20
 80045b2:	001f      	movs	r7, r3
 80045b4:	000c      	movs	r4, r1
 80045b6:	680b      	ldr	r3, [r1, #0]
 80045b8:	9002      	str	r0, [sp, #8]
 80045ba:	9203      	str	r2, [sp, #12]
 80045bc:	42be      	cmp	r6, r7
 80045be:	d830      	bhi.n	8004622 <__ssputs_r+0x76>
 80045c0:	210c      	movs	r1, #12
 80045c2:	5e62      	ldrsh	r2, [r4, r1]
 80045c4:	2190      	movs	r1, #144	@ 0x90
 80045c6:	00c9      	lsls	r1, r1, #3
 80045c8:	420a      	tst	r2, r1
 80045ca:	d028      	beq.n	800461e <__ssputs_r+0x72>
 80045cc:	2003      	movs	r0, #3
 80045ce:	6921      	ldr	r1, [r4, #16]
 80045d0:	1a5b      	subs	r3, r3, r1
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	6963      	ldr	r3, [r4, #20]
 80045d6:	4343      	muls	r3, r0
 80045d8:	9801      	ldr	r0, [sp, #4]
 80045da:	0fdd      	lsrs	r5, r3, #31
 80045dc:	18ed      	adds	r5, r5, r3
 80045de:	1c7b      	adds	r3, r7, #1
 80045e0:	181b      	adds	r3, r3, r0
 80045e2:	106d      	asrs	r5, r5, #1
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	d900      	bls.n	80045ea <__ssputs_r+0x3e>
 80045e8:	001d      	movs	r5, r3
 80045ea:	0552      	lsls	r2, r2, #21
 80045ec:	d528      	bpl.n	8004640 <__ssputs_r+0x94>
 80045ee:	0029      	movs	r1, r5
 80045f0:	9802      	ldr	r0, [sp, #8]
 80045f2:	f7ff ff4b 	bl	800448c <_malloc_r>
 80045f6:	1e06      	subs	r6, r0, #0
 80045f8:	d02c      	beq.n	8004654 <__ssputs_r+0xa8>
 80045fa:	9a01      	ldr	r2, [sp, #4]
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	f000 fade 	bl	8004bbe <memcpy>
 8004602:	89a2      	ldrh	r2, [r4, #12]
 8004604:	4b18      	ldr	r3, [pc, #96]	@ (8004668 <__ssputs_r+0xbc>)
 8004606:	401a      	ands	r2, r3
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	4313      	orrs	r3, r2
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	9b01      	ldr	r3, [sp, #4]
 8004610:	6126      	str	r6, [r4, #16]
 8004612:	18f6      	adds	r6, r6, r3
 8004614:	6026      	str	r6, [r4, #0]
 8004616:	003e      	movs	r6, r7
 8004618:	6165      	str	r5, [r4, #20]
 800461a:	1aed      	subs	r5, r5, r3
 800461c:	60a5      	str	r5, [r4, #8]
 800461e:	42be      	cmp	r6, r7
 8004620:	d900      	bls.n	8004624 <__ssputs_r+0x78>
 8004622:	003e      	movs	r6, r7
 8004624:	0032      	movs	r2, r6
 8004626:	9903      	ldr	r1, [sp, #12]
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	f000 fa99 	bl	8004b60 <memmove>
 800462e:	2000      	movs	r0, #0
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	1b9b      	subs	r3, r3, r6
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	199b      	adds	r3, r3, r6
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	b005      	add	sp, #20
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004640:	002a      	movs	r2, r5
 8004642:	9802      	ldr	r0, [sp, #8]
 8004644:	f000 fac4 	bl	8004bd0 <_realloc_r>
 8004648:	1e06      	subs	r6, r0, #0
 800464a:	d1e0      	bne.n	800460e <__ssputs_r+0x62>
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	9802      	ldr	r0, [sp, #8]
 8004650:	f7ff feb0 	bl	80043b4 <_free_r>
 8004654:	230c      	movs	r3, #12
 8004656:	2001      	movs	r0, #1
 8004658:	9a02      	ldr	r2, [sp, #8]
 800465a:	4240      	negs	r0, r0
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	89a2      	ldrh	r2, [r4, #12]
 8004660:	3334      	adds	r3, #52	@ 0x34
 8004662:	4313      	orrs	r3, r2
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	e7e9      	b.n	800463c <__ssputs_r+0x90>
 8004668:	fffffb7f 	.word	0xfffffb7f

0800466c <_svfiprintf_r>:
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b0a1      	sub	sp, #132	@ 0x84
 8004670:	9003      	str	r0, [sp, #12]
 8004672:	001d      	movs	r5, r3
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	000f      	movs	r7, r1
 8004678:	0016      	movs	r6, r2
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	d511      	bpl.n	80046a2 <_svfiprintf_r+0x36>
 800467e:	690b      	ldr	r3, [r1, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10e      	bne.n	80046a2 <_svfiprintf_r+0x36>
 8004684:	2140      	movs	r1, #64	@ 0x40
 8004686:	f7ff ff01 	bl	800448c <_malloc_r>
 800468a:	6038      	str	r0, [r7, #0]
 800468c:	6138      	str	r0, [r7, #16]
 800468e:	2800      	cmp	r0, #0
 8004690:	d105      	bne.n	800469e <_svfiprintf_r+0x32>
 8004692:	230c      	movs	r3, #12
 8004694:	9a03      	ldr	r2, [sp, #12]
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	2001      	movs	r0, #1
 800469a:	4240      	negs	r0, r0
 800469c:	e0cf      	b.n	800483e <_svfiprintf_r+0x1d2>
 800469e:	2340      	movs	r3, #64	@ 0x40
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	2300      	movs	r3, #0
 80046a4:	ac08      	add	r4, sp, #32
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	3320      	adds	r3, #32
 80046aa:	7663      	strb	r3, [r4, #25]
 80046ac:	3310      	adds	r3, #16
 80046ae:	76a3      	strb	r3, [r4, #26]
 80046b0:	9507      	str	r5, [sp, #28]
 80046b2:	0035      	movs	r5, r6
 80046b4:	782b      	ldrb	r3, [r5, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <_svfiprintf_r+0x52>
 80046ba:	2b25      	cmp	r3, #37	@ 0x25
 80046bc:	d148      	bne.n	8004750 <_svfiprintf_r+0xe4>
 80046be:	1bab      	subs	r3, r5, r6
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	42b5      	cmp	r5, r6
 80046c4:	d00b      	beq.n	80046de <_svfiprintf_r+0x72>
 80046c6:	0032      	movs	r2, r6
 80046c8:	0039      	movs	r1, r7
 80046ca:	9803      	ldr	r0, [sp, #12]
 80046cc:	f7ff ff6e 	bl	80045ac <__ssputs_r>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d100      	bne.n	80046d6 <_svfiprintf_r+0x6a>
 80046d4:	e0ae      	b.n	8004834 <_svfiprintf_r+0x1c8>
 80046d6:	6963      	ldr	r3, [r4, #20]
 80046d8:	9a05      	ldr	r2, [sp, #20]
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	6163      	str	r3, [r4, #20]
 80046de:	782b      	ldrb	r3, [r5, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d100      	bne.n	80046e6 <_svfiprintf_r+0x7a>
 80046e4:	e0a6      	b.n	8004834 <_svfiprintf_r+0x1c8>
 80046e6:	2201      	movs	r2, #1
 80046e8:	2300      	movs	r3, #0
 80046ea:	4252      	negs	r2, r2
 80046ec:	6062      	str	r2, [r4, #4]
 80046ee:	a904      	add	r1, sp, #16
 80046f0:	3254      	adds	r2, #84	@ 0x54
 80046f2:	1852      	adds	r2, r2, r1
 80046f4:	1c6e      	adds	r6, r5, #1
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	60e3      	str	r3, [r4, #12]
 80046fa:	60a3      	str	r3, [r4, #8]
 80046fc:	7013      	strb	r3, [r2, #0]
 80046fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004700:	4b54      	ldr	r3, [pc, #336]	@ (8004854 <_svfiprintf_r+0x1e8>)
 8004702:	2205      	movs	r2, #5
 8004704:	0018      	movs	r0, r3
 8004706:	7831      	ldrb	r1, [r6, #0]
 8004708:	9305      	str	r3, [sp, #20]
 800470a:	f000 fa4d 	bl	8004ba8 <memchr>
 800470e:	1c75      	adds	r5, r6, #1
 8004710:	2800      	cmp	r0, #0
 8004712:	d11f      	bne.n	8004754 <_svfiprintf_r+0xe8>
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	06d3      	lsls	r3, r2, #27
 8004718:	d504      	bpl.n	8004724 <_svfiprintf_r+0xb8>
 800471a:	2353      	movs	r3, #83	@ 0x53
 800471c:	a904      	add	r1, sp, #16
 800471e:	185b      	adds	r3, r3, r1
 8004720:	2120      	movs	r1, #32
 8004722:	7019      	strb	r1, [r3, #0]
 8004724:	0713      	lsls	r3, r2, #28
 8004726:	d504      	bpl.n	8004732 <_svfiprintf_r+0xc6>
 8004728:	2353      	movs	r3, #83	@ 0x53
 800472a:	a904      	add	r1, sp, #16
 800472c:	185b      	adds	r3, r3, r1
 800472e:	212b      	movs	r1, #43	@ 0x2b
 8004730:	7019      	strb	r1, [r3, #0]
 8004732:	7833      	ldrb	r3, [r6, #0]
 8004734:	2b2a      	cmp	r3, #42	@ 0x2a
 8004736:	d016      	beq.n	8004766 <_svfiprintf_r+0xfa>
 8004738:	0035      	movs	r5, r6
 800473a:	2100      	movs	r1, #0
 800473c:	200a      	movs	r0, #10
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	782a      	ldrb	r2, [r5, #0]
 8004742:	1c6e      	adds	r6, r5, #1
 8004744:	3a30      	subs	r2, #48	@ 0x30
 8004746:	2a09      	cmp	r2, #9
 8004748:	d950      	bls.n	80047ec <_svfiprintf_r+0x180>
 800474a:	2900      	cmp	r1, #0
 800474c:	d111      	bne.n	8004772 <_svfiprintf_r+0x106>
 800474e:	e017      	b.n	8004780 <_svfiprintf_r+0x114>
 8004750:	3501      	adds	r5, #1
 8004752:	e7af      	b.n	80046b4 <_svfiprintf_r+0x48>
 8004754:	9b05      	ldr	r3, [sp, #20]
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	1ac0      	subs	r0, r0, r3
 800475a:	2301      	movs	r3, #1
 800475c:	4083      	lsls	r3, r0
 800475e:	4313      	orrs	r3, r2
 8004760:	002e      	movs	r6, r5
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	e7cc      	b.n	8004700 <_svfiprintf_r+0x94>
 8004766:	9b07      	ldr	r3, [sp, #28]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	9107      	str	r1, [sp, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db01      	blt.n	8004776 <_svfiprintf_r+0x10a>
 8004772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004774:	e004      	b.n	8004780 <_svfiprintf_r+0x114>
 8004776:	425b      	negs	r3, r3
 8004778:	60e3      	str	r3, [r4, #12]
 800477a:	2302      	movs	r3, #2
 800477c:	4313      	orrs	r3, r2
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	782b      	ldrb	r3, [r5, #0]
 8004782:	2b2e      	cmp	r3, #46	@ 0x2e
 8004784:	d10c      	bne.n	80047a0 <_svfiprintf_r+0x134>
 8004786:	786b      	ldrb	r3, [r5, #1]
 8004788:	2b2a      	cmp	r3, #42	@ 0x2a
 800478a:	d134      	bne.n	80047f6 <_svfiprintf_r+0x18a>
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	3502      	adds	r5, #2
 8004790:	1d1a      	adds	r2, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	9207      	str	r2, [sp, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	da01      	bge.n	800479e <_svfiprintf_r+0x132>
 800479a:	2301      	movs	r3, #1
 800479c:	425b      	negs	r3, r3
 800479e:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a0:	4e2d      	ldr	r6, [pc, #180]	@ (8004858 <_svfiprintf_r+0x1ec>)
 80047a2:	2203      	movs	r2, #3
 80047a4:	0030      	movs	r0, r6
 80047a6:	7829      	ldrb	r1, [r5, #0]
 80047a8:	f000 f9fe 	bl	8004ba8 <memchr>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d006      	beq.n	80047be <_svfiprintf_r+0x152>
 80047b0:	2340      	movs	r3, #64	@ 0x40
 80047b2:	1b80      	subs	r0, r0, r6
 80047b4:	4083      	lsls	r3, r0
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	3501      	adds	r5, #1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	7829      	ldrb	r1, [r5, #0]
 80047c0:	2206      	movs	r2, #6
 80047c2:	4826      	ldr	r0, [pc, #152]	@ (800485c <_svfiprintf_r+0x1f0>)
 80047c4:	1c6e      	adds	r6, r5, #1
 80047c6:	7621      	strb	r1, [r4, #24]
 80047c8:	f000 f9ee 	bl	8004ba8 <memchr>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d038      	beq.n	8004842 <_svfiprintf_r+0x1d6>
 80047d0:	4b23      	ldr	r3, [pc, #140]	@ (8004860 <_svfiprintf_r+0x1f4>)
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d122      	bne.n	800481c <_svfiprintf_r+0x1b0>
 80047d6:	2207      	movs	r2, #7
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	3307      	adds	r3, #7
 80047dc:	4393      	bics	r3, r2
 80047de:	3308      	adds	r3, #8
 80047e0:	9307      	str	r3, [sp, #28]
 80047e2:	6963      	ldr	r3, [r4, #20]
 80047e4:	9a04      	ldr	r2, [sp, #16]
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	6163      	str	r3, [r4, #20]
 80047ea:	e762      	b.n	80046b2 <_svfiprintf_r+0x46>
 80047ec:	4343      	muls	r3, r0
 80047ee:	0035      	movs	r5, r6
 80047f0:	2101      	movs	r1, #1
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	e7a4      	b.n	8004740 <_svfiprintf_r+0xd4>
 80047f6:	2300      	movs	r3, #0
 80047f8:	200a      	movs	r0, #10
 80047fa:	0019      	movs	r1, r3
 80047fc:	3501      	adds	r5, #1
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	782a      	ldrb	r2, [r5, #0]
 8004802:	1c6e      	adds	r6, r5, #1
 8004804:	3a30      	subs	r2, #48	@ 0x30
 8004806:	2a09      	cmp	r2, #9
 8004808:	d903      	bls.n	8004812 <_svfiprintf_r+0x1a6>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0c8      	beq.n	80047a0 <_svfiprintf_r+0x134>
 800480e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004810:	e7c6      	b.n	80047a0 <_svfiprintf_r+0x134>
 8004812:	4341      	muls	r1, r0
 8004814:	0035      	movs	r5, r6
 8004816:	2301      	movs	r3, #1
 8004818:	1889      	adds	r1, r1, r2
 800481a:	e7f1      	b.n	8004800 <_svfiprintf_r+0x194>
 800481c:	aa07      	add	r2, sp, #28
 800481e:	9200      	str	r2, [sp, #0]
 8004820:	0021      	movs	r1, r4
 8004822:	003a      	movs	r2, r7
 8004824:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <_svfiprintf_r+0x1f8>)
 8004826:	9803      	ldr	r0, [sp, #12]
 8004828:	e000      	b.n	800482c <_svfiprintf_r+0x1c0>
 800482a:	bf00      	nop
 800482c:	9004      	str	r0, [sp, #16]
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	3301      	adds	r3, #1
 8004832:	d1d6      	bne.n	80047e2 <_svfiprintf_r+0x176>
 8004834:	89bb      	ldrh	r3, [r7, #12]
 8004836:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004838:	065b      	lsls	r3, r3, #25
 800483a:	d500      	bpl.n	800483e <_svfiprintf_r+0x1d2>
 800483c:	e72c      	b.n	8004698 <_svfiprintf_r+0x2c>
 800483e:	b021      	add	sp, #132	@ 0x84
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004842:	aa07      	add	r2, sp, #28
 8004844:	9200      	str	r2, [sp, #0]
 8004846:	0021      	movs	r1, r4
 8004848:	003a      	movs	r2, r7
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <_svfiprintf_r+0x1f8>)
 800484c:	9803      	ldr	r0, [sp, #12]
 800484e:	f000 f87b 	bl	8004948 <_printf_i>
 8004852:	e7eb      	b.n	800482c <_svfiprintf_r+0x1c0>
 8004854:	08004d35 	.word	0x08004d35
 8004858:	08004d3b 	.word	0x08004d3b
 800485c:	08004d3f 	.word	0x08004d3f
 8004860:	00000000 	.word	0x00000000
 8004864:	080045ad 	.word	0x080045ad

08004868 <_printf_common>:
 8004868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486a:	0016      	movs	r6, r2
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	688a      	ldr	r2, [r1, #8]
 8004870:	690b      	ldr	r3, [r1, #16]
 8004872:	000c      	movs	r4, r1
 8004874:	9000      	str	r0, [sp, #0]
 8004876:	4293      	cmp	r3, r2
 8004878:	da00      	bge.n	800487c <_printf_common+0x14>
 800487a:	0013      	movs	r3, r2
 800487c:	0022      	movs	r2, r4
 800487e:	6033      	str	r3, [r6, #0]
 8004880:	3243      	adds	r2, #67	@ 0x43
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	2a00      	cmp	r2, #0
 8004886:	d001      	beq.n	800488c <_printf_common+0x24>
 8004888:	3301      	adds	r3, #1
 800488a:	6033      	str	r3, [r6, #0]
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	069b      	lsls	r3, r3, #26
 8004890:	d502      	bpl.n	8004898 <_printf_common+0x30>
 8004892:	6833      	ldr	r3, [r6, #0]
 8004894:	3302      	adds	r3, #2
 8004896:	6033      	str	r3, [r6, #0]
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	2306      	movs	r3, #6
 800489c:	0015      	movs	r5, r2
 800489e:	401d      	ands	r5, r3
 80048a0:	421a      	tst	r2, r3
 80048a2:	d027      	beq.n	80048f4 <_printf_common+0x8c>
 80048a4:	0023      	movs	r3, r4
 80048a6:	3343      	adds	r3, #67	@ 0x43
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	1e5a      	subs	r2, r3, #1
 80048ac:	4193      	sbcs	r3, r2
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	0692      	lsls	r2, r2, #26
 80048b2:	d430      	bmi.n	8004916 <_printf_common+0xae>
 80048b4:	0022      	movs	r2, r4
 80048b6:	9901      	ldr	r1, [sp, #4]
 80048b8:	9800      	ldr	r0, [sp, #0]
 80048ba:	9d08      	ldr	r5, [sp, #32]
 80048bc:	3243      	adds	r2, #67	@ 0x43
 80048be:	47a8      	blx	r5
 80048c0:	3001      	adds	r0, #1
 80048c2:	d025      	beq.n	8004910 <_printf_common+0xa8>
 80048c4:	2206      	movs	r2, #6
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	2500      	movs	r5, #0
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d105      	bne.n	80048dc <_printf_common+0x74>
 80048d0:	6833      	ldr	r3, [r6, #0]
 80048d2:	68e5      	ldr	r5, [r4, #12]
 80048d4:	1aed      	subs	r5, r5, r3
 80048d6:	43eb      	mvns	r3, r5
 80048d8:	17db      	asrs	r3, r3, #31
 80048da:	401d      	ands	r5, r3
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	6922      	ldr	r2, [r4, #16]
 80048e0:	4293      	cmp	r3, r2
 80048e2:	dd01      	ble.n	80048e8 <_printf_common+0x80>
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	18ed      	adds	r5, r5, r3
 80048e8:	2600      	movs	r6, #0
 80048ea:	42b5      	cmp	r5, r6
 80048ec:	d120      	bne.n	8004930 <_printf_common+0xc8>
 80048ee:	2000      	movs	r0, #0
 80048f0:	e010      	b.n	8004914 <_printf_common+0xac>
 80048f2:	3501      	adds	r5, #1
 80048f4:	68e3      	ldr	r3, [r4, #12]
 80048f6:	6832      	ldr	r2, [r6, #0]
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	42ab      	cmp	r3, r5
 80048fc:	ddd2      	ble.n	80048a4 <_printf_common+0x3c>
 80048fe:	0022      	movs	r2, r4
 8004900:	2301      	movs	r3, #1
 8004902:	9901      	ldr	r1, [sp, #4]
 8004904:	9800      	ldr	r0, [sp, #0]
 8004906:	9f08      	ldr	r7, [sp, #32]
 8004908:	3219      	adds	r2, #25
 800490a:	47b8      	blx	r7
 800490c:	3001      	adds	r0, #1
 800490e:	d1f0      	bne.n	80048f2 <_printf_common+0x8a>
 8004910:	2001      	movs	r0, #1
 8004912:	4240      	negs	r0, r0
 8004914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004916:	2030      	movs	r0, #48	@ 0x30
 8004918:	18e1      	adds	r1, r4, r3
 800491a:	3143      	adds	r1, #67	@ 0x43
 800491c:	7008      	strb	r0, [r1, #0]
 800491e:	0021      	movs	r1, r4
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	3145      	adds	r1, #69	@ 0x45
 8004924:	7809      	ldrb	r1, [r1, #0]
 8004926:	18a2      	adds	r2, r4, r2
 8004928:	3243      	adds	r2, #67	@ 0x43
 800492a:	3302      	adds	r3, #2
 800492c:	7011      	strb	r1, [r2, #0]
 800492e:	e7c1      	b.n	80048b4 <_printf_common+0x4c>
 8004930:	0022      	movs	r2, r4
 8004932:	2301      	movs	r3, #1
 8004934:	9901      	ldr	r1, [sp, #4]
 8004936:	9800      	ldr	r0, [sp, #0]
 8004938:	9f08      	ldr	r7, [sp, #32]
 800493a:	321a      	adds	r2, #26
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	d0e6      	beq.n	8004910 <_printf_common+0xa8>
 8004942:	3601      	adds	r6, #1
 8004944:	e7d1      	b.n	80048ea <_printf_common+0x82>
	...

08004948 <_printf_i>:
 8004948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494a:	b08b      	sub	sp, #44	@ 0x2c
 800494c:	9206      	str	r2, [sp, #24]
 800494e:	000a      	movs	r2, r1
 8004950:	3243      	adds	r2, #67	@ 0x43
 8004952:	9307      	str	r3, [sp, #28]
 8004954:	9005      	str	r0, [sp, #20]
 8004956:	9203      	str	r2, [sp, #12]
 8004958:	7e0a      	ldrb	r2, [r1, #24]
 800495a:	000c      	movs	r4, r1
 800495c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800495e:	2a78      	cmp	r2, #120	@ 0x78
 8004960:	d809      	bhi.n	8004976 <_printf_i+0x2e>
 8004962:	2a62      	cmp	r2, #98	@ 0x62
 8004964:	d80b      	bhi.n	800497e <_printf_i+0x36>
 8004966:	2a00      	cmp	r2, #0
 8004968:	d100      	bne.n	800496c <_printf_i+0x24>
 800496a:	e0ba      	b.n	8004ae2 <_printf_i+0x19a>
 800496c:	497a      	ldr	r1, [pc, #488]	@ (8004b58 <_printf_i+0x210>)
 800496e:	9104      	str	r1, [sp, #16]
 8004970:	2a58      	cmp	r2, #88	@ 0x58
 8004972:	d100      	bne.n	8004976 <_printf_i+0x2e>
 8004974:	e08e      	b.n	8004a94 <_printf_i+0x14c>
 8004976:	0025      	movs	r5, r4
 8004978:	3542      	adds	r5, #66	@ 0x42
 800497a:	702a      	strb	r2, [r5, #0]
 800497c:	e022      	b.n	80049c4 <_printf_i+0x7c>
 800497e:	0010      	movs	r0, r2
 8004980:	3863      	subs	r0, #99	@ 0x63
 8004982:	2815      	cmp	r0, #21
 8004984:	d8f7      	bhi.n	8004976 <_printf_i+0x2e>
 8004986:	f7fb fbbf 	bl	8000108 <__gnu_thumb1_case_shi>
 800498a:	0016      	.short	0x0016
 800498c:	fff6001f 	.word	0xfff6001f
 8004990:	fff6fff6 	.word	0xfff6fff6
 8004994:	001ffff6 	.word	0x001ffff6
 8004998:	fff6fff6 	.word	0xfff6fff6
 800499c:	fff6fff6 	.word	0xfff6fff6
 80049a0:	0036009f 	.word	0x0036009f
 80049a4:	fff6007e 	.word	0xfff6007e
 80049a8:	00b0fff6 	.word	0x00b0fff6
 80049ac:	0036fff6 	.word	0x0036fff6
 80049b0:	fff6fff6 	.word	0xfff6fff6
 80049b4:	0082      	.short	0x0082
 80049b6:	0025      	movs	r5, r4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	3542      	adds	r5, #66	@ 0x42
 80049bc:	1d11      	adds	r1, r2, #4
 80049be:	6019      	str	r1, [r3, #0]
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	702b      	strb	r3, [r5, #0]
 80049c4:	2301      	movs	r3, #1
 80049c6:	e09e      	b.n	8004b06 <_printf_i+0x1be>
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	6809      	ldr	r1, [r1, #0]
 80049cc:	1d02      	adds	r2, r0, #4
 80049ce:	060d      	lsls	r5, r1, #24
 80049d0:	d50b      	bpl.n	80049ea <_printf_i+0xa2>
 80049d2:	6806      	ldr	r6, [r0, #0]
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	da03      	bge.n	80049e2 <_printf_i+0x9a>
 80049da:	232d      	movs	r3, #45	@ 0x2d
 80049dc:	9a03      	ldr	r2, [sp, #12]
 80049de:	4276      	negs	r6, r6
 80049e0:	7013      	strb	r3, [r2, #0]
 80049e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b58 <_printf_i+0x210>)
 80049e4:	270a      	movs	r7, #10
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	e018      	b.n	8004a1c <_printf_i+0xd4>
 80049ea:	6806      	ldr	r6, [r0, #0]
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	0649      	lsls	r1, r1, #25
 80049f0:	d5f1      	bpl.n	80049d6 <_printf_i+0x8e>
 80049f2:	b236      	sxth	r6, r6
 80049f4:	e7ef      	b.n	80049d6 <_printf_i+0x8e>
 80049f6:	6808      	ldr	r0, [r1, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	c940      	ldmia	r1!, {r6}
 80049fc:	0605      	lsls	r5, r0, #24
 80049fe:	d402      	bmi.n	8004a06 <_printf_i+0xbe>
 8004a00:	0640      	lsls	r0, r0, #25
 8004a02:	d500      	bpl.n	8004a06 <_printf_i+0xbe>
 8004a04:	b2b6      	uxth	r6, r6
 8004a06:	6019      	str	r1, [r3, #0]
 8004a08:	4b53      	ldr	r3, [pc, #332]	@ (8004b58 <_printf_i+0x210>)
 8004a0a:	270a      	movs	r7, #10
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004a10:	d100      	bne.n	8004a14 <_printf_i+0xcc>
 8004a12:	3f02      	subs	r7, #2
 8004a14:	0023      	movs	r3, r4
 8004a16:	2200      	movs	r2, #0
 8004a18:	3343      	adds	r3, #67	@ 0x43
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	60a3      	str	r3, [r4, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	db06      	blt.n	8004a32 <_printf_i+0xea>
 8004a24:	2104      	movs	r1, #4
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	9d03      	ldr	r5, [sp, #12]
 8004a2a:	438a      	bics	r2, r1
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	4333      	orrs	r3, r6
 8004a30:	d00c      	beq.n	8004a4c <_printf_i+0x104>
 8004a32:	9d03      	ldr	r5, [sp, #12]
 8004a34:	0030      	movs	r0, r6
 8004a36:	0039      	movs	r1, r7
 8004a38:	f7fb fbf6 	bl	8000228 <__aeabi_uidivmod>
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	3d01      	subs	r5, #1
 8004a40:	5c5b      	ldrb	r3, [r3, r1]
 8004a42:	702b      	strb	r3, [r5, #0]
 8004a44:	0033      	movs	r3, r6
 8004a46:	0006      	movs	r6, r0
 8004a48:	429f      	cmp	r7, r3
 8004a4a:	d9f3      	bls.n	8004a34 <_printf_i+0xec>
 8004a4c:	2f08      	cmp	r7, #8
 8004a4e:	d109      	bne.n	8004a64 <_printf_i+0x11c>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d506      	bpl.n	8004a64 <_printf_i+0x11c>
 8004a56:	6862      	ldr	r2, [r4, #4]
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	dc02      	bgt.n	8004a64 <_printf_i+0x11c>
 8004a5e:	2330      	movs	r3, #48	@ 0x30
 8004a60:	3d01      	subs	r5, #1
 8004a62:	702b      	strb	r3, [r5, #0]
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	1b5b      	subs	r3, r3, r5
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	9b07      	ldr	r3, [sp, #28]
 8004a6c:	0021      	movs	r1, r4
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	9805      	ldr	r0, [sp, #20]
 8004a72:	9b06      	ldr	r3, [sp, #24]
 8004a74:	aa09      	add	r2, sp, #36	@ 0x24
 8004a76:	f7ff fef7 	bl	8004868 <_printf_common>
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d148      	bne.n	8004b10 <_printf_i+0x1c8>
 8004a7e:	2001      	movs	r0, #1
 8004a80:	4240      	negs	r0, r0
 8004a82:	b00b      	add	sp, #44	@ 0x2c
 8004a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a86:	2220      	movs	r2, #32
 8004a88:	6809      	ldr	r1, [r1, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	6022      	str	r2, [r4, #0]
 8004a8e:	2278      	movs	r2, #120	@ 0x78
 8004a90:	4932      	ldr	r1, [pc, #200]	@ (8004b5c <_printf_i+0x214>)
 8004a92:	9104      	str	r1, [sp, #16]
 8004a94:	0021      	movs	r1, r4
 8004a96:	3145      	adds	r1, #69	@ 0x45
 8004a98:	700a      	strb	r2, [r1, #0]
 8004a9a:	6819      	ldr	r1, [r3, #0]
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	c940      	ldmia	r1!, {r6}
 8004aa0:	0610      	lsls	r0, r2, #24
 8004aa2:	d402      	bmi.n	8004aaa <_printf_i+0x162>
 8004aa4:	0650      	lsls	r0, r2, #25
 8004aa6:	d500      	bpl.n	8004aaa <_printf_i+0x162>
 8004aa8:	b2b6      	uxth	r6, r6
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	07d3      	lsls	r3, r2, #31
 8004aae:	d502      	bpl.n	8004ab6 <_printf_i+0x16e>
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	d001      	beq.n	8004abe <_printf_i+0x176>
 8004aba:	2710      	movs	r7, #16
 8004abc:	e7aa      	b.n	8004a14 <_printf_i+0xcc>
 8004abe:	2220      	movs	r2, #32
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	e7f8      	b.n	8004aba <_printf_i+0x172>
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	680d      	ldr	r5, [r1, #0]
 8004acc:	1d10      	adds	r0, r2, #4
 8004ace:	6949      	ldr	r1, [r1, #20]
 8004ad0:	6018      	str	r0, [r3, #0]
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	062e      	lsls	r6, r5, #24
 8004ad6:	d501      	bpl.n	8004adc <_printf_i+0x194>
 8004ad8:	6019      	str	r1, [r3, #0]
 8004ada:	e002      	b.n	8004ae2 <_printf_i+0x19a>
 8004adc:	066d      	lsls	r5, r5, #25
 8004ade:	d5fb      	bpl.n	8004ad8 <_printf_i+0x190>
 8004ae0:	8019      	strh	r1, [r3, #0]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9d03      	ldr	r5, [sp, #12]
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	e7bf      	b.n	8004a6a <_printf_i+0x122>
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	1d11      	adds	r1, r2, #4
 8004aee:	6019      	str	r1, [r3, #0]
 8004af0:	6815      	ldr	r5, [r2, #0]
 8004af2:	2100      	movs	r1, #0
 8004af4:	0028      	movs	r0, r5
 8004af6:	6862      	ldr	r2, [r4, #4]
 8004af8:	f000 f856 	bl	8004ba8 <memchr>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d001      	beq.n	8004b04 <_printf_i+0x1bc>
 8004b00:	1b40      	subs	r0, r0, r5
 8004b02:	6060      	str	r0, [r4, #4]
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9a03      	ldr	r2, [sp, #12]
 8004b0c:	7013      	strb	r3, [r2, #0]
 8004b0e:	e7ac      	b.n	8004a6a <_printf_i+0x122>
 8004b10:	002a      	movs	r2, r5
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	9906      	ldr	r1, [sp, #24]
 8004b16:	9805      	ldr	r0, [sp, #20]
 8004b18:	9d07      	ldr	r5, [sp, #28]
 8004b1a:	47a8      	blx	r5
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d0ae      	beq.n	8004a7e <_printf_i+0x136>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	079b      	lsls	r3, r3, #30
 8004b24:	d415      	bmi.n	8004b52 <_printf_i+0x20a>
 8004b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b28:	68e0      	ldr	r0, [r4, #12]
 8004b2a:	4298      	cmp	r0, r3
 8004b2c:	daa9      	bge.n	8004a82 <_printf_i+0x13a>
 8004b2e:	0018      	movs	r0, r3
 8004b30:	e7a7      	b.n	8004a82 <_printf_i+0x13a>
 8004b32:	0022      	movs	r2, r4
 8004b34:	2301      	movs	r3, #1
 8004b36:	9906      	ldr	r1, [sp, #24]
 8004b38:	9805      	ldr	r0, [sp, #20]
 8004b3a:	9e07      	ldr	r6, [sp, #28]
 8004b3c:	3219      	adds	r2, #25
 8004b3e:	47b0      	blx	r6
 8004b40:	3001      	adds	r0, #1
 8004b42:	d09c      	beq.n	8004a7e <_printf_i+0x136>
 8004b44:	3501      	adds	r5, #1
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dcf0      	bgt.n	8004b32 <_printf_i+0x1ea>
 8004b50:	e7e9      	b.n	8004b26 <_printf_i+0x1de>
 8004b52:	2500      	movs	r5, #0
 8004b54:	e7f7      	b.n	8004b46 <_printf_i+0x1fe>
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	08004d46 	.word	0x08004d46
 8004b5c:	08004d57 	.word	0x08004d57

08004b60 <memmove>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4288      	cmp	r0, r1
 8004b64:	d902      	bls.n	8004b6c <memmove+0xc>
 8004b66:	188b      	adds	r3, r1, r2
 8004b68:	4298      	cmp	r0, r3
 8004b6a:	d308      	bcc.n	8004b7e <memmove+0x1e>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d007      	beq.n	8004b82 <memmove+0x22>
 8004b72:	5ccc      	ldrb	r4, [r1, r3]
 8004b74:	54c4      	strb	r4, [r0, r3]
 8004b76:	3301      	adds	r3, #1
 8004b78:	e7f9      	b.n	8004b6e <memmove+0xe>
 8004b7a:	5c8b      	ldrb	r3, [r1, r2]
 8004b7c:	5483      	strb	r3, [r0, r2]
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	d2fb      	bcs.n	8004b7a <memmove+0x1a>
 8004b82:	bd10      	pop	{r4, pc}

08004b84 <_sbrk_r>:
 8004b84:	2300      	movs	r3, #0
 8004b86:	b570      	push	{r4, r5, r6, lr}
 8004b88:	4d06      	ldr	r5, [pc, #24]	@ (8004ba4 <_sbrk_r+0x20>)
 8004b8a:	0004      	movs	r4, r0
 8004b8c:	0008      	movs	r0, r1
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	f7fc fcee 	bl	8001570 <_sbrk>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d103      	bne.n	8004ba0 <_sbrk_r+0x1c>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d000      	beq.n	8004ba0 <_sbrk_r+0x1c>
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	20000300 	.word	0x20000300

08004ba8 <memchr>:
 8004ba8:	b2c9      	uxtb	r1, r1
 8004baa:	1882      	adds	r2, r0, r2
 8004bac:	4290      	cmp	r0, r2
 8004bae:	d101      	bne.n	8004bb4 <memchr+0xc>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	4770      	bx	lr
 8004bb4:	7803      	ldrb	r3, [r0, #0]
 8004bb6:	428b      	cmp	r3, r1
 8004bb8:	d0fb      	beq.n	8004bb2 <memchr+0xa>
 8004bba:	3001      	adds	r0, #1
 8004bbc:	e7f6      	b.n	8004bac <memchr+0x4>

08004bbe <memcpy>:
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d100      	bne.n	8004bc8 <memcpy+0xa>
 8004bc6:	bd10      	pop	{r4, pc}
 8004bc8:	5ccc      	ldrb	r4, [r1, r3]
 8004bca:	54c4      	strb	r4, [r0, r3]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	e7f8      	b.n	8004bc2 <memcpy+0x4>

08004bd0 <_realloc_r>:
 8004bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bd2:	0006      	movs	r6, r0
 8004bd4:	000c      	movs	r4, r1
 8004bd6:	0015      	movs	r5, r2
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d105      	bne.n	8004be8 <_realloc_r+0x18>
 8004bdc:	0011      	movs	r1, r2
 8004bde:	f7ff fc55 	bl	800448c <_malloc_r>
 8004be2:	0004      	movs	r4, r0
 8004be4:	0020      	movs	r0, r4
 8004be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	d103      	bne.n	8004bf4 <_realloc_r+0x24>
 8004bec:	f7ff fbe2 	bl	80043b4 <_free_r>
 8004bf0:	002c      	movs	r4, r5
 8004bf2:	e7f7      	b.n	8004be4 <_realloc_r+0x14>
 8004bf4:	f000 f81c 	bl	8004c30 <_malloc_usable_size_r>
 8004bf8:	0007      	movs	r7, r0
 8004bfa:	4285      	cmp	r5, r0
 8004bfc:	d802      	bhi.n	8004c04 <_realloc_r+0x34>
 8004bfe:	0843      	lsrs	r3, r0, #1
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	d3ef      	bcc.n	8004be4 <_realloc_r+0x14>
 8004c04:	0029      	movs	r1, r5
 8004c06:	0030      	movs	r0, r6
 8004c08:	f7ff fc40 	bl	800448c <_malloc_r>
 8004c0c:	9001      	str	r0, [sp, #4]
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d101      	bne.n	8004c16 <_realloc_r+0x46>
 8004c12:	9c01      	ldr	r4, [sp, #4]
 8004c14:	e7e6      	b.n	8004be4 <_realloc_r+0x14>
 8004c16:	002a      	movs	r2, r5
 8004c18:	42bd      	cmp	r5, r7
 8004c1a:	d900      	bls.n	8004c1e <_realloc_r+0x4e>
 8004c1c:	003a      	movs	r2, r7
 8004c1e:	0021      	movs	r1, r4
 8004c20:	9801      	ldr	r0, [sp, #4]
 8004c22:	f7ff ffcc 	bl	8004bbe <memcpy>
 8004c26:	0021      	movs	r1, r4
 8004c28:	0030      	movs	r0, r6
 8004c2a:	f7ff fbc3 	bl	80043b4 <_free_r>
 8004c2e:	e7f0      	b.n	8004c12 <_realloc_r+0x42>

08004c30 <_malloc_usable_size_r>:
 8004c30:	1f0b      	subs	r3, r1, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1f18      	subs	r0, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	da01      	bge.n	8004c3e <_malloc_usable_size_r+0xe>
 8004c3a:	580b      	ldr	r3, [r1, r0]
 8004c3c:	18c0      	adds	r0, r0, r3
 8004c3e:	4770      	bx	lr

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr

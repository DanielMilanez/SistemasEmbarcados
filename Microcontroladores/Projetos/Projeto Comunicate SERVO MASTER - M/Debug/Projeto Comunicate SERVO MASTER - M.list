
Projeto Comunicate SERVO MASTER - M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003050  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003110  08003110  00004110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800319c  0800319c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031a4  080031a4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a4  080031a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031a8  080031a8  000041a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080031b8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080031b8  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009881  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fc  00000000  00000000  0000e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  000102b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ec  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138f2  00000000  00000000  0001105c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a87c  00000000  00000000  0002494e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000780c4  00000000  00000000  0002f1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a728e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a5c  00000000  00000000  000a72d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000a8d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030f8 	.word	0x080030f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030f8 	.word	0x080030f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 f9c6 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f838 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 f8ce 	bl	8000608 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800046c:	f000 f89c 	bl	80005a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8000470:	2064      	movs	r0, #100	@ 0x64
 8000472:	f000 fa2d 	bl	80008d0 <HAL_Delay>
  SendMenssge("START\n");
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <main+0x68>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 f8db 	bl	8000634 <SendMenssge>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(5000);
 800047e:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <main+0x6c>)
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fa25 	bl	80008d0 <HAL_Delay>
	  SendMenssge("ANIM1\n");
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <main+0x70>)
 8000488:	0018      	movs	r0, r3
 800048a:	f000 f8d3 	bl	8000634 <SendMenssge>

	  HAL_Delay(5000);
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <main+0x6c>)
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fa1d 	bl	80008d0 <HAL_Delay>
	  SendMenssge("ANIM2\n");
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <main+0x74>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f8cb 	bl	8000634 <SendMenssge>

	  HAL_Delay(5000);
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <main+0x6c>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fa15 	bl	80008d0 <HAL_Delay>
	  SendMenssge("START\n");
 80004a6:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <main+0x68>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 f8c3 	bl	8000634 <SendMenssge>

	  HAL_Delay(5000);
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <main+0x6c>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fa0d 	bl	80008d0 <HAL_Delay>
	  SendMenssge("STOP\n");
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <main+0x78>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 f8bb 	bl	8000634 <SendMenssge>
	  HAL_Delay(5000);
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	e7dd      	b.n	800047e <main+0x22>
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	08003110 	.word	0x08003110
 80004c8:	00001388 	.word	0x00001388
 80004cc:	08003118 	.word	0x08003118
 80004d0:	08003120 	.word	0x08003120
 80004d4:	08003128 	.word	0x08003128

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b09d      	sub	sp, #116	@ 0x74
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	2438      	movs	r4, #56	@ 0x38
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	2338      	movs	r3, #56	@ 0x38
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f002 fdd8 	bl	800309e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	2324      	movs	r3, #36	@ 0x24
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	2314      	movs	r3, #20
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 fdd0 	bl	800309e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	2324      	movs	r3, #36	@ 0x24
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f002 fdc9 	bl	800309e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050c:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <SystemClock_Config+0xc8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a24      	ldr	r2, [pc, #144]	@ (80005a4 <SystemClock_Config+0xcc>)
 8000512:	401a      	ands	r2, r3
 8000514:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <SystemClock_Config+0xc8>)
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	0109      	lsls	r1, r1, #4
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2210      	movs	r2, #16
 8000530:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fcc8 	bl	8000ed0 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000544:	f000 f898 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	2124      	movs	r1, #36	@ 0x24
 800054a:	187b      	adds	r3, r7, r1
 800054c:	220f      	movs	r2, #15
 800054e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2201      	movs	r2, #1
 8000554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 f873 	bl	8001658 <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000576:	f000 f87f 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800057a:	003b      	movs	r3, r7
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	003b      	movs	r3, r7
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fa69 	bl	8001a60 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000592:	f000 f871 	bl	8000678 <Error_Handler>
  }
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b01d      	add	sp, #116	@ 0x74
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40007000 	.word	0x40007000
 80005a4:	ffffe7ff 	.word	0xffffe7ff

080005a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <MX_USART1_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005b4:	2296      	movs	r2, #150	@ 0x96
 80005b6:	0192      	lsls	r2, r2, #6
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ea:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <MX_USART1_UART_Init+0x58>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 fbc5 	bl	8001d7c <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f83f 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40013800 	.word	0x40013800

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_GPIO_Init+0x28>)
 8000610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <MX_GPIO_Init+0x28>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <MX_GPIO_Init+0x28>)
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	40021000 	.word	0x40021000

08000634 <SendMenssge>:

/* USER CODE BEGIN 4 */
void SendMenssge(char * message){
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < 2; ++i){
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e010      	b.n	8000664 <SendMenssge+0x30>
	  HAL_UART_Transmit_IT(&huart1, (uint8_t *)message, strlen(message));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fd5f 	bl	8000108 <strlen>
 800064a:	0003      	movs	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <SendMenssge+0x40>)
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fbe6 	bl	8001e24 <HAL_UART_Transmit_IT>
	  HAL_Delay(100);
 8000658:	2064      	movs	r0, #100	@ 0x64
 800065a:	f000 f939 	bl	80008d0 <HAL_Delay>
  for(int i = 0; i < 2; ++i){
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	ddeb      	ble.n	8000642 <SendMenssge+0xe>
  }
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b004      	add	sp, #16
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	e7fd      	b.n	8000680 <Error_Handler+0x8>

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <HAL_MspInit+0x24>)
 800068a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <HAL_MspInit+0x24>)
 800068e:	2101      	movs	r1, #1
 8000690:	430a      	orrs	r2, r1
 8000692:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <HAL_MspInit+0x24>)
 8000696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <HAL_MspInit+0x24>)
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	0549      	lsls	r1, r1, #21
 800069e:	430a      	orrs	r2, r1
 80006a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	240c      	movs	r4, #12
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	0018      	movs	r0, r3
 80006ba:	2314      	movs	r3, #20
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f002 fced 	bl	800309e <memset>
  if(huart->Instance==USART1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <HAL_UART_MspInit+0x90>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d132      	bne.n	8000734 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <HAL_UART_MspInit+0x94>)
 80006d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <HAL_UART_MspInit+0x94>)
 80006d4:	2180      	movs	r1, #128	@ 0x80
 80006d6:	01c9      	lsls	r1, r1, #7
 80006d8:	430a      	orrs	r2, r1
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <HAL_UART_MspInit+0x94>)
 80006de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <HAL_UART_MspInit+0x94>)
 80006e2:	2101      	movs	r1, #1
 80006e4:	430a      	orrs	r2, r1
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <HAL_UART_MspInit+0x94>)
 80006ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ec:	2201      	movs	r2, #1
 80006ee:	4013      	ands	r3, r2
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	22c0      	movs	r2, #192	@ 0xc0
 80006f8:	00d2      	lsls	r2, r2, #3
 80006fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	0021      	movs	r1, r4
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2202      	movs	r2, #2
 8000702:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2203      	movs	r2, #3
 800070e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2204      	movs	r2, #4
 8000714:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	187a      	adds	r2, r7, r1
 8000718:	23a0      	movs	r3, #160	@ 0xa0
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fa60 	bl	8000be4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	201b      	movs	r0, #27
 800072a:	f000 f9a1 	bl	8000a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800072e:	201b      	movs	r0, #27
 8000730:	f000 f9b3 	bl	8000a9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b009      	add	sp, #36	@ 0x24
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f894 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800077c:	4b03      	ldr	r3, [pc, #12]	@ (800078c <USART1_IRQHandler+0x14>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fbc0 	bl	8001f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	20000028 	.word	0x20000028

08000790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a0:	f7ff fff6 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	@ (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	@ (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f002 fc71 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ce:	f7ff fe45 	bl	800045c <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   r0, =_estack
 80007d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	080031ac 	.word	0x080031ac
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	200000b4 	.word	0x200000b4

080007ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_COMP_IRQHandler>
	...

080007f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <HAL_Init+0x3c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_Init+0x3c>)
 8000802:	2140      	movs	r1, #64	@ 0x40
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f811 	bl	8000830 <HAL_InitTick>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d003      	beq.n	800081a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e001      	b.n	800081e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081a:	f7ff ff33 	bl	8000684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_InitTick+0x5c>)
 800083a:	681c      	ldr	r4, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <HAL_InitTick+0x60>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0019      	movs	r1, r3
 8000842:	23fa      	movs	r3, #250	@ 0xfa
 8000844:	0098      	lsls	r0, r3, #2
 8000846:	f7ff fc67 	bl	8000118 <__udivsi3>
 800084a:	0003      	movs	r3, r0
 800084c:	0019      	movs	r1, r3
 800084e:	0020      	movs	r0, r4
 8000850:	f7ff fc62 	bl	8000118 <__udivsi3>
 8000854:	0003      	movs	r3, r0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f92f 	bl	8000aba <HAL_SYSTICK_Config>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d80b      	bhi.n	8000882 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2301      	movs	r3, #1
 800086e:	425b      	negs	r3, r3
 8000870:	2200      	movs	r2, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f8fc 	bl	8000a70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_InitTick+0x64>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <HAL_IncTick+0x1c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	001a      	movs	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_IncTick+0x20>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	18d2      	adds	r2, r2, r3
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <HAL_IncTick+0x20>)
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	20000008 	.word	0x20000008
 80008b8:	200000b0 	.word	0x200000b0

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b02      	ldr	r3, [pc, #8]	@ (80008cc <HAL_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	200000b0 	.word	0x200000b0

080008d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d8:	f7ff fff0 	bl	80008bc <HAL_GetTick>
 80008dc:	0003      	movs	r3, r0
 80008de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	d005      	beq.n	80008f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <HAL_Delay+0x44>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001a      	movs	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	189b      	adds	r3, r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	f7ff ffe0 	bl	80008bc <HAL_GetTick>
 80008fc:	0002      	movs	r2, r0
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8f7      	bhi.n	80008f8 <HAL_Delay+0x28>
  {
  }
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	20000008 	.word	0x20000008

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b7f      	cmp	r3, #127	@ 0x7f
 800092a:	d809      	bhi.n	8000940 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	231f      	movs	r3, #31
 8000934:	401a      	ands	r2, r3
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <__NVIC_EnableIRQ+0x30>)
 8000938:	2101      	movs	r1, #1
 800093a:	4091      	lsls	r1, r2
 800093c:	000a      	movs	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
  }
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	e000e100 	.word	0xe000e100

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000960:	d828      	bhi.n	80009b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <__NVIC_SetPriority+0xd4>)
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	33c0      	adds	r3, #192	@ 0xc0
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	589b      	ldr	r3, [r3, r2]
 8000972:	1dfa      	adds	r2, r7, #7
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	0011      	movs	r1, r2
 8000978:	2203      	movs	r2, #3
 800097a:	400a      	ands	r2, r1
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	21ff      	movs	r1, #255	@ 0xff
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	401a      	ands	r2, r3
 8000988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	22ff      	movs	r2, #255	@ 0xff
 8000990:	401a      	ands	r2, r3
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	2303      	movs	r3, #3
 800099a:	4003      	ands	r3, r0
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <__NVIC_SetPriority+0xd4>)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	430a      	orrs	r2, r1
 80009ac:	33c0      	adds	r3, #192	@ 0xc0
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009b2:	e031      	b.n	8000a18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <__NVIC_SetPriority+0xd8>)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	0019      	movs	r1, r3
 80009bc:	230f      	movs	r3, #15
 80009be:	400b      	ands	r3, r1
 80009c0:	3b08      	subs	r3, #8
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3306      	adds	r3, #6
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	3304      	adds	r3, #4
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0011      	movs	r1, r2
 80009d4:	2203      	movs	r2, #3
 80009d6:	400a      	ands	r2, r1
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	21ff      	movs	r1, #255	@ 0xff
 80009dc:	4091      	lsls	r1, r2
 80009de:	000a      	movs	r2, r1
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	22ff      	movs	r2, #255	@ 0xff
 80009ec:	401a      	ands	r2, r3
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4003      	ands	r3, r0
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <__NVIC_SetPriority+0xd8>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	001c      	movs	r4, r3
 8000a04:	230f      	movs	r3, #15
 8000a06:	4023      	ands	r3, r4
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	3306      	adds	r3, #6
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	18c3      	adds	r3, r0, r3
 8000a14:	3304      	adds	r3, #4
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b003      	add	sp, #12
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	045b      	lsls	r3, r3, #17
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d301      	bcc.n	8000a40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e010      	b.n	8000a62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <SysTick_Config+0x44>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	3a01      	subs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a48:	2301      	movs	r3, #1
 8000a4a:	425b      	negs	r3, r3
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff ff7c 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <SysTick_Config+0x44>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <SysTick_Config+0x44>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	1c02      	adds	r2, r0, #0
 8000a80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff ff5d 	bl	800094c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b004      	add	sp, #16
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff33 	bl	8000918 <__NVIC_EnableIRQ>
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ffaf 	bl	8000a28 <SysTick_Config>
 8000aca:	0003      	movs	r3, r0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000adc:	230f      	movs	r3, #15
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2225      	movs	r2, #37	@ 0x25
 8000ae8:	5c9b      	ldrb	r3, [r3, r2]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d008      	beq.n	8000b02 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2204      	movs	r2, #4
 8000af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2224      	movs	r2, #36	@ 0x24
 8000afa:	2100      	movs	r1, #0
 8000afc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e024      	b.n	8000b4c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	210e      	movs	r1, #14
 8000b0e:	438a      	bics	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	438a      	bics	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	221c      	movs	r2, #28
 8000b28:	401a      	ands	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4091      	lsls	r1, r2
 8000b32:	000a      	movs	r2, r1
 8000b34:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2225      	movs	r2, #37	@ 0x25
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2224      	movs	r2, #36	@ 0x24
 8000b42:	2100      	movs	r1, #0
 8000b44:	5499      	strb	r1, [r3, r2]

    return status;
 8000b46:	230f      	movs	r3, #15
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b004      	add	sp, #16
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2225      	movs	r2, #37	@ 0x25
 8000b68:	5c9b      	ldrb	r3, [r3, r2]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d006      	beq.n	8000b7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2204      	movs	r2, #4
 8000b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e02a      	b.n	8000bd4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	210e      	movs	r1, #14
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	221c      	movs	r2, #28
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	2101      	movs	r1, #1
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2225      	movs	r2, #37	@ 0x25
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2224      	movs	r2, #36	@ 0x24
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	0010      	movs	r0, r2
 8000bd2:	4798      	blx	r3
    }
  }
  return status;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bfa:	e14f      	b.n	8000e9c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <HAL_GPIO_Init+0x30>
 8000c12:	e140      	b.n	8000e96 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d005      	beq.n	8000c2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d017      	beq.n	8000cca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d123      	bne.n	8000d1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	58d3      	ldr	r3, [r2, r3]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	4013      	ands	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2107      	movs	r1, #7
 8000d02:	400b      	ands	r3, r1
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	23c0      	movs	r3, #192	@ 0xc0
 8000d58:	029b      	lsls	r3, r3, #10
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d100      	bne.n	8000d60 <HAL_GPIO_Init+0x17c>
 8000d5e:	e09a      	b.n	8000e96 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b54      	ldr	r3, [pc, #336]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d64:	4b53      	ldr	r3, [pc, #332]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6c:	4a52      	ldr	r2, [pc, #328]	@ (8000eb8 <HAL_GPIO_Init+0x2d4>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	589b      	ldr	r3, [r3, r2]
 8000d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	23a0      	movs	r3, #160	@ 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0x1ea>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a47      	ldr	r2, [pc, #284]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0x1e6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a46      	ldr	r2, [pc, #280]	@ (8000ec0 <HAL_GPIO_Init+0x2dc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_GPIO_Init+0x1e2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a45      	ldr	r2, [pc, #276]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x1de>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a44      	ldr	r2, [pc, #272]	@ (8000ec8 <HAL_GPIO_Init+0x2e4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_GPIO_Init+0x1da>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e008      	b.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4935      	ldr	r1, [pc, #212]	@ (8000eb8 <HAL_GPIO_Init+0x2d4>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	2380      	movs	r3, #128	@ 0x80
 8000e04:	035b      	lsls	r3, r3, #13
 8000e06:	4013      	ands	r3, r2
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	039b      	lsls	r3, r3, #14
 8000e30:	4013      	ands	r3, r2
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e42:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	029b      	lsls	r3, r3, #10
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	4013      	ands	r3, r2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_GPIO_Init+0x2e8>)
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	d000      	beq.n	8000eaa <HAL_GPIO_Init+0x2c6>
 8000ea8:	e6a8      	b.n	8000bfc <HAL_GPIO_Init+0x18>
  }
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000800 	.word	0x50000800
 8000ec4:	50000c00 	.word	0x50000c00
 8000ec8:	50001c00 	.word	0x50001c00
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f000 fbaf 	bl	8001642 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee4:	4bcf      	ldr	r3, [pc, #828]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	220c      	movs	r2, #12
 8000eea:	4013      	ands	r3, r2
 8000eec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eee:	4bcd      	ldr	r3, [pc, #820]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	2380      	movs	r3, #128	@ 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d100      	bne.n	8000f06 <HAL_RCC_OscConfig+0x36>
 8000f04:	e07e      	b.n	8001004 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d007      	beq.n	8000f1c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	2b0c      	cmp	r3, #12
 8000f10:	d112      	bne.n	8000f38 <HAL_RCC_OscConfig+0x68>
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	025b      	lsls	r3, r3, #9
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d10d      	bne.n	8000f38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	4bc1      	ldr	r3, [pc, #772]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x5a>
 8000f28:	e06b      	b.n	8001002 <HAL_RCC_OscConfig+0x132>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d167      	bne.n	8001002 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	f000 fb85 	bl	8001642 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d107      	bne.n	8000f54 <HAL_RCC_OscConfig+0x84>
 8000f44:	4bb7      	ldr	r3, [pc, #732]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4bb6      	ldr	r3, [pc, #728]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e027      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	23a0      	movs	r3, #160	@ 0xa0
 8000f5a:	02db      	lsls	r3, r3, #11
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d10e      	bne.n	8000f7e <HAL_RCC_OscConfig+0xae>
 8000f60:	4bb0      	ldr	r3, [pc, #704]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4baf      	ldr	r3, [pc, #700]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f66:	2180      	movs	r1, #128	@ 0x80
 8000f68:	02c9      	lsls	r1, r1, #11
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	4bad      	ldr	r3, [pc, #692]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4bac      	ldr	r3, [pc, #688]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	0249      	lsls	r1, r1, #9
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e012      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd4>
 8000f7e:	4ba9      	ldr	r3, [pc, #676]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4ba8      	ldr	r3, [pc, #672]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f84:	49a8      	ldr	r1, [pc, #672]	@ (8001228 <HAL_RCC_OscConfig+0x358>)
 8000f86:	400a      	ands	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4ba6      	ldr	r3, [pc, #664]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4ba2      	ldr	r3, [pc, #648]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4ba1      	ldr	r3, [pc, #644]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000f9e:	49a3      	ldr	r1, [pc, #652]	@ (800122c <HAL_RCC_OscConfig+0x35c>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d015      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc86 	bl	80008bc <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fb4:	e009      	b.n	8000fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fc81 	bl	80008bc <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	d902      	bls.n	8000fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f000 fb3c 	bl	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fca:	4b96      	ldr	r3, [pc, #600]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	029b      	lsls	r3, r3, #10
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d0ef      	beq.n	8000fb6 <HAL_RCC_OscConfig+0xe6>
 8000fd6:	e015      	b.n	8001004 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc70 	bl	80008bc <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fc6b 	bl	80008bc <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	@ 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e326      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ff4:	4b8b      	ldr	r3, [pc, #556]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	@ 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x112>
 8001000:	e000      	b.n	8001004 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001002:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2202      	movs	r2, #2
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_RCC_OscConfig+0x140>
 800100e:	e08b      	b.n	8001128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	2b0c      	cmp	r3, #12
 8001020:	d13e      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1d0>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d13b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001028:	4b7e      	ldr	r3, [pc, #504]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2204      	movs	r2, #4
 800102e:	4013      	ands	r3, r2
 8001030:	d004      	beq.n	800103c <HAL_RCC_OscConfig+0x16c>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e302      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b79      	ldr	r3, [pc, #484]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a7b      	ldr	r2, [pc, #492]	@ (8001230 <HAL_RCC_OscConfig+0x360>)
 8001042:	4013      	ands	r3, r2
 8001044:	0019      	movs	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	021a      	lsls	r2, r3, #8
 800104c:	4b75      	ldr	r3, [pc, #468]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001052:	4b74      	ldr	r3, [pc, #464]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2209      	movs	r2, #9
 8001058:	4393      	bics	r3, r2
 800105a:	0019      	movs	r1, r3
 800105c:	4b71      	ldr	r3, [pc, #452]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001064:	f000 fc40 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 8001068:	0001      	movs	r1, r0
 800106a:	4b6e      	ldr	r3, [pc, #440]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	220f      	movs	r2, #15
 8001072:	4013      	ands	r3, r2
 8001074:	4a6f      	ldr	r2, [pc, #444]	@ (8001234 <HAL_RCC_OscConfig+0x364>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	000a      	movs	r2, r1
 800107a:	40da      	lsrs	r2, r3
 800107c:	4b6e      	ldr	r3, [pc, #440]	@ (8001238 <HAL_RCC_OscConfig+0x368>)
 800107e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001080:	4b6e      	ldr	r3, [pc, #440]	@ (800123c <HAL_RCC_OscConfig+0x36c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2513      	movs	r5, #19
 8001086:	197c      	adds	r4, r7, r5
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff fbd1 	bl	8000830 <HAL_InitTick>
 800108e:	0003      	movs	r3, r0
 8001090:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001092:	197b      	adds	r3, r7, r5
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d046      	beq.n	8001128 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800109a:	197b      	adds	r3, r7, r5
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	e2d0      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d027      	beq.n	80010f6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2209      	movs	r2, #9
 80010ac:	4393      	bics	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	4b5c      	ldr	r3, [pc, #368]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc00 	bl	80008bc <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fbfb 	bl	80008bc <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e2b6      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010d4:	4b53      	ldr	r3, [pc, #332]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2204      	movs	r2, #4
 80010da:	4013      	ands	r3, r2
 80010dc:	d0f1      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a53      	ldr	r2, [pc, #332]	@ (8001230 <HAL_RCC_OscConfig+0x360>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	021a      	lsls	r2, r3, #8
 80010ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010f0:	430a      	orrs	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	e018      	b.n	8001128 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fbdb 	bl	80008bc <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fbd6 	bl	80008bc <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e291      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800111e:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2204      	movs	r2, #4
 8001124:	4013      	ands	r3, r2
 8001126:	d1f1      	bne.n	800110c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2210      	movs	r2, #16
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_RCC_OscConfig+0x264>
 8001132:	e0a1      	b.n	8001278 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d140      	bne.n	80011bc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800113a:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x282>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e277      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <HAL_RCC_OscConfig+0x370>)
 8001158:	4013      	ands	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001162:	430a      	orrs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	0a19      	lsrs	r1, r3, #8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	061a      	lsls	r2, r3, #24
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	0b5b      	lsrs	r3, r3, #13
 8001180:	3301      	adds	r3, #1
 8001182:	2280      	movs	r2, #128	@ 0x80
 8001184:	0212      	lsls	r2, r2, #8
 8001186:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001188:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	210f      	movs	r1, #15
 8001190:	400b      	ands	r3, r1
 8001192:	4928      	ldr	r1, [pc, #160]	@ (8001234 <HAL_RCC_OscConfig+0x364>)
 8001194:	5ccb      	ldrb	r3, [r1, r3]
 8001196:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001198:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <HAL_RCC_OscConfig+0x368>)
 800119a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_RCC_OscConfig+0x36c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2513      	movs	r5, #19
 80011a2:	197c      	adds	r4, r7, r5
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fb43 	bl	8000830 <HAL_InitTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011ae:	197b      	adds	r3, r7, r5
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d060      	beq.n	8001278 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	e242      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d03f      	beq.n	8001244 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	0049      	lsls	r1, r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fb73 	bl	80008bc <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011dc:	f7ff fb6e 	bl	80008bc <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e229      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <HAL_RCC_OscConfig+0x370>)
 8001200:	4013      	ands	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	0a19      	lsrs	r1, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	061a      	lsls	r2, r3, #24
 800121c:	4b01      	ldr	r3, [pc, #4]	@ (8001224 <HAL_RCC_OscConfig+0x354>)
 800121e:	430a      	orrs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	e029      	b.n	8001278 <HAL_RCC_OscConfig+0x3a8>
 8001224:	40021000 	.word	0x40021000
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	fffbffff 	.word	0xfffbffff
 8001230:	ffffe0ff 	.word	0xffffe0ff
 8001234:	08003130 	.word	0x08003130
 8001238:	20000000 	.word	0x20000000
 800123c:	20000004 	.word	0x20000004
 8001240:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001244:	4bbd      	ldr	r3, [pc, #756]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4bbc      	ldr	r3, [pc, #752]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800124a:	49bd      	ldr	r1, [pc, #756]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800124c:	400a      	ands	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb34 	bl	80008bc <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800125a:	f7ff fb2f 	bl	80008bc <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1ea      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800126c:	4bb3      	ldr	r3, [pc, #716]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4013      	ands	r3, r2
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2208      	movs	r2, #8
 800127e:	4013      	ands	r3, r2
 8001280:	d036      	beq.n	80012f0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d019      	beq.n	80012be <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4bac      	ldr	r3, [pc, #688]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800128c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800128e:	4bab      	ldr	r3, [pc, #684]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001290:	2101      	movs	r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fb11 	bl	80008bc <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fb0c 	bl	80008bc <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1c7      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012b2:	4ba2      	ldr	r3, [pc, #648]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80012b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d0f1      	beq.n	80012a0 <HAL_RCC_OscConfig+0x3d0>
 80012bc:	e018      	b.n	80012f0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012be:	4b9f      	ldr	r3, [pc, #636]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80012c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012c2:	4b9e      	ldr	r3, [pc, #632]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	438a      	bics	r2, r1
 80012c8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff faf7 	bl	80008bc <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff faf2 	bl	80008bc <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1ad      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012e6:	4b95      	ldr	r3, [pc, #596]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80012e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d1f1      	bne.n	80012d4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2204      	movs	r2, #4
 80012f6:	4013      	ands	r3, r2
 80012f8:	d100      	bne.n	80012fc <HAL_RCC_OscConfig+0x42c>
 80012fa:	e0ae      	b.n	800145a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fc:	2027      	movs	r0, #39	@ 0x27
 80012fe:	183b      	adds	r3, r7, r0
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001304:	4b8d      	ldr	r3, [pc, #564]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	055b      	lsls	r3, r3, #21
 800130c:	4013      	ands	r3, r2
 800130e:	d109      	bne.n	8001324 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b8a      	ldr	r3, [pc, #552]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001314:	4b89      	ldr	r3, [pc, #548]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001316:	2180      	movs	r1, #128	@ 0x80
 8001318:	0549      	lsls	r1, r1, #21
 800131a:	430a      	orrs	r2, r1
 800131c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800131e:	183b      	adds	r3, r7, r0
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	4b87      	ldr	r3, [pc, #540]	@ (8001544 <HAL_RCC_OscConfig+0x674>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4013      	ands	r3, r2
 800132e:	d11a      	bne.n	8001366 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001330:	4b84      	ldr	r3, [pc, #528]	@ (8001544 <HAL_RCC_OscConfig+0x674>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b83      	ldr	r3, [pc, #524]	@ (8001544 <HAL_RCC_OscConfig+0x674>)
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	0049      	lsls	r1, r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133e:	f7ff fabd 	bl	80008bc <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001348:	f7ff fab8 	bl	80008bc <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e173      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b7a      	ldr	r3, [pc, #488]	@ (8001544 <HAL_RCC_OscConfig+0x674>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4013      	ands	r3, r2
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	429a      	cmp	r2, r3
 8001370:	d107      	bne.n	8001382 <HAL_RCC_OscConfig+0x4b2>
 8001372:	4b72      	ldr	r3, [pc, #456]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001374:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001376:	4b71      	ldr	r3, [pc, #452]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	0049      	lsls	r1, r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001380:	e031      	b.n	80013e6 <HAL_RCC_OscConfig+0x516>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x4d4>
 800138a:	4b6c      	ldr	r3, [pc, #432]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800138c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800138e:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001390:	496b      	ldr	r1, [pc, #428]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001392:	400a      	ands	r2, r1
 8001394:	651a      	str	r2, [r3, #80]	@ 0x50
 8001396:	4b69      	ldr	r3, [pc, #420]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800139a:	4b68      	ldr	r3, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800139c:	496a      	ldr	r1, [pc, #424]	@ (8001548 <HAL_RCC_OscConfig+0x678>)
 800139e:	400a      	ands	r2, r1
 80013a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80013a2:	e020      	b.n	80013e6 <HAL_RCC_OscConfig+0x516>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	23a0      	movs	r3, #160	@ 0xa0
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10e      	bne.n	80013ce <HAL_RCC_OscConfig+0x4fe>
 80013b0:	4b62      	ldr	r3, [pc, #392]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013b4:	4b61      	ldr	r3, [pc, #388]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	00c9      	lsls	r1, r1, #3
 80013ba:	430a      	orrs	r2, r1
 80013bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80013be:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013c2:	4b5e      	ldr	r3, [pc, #376]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013c4:	2180      	movs	r1, #128	@ 0x80
 80013c6:	0049      	lsls	r1, r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x516>
 80013ce:	4b5b      	ldr	r3, [pc, #364]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013d2:	4b5a      	ldr	r3, [pc, #360]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013d4:	495a      	ldr	r1, [pc, #360]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80013da:	4b58      	ldr	r3, [pc, #352]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013de:	4b57      	ldr	r3, [pc, #348]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80013e0:	4959      	ldr	r1, [pc, #356]	@ (8001548 <HAL_RCC_OscConfig+0x678>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fa65 	bl	80008bc <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013f6:	e009      	b.n	800140c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fa60 	bl	80008bc <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	4a52      	ldr	r2, [pc, #328]	@ (800154c <HAL_RCC_OscConfig+0x67c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e11a      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800140c:	4b4b      	ldr	r3, [pc, #300]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800140e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d0ef      	beq.n	80013f8 <HAL_RCC_OscConfig+0x528>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fa4f 	bl	80008bc <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001422:	e009      	b.n	8001438 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fa4a 	bl	80008bc <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	4a47      	ldr	r2, [pc, #284]	@ (800154c <HAL_RCC_OscConfig+0x67c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e104      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001438:	4b40      	ldr	r3, [pc, #256]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800143a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4013      	ands	r3, r2
 8001442:	d1ef      	bne.n	8001424 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001444:	2327      	movs	r3, #39	@ 0x27
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144e:	4b3b      	ldr	r3, [pc, #236]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001452:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001454:	493e      	ldr	r1, [pc, #248]	@ (8001550 <HAL_RCC_OscConfig+0x680>)
 8001456:	400a      	ands	r2, r1
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	4013      	ands	r3, r2
 8001462:	d049      	beq.n	80014f8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d026      	beq.n	80014ba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	4b32      	ldr	r3, [pc, #200]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001472:	2101      	movs	r1, #1
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	4b30      	ldr	r3, [pc, #192]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800147a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 800147e:	2101      	movs	r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	635a      	str	r2, [r3, #52]	@ 0x34
 8001484:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <HAL_RCC_OscConfig+0x684>)
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <HAL_RCC_OscConfig+0x684>)
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	0189      	lsls	r1, r1, #6
 800148e:	430a      	orrs	r2, r1
 8001490:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fa13 	bl	80008bc <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800149c:	f7ff fa0e 	bl	80008bc <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0c9      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f1      	beq.n	800149c <HAL_RCC_OscConfig+0x5cc>
 80014b8:	e01e      	b.n	80014f8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	438a      	bics	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <HAL_RCC_OscConfig+0x684>)
 80014c8:	6a1a      	ldr	r2, [r3, #32]
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <HAL_RCC_OscConfig+0x684>)
 80014cc:	4922      	ldr	r1, [pc, #136]	@ (8001558 <HAL_RCC_OscConfig+0x688>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff f9f3 	bl	80008bc <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014dc:	f7ff f9ee 	bl	80008bc <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0a9      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f1      	bne.n	80014dc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d100      	bne.n	8001502 <HAL_RCC_OscConfig+0x632>
 8001500:	e09e      	b.n	8001640 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d100      	bne.n	800150a <HAL_RCC_OscConfig+0x63a>
 8001508:	e077      	b.n	80015fa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	2b02      	cmp	r3, #2
 8001510:	d158      	bne.n	80015c4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_RCC_OscConfig+0x66c>)
 8001518:	4910      	ldr	r1, [pc, #64]	@ (800155c <HAL_RCC_OscConfig+0x68c>)
 800151a:	400a      	ands	r2, r1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff f9cd 	bl	80008bc <HAL_GetTick>
 8001522:	0003      	movs	r3, r0
 8001524:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001526:	e01b      	b.n	8001560 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff f9c8 	bl	80008bc <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d914      	bls.n	8001560 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e083      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	40021000 	.word	0x40021000
 8001540:	fffffeff 	.word	0xfffffeff
 8001544:	40007000 	.word	0x40007000
 8001548:	fffffbff 	.word	0xfffffbff
 800154c:	00001388 	.word	0x00001388
 8001550:	efffffff 	.word	0xefffffff
 8001554:	40010000 	.word	0x40010000
 8001558:	ffffdfff 	.word	0xffffdfff
 800155c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001560:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	049b      	lsls	r3, r3, #18
 8001568:	4013      	ands	r3, r2
 800156a:	d1dd      	bne.n	8001528 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156c:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a37      	ldr	r2, [pc, #220]	@ (8001650 <HAL_RCC_OscConfig+0x780>)
 8001572:	4013      	ands	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001584:	431a      	orrs	r2, r3
 8001586:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 8001588:	430a      	orrs	r2, r1
 800158a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 8001592:	2180      	movs	r1, #128	@ 0x80
 8001594:	0449      	lsls	r1, r1, #17
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff f98f 	bl	80008bc <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff f98a 	bl	80008bc <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e045      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015b6:	4b25      	ldr	r3, [pc, #148]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	049b      	lsls	r3, r3, #18
 80015be:	4013      	ands	r3, r2
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x6d4>
 80015c2:	e03d      	b.n	8001640 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 80015ca:	4922      	ldr	r1, [pc, #136]	@ (8001654 <HAL_RCC_OscConfig+0x784>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f974 	bl	80008bc <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff f96f 	bl	80008bc <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e02a      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	049b      	lsls	r3, r3, #18
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x70a>
 80015f8:	e022      	b.n	8001640 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e01d      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_RCC_OscConfig+0x77c>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	401a      	ands	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001618:	429a      	cmp	r2, r3
 800161a:	d10f      	bne.n	800163c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	23f0      	movs	r3, #240	@ 0xf0
 8001620:	039b      	lsls	r3, r3, #14
 8001622:	401a      	ands	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d107      	bne.n	800163c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	23c0      	movs	r3, #192	@ 0xc0
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	401a      	ands	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b00a      	add	sp, #40	@ 0x28
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	40021000 	.word	0x40021000
 8001650:	ff02ffff 	.word	0xff02ffff
 8001654:	feffffff 	.word	0xfeffffff

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e128      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b96      	ldr	r3, [pc, #600]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d91e      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b93      	ldr	r3, [pc, #588]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4393      	bics	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	4b90      	ldr	r3, [pc, #576]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800168c:	f7ff f916 	bl	80008bc <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001694:	e009      	b.n	80016aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001696:	f7ff f911 	bl	80008bc <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4a8a      	ldr	r2, [pc, #552]	@ (80018cc <HAL_RCC_ClockConfig+0x274>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e109      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b87      	ldr	r3, [pc, #540]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2202      	movs	r2, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c2:	4b83      	ldr	r3, [pc, #524]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	22f0      	movs	r2, #240	@ 0xf0
 80016c8:	4393      	bics	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4b7f      	ldr	r3, [pc, #508]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	d100      	bne.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
 80016e0:	e089      	b.n	80017f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ea:	4b79      	ldr	r3, [pc, #484]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	d120      	bne.n	8001738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0e1      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001702:	4b73      	ldr	r3, [pc, #460]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	049b      	lsls	r3, r3, #18
 800170a:	4013      	ands	r3, r2
 800170c:	d114      	bne.n	8001738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0d5      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d106      	bne.n	8001728 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171a:	4b6d      	ldr	r3, [pc, #436]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2204      	movs	r2, #4
 8001720:	4013      	ands	r3, r2
 8001722:	d109      	bne.n	8001738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0ca      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001728:	4b69      	ldr	r3, [pc, #420]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0c2      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001738:	4b65      	ldr	r3, [pc, #404]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2203      	movs	r2, #3
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4b62      	ldr	r3, [pc, #392]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff f8b6 	bl	80008bc <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d111      	bne.n	8001780 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	e009      	b.n	8001772 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff f8ad 	bl	80008bc <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a58      	ldr	r2, [pc, #352]	@ (80018cc <HAL_RCC_ClockConfig+0x274>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0a5      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001772:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	220c      	movs	r2, #12
 8001778:	4013      	ands	r3, r2
 800177a:	2b08      	cmp	r3, #8
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_ClockConfig+0x106>
 800177e:	e03a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d111      	bne.n	80017ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001788:	e009      	b.n	800179e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7ff f897 	bl	80008bc <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a4d      	ldr	r2, [pc, #308]	@ (80018cc <HAL_RCC_ClockConfig+0x274>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e08f      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179e:	4b4c      	ldr	r3, [pc, #304]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	220c      	movs	r2, #12
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d1ef      	bne.n	800178a <HAL_RCC_ClockConfig+0x132>
 80017aa:	e024      	b.n	80017f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d11b      	bne.n	80017ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f881 	bl	80008bc <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <HAL_RCC_ClockConfig+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e079      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ca:	4b41      	ldr	r3, [pc, #260]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	220c      	movs	r2, #12
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d1ef      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x15e>
 80017d6:	e00e      	b.n	80017f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff f870 	bl	80008bc <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <HAL_RCC_ClockConfig+0x274>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e068      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017ec:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	220c      	movs	r2, #12
 80017f2:	4013      	ands	r3, r2
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f6:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d21e      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001816:	f7ff f851 	bl	80008bc <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	e009      	b.n	8001834 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f84c 	bl	80008bc <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a28      	ldr	r2, [pc, #160]	@ (80018cc <HAL_RCC_ClockConfig+0x274>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e044      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_RCC_ClockConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	4013      	ands	r3, r2
 800184a:	d009      	beq.n	8001860 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <HAL_RCC_ClockConfig+0x27c>)
 8001852:	4013      	ands	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2208      	movs	r2, #8
 8001866:	4013      	ands	r3, r2
 8001868:	d00a      	beq.n	8001880 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	4a1a      	ldr	r2, [pc, #104]	@ (80018d8 <HAL_RCC_ClockConfig+0x280>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00da      	lsls	r2, r3, #3
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001880:	f000 f832 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 8001884:	0001      	movs	r1, r0
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_RCC_ClockConfig+0x278>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	220f      	movs	r2, #15
 800188e:	4013      	ands	r3, r2
 8001890:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <HAL_RCC_ClockConfig+0x284>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	000a      	movs	r2, r1
 8001896:	40da      	lsrs	r2, r3
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_ClockConfig+0x288>)
 800189a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_ClockConfig+0x28c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	250b      	movs	r5, #11
 80018a2:	197c      	adds	r4, r7, r5
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7fe ffc3 	bl	8000830 <HAL_InitTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018ae:	197b      	adds	r3, r7, r5
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80018b6:	197b      	adds	r3, r7, r5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	e000      	b.n	80018be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b004      	add	sp, #16
 80018c4:	bdb0      	pop	{r4, r5, r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	40022000 	.word	0x40022000
 80018cc:	00001388 	.word	0x00001388
 80018d0:	40021000 	.word	0x40021000
 80018d4:	fffff8ff 	.word	0xfffff8ff
 80018d8:	ffffc7ff 	.word	0xffffc7ff
 80018dc:	08003130 	.word	0x08003130
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018ee:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	220c      	movs	r2, #12
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d013      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3e>
 80018fe:	d85c      	bhi.n	80019ba <HAL_RCC_GetSysClockFreq+0xd2>
 8001900:	2b04      	cmp	r3, #4
 8001902:	d002      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x22>
 8001904:	2b08      	cmp	r3, #8
 8001906:	d00b      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x38>
 8001908:	e057      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800190a:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2210      	movs	r2, #16
 8001910:	4013      	ands	r3, r2
 8001912:	d002      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001914:	4b33      	ldr	r3, [pc, #204]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001916:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001918:	e05d      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800191a:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800191c:	613b      	str	r3, [r7, #16]
      break;
 800191e:	e05a      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x104>)
 8001922:	613b      	str	r3, [r7, #16]
      break;
 8001924:	e057      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	220f      	movs	r2, #15
 800192c:	4013      	ands	r3, r2
 800192e:	4a30      	ldr	r2, [pc, #192]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0d9b      	lsrs	r3, r3, #22
 8001938:	2203      	movs	r2, #3
 800193a:	4013      	ands	r3, r2
 800193c:	3301      	adds	r3, #1
 800193e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001940:	4b27      	ldr	r3, [pc, #156]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	4013      	ands	r3, r2
 800194a:	d00f      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	000a      	movs	r2, r1
 8001950:	0152      	lsls	r2, r2, #5
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	0193      	lsls	r3, r2, #6
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	185b      	adds	r3, r3, r1
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fbd9 	bl	8000118 <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e023      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2210      	movs	r2, #16
 8001972:	4013      	ands	r3, r2
 8001974:	d00f      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	000a      	movs	r2, r1
 800197a:	0152      	lsls	r2, r2, #5
 800197c:	1a52      	subs	r2, r2, r1
 800197e:	0193      	lsls	r3, r2, #6
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	185b      	adds	r3, r3, r1
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f7fe fbc4 	bl	8000118 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	000a      	movs	r2, r1
 800199a:	0152      	lsls	r2, r2, #5
 800199c:	1a52      	subs	r2, r2, r1
 800199e:	0193      	lsls	r3, r2, #6
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	185b      	adds	r3, r3, r1
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7fe fbb4 	bl	8000118 <__udivsi3>
 80019b0:	0003      	movs	r3, r0
 80019b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	e00d      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	0b5b      	lsrs	r3, r3, #13
 80019c0:	2207      	movs	r2, #7
 80019c2:	4013      	ands	r3, r2
 80019c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	0212      	lsls	r2, r2, #8
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      break;
 80019d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019d6:	693b      	ldr	r3, [r7, #16]
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	003d0900 	.word	0x003d0900
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	08003148 	.word	0x08003148

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	20000000 	.word	0x20000000

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff2 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a10:	0001      	movs	r1, r0
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	40d9      	lsrs	r1, r3
 8001a22:	000b      	movs	r3, r1
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08003140 	.word	0x08003140

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffdc 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a3c:	0001      	movs	r1, r0
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	0adb      	lsrs	r3, r3, #11
 8001a44:	2207      	movs	r2, #7
 8001a46:	4013      	ands	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	000b      	movs	r3, r1
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	08003140 	.word	0x08003140

08001a60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a68:	2317      	movs	r3, #23
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2220      	movs	r2, #32
 8001a76:	4013      	ands	r3, r2
 8001a78:	d106      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4013      	ands	r3, r2
 8001a84:	d100      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a86:	e104      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a88:	4bb1      	ldr	r3, [pc, #708]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	d10a      	bne.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4bae      	ldr	r3, [pc, #696]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a98:	4bad      	ldr	r3, [pc, #692]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a9a:	2180      	movs	r1, #128	@ 0x80
 8001a9c:	0549      	lsls	r1, r1, #21
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001aa2:	2317      	movs	r3, #23
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4baa      	ldr	r3, [pc, #680]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4ba7      	ldr	r3, [pc, #668]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4ba6      	ldr	r3, [pc, #664]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001abc:	2180      	movs	r1, #128	@ 0x80
 8001abe:	0049      	lsls	r1, r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7fe fefa 	bl	80008bc <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7fe fef5 	bl	80008bc <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	@ 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e133      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b9c      	ldr	r3, [pc, #624]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001aec:	4b98      	ldr	r3, [pc, #608]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	23c0      	movs	r3, #192	@ 0xc0
 8001af2:	039b      	lsls	r3, r3, #14
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	23c0      	movs	r3, #192	@ 0xc0
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	4013      	ands	r3, r2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d107      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	23c0      	movs	r3, #192	@ 0xc0
 8001b0e:	039b      	lsls	r3, r3, #14
 8001b10:	4013      	ands	r3, r2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d013      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	23c0      	movs	r3, #192	@ 0xc0
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	401a      	ands	r2, r3
 8001b22:	23c0      	movs	r3, #192	@ 0xc0
 8001b24:	029b      	lsls	r3, r3, #10
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d10a      	bne.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b2a:	4b89      	ldr	r3, [pc, #548]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	401a      	ands	r2, r3
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e103      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b40:	4b83      	ldr	r3, [pc, #524]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b44:	23c0      	movs	r3, #192	@ 0xc0
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d049      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	23c0      	movs	r3, #192	@ 0xc0
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d004      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2220      	movs	r2, #32
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	23c0      	movs	r3, #192	@ 0xc0
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d034      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d02e      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b88:	4b71      	ldr	r3, [pc, #452]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8c:	4a72      	ldr	r2, [pc, #456]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b92:	4b6f      	ldr	r3, [pc, #444]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b96:	4b6e      	ldr	r3, [pc, #440]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0309      	lsls	r1, r1, #12
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba6:	496d      	ldr	r1, [pc, #436]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001bac:	4b68      	ldr	r3, [pc, #416]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d014      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fe7e 	bl	80008bc <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc4:	e009      	b.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7fe fe79 	bl	80008bc <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4a63      	ldr	r2, [pc, #396]	@ (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0b6      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0ef      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d01f      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	23c0      	movs	r3, #192	@ 0xc0
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	23c0      	movs	r3, #192	@ 0xc0
 8001bfe:	029b      	lsls	r3, r3, #10
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001c04:	4b52      	ldr	r3, [pc, #328]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	23c0      	movs	r3, #192	@ 0xc0
 8001c14:	039b      	lsls	r3, r3, #14
 8001c16:	401a      	ands	r2, r3
 8001c18:	4b4d      	ldr	r3, [pc, #308]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	23c0      	movs	r3, #192	@ 0xc0
 8001c28:	029b      	lsls	r3, r3, #10
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	4b48      	ldr	r3, [pc, #288]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2220      	movs	r2, #32
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d01f      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	23c0      	movs	r3, #192	@ 0xc0
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	401a      	ands	r2, r3
 8001c46:	23c0      	movs	r3, #192	@ 0xc0
 8001c48:	029b      	lsls	r3, r3, #10
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001c4e:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a44      	ldr	r2, [pc, #272]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	23c0      	movs	r3, #192	@ 0xc0
 8001c5e:	039b      	lsls	r3, r3, #14
 8001c60:	401a      	ands	r2, r3
 8001c62:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	4b39      	ldr	r3, [pc, #228]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c6a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	23c0      	movs	r3, #192	@ 0xc0
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	401a      	ands	r2, r3
 8001c76:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c7c:	2317      	movs	r3, #23
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b32      	ldr	r3, [pc, #200]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8c:	4936      	ldr	r1, [pc, #216]	@ (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cba:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cdc:	4a23      	ldr	r2, [pc, #140]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cf6:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	4013      	ands	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d14:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d18:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d009      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b006      	add	sp, #24
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	fffcffff 	.word	0xfffcffff
 8001d5c:	fff7ffff 	.word	0xfff7ffff
 8001d60:	00001388 	.word	0x00001388
 8001d64:	ffcfffff 	.word	0xffcfffff
 8001d68:	efffffff 	.word	0xefffffff
 8001d6c:	fffff3ff 	.word	0xfffff3ff
 8001d70:	ffffcfff 	.word	0xffffcfff
 8001d74:	fbffffff 	.word	0xfbffffff
 8001d78:	fff3ffff 	.word	0xfff3ffff

08001d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e044      	b.n	8001e18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2278      	movs	r2, #120	@ 0x78
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe fc83 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2224      	movs	r2, #36	@ 0x24
 8001daa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2101      	movs	r1, #1
 8001db8:	438a      	bics	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fe3c 	bl	8002a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fbb4 	bl	800253c <UART_SetConfig>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e01c      	b.n	8001e18 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	490d      	ldr	r1, [pc, #52]	@ (8001e20 <HAL_UART_Init+0xa4>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	212a      	movs	r1, #42	@ 0x2a
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 fecb 	bl	8002bac <UART_CheckIdleState>
 8001e16:	0003      	movs	r3, r0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	ffffb7ff 	.word	0xffffb7ff

08001e24 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	1dbb      	adds	r3, r7, #6
 8001e30:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d15b      	bne.n	8001ef2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_UART_Transmit_IT+0x24>
 8001e40:	1dbb      	adds	r3, r7, #6
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e053      	b.n	8001ef4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	015b      	lsls	r3, r3, #5
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d109      	bne.n	8001e6c <HAL_UART_Transmit_IT+0x48>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e043      	b.n	8001ef4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1dba      	adds	r2, r7, #6
 8001e76:	2150      	movs	r1, #80	@ 0x50
 8001e78:	8812      	ldrh	r2, [r2, #0]
 8001e7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1dba      	adds	r2, r7, #6
 8001e80:	2152      	movs	r1, #82	@ 0x52
 8001e82:	8812      	ldrh	r2, [r2, #0]
 8001e84:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2284      	movs	r2, #132	@ 0x84
 8001e90:	2100      	movs	r1, #0
 8001e92:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2221      	movs	r2, #33	@ 0x21
 8001e98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	015b      	lsls	r3, r3, #5
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_UART_Transmit_IT+0x92>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <HAL_UART_Transmit_IT+0xd8>)
 8001eb2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001eb4:	e002      	b.n	8001ebc <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	@ (8001f00 <HAL_UART_Transmit_IT+0xdc>)
 8001eba:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8001ec2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f383 8810 	msr	PRIMASK, r3
}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f383 8810 	msr	PRIMASK, r3
}
 8001eec:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b008      	add	sp, #32
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	08002f7d 	.word	0x08002f7d
 8001f00:	08002ecb 	.word	0x08002ecb

08001f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b0ab      	sub	sp, #172	@ 0xac
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	22a4      	movs	r2, #164	@ 0xa4
 8001f14:	18b9      	adds	r1, r7, r2
 8001f16:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	20a0      	movs	r0, #160	@ 0xa0
 8001f20:	1839      	adds	r1, r7, r0
 8001f22:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	219c      	movs	r1, #156	@ 0x9c
 8001f2c:	1879      	adds	r1, r7, r1
 8001f2e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f30:	0011      	movs	r1, r2
 8001f32:	18bb      	adds	r3, r7, r2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a99      	ldr	r2, [pc, #612]	@ (800219c <HAL_UART_IRQHandler+0x298>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2298      	movs	r2, #152	@ 0x98
 8001f3c:	18bc      	adds	r4, r7, r2
 8001f3e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f40:	18bb      	adds	r3, r7, r2
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d00f      	beq.n	8001f72 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f52:	183b      	adds	r3, r7, r0
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d00a      	beq.n	8001f72 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d100      	bne.n	8001f66 <HAL_UART_IRQHandler+0x62>
 8001f64:	e2be      	b.n	80024e4 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	0010      	movs	r0, r2
 8001f6e:	4798      	blx	r3
      }
      return;
 8001f70:	e2b8      	b.n	80024e4 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001f72:	2398      	movs	r3, #152	@ 0x98
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d100      	bne.n	8001f7e <HAL_UART_IRQHandler+0x7a>
 8001f7c:	e114      	b.n	80021a8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f7e:	239c      	movs	r3, #156	@ 0x9c
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d106      	bne.n	8001f98 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f8a:	23a0      	movs	r3, #160	@ 0xa0
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a83      	ldr	r2, [pc, #524]	@ (80021a0 <HAL_UART_IRQHandler+0x29c>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_UART_IRQHandler+0x94>
 8001f96:	e107      	b.n	80021a8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f98:	23a4      	movs	r3, #164	@ 0xa4
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d012      	beq.n	8001fca <HAL_UART_IRQHandler+0xc6>
 8001fa4:	23a0      	movs	r3, #160	@ 0xa0
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2284      	movs	r2, #132	@ 0x84
 8001fbe:	589b      	ldr	r3, [r3, r2]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2184      	movs	r1, #132	@ 0x84
 8001fc8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fca:	23a4      	movs	r3, #164	@ 0xa4
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d011      	beq.n	8001ffa <HAL_UART_IRQHandler+0xf6>
 8001fd6:	239c      	movs	r3, #156	@ 0x9c
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d00b      	beq.n	8001ffa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2284      	movs	r2, #132	@ 0x84
 8001fee:	589b      	ldr	r3, [r3, r2]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2184      	movs	r1, #132	@ 0x84
 8001ff8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ffa:	23a4      	movs	r3, #164	@ 0xa4
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
 8002004:	d011      	beq.n	800202a <HAL_UART_IRQHandler+0x126>
 8002006:	239c      	movs	r3, #156	@ 0x9c
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d00b      	beq.n	800202a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2204      	movs	r2, #4
 8002018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2284      	movs	r2, #132	@ 0x84
 800201e:	589b      	ldr	r3, [r3, r2]
 8002020:	2202      	movs	r2, #2
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2184      	movs	r1, #132	@ 0x84
 8002028:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800202a:	23a4      	movs	r3, #164	@ 0xa4
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2208      	movs	r2, #8
 8002032:	4013      	ands	r3, r2
 8002034:	d017      	beq.n	8002066 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002036:	23a0      	movs	r3, #160	@ 0xa0
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2220      	movs	r2, #32
 800203e:	4013      	ands	r3, r2
 8002040:	d105      	bne.n	800204e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002042:	239c      	movs	r3, #156	@ 0x9c
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800204c:	d00b      	beq.n	8002066 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2208      	movs	r2, #8
 8002054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2284      	movs	r2, #132	@ 0x84
 800205a:	589b      	ldr	r3, [r3, r2]
 800205c:	2208      	movs	r2, #8
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2184      	movs	r1, #132	@ 0x84
 8002064:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002066:	23a4      	movs	r3, #164	@ 0xa4
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d013      	beq.n	800209c <HAL_UART_IRQHandler+0x198>
 8002074:	23a0      	movs	r3, #160	@ 0xa0
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	04db      	lsls	r3, r3, #19
 800207e:	4013      	ands	r3, r2
 8002080:	d00c      	beq.n	800209c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2280      	movs	r2, #128	@ 0x80
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2284      	movs	r2, #132	@ 0x84
 8002090:	589b      	ldr	r3, [r3, r2]
 8002092:	2220      	movs	r2, #32
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2184      	movs	r1, #132	@ 0x84
 800209a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2284      	movs	r2, #132	@ 0x84
 80020a0:	589b      	ldr	r3, [r3, r2]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d100      	bne.n	80020a8 <HAL_UART_IRQHandler+0x1a4>
 80020a6:	e21f      	b.n	80024e8 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80020a8:	23a4      	movs	r3, #164	@ 0xa4
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2220      	movs	r2, #32
 80020b0:	4013      	ands	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80020b4:	23a0      	movs	r3, #160	@ 0xa0
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	4013      	ands	r3, r2
 80020be:	d008      	beq.n	80020d2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	0010      	movs	r0, r2
 80020d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2284      	movs	r2, #132	@ 0x84
 80020d6:	589b      	ldr	r3, [r3, r2]
 80020d8:	2194      	movs	r1, #148	@ 0x94
 80020da:	187a      	adds	r2, r7, r1
 80020dc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b40      	cmp	r3, #64	@ 0x40
 80020ea:	d004      	beq.n	80020f6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2228      	movs	r2, #40	@ 0x28
 80020f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80020f4:	d047      	beq.n	8002186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fe6f 	bl	8002ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2240      	movs	r2, #64	@ 0x40
 8002106:	4013      	ands	r3, r2
 8002108:	2b40      	cmp	r3, #64	@ 0x40
 800210a:	d137      	bne.n	800217c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800210c:	f3ef 8310 	mrs	r3, PRIMASK
 8002110:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002114:	2090      	movs	r0, #144	@ 0x90
 8002116:	183a      	adds	r2, r7, r0
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002120:	f383 8810 	msr	PRIMASK, r3
}
 8002124:	46c0      	nop			@ (mov r8, r8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	438a      	bics	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	183b      	adds	r3, r7, r0
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800213e:	f383 8810 	msr	PRIMASK, r3
}
 8002142:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002148:	2b00      	cmp	r3, #0
 800214a:	d012      	beq.n	8002172 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <HAL_UART_IRQHandler+0x2a0>)
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002158:	0018      	movs	r0, r3
 800215a:	f7fe fcfb 	bl	8000b54 <HAL_DMA_Abort_IT>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d01a      	beq.n	8002198 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216c:	0018      	movs	r0, r3
 800216e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	e012      	b.n	8002198 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f9cd 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217a:	e00d      	b.n	8002198 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f9c8 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002184:	e008      	b.n	8002198 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f9c3 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2284      	movs	r2, #132	@ 0x84
 8002192:	2100      	movs	r1, #0
 8002194:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002196:	e1a7      	b.n	80024e8 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002198:	46c0      	nop			@ (mov r8, r8)
    return;
 800219a:	e1a5      	b.n	80024e8 <HAL_UART_IRQHandler+0x5e4>
 800219c:	0000080f 	.word	0x0000080f
 80021a0:	04000120 	.word	0x04000120
 80021a4:	08002ea5 	.word	0x08002ea5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d000      	beq.n	80021b2 <HAL_UART_IRQHandler+0x2ae>
 80021b0:	e159      	b.n	8002466 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80021b2:	23a4      	movs	r3, #164	@ 0xa4
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2210      	movs	r2, #16
 80021ba:	4013      	ands	r3, r2
 80021bc:	d100      	bne.n	80021c0 <HAL_UART_IRQHandler+0x2bc>
 80021be:	e152      	b.n	8002466 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80021c0:	23a0      	movs	r3, #160	@ 0xa0
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2210      	movs	r2, #16
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_UART_IRQHandler+0x2ca>
 80021cc:	e14b      	b.n	8002466 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2210      	movs	r2, #16
 80021d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2240      	movs	r2, #64	@ 0x40
 80021de:	4013      	ands	r3, r2
 80021e0:	2b40      	cmp	r3, #64	@ 0x40
 80021e2:	d000      	beq.n	80021e6 <HAL_UART_IRQHandler+0x2e2>
 80021e4:	e0bf      	b.n	8002366 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	217e      	movs	r1, #126	@ 0x7e
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d100      	bne.n	80021fe <HAL_UART_IRQHandler+0x2fa>
 80021fc:	e095      	b.n	800232a <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2258      	movs	r2, #88	@ 0x58
 8002202:	5a9b      	ldrh	r3, [r3, r2]
 8002204:	187a      	adds	r2, r7, r1
 8002206:	8812      	ldrh	r2, [r2, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d300      	bcc.n	800220e <HAL_UART_IRQHandler+0x30a>
 800220c:	e08d      	b.n	800232a <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	187a      	adds	r2, r7, r1
 8002212:	215a      	movs	r1, #90	@ 0x5a
 8002214:	8812      	ldrh	r2, [r2, #0]
 8002216:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2220      	movs	r2, #32
 8002222:	4013      	ands	r3, r2
 8002224:	d16f      	bne.n	8002306 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002226:	f3ef 8310 	mrs	r3, PRIMASK
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800222c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800222e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002230:	2301      	movs	r3, #1
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002236:	f383 8810 	msr	PRIMASK, r3
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	49ad      	ldr	r1, [pc, #692]	@ (80024fc <HAL_UART_IRQHandler+0x5f8>)
 8002248:	400a      	ands	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800224e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002258:	f3ef 8310 	mrs	r3, PRIMASK
 800225c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800225e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002260:	677b      	str	r3, [r7, #116]	@ 0x74
 8002262:	2301      	movs	r3, #1
 8002264:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002268:	f383 8810 	msr	PRIMASK, r3
}
 800226c:	46c0      	nop			@ (mov r8, r8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	438a      	bics	r2, r1
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002280:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002284:	f383 8810 	msr	PRIMASK, r3
}
 8002288:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228a:	f3ef 8310 	mrs	r3, PRIMASK
 800228e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002292:	673b      	str	r3, [r7, #112]	@ 0x70
 8002294:	2301      	movs	r3, #1
 8002296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2140      	movs	r1, #64	@ 0x40
 80022ac:	438a      	bics	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022b6:	f383 8810 	msr	PRIMASK, r3
}
 80022ba:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	2120      	movs	r1, #32
 80022c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ca:	f3ef 8310 	mrs	r3, PRIMASK
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80022d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022d4:	2301      	movs	r3, #1
 80022d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2110      	movs	r1, #16
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f6:	f383 8810 	msr	PRIMASK, r3
}
 80022fa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002300:	0018      	movs	r0, r3
 8002302:	f7fe fbe7 	bl	8000ad4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2258      	movs	r2, #88	@ 0x58
 8002310:	5a9a      	ldrh	r2, [r3, r2]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	215a      	movs	r1, #90	@ 0x5a
 8002316:	5a5b      	ldrh	r3, [r3, r1]
 8002318:	b29b      	uxth	r3, r3
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	b29a      	uxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f000 f8fe 	bl	8002524 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002328:	e0e0      	b.n	80024ec <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2258      	movs	r2, #88	@ 0x58
 800232e:	5a9b      	ldrh	r3, [r3, r2]
 8002330:	227e      	movs	r2, #126	@ 0x7e
 8002332:	18ba      	adds	r2, r7, r2
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d000      	beq.n	800233c <HAL_UART_IRQHandler+0x438>
 800233a:	e0d7      	b.n	80024ec <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2220      	movs	r2, #32
 8002346:	4013      	ands	r3, r2
 8002348:	2b20      	cmp	r3, #32
 800234a:	d000      	beq.n	800234e <HAL_UART_IRQHandler+0x44a>
 800234c:	e0ce      	b.n	80024ec <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2258      	movs	r2, #88	@ 0x58
 8002358:	5a9a      	ldrh	r2, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0011      	movs	r1, r2
 800235e:	0018      	movs	r0, r3
 8002360:	f000 f8e0 	bl	8002524 <HAL_UARTEx_RxEventCallback>
      return;
 8002364:	e0c2      	b.n	80024ec <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2258      	movs	r2, #88	@ 0x58
 800236a:	5a99      	ldrh	r1, [r3, r2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	225a      	movs	r2, #90	@ 0x5a
 8002370:	5a9b      	ldrh	r3, [r3, r2]
 8002372:	b29a      	uxth	r2, r3
 8002374:	208e      	movs	r0, #142	@ 0x8e
 8002376:	183b      	adds	r3, r7, r0
 8002378:	1a8a      	subs	r2, r1, r2
 800237a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	225a      	movs	r2, #90	@ 0x5a
 8002380:	5a9b      	ldrh	r3, [r3, r2]
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d100      	bne.n	800238a <HAL_UART_IRQHandler+0x486>
 8002388:	e0b2      	b.n	80024f0 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800238a:	183b      	adds	r3, r7, r0
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d100      	bne.n	8002394 <HAL_UART_IRQHandler+0x490>
 8002392:	e0ad      	b.n	80024f0 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002394:	f3ef 8310 	mrs	r3, PRIMASK
 8002398:	60fb      	str	r3, [r7, #12]
  return(result);
 800239a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239c:	2488      	movs	r4, #136	@ 0x88
 800239e:	193a      	adds	r2, r7, r4
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	2301      	movs	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4951      	ldr	r1, [pc, #324]	@ (8002500 <HAL_UART_IRQHandler+0x5fc>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f383 8810 	msr	PRIMASK, r3
}
 80023ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023cc:	f3ef 8310 	mrs	r3, PRIMASK
 80023d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80023d2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d4:	2484      	movs	r4, #132	@ 0x84
 80023d6:	193a      	adds	r2, r7, r4
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f383 8810 	msr	PRIMASK, r3
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	438a      	bics	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f383 8810 	msr	PRIMASK, r3
}
 8002402:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	2120      	movs	r1, #32
 800240a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002418:	f3ef 8310 	mrs	r3, PRIMASK
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002420:	2480      	movs	r4, #128	@ 0x80
 8002422:	193a      	adds	r2, r7, r4
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	2301      	movs	r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	f383 8810 	msr	PRIMASK, r3
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2110      	movs	r1, #16
 800243e:	438a      	bics	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	193b      	adds	r3, r7, r4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	f383 8810 	msr	PRIMASK, r3
}
 800244e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002456:	183b      	adds	r3, r7, r0
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0011      	movs	r1, r2
 800245e:	0018      	movs	r0, r3
 8002460:	f000 f860 	bl	8002524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002464:	e044      	b.n	80024f0 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002466:	23a4      	movs	r3, #164	@ 0xa4
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	035b      	lsls	r3, r3, #13
 8002470:	4013      	ands	r3, r2
 8002472:	d010      	beq.n	8002496 <HAL_UART_IRQHandler+0x592>
 8002474:	239c      	movs	r3, #156	@ 0x9c
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	03db      	lsls	r3, r3, #15
 800247e:	4013      	ands	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2280      	movs	r2, #128	@ 0x80
 8002488:	0352      	lsls	r2, r2, #13
 800248a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fdfd 	bl	800308e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002494:	e02f      	b.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002496:	23a4      	movs	r3, #164	@ 0xa4
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	4013      	ands	r3, r2
 80024a0:	d00f      	beq.n	80024c2 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024a2:	23a0      	movs	r3, #160	@ 0xa0
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	4013      	ands	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01e      	beq.n	80024f4 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	0010      	movs	r0, r2
 80024be:	4798      	blx	r3
    }
    return;
 80024c0:	e018      	b.n	80024f4 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024c2:	23a4      	movs	r3, #164	@ 0xa4
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2240      	movs	r2, #64	@ 0x40
 80024ca:	4013      	ands	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
 80024ce:	23a0      	movs	r3, #160	@ 0xa0
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	4013      	ands	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fdab 	bl	8003038 <UART_EndTransmit_IT>
    return;
 80024e2:	e008      	b.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
      return;
 80024e4:	46c0      	nop			@ (mov r8, r8)
 80024e6:	e006      	b.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
    return;
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	e004      	b.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
      return;
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	e002      	b.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
      return;
 80024f0:	46c0      	nop			@ (mov r8, r8)
 80024f2:	e000      	b.n	80024f6 <HAL_UART_IRQHandler+0x5f2>
    return;
 80024f4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b02b      	add	sp, #172	@ 0xac
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	fffffeff 	.word	0xfffffeff
 8002500:	fffffedf 	.word	0xfffffedf

08002504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	000a      	movs	r2, r1
 800252e:	1cbb      	adds	r3, r7, #2
 8002530:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b08e      	sub	sp, #56	@ 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002544:	231a      	movs	r3, #26
 8002546:	2218      	movs	r2, #24
 8002548:	189b      	adds	r3, r3, r2
 800254a:	19db      	adds	r3, r3, r7
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4313      	orrs	r3, r2
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4ac6      	ldr	r2, [pc, #792]	@ (8002888 <UART_SetConfig+0x34c>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4ac1      	ldr	r2, [pc, #772]	@ (800288c <UART_SetConfig+0x350>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4abb      	ldr	r2, [pc, #748]	@ (8002890 <UART_SetConfig+0x354>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025ac:	4313      	orrs	r3, r2
 80025ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4ab7      	ldr	r2, [pc, #732]	@ (8002894 <UART_SetConfig+0x358>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4ab3      	ldr	r2, [pc, #716]	@ (8002898 <UART_SetConfig+0x35c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d131      	bne.n	8002634 <UART_SetConfig+0xf8>
 80025d0:	4bb2      	ldr	r3, [pc, #712]	@ (800289c <UART_SetConfig+0x360>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d4:	2203      	movs	r2, #3
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d01d      	beq.n	8002618 <UART_SetConfig+0xdc>
 80025dc:	d823      	bhi.n	8002626 <UART_SetConfig+0xea>
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d00c      	beq.n	80025fc <UART_SetConfig+0xc0>
 80025e2:	d820      	bhi.n	8002626 <UART_SetConfig+0xea>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <UART_SetConfig+0xb2>
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d00e      	beq.n	800260a <UART_SetConfig+0xce>
 80025ec:	e01b      	b.n	8002626 <UART_SetConfig+0xea>
 80025ee:	231b      	movs	r3, #27
 80025f0:	2218      	movs	r2, #24
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	19db      	adds	r3, r3, r7
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e09c      	b.n	8002736 <UART_SetConfig+0x1fa>
 80025fc:	231b      	movs	r3, #27
 80025fe:	2218      	movs	r2, #24
 8002600:	189b      	adds	r3, r3, r2
 8002602:	19db      	adds	r3, r3, r7
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e095      	b.n	8002736 <UART_SetConfig+0x1fa>
 800260a:	231b      	movs	r3, #27
 800260c:	2218      	movs	r2, #24
 800260e:	189b      	adds	r3, r3, r2
 8002610:	19db      	adds	r3, r3, r7
 8002612:	2204      	movs	r2, #4
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e08e      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002618:	231b      	movs	r3, #27
 800261a:	2218      	movs	r2, #24
 800261c:	189b      	adds	r3, r3, r2
 800261e:	19db      	adds	r3, r3, r7
 8002620:	2208      	movs	r2, #8
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e087      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002626:	231b      	movs	r3, #27
 8002628:	2218      	movs	r2, #24
 800262a:	189b      	adds	r3, r3, r2
 800262c:	19db      	adds	r3, r3, r7
 800262e:	2210      	movs	r2, #16
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e080      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a99      	ldr	r2, [pc, #612]	@ (80028a0 <UART_SetConfig+0x364>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d131      	bne.n	80026a2 <UART_SetConfig+0x166>
 800263e:	4b97      	ldr	r3, [pc, #604]	@ (800289c <UART_SetConfig+0x360>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	220c      	movs	r2, #12
 8002644:	4013      	ands	r3, r2
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d01d      	beq.n	8002686 <UART_SetConfig+0x14a>
 800264a:	d823      	bhi.n	8002694 <UART_SetConfig+0x158>
 800264c:	2b08      	cmp	r3, #8
 800264e:	d00c      	beq.n	800266a <UART_SetConfig+0x12e>
 8002650:	d820      	bhi.n	8002694 <UART_SetConfig+0x158>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <UART_SetConfig+0x120>
 8002656:	2b04      	cmp	r3, #4
 8002658:	d00e      	beq.n	8002678 <UART_SetConfig+0x13c>
 800265a:	e01b      	b.n	8002694 <UART_SetConfig+0x158>
 800265c:	231b      	movs	r3, #27
 800265e:	2218      	movs	r2, #24
 8002660:	189b      	adds	r3, r3, r2
 8002662:	19db      	adds	r3, r3, r7
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e065      	b.n	8002736 <UART_SetConfig+0x1fa>
 800266a:	231b      	movs	r3, #27
 800266c:	2218      	movs	r2, #24
 800266e:	189b      	adds	r3, r3, r2
 8002670:	19db      	adds	r3, r3, r7
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e05e      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002678:	231b      	movs	r3, #27
 800267a:	2218      	movs	r2, #24
 800267c:	189b      	adds	r3, r3, r2
 800267e:	19db      	adds	r3, r3, r7
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e057      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002686:	231b      	movs	r3, #27
 8002688:	2218      	movs	r2, #24
 800268a:	189b      	adds	r3, r3, r2
 800268c:	19db      	adds	r3, r3, r7
 800268e:	2208      	movs	r2, #8
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e050      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002694:	231b      	movs	r3, #27
 8002696:	2218      	movs	r2, #24
 8002698:	189b      	adds	r3, r3, r2
 800269a:	19db      	adds	r3, r3, r7
 800269c:	2210      	movs	r2, #16
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e049      	b.n	8002736 <UART_SetConfig+0x1fa>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002890 <UART_SetConfig+0x354>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d13e      	bne.n	800272a <UART_SetConfig+0x1ee>
 80026ac:	4b7b      	ldr	r3, [pc, #492]	@ (800289c <UART_SetConfig+0x360>)
 80026ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026b0:	23c0      	movs	r3, #192	@ 0xc0
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	22c0      	movs	r2, #192	@ 0xc0
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d027      	beq.n	800270e <UART_SetConfig+0x1d2>
 80026be:	22c0      	movs	r2, #192	@ 0xc0
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d82a      	bhi.n	800271c <UART_SetConfig+0x1e0>
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d011      	beq.n	80026f2 <UART_SetConfig+0x1b6>
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d822      	bhi.n	800271c <UART_SetConfig+0x1e0>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <UART_SetConfig+0x1a8>
 80026da:	2280      	movs	r2, #128	@ 0x80
 80026dc:	00d2      	lsls	r2, r2, #3
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <UART_SetConfig+0x1c4>
 80026e2:	e01b      	b.n	800271c <UART_SetConfig+0x1e0>
 80026e4:	231b      	movs	r3, #27
 80026e6:	2218      	movs	r2, #24
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e021      	b.n	8002736 <UART_SetConfig+0x1fa>
 80026f2:	231b      	movs	r3, #27
 80026f4:	2218      	movs	r2, #24
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e01a      	b.n	8002736 <UART_SetConfig+0x1fa>
 8002700:	231b      	movs	r3, #27
 8002702:	2218      	movs	r2, #24
 8002704:	189b      	adds	r3, r3, r2
 8002706:	19db      	adds	r3, r3, r7
 8002708:	2204      	movs	r2, #4
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e013      	b.n	8002736 <UART_SetConfig+0x1fa>
 800270e:	231b      	movs	r3, #27
 8002710:	2218      	movs	r2, #24
 8002712:	189b      	adds	r3, r3, r2
 8002714:	19db      	adds	r3, r3, r7
 8002716:	2208      	movs	r2, #8
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e00c      	b.n	8002736 <UART_SetConfig+0x1fa>
 800271c:	231b      	movs	r3, #27
 800271e:	2218      	movs	r2, #24
 8002720:	189b      	adds	r3, r3, r2
 8002722:	19db      	adds	r3, r3, r7
 8002724:	2210      	movs	r2, #16
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e005      	b.n	8002736 <UART_SetConfig+0x1fa>
 800272a:	231b      	movs	r3, #27
 800272c:	2218      	movs	r2, #24
 800272e:	189b      	adds	r3, r3, r2
 8002730:	19db      	adds	r3, r3, r7
 8002732:	2210      	movs	r2, #16
 8002734:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a55      	ldr	r2, [pc, #340]	@ (8002890 <UART_SetConfig+0x354>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d000      	beq.n	8002742 <UART_SetConfig+0x206>
 8002740:	e084      	b.n	800284c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002742:	231b      	movs	r3, #27
 8002744:	2218      	movs	r2, #24
 8002746:	189b      	adds	r3, r3, r2
 8002748:	19db      	adds	r3, r3, r7
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d01d      	beq.n	800278c <UART_SetConfig+0x250>
 8002750:	dc20      	bgt.n	8002794 <UART_SetConfig+0x258>
 8002752:	2b04      	cmp	r3, #4
 8002754:	d015      	beq.n	8002782 <UART_SetConfig+0x246>
 8002756:	dc1d      	bgt.n	8002794 <UART_SetConfig+0x258>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <UART_SetConfig+0x226>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d005      	beq.n	800276c <UART_SetConfig+0x230>
 8002760:	e018      	b.n	8002794 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002762:	f7ff f951 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002766:	0003      	movs	r3, r0
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800276a:	e01c      	b.n	80027a6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800276c:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <UART_SetConfig+0x360>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d002      	beq.n	800277c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002776:	4b4b      	ldr	r3, [pc, #300]	@ (80028a4 <UART_SetConfig+0x368>)
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800277a:	e014      	b.n	80027a6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800277c:	4b4a      	ldr	r3, [pc, #296]	@ (80028a8 <UART_SetConfig+0x36c>)
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002780:	e011      	b.n	80027a6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002782:	f7ff f8b1 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 8002786:	0003      	movs	r3, r0
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800278a:	e00c      	b.n	80027a6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002792:	e008      	b.n	80027a6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002798:	231a      	movs	r3, #26
 800279a:	2218      	movs	r2, #24
 800279c:	189b      	adds	r3, r3, r2
 800279e:	19db      	adds	r3, r3, r7
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
        break;
 80027a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d100      	bne.n	80027ae <UART_SetConfig+0x272>
 80027ac:	e132      	b.n	8002a14 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	0013      	movs	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d305      	bcc.n	80027ca <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d906      	bls.n	80027d8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80027ca:	231a      	movs	r3, #26
 80027cc:	2218      	movs	r2, #24
 80027ce:	189b      	adds	r3, r3, r2
 80027d0:	19db      	adds	r3, r3, r7
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e11d      	b.n	8002a14 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	000b      	movs	r3, r1
 80027e6:	0e1b      	lsrs	r3, r3, #24
 80027e8:	0010      	movs	r0, r2
 80027ea:	0205      	lsls	r5, r0, #8
 80027ec:	431d      	orrs	r5, r3
 80027ee:	000b      	movs	r3, r1
 80027f0:	021c      	lsls	r4, r3, #8
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68b8      	ldr	r0, [r7, #8]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	1900      	adds	r0, r0, r4
 8002804:	4169      	adcs	r1, r5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f7fd fd0c 	bl	8000230 <__aeabi_uldivmod>
 8002818:	0002      	movs	r2, r0
 800281a:	000b      	movs	r3, r1
 800281c:	0013      	movs	r3, r2
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002822:	23c0      	movs	r3, #192	@ 0xc0
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	429a      	cmp	r2, r3
 8002828:	d309      	bcc.n	800283e <UART_SetConfig+0x302>
 800282a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	035b      	lsls	r3, r3, #13
 8002830:	429a      	cmp	r2, r3
 8002832:	d204      	bcs.n	800283e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	e0ea      	b.n	8002a14 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800283e:	231a      	movs	r3, #26
 8002840:	2218      	movs	r2, #24
 8002842:	189b      	adds	r3, r3, r2
 8002844:	19db      	adds	r3, r3, r7
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e0e3      	b.n	8002a14 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	429a      	cmp	r2, r3
 8002856:	d000      	beq.n	800285a <UART_SetConfig+0x31e>
 8002858:	e085      	b.n	8002966 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800285a:	231b      	movs	r3, #27
 800285c:	2218      	movs	r2, #24
 800285e:	189b      	adds	r3, r3, r2
 8002860:	19db      	adds	r3, r3, r7
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d837      	bhi.n	80028d8 <UART_SetConfig+0x39c>
 8002868:	009a      	lsls	r2, r3, #2
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <UART_SetConfig+0x370>)
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002872:	f7ff f8c9 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002876:	0003      	movs	r3, r0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800287a:	e036      	b.n	80028ea <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800287c:	f7ff f8da 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8002880:	0003      	movs	r3, r0
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002884:	e031      	b.n	80028ea <UART_SetConfig+0x3ae>
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	efff69f3 	.word	0xefff69f3
 800288c:	ffffcfff 	.word	0xffffcfff
 8002890:	40004800 	.word	0x40004800
 8002894:	fffff4ff 	.word	0xfffff4ff
 8002898:	40013800 	.word	0x40013800
 800289c:	40021000 	.word	0x40021000
 80028a0:	40004400 	.word	0x40004400
 80028a4:	003d0900 	.word	0x003d0900
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	08003154 	.word	0x08003154
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028b0:	4b60      	ldr	r3, [pc, #384]	@ (8002a34 <UART_SetConfig+0x4f8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	d002      	beq.n	80028c0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002a38 <UART_SetConfig+0x4fc>)
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028be:	e014      	b.n	80028ea <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80028c0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a3c <UART_SetConfig+0x500>)
 80028c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028c4:	e011      	b.n	80028ea <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c6:	f7ff f80f 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80028ca:	0003      	movs	r3, r0
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028ce:	e00c      	b.n	80028ea <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028d6:	e008      	b.n	80028ea <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80028dc:	231a      	movs	r3, #26
 80028de:	2218      	movs	r2, #24
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	19db      	adds	r3, r3, r7
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
        break;
 80028e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <UART_SetConfig+0x3b6>
 80028f0:	e090      	b.n	8002a14 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f4:	005a      	lsls	r2, r3, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	18d2      	adds	r2, r2, r3
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	0019      	movs	r1, r3
 8002904:	0010      	movs	r0, r2
 8002906:	f7fd fc07 	bl	8000118 <__udivsi3>
 800290a:	0003      	movs	r3, r0
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	2b0f      	cmp	r3, #15
 8002912:	d921      	bls.n	8002958 <UART_SetConfig+0x41c>
 8002914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002916:	2380      	movs	r3, #128	@ 0x80
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	429a      	cmp	r2, r3
 800291c:	d21c      	bcs.n	8002958 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	b29a      	uxth	r2, r3
 8002922:	200e      	movs	r0, #14
 8002924:	2418      	movs	r4, #24
 8002926:	1903      	adds	r3, r0, r4
 8002928:	19db      	adds	r3, r3, r7
 800292a:	210f      	movs	r1, #15
 800292c:	438a      	bics	r2, r1
 800292e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	b29b      	uxth	r3, r3
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	b299      	uxth	r1, r3
 800293c:	1903      	adds	r3, r0, r4
 800293e:	19db      	adds	r3, r3, r7
 8002940:	1902      	adds	r2, r0, r4
 8002942:	19d2      	adds	r2, r2, r7
 8002944:	8812      	ldrh	r2, [r2, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1902      	adds	r2, r0, r4
 8002950:	19d2      	adds	r2, r2, r7
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	e05d      	b.n	8002a14 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002958:	231a      	movs	r3, #26
 800295a:	2218      	movs	r2, #24
 800295c:	189b      	adds	r3, r3, r2
 800295e:	19db      	adds	r3, r3, r7
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e056      	b.n	8002a14 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002966:	231b      	movs	r3, #27
 8002968:	2218      	movs	r2, #24
 800296a:	189b      	adds	r3, r3, r2
 800296c:	19db      	adds	r3, r3, r7
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d822      	bhi.n	80029ba <UART_SetConfig+0x47e>
 8002974:	009a      	lsls	r2, r3, #2
 8002976:	4b32      	ldr	r3, [pc, #200]	@ (8002a40 <UART_SetConfig+0x504>)
 8002978:	18d3      	adds	r3, r2, r3
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800297e:	f7ff f843 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002982:	0003      	movs	r3, r0
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002986:	e021      	b.n	80029cc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002988:	f7ff f854 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 800298c:	0003      	movs	r3, r0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002990:	e01c      	b.n	80029cc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <UART_SetConfig+0x4f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2210      	movs	r2, #16
 8002998:	4013      	ands	r3, r2
 800299a:	d002      	beq.n	80029a2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800299c:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <UART_SetConfig+0x4fc>)
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029a0:	e014      	b.n	80029cc <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <UART_SetConfig+0x500>)
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029a6:	e011      	b.n	80029cc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a8:	f7fe ff9e 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80029ac:	0003      	movs	r3, r0
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029b0:	e00c      	b.n	80029cc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029b8:	e008      	b.n	80029cc <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80029be:	231a      	movs	r3, #26
 80029c0:	2218      	movs	r2, #24
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	19db      	adds	r3, r3, r7
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
        break;
 80029ca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d020      	beq.n	8002a14 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	085a      	lsrs	r2, r3, #1
 80029d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029da:	18d2      	adds	r2, r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0019      	movs	r1, r3
 80029e2:	0010      	movs	r0, r2
 80029e4:	f7fd fb98 	bl	8000118 <__udivsi3>
 80029e8:	0003      	movs	r3, r0
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	d90a      	bls.n	8002a08 <UART_SetConfig+0x4cc>
 80029f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d205      	bcs.n	8002a08 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e005      	b.n	8002a14 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a08:	231a      	movs	r3, #26
 8002a0a:	2218      	movs	r2, #24
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	19db      	adds	r3, r3, r7
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2200      	movs	r2, #0
 8002a18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a20:	231a      	movs	r3, #26
 8002a22:	2218      	movs	r2, #24
 8002a24:	189b      	adds	r3, r3, r2
 8002a26:	19db      	adds	r3, r3, r7
 8002a28:	781b      	ldrb	r3, [r3, #0]
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b00e      	add	sp, #56	@ 0x38
 8002a30:	bdb0      	pop	{r4, r5, r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	003d0900 	.word	0x003d0900
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	08003178 	.word	0x08003178

08002a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	2208      	movs	r2, #8
 8002a52:	4013      	ands	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b88 <UART_AdvFeatureConfig+0x144>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a43      	ldr	r2, [pc, #268]	@ (8002b8c <UART_AdvFeatureConfig+0x148>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8002b90 <UART_AdvFeatureConfig+0x14c>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d00b      	beq.n	8002ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a34      	ldr	r2, [pc, #208]	@ (8002b94 <UART_AdvFeatureConfig+0x150>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	2210      	movs	r2, #16
 8002ada:	4013      	ands	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b98 <UART_AdvFeatureConfig+0x154>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	2220      	movs	r2, #32
 8002afc:	4013      	ands	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a25      	ldr	r2, [pc, #148]	@ (8002b9c <UART_AdvFeatureConfig+0x158>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	2240      	movs	r2, #64	@ 0x40
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d01d      	beq.n	8002b5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <UART_AdvFeatureConfig+0x15c>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	035b      	lsls	r3, r3, #13
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10b      	bne.n	8002b5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <UART_AdvFeatureConfig+0x160>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	2280      	movs	r2, #128	@ 0x80
 8002b64:	4013      	ands	r3, r2
 8002b66:	d00b      	beq.n	8002b80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba8 <UART_AdvFeatureConfig+0x164>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }
}
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	ffff7fff 	.word	0xffff7fff
 8002b8c:	fffdffff 	.word	0xfffdffff
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	fffbffff 	.word	0xfffbffff
 8002b98:	ffffefff 	.word	0xffffefff
 8002b9c:	ffffdfff 	.word	0xffffdfff
 8002ba0:	ffefffff 	.word	0xffefffff
 8002ba4:	ff9fffff 	.word	0xff9fffff
 8002ba8:	fff7ffff 	.word	0xfff7ffff

08002bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b092      	sub	sp, #72	@ 0x48
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2284      	movs	r2, #132	@ 0x84
 8002bb8:	2100      	movs	r1, #0
 8002bba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bbc:	f7fd fe7e 	bl	80008bc <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d12c      	bne.n	8002c2c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	0391      	lsls	r1, r2, #14
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4a46      	ldr	r2, [pc, #280]	@ (8002cf4 <UART_CheckIdleState+0x148>)
 8002bdc:	9200      	str	r2, [sp, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f000 f88c 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d021      	beq.n	8002c2c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	f383 8810 	msr	PRIMASK, r3
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	438a      	bics	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c14:	f383 8810 	msr	PRIMASK, r3
}
 8002c18:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2278      	movs	r2, #120	@ 0x78
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e05f      	b.n	8002cec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d146      	bne.n	8002cc8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	03d1      	lsls	r1, r2, #15
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <UART_CheckIdleState+0x148>)
 8002c44:	9200      	str	r2, [sp, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f000 f858 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d03b      	beq.n	8002cc8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c50:	f3ef 8310 	mrs	r3, PRIMASK
 8002c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c56:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4921      	ldr	r1, [pc, #132]	@ (8002cf8 <UART_CheckIdleState+0x14c>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c82:	f3ef 8310 	mrs	r3, PRIMASK
 8002c86:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c88:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f383 8810 	msr	PRIMASK, r3
}
 8002cb2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	2120      	movs	r1, #32
 8002cba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2278      	movs	r2, #120	@ 0x78
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e011      	b.n	8002cec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2280      	movs	r2, #128	@ 0x80
 8002cd2:	2120      	movs	r1, #32
 8002cd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2278      	movs	r2, #120	@ 0x78
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b010      	add	sp, #64	@ 0x40
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	01ffffff 	.word	0x01ffffff
 8002cf8:	fffffedf 	.word	0xfffffedf

08002cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0c:	e051      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3301      	adds	r3, #1
 8002d12:	d04e      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d14:	f7fd fdd2 	bl	80008bc <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e051      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2204      	movs	r2, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	d03b      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b80      	cmp	r3, #128	@ 0x80
 8002d3e:	d038      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d035      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d111      	bne.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 f83c 	bl	8002ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2284      	movs	r2, #132	@ 0x84
 8002d68:	2108      	movs	r1, #8
 8002d6a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2278      	movs	r2, #120	@ 0x78
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e02c      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	401a      	ands	r2, r3
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d112      	bne.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 f81f 	bl	8002ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2284      	movs	r2, #132	@ 0x84
 8002da2:	2120      	movs	r1, #32
 8002da4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2278      	movs	r2, #120	@ 0x78
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e00f      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	425a      	negs	r2, r3
 8002dc2:	4153      	adcs	r3, r2
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d09e      	beq.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b004      	add	sp, #16
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	@ 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de4:	f3ef 8310 	mrs	r3, PRIMASK
 8002de8:	617b      	str	r3, [r7, #20]
  return(result);
 8002dea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dee:	2301      	movs	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4926      	ldr	r1, [pc, #152]	@ (8002ea0 <UART_EndRxTransfer+0xc4>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e16:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e20:	2301      	movs	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	f383 8810 	msr	PRIMASK, r3
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	f383 8810 	msr	PRIMASK, r3
}
 8002e46:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d118      	bne.n	8002e82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
 8002e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2110      	movs	r1, #16
 8002e72:	438a      	bics	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	2120      	movs	r1, #32
 8002e88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b00e      	add	sp, #56	@ 0x38
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	fffffedf 	.word	0xfffffedf

08002ea4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	225a      	movs	r2, #90	@ 0x5a
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7ff fb29 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08a      	sub	sp, #40	@ 0x28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ed6:	2b21      	cmp	r3, #33	@ 0x21
 8002ed8:	d14c      	bne.n	8002f74 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2252      	movs	r2, #82	@ 0x52
 8002ede:	5a9b      	ldrh	r3, [r3, r2]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d132      	bne.n	8002f4c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f383 8810 	msr	PRIMASK, r3
}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2180      	movs	r1, #128	@ 0x80
 8002f08:	438a      	bics	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f383 8810 	msr	PRIMASK, r3
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f18:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f1e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2140      	movs	r1, #64	@ 0x40
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002f4a:	e013      	b.n	8002f74 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2252      	movs	r2, #82	@ 0x52
 8002f66:	5a9b      	ldrh	r3, [r3, r2]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b299      	uxth	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2252      	movs	r2, #82	@ 0x52
 8002f72:	5299      	strh	r1, [r3, r2]
}
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b00a      	add	sp, #40	@ 0x28
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	@ 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f88:	2b21      	cmp	r3, #33	@ 0x21
 8002f8a:	d151      	bne.n	8003030 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2252      	movs	r2, #82	@ 0x52
 8002f90:	5a9b      	ldrh	r3, [r3, r2]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d132      	bne.n	8002ffe <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f98:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2180      	movs	r1, #128	@ 0x80
 8002fba:	438a      	bics	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fca:	f3ef 8310 	mrs	r3, PRIMASK
 8002fce:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fd0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f383 8810 	msr	PRIMASK, r3
}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2140      	movs	r1, #64	@ 0x40
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002ffc:	e018      	b.n	8003030 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	001a      	movs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	05d2      	lsls	r2, r2, #23
 8003010:	0dd2      	lsrs	r2, r2, #23
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2252      	movs	r2, #82	@ 0x52
 8003022:	5a9b      	ldrh	r3, [r3, r2]
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b299      	uxth	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2252      	movs	r2, #82	@ 0x52
 800302e:	5299      	strh	r1, [r3, r2]
}
 8003030:	46c0      	nop			@ (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b00c      	add	sp, #48	@ 0x30
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	60bb      	str	r3, [r7, #8]
  return(result);
 8003046:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	2301      	movs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2140      	movs	r1, #64	@ 0x40
 8003062:	438a      	bics	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff fa3f 	bl	8002504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}

0800309e <memset>:
 800309e:	0003      	movs	r3, r0
 80030a0:	1882      	adds	r2, r0, r2
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d100      	bne.n	80030a8 <memset+0xa>
 80030a6:	4770      	bx	lr
 80030a8:	7019      	strb	r1, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	e7f9      	b.n	80030a2 <memset+0x4>
	...

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	2600      	movs	r6, #0
 80030b4:	4c0c      	ldr	r4, [pc, #48]	@ (80030e8 <__libc_init_array+0x38>)
 80030b6:	4d0d      	ldr	r5, [pc, #52]	@ (80030ec <__libc_init_array+0x3c>)
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	42a6      	cmp	r6, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	2600      	movs	r6, #0
 80030c2:	f000 f819 	bl	80030f8 <_init>
 80030c6:	4c0a      	ldr	r4, [pc, #40]	@ (80030f0 <__libc_init_array+0x40>)
 80030c8:	4d0a      	ldr	r5, [pc, #40]	@ (80030f4 <__libc_init_array+0x44>)
 80030ca:	1b64      	subs	r4, r4, r5
 80030cc:	10a4      	asrs	r4, r4, #2
 80030ce:	42a6      	cmp	r6, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	00b3      	lsls	r3, r6, #2
 80030d6:	58eb      	ldr	r3, [r5, r3]
 80030d8:	4798      	blx	r3
 80030da:	3601      	adds	r6, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	00b3      	lsls	r3, r6, #2
 80030e0:	58eb      	ldr	r3, [r5, r3]
 80030e2:	4798      	blx	r3
 80030e4:	3601      	adds	r6, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	080031a4 	.word	0x080031a4
 80030ec:	080031a4 	.word	0x080031a4
 80030f0:	080031a8 	.word	0x080031a8
 80030f4:	080031a4 	.word	0x080031a4

080030f8 <_init>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr

08003104 <_fini>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr


RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c1c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001cdc  08001cdc  00002cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf8  08001cf8  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001cf8  08001cf8  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001cf8  08001cf8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf8  08001cf8  00002cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cfc  08001cfc  00002cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d00  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  08001d0c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001d0c  00003068  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ea0  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001062  00000000  00000000  00006ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00007f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003b0  00000000  00000000  00008440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128d3  00000000  00000000  000087f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006428  00000000  00000000  0001b0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073bec  00000000  00000000  000214eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000950d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001060  00000000  00000000  0009511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001cc4 	.word	0x08001cc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001cc4 	.word	0x08001cc4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f980 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f834 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 800022c:	f000 f89e 	bl	800036c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  DATE.Date = 28;
 8000230:	4b15      	ldr	r3, [pc, #84]	@ (8000288 <main+0x68>)
 8000232:	221c      	movs	r2, #28
 8000234:	709a      	strb	r2, [r3, #2]
  DATE.Month = 07;
 8000236:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <main+0x68>)
 8000238:	2207      	movs	r2, #7
 800023a:	705a      	strb	r2, [r3, #1]
  DATE.Year = 25;
 800023c:	4b12      	ldr	r3, [pc, #72]	@ (8000288 <main+0x68>)
 800023e:	2219      	movs	r2, #25
 8000240:	70da      	strb	r2, [r3, #3]
  DATE.WeekDay = RTC_WEEKDAY_MONDAY;
 8000242:	4b11      	ldr	r3, [pc, #68]	@ (8000288 <main+0x68>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]

  TIME.Hours = 15;
 8000248:	4b10      	ldr	r3, [pc, #64]	@ (800028c <main+0x6c>)
 800024a:	220f      	movs	r2, #15
 800024c:	701a      	strb	r2, [r3, #0]
  TIME.Minutes = 35;
 800024e:	4b0f      	ldr	r3, [pc, #60]	@ (800028c <main+0x6c>)
 8000250:	2223      	movs	r2, #35	@ 0x23
 8000252:	705a      	strb	r2, [r3, #1]

  HAL_RTC_SetDate(&hrtc, &DATE, RTC_FORMAT_BCD);
 8000254:	490c      	ldr	r1, [pc, #48]	@ (8000288 <main+0x68>)
 8000256:	4b0e      	ldr	r3, [pc, #56]	@ (8000290 <main+0x70>)
 8000258:	2201      	movs	r2, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fb4c 	bl	80018f8 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &TIME, RTC_FORMAT_BCD);
 8000260:	490a      	ldr	r1, [pc, #40]	@ (800028c <main+0x6c>)
 8000262:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <main+0x70>)
 8000264:	2201      	movs	r2, #1
 8000266:	0018      	movs	r0, r3
 8000268:	f001 fa3e 	bl	80016e8 <HAL_RTC_SetTime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BCD);
 800026c:	4906      	ldr	r1, [pc, #24]	@ (8000288 <main+0x68>)
 800026e:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <main+0x70>)
 8000270:	2201      	movs	r2, #1
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fbd4 	bl	8001a20 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BCD);
 8000278:	4904      	ldr	r1, [pc, #16]	@ (800028c <main+0x6c>)
 800027a:	4b05      	ldr	r3, [pc, #20]	@ (8000290 <main+0x70>)
 800027c:	2201      	movs	r2, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f001 fadc 	bl	800183c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BCD);
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	e7f1      	b.n	800026c <main+0x4c>
 8000288:	2000004c 	.word	0x2000004c
 800028c:	20000050 	.word	0x20000050
 8000290:	20000028 	.word	0x20000028

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b09d      	sub	sp, #116	@ 0x74
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2438      	movs	r4, #56	@ 0x38
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2338      	movs	r3, #56	@ 0x38
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f001 fce1 	bl	8001c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	2324      	movs	r3, #36	@ 0x24
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	0018      	movs	r0, r3
 80002b0:	2314      	movs	r3, #20
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f001 fcd9 	bl	8001c6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ba:	003b      	movs	r3, r7
 80002bc:	0018      	movs	r0, r3
 80002be:	2324      	movs	r3, #36	@ 0x24
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f001 fcd2 	bl	8001c6c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c8:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <SystemClock_Config+0xd0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a26      	ldr	r2, [pc, #152]	@ (8000368 <SystemClock_Config+0xd4>)
 80002ce:	401a      	ands	r2, r3
 80002d0:	4b24      	ldr	r3, [pc, #144]	@ (8000364 <SystemClock_Config+0xd0>)
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	0109      	lsls	r1, r1, #4
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002da:	0021      	movs	r1, r4
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	220a      	movs	r2, #10
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2201      	movs	r2, #1
 80002e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2210      	movs	r2, #16
 80002ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2201      	movs	r2, #1
 80002f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fa37 	bl	8000770 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000306:	f000 f895 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	2124      	movs	r1, #36	@ 0x24
 800030c:	187b      	adds	r3, r7, r1
 800030e:	220f      	movs	r2, #15
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2201      	movs	r2, #1
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2280      	movs	r2, #128	@ 0x80
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f000 fde2 	bl	8000ef8 <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000338:	f000 f87c 	bl	8000434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800033c:	003b      	movs	r3, r7
 800033e:	2220      	movs	r2, #32
 8000340:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000342:	003b      	movs	r3, r7
 8000344:	2280      	movs	r2, #128	@ 0x80
 8000346:	0292      	lsls	r2, r2, #10
 8000348:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	f000 ffa1 	bl	8001294 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000356:	f000 f86d 	bl	8000434 <Error_Handler>
  }
}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b01d      	add	sp, #116	@ 0x74
 8000360:	bd90      	pop	{r4, r7, pc}
 8000362:	46c0      	nop			@ (mov r8, r8)
 8000364:	40007000 	.word	0x40007000
 8000368:	ffffe7ff 	.word	0xffffe7ff

0800036c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	0018      	movs	r0, r3
 8000376:	2314      	movs	r3, #20
 8000378:	001a      	movs	r2, r3
 800037a:	2100      	movs	r1, #0
 800037c:	f001 fc76 	bl	8001c6c <memset>
  RTC_DateTypeDef sDate = {0};
 8000380:	003b      	movs	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000386:	4b29      	ldr	r3, [pc, #164]	@ (800042c <MX_RTC_Init+0xc0>)
 8000388:	4a29      	ldr	r2, [pc, #164]	@ (8000430 <MX_RTC_Init+0xc4>)
 800038a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <MX_RTC_Init+0xc0>)
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000392:	4b26      	ldr	r3, [pc, #152]	@ (800042c <MX_RTC_Init+0xc0>)
 8000394:	227f      	movs	r2, #127	@ 0x7f
 8000396:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <MX_RTC_Init+0xc0>)
 800039a:	22ff      	movs	r2, #255	@ 0xff
 800039c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800039e:	4b23      	ldr	r3, [pc, #140]	@ (800042c <MX_RTC_Init+0xc0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_RTC_Init+0xc0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003aa:	4b20      	ldr	r3, [pc, #128]	@ (800042c <MX_RTC_Init+0xc0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_RTC_Init+0xc0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003b6:	4b1d      	ldr	r3, [pc, #116]	@ (800042c <MX_RTC_Init+0xc0>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f8f9 	bl	80015b0 <HAL_RTC_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80003c2:	f000 f837 	bl	8000434 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2215      	movs	r2, #21
 80003ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x27;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2227      	movs	r2, #39	@ 0x27
 80003d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003e4:	1d39      	adds	r1, r7, #4
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_RTC_Init+0xc0>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 f97c 	bl	80016e8 <HAL_RTC_SetTime>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80003f4:	f000 f81e 	bl	8000434 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f8:	003b      	movs	r3, r7
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 80003fe:	003b      	movs	r3, r7
 8000400:	2207      	movs	r2, #7
 8000402:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x28;
 8000404:	003b      	movs	r3, r7
 8000406:	2228      	movs	r2, #40	@ 0x28
 8000408:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 800040a:	003b      	movs	r3, r7
 800040c:	2225      	movs	r2, #37	@ 0x25
 800040e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000410:	0039      	movs	r1, r7
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_RTC_Init+0xc0>)
 8000414:	2201      	movs	r2, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fa6e 	bl	80018f8 <HAL_RTC_SetDate>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000420:	f000 f808 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b006      	add	sp, #24
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000028 	.word	0x20000028
 8000430:	40002800 	.word	0x40002800

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	e7fd      	b.n	800043c <Error_Handler+0x8>

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000444:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <HAL_MspInit+0x24>)
 8000446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <HAL_MspInit+0x24>)
 800044a:	2101      	movs	r1, #1
 800044c:	430a      	orrs	r2, r1
 800044e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000450:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <HAL_MspInit+0x24>)
 8000452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000454:	4b03      	ldr	r3, [pc, #12]	@ (8000464 <HAL_MspInit+0x24>)
 8000456:	2180      	movs	r1, #128	@ 0x80
 8000458:	0549      	lsls	r1, r1, #21
 800045a:	430a      	orrs	r2, r1
 800045c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000

08000468 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a06      	ldr	r2, [pc, #24]	@ (8000490 <HAL_RTC_MspInit+0x28>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <HAL_RTC_MspInit+0x2c>)
 800047c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800047e:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <HAL_RTC_MspInit+0x2c>)
 8000480:	2180      	movs	r1, #128	@ 0x80
 8000482:	02c9      	lsls	r1, r1, #11
 8000484:	430a      	orrs	r2, r1
 8000486:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40002800 	.word	0x40002800
 8000494:	40021000 	.word	0x40021000

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	e7fd      	b.n	800049c <NMI_Handler+0x4>

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	e7fd      	b.n	80004a4 <HardFault_Handler+0x4>

080004a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004ac:	46c0      	nop			@ (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c0:	f000 f886 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80004d4:	480d      	ldr	r0, [pc, #52]	@ (800050c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d8:	f7ff fff7 	bl	80004ca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	@ (8000510 <LoopForever+0x6>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	@ (8000514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <LoopForever+0xe>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000520 <LoopForever+0x16>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000502:	f001 fbbb 	bl	8001c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000506:	f7ff fe8b 	bl	8000220 <main>

0800050a <LoopForever>:

LoopForever:
    b LoopForever
 800050a:	e7fe      	b.n	800050a <LoopForever>
  ldr   r0, =_estack
 800050c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000518:	08001d00 	.word	0x08001d00
  ldr r2, =_sbss
 800051c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000520:	20000068 	.word	0x20000068

08000524 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_COMP_IRQHandler>
	...

08000528 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <HAL_Init+0x3c>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_Init+0x3c>)
 800053a:	2140      	movs	r1, #64	@ 0x40
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000540:	2000      	movs	r0, #0
 8000542:	f000 f811 	bl	8000568 <HAL_InitTick>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d003      	beq.n	8000552 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e001      	b.n	8000556 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000552:	f7ff ff75 	bl	8000440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	40022000 	.word	0x40022000

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <HAL_InitTick+0x5c>)
 8000572:	681c      	ldr	r4, [r3, #0]
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <HAL_InitTick+0x60>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	0019      	movs	r1, r3
 800057a:	23fa      	movs	r3, #250	@ 0xfa
 800057c:	0098      	lsls	r0, r3, #2
 800057e:	f7ff fdc3 	bl	8000108 <__udivsi3>
 8000582:	0003      	movs	r3, r0
 8000584:	0019      	movs	r1, r3
 8000586:	0020      	movs	r0, r4
 8000588:	f7ff fdbe 	bl	8000108 <__udivsi3>
 800058c:	0003      	movs	r3, r0
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f8e1 	bl	8000756 <HAL_SYSTICK_Config>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	e00f      	b.n	80005bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d80b      	bhi.n	80005ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	2301      	movs	r3, #1
 80005a6:	425b      	negs	r3, r3
 80005a8:	2200      	movs	r2, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8be 	bl	800072c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <HAL_InitTick+0x64>)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b003      	add	sp, #12
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HAL_IncTick+0x1c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	001a      	movs	r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <HAL_IncTick+0x20>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	18d2      	adds	r2, r2, r3
 80005e0:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <HAL_IncTick+0x20>)
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000064 	.word	0x20000064

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b02      	ldr	r3, [pc, #8]	@ (8000604 <HAL_GetTick+0x10>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000064 	.word	0x20000064

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	0002      	movs	r2, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b7f      	cmp	r3, #127	@ 0x7f
 800061c:	d828      	bhi.n	8000670 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061e:	4a2f      	ldr	r2, [pc, #188]	@ (80006dc <__NVIC_SetPriority+0xd4>)
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b25b      	sxtb	r3, r3
 8000626:	089b      	lsrs	r3, r3, #2
 8000628:	33c0      	adds	r3, #192	@ 0xc0
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	589b      	ldr	r3, [r3, r2]
 800062e:	1dfa      	adds	r2, r7, #7
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	0011      	movs	r1, r2
 8000634:	2203      	movs	r2, #3
 8000636:	400a      	ands	r2, r1
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	21ff      	movs	r1, #255	@ 0xff
 800063c:	4091      	lsls	r1, r2
 800063e:	000a      	movs	r2, r1
 8000640:	43d2      	mvns	r2, r2
 8000642:	401a      	ands	r2, r3
 8000644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	019b      	lsls	r3, r3, #6
 800064a:	22ff      	movs	r2, #255	@ 0xff
 800064c:	401a      	ands	r2, r3
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	0018      	movs	r0, r3
 8000654:	2303      	movs	r3, #3
 8000656:	4003      	ands	r3, r0
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800065c:	481f      	ldr	r0, [pc, #124]	@ (80006dc <__NVIC_SetPriority+0xd4>)
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	430a      	orrs	r2, r1
 8000668:	33c0      	adds	r3, #192	@ 0xc0
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800066e:	e031      	b.n	80006d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <__NVIC_SetPriority+0xd8>)
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	0019      	movs	r1, r3
 8000678:	230f      	movs	r3, #15
 800067a:	400b      	ands	r3, r1
 800067c:	3b08      	subs	r3, #8
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	3306      	adds	r3, #6
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	18d3      	adds	r3, r2, r3
 8000686:	3304      	adds	r3, #4
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1dfa      	adds	r2, r7, #7
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	0011      	movs	r1, r2
 8000690:	2203      	movs	r2, #3
 8000692:	400a      	ands	r2, r1
 8000694:	00d2      	lsls	r2, r2, #3
 8000696:	21ff      	movs	r1, #255	@ 0xff
 8000698:	4091      	lsls	r1, r2
 800069a:	000a      	movs	r2, r1
 800069c:	43d2      	mvns	r2, r2
 800069e:	401a      	ands	r2, r3
 80006a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	019b      	lsls	r3, r3, #6
 80006a6:	22ff      	movs	r2, #255	@ 0xff
 80006a8:	401a      	ands	r2, r3
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	2303      	movs	r3, #3
 80006b2:	4003      	ands	r3, r0
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <__NVIC_SetPriority+0xd8>)
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	001c      	movs	r4, r3
 80006c0:	230f      	movs	r3, #15
 80006c2:	4023      	ands	r3, r4
 80006c4:	3b08      	subs	r3, #8
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	430a      	orrs	r2, r1
 80006ca:	3306      	adds	r3, #6
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	18c3      	adds	r3, r0, r3
 80006d0:	3304      	adds	r3, #4
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b003      	add	sp, #12
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	045b      	lsls	r3, r3, #17
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d301      	bcc.n	80006fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f8:	2301      	movs	r3, #1
 80006fa:	e010      	b.n	800071e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <SysTick_Config+0x44>)
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	3a01      	subs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000704:	2301      	movs	r3, #1
 8000706:	425b      	negs	r3, r3
 8000708:	2103      	movs	r1, #3
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff ff7c 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <SysTick_Config+0x44>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <SysTick_Config+0x44>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	210f      	movs	r1, #15
 8000738:	187b      	adds	r3, r7, r1
 800073a:	1c02      	adds	r2, r0, #0
 800073c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	187b      	adds	r3, r7, r1
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b25b      	sxtb	r3, r3
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff ff5d 	bl	8000608 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffbf 	bl	80006e4 <SysTick_Config>
 8000766:	0003      	movs	r3, r0
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	b002      	add	sp, #8
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d102      	bne.n	8000784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	f000 fbaf 	bl	8000ee2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000784:	4bcf      	ldr	r3, [pc, #828]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	220c      	movs	r2, #12
 800078a:	4013      	ands	r3, r2
 800078c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800078e:	4bcd      	ldr	r3, [pc, #820]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	025b      	lsls	r3, r3, #9
 8000796:	4013      	ands	r3, r2
 8000798:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	d100      	bne.n	80007a6 <HAL_RCC_OscConfig+0x36>
 80007a4:	e07e      	b.n	80008a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d007      	beq.n	80007bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	2b0c      	cmp	r3, #12
 80007b0:	d112      	bne.n	80007d8 <HAL_RCC_OscConfig+0x68>
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	025b      	lsls	r3, r3, #9
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d10d      	bne.n	80007d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007bc:	4bc1      	ldr	r3, [pc, #772]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	029b      	lsls	r3, r3, #10
 80007c4:	4013      	ands	r3, r2
 80007c6:	d100      	bne.n	80007ca <HAL_RCC_OscConfig+0x5a>
 80007c8:	e06b      	b.n	80008a2 <HAL_RCC_OscConfig+0x132>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d167      	bne.n	80008a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f000 fb85 	bl	8000ee2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	2380      	movs	r3, #128	@ 0x80
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d107      	bne.n	80007f4 <HAL_RCC_OscConfig+0x84>
 80007e4:	4bb7      	ldr	r3, [pc, #732]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4bb6      	ldr	r3, [pc, #728]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	0249      	lsls	r1, r1, #9
 80007ee:	430a      	orrs	r2, r1
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	e027      	b.n	8000844 <HAL_RCC_OscConfig+0xd4>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	23a0      	movs	r3, #160	@ 0xa0
 80007fa:	02db      	lsls	r3, r3, #11
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d10e      	bne.n	800081e <HAL_RCC_OscConfig+0xae>
 8000800:	4bb0      	ldr	r3, [pc, #704]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4baf      	ldr	r3, [pc, #700]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	02c9      	lsls	r1, r1, #11
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	4bad      	ldr	r3, [pc, #692]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4bac      	ldr	r3, [pc, #688]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000814:	2180      	movs	r1, #128	@ 0x80
 8000816:	0249      	lsls	r1, r1, #9
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	e012      	b.n	8000844 <HAL_RCC_OscConfig+0xd4>
 800081e:	4ba9      	ldr	r3, [pc, #676]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4ba8      	ldr	r3, [pc, #672]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000824:	49a8      	ldr	r1, [pc, #672]	@ (8000ac8 <HAL_RCC_OscConfig+0x358>)
 8000826:	400a      	ands	r2, r1
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	4ba6      	ldr	r3, [pc, #664]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	025b      	lsls	r3, r3, #9
 8000832:	4013      	ands	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4ba2      	ldr	r3, [pc, #648]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4ba1      	ldr	r3, [pc, #644]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 800083e:	49a3      	ldr	r1, [pc, #652]	@ (8000acc <HAL_RCC_OscConfig+0x35c>)
 8000840:	400a      	ands	r2, r1
 8000842:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d015      	beq.n	8000878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800084c:	f7ff fed2 	bl	80005f4 <HAL_GetTick>
 8000850:	0003      	movs	r3, r0
 8000852:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000854:	e009      	b.n	800086a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000856:	f7ff fecd 	bl	80005f4 <HAL_GetTick>
 800085a:	0002      	movs	r2, r0
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	2b64      	cmp	r3, #100	@ 0x64
 8000862:	d902      	bls.n	800086a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000864:	2303      	movs	r3, #3
 8000866:	f000 fb3c 	bl	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800086a:	4b96      	ldr	r3, [pc, #600]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	029b      	lsls	r3, r3, #10
 8000872:	4013      	ands	r3, r2
 8000874:	d0ef      	beq.n	8000856 <HAL_RCC_OscConfig+0xe6>
 8000876:	e015      	b.n	80008a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000878:	f7ff febc 	bl	80005f4 <HAL_GetTick>
 800087c:	0003      	movs	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000880:	e008      	b.n	8000894 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000882:	f7ff feb7 	bl	80005f4 <HAL_GetTick>
 8000886:	0002      	movs	r2, r0
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	2b64      	cmp	r3, #100	@ 0x64
 800088e:	d901      	bls.n	8000894 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000890:	2303      	movs	r3, #3
 8000892:	e326      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000894:	4b8b      	ldr	r3, [pc, #556]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	029b      	lsls	r3, r3, #10
 800089c:	4013      	ands	r3, r2
 800089e:	d1f0      	bne.n	8000882 <HAL_RCC_OscConfig+0x112>
 80008a0:	e000      	b.n	80008a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2202      	movs	r2, #2
 80008aa:	4013      	ands	r3, r2
 80008ac:	d100      	bne.n	80008b0 <HAL_RCC_OscConfig+0x140>
 80008ae:	e08b      	b.n	80009c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	2b0c      	cmp	r3, #12
 80008c0:	d13e      	bne.n	8000940 <HAL_RCC_OscConfig+0x1d0>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d13b      	bne.n	8000940 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80008c8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2204      	movs	r2, #4
 80008ce:	4013      	ands	r3, r2
 80008d0:	d004      	beq.n	80008dc <HAL_RCC_OscConfig+0x16c>
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d101      	bne.n	80008dc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	e302      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008dc:	4b79      	ldr	r3, [pc, #484]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a7b      	ldr	r2, [pc, #492]	@ (8000ad0 <HAL_RCC_OscConfig+0x360>)
 80008e2:	4013      	ands	r3, r2
 80008e4:	0019      	movs	r1, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	021a      	lsls	r2, r3, #8
 80008ec:	4b75      	ldr	r3, [pc, #468]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80008ee:	430a      	orrs	r2, r1
 80008f0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008f2:	4b74      	ldr	r3, [pc, #464]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2209      	movs	r2, #9
 80008f8:	4393      	bics	r3, r2
 80008fa:	0019      	movs	r1, r3
 80008fc:	4b71      	ldr	r3, [pc, #452]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	430a      	orrs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000904:	f000 fc40 	bl	8001188 <HAL_RCC_GetSysClockFreq>
 8000908:	0001      	movs	r1, r0
 800090a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	220f      	movs	r2, #15
 8000912:	4013      	ands	r3, r2
 8000914:	4a6f      	ldr	r2, [pc, #444]	@ (8000ad4 <HAL_RCC_OscConfig+0x364>)
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	000a      	movs	r2, r1
 800091a:	40da      	lsrs	r2, r3
 800091c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ad8 <HAL_RCC_OscConfig+0x368>)
 800091e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000920:	4b6e      	ldr	r3, [pc, #440]	@ (8000adc <HAL_RCC_OscConfig+0x36c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2513      	movs	r5, #19
 8000926:	197c      	adds	r4, r7, r5
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff fe1d 	bl	8000568 <HAL_InitTick>
 800092e:	0003      	movs	r3, r0
 8000930:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000932:	197b      	adds	r3, r7, r5
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d046      	beq.n	80009c8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800093a:	197b      	adds	r3, r7, r5
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	e2d0      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d027      	beq.n	8000996 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000946:	4b5f      	ldr	r3, [pc, #380]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2209      	movs	r2, #9
 800094c:	4393      	bics	r3, r2
 800094e:	0019      	movs	r1, r3
 8000950:	4b5c      	ldr	r3, [pc, #368]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	430a      	orrs	r2, r1
 8000956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000958:	f7ff fe4c 	bl	80005f4 <HAL_GetTick>
 800095c:	0003      	movs	r3, r0
 800095e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000960:	e008      	b.n	8000974 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000962:	f7ff fe47 	bl	80005f4 <HAL_GetTick>
 8000966:	0002      	movs	r2, r0
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b02      	cmp	r3, #2
 800096e:	d901      	bls.n	8000974 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000970:	2303      	movs	r3, #3
 8000972:	e2b6      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000974:	4b53      	ldr	r3, [pc, #332]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2204      	movs	r2, #4
 800097a:	4013      	ands	r3, r2
 800097c:	d0f1      	beq.n	8000962 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097e:	4b51      	ldr	r3, [pc, #324]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	4a53      	ldr	r2, [pc, #332]	@ (8000ad0 <HAL_RCC_OscConfig+0x360>)
 8000984:	4013      	ands	r3, r2
 8000986:	0019      	movs	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	021a      	lsls	r2, r3, #8
 800098e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000990:	430a      	orrs	r2, r1
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	e018      	b.n	80009c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000996:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 800099c:	2101      	movs	r1, #1
 800099e:	438a      	bics	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a2:	f7ff fe27 	bl	80005f4 <HAL_GetTick>
 80009a6:	0003      	movs	r3, r0
 80009a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80009aa:	e008      	b.n	80009be <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ac:	f7ff fe22 	bl	80005f4 <HAL_GetTick>
 80009b0:	0002      	movs	r2, r0
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d901      	bls.n	80009be <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e291      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80009be:	4b41      	ldr	r3, [pc, #260]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2204      	movs	r2, #4
 80009c4:	4013      	ands	r3, r2
 80009c6:	d1f1      	bne.n	80009ac <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2210      	movs	r2, #16
 80009ce:	4013      	ands	r3, r2
 80009d0:	d100      	bne.n	80009d4 <HAL_RCC_OscConfig+0x264>
 80009d2:	e0a1      	b.n	8000b18 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d140      	bne.n	8000a5c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009da:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4013      	ands	r3, r2
 80009e4:	d005      	beq.n	80009f2 <HAL_RCC_OscConfig+0x282>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e277      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae0 <HAL_RCC_OscConfig+0x370>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	0019      	movs	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a00:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a02:	430a      	orrs	r2, r1
 8000a04:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	0a19      	lsrs	r1, r3, #8
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	061a      	lsls	r2, r3, #24
 8000a14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a16:	430a      	orrs	r2, r1
 8000a18:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a1e:	0b5b      	lsrs	r3, r3, #13
 8000a20:	3301      	adds	r3, #1
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	0212      	lsls	r2, r2, #8
 8000a26:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	091b      	lsrs	r3, r3, #4
 8000a2e:	210f      	movs	r1, #15
 8000a30:	400b      	ands	r3, r1
 8000a32:	4928      	ldr	r1, [pc, #160]	@ (8000ad4 <HAL_RCC_OscConfig+0x364>)
 8000a34:	5ccb      	ldrb	r3, [r1, r3]
 8000a36:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <HAL_RCC_OscConfig+0x368>)
 8000a3a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000a3c:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <HAL_RCC_OscConfig+0x36c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2513      	movs	r5, #19
 8000a42:	197c      	adds	r4, r7, r5
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fd8f 	bl	8000568 <HAL_InitTick>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000a4e:	197b      	adds	r3, r7, r5
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d060      	beq.n	8000b18 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000a56:	197b      	adds	r3, r7, r5
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	e242      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d03f      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0049      	lsls	r1, r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a72:	f7ff fdbf 	bl	80005f4 <HAL_GetTick>
 8000a76:	0003      	movs	r3, r0
 8000a78:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a7a:	e008      	b.n	8000a8e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fdba 	bl	80005f4 <HAL_GetTick>
 8000a80:	0002      	movs	r2, r0
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d901      	bls.n	8000a8e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e229      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	2380      	movs	r3, #128	@ 0x80
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4013      	ands	r3, r2
 8000a98:	d0f0      	beq.n	8000a7c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <HAL_RCC_OscConfig+0x370>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	0a19      	lsrs	r1, r3, #8
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	061a      	lsls	r2, r3, #24
 8000abc:	4b01      	ldr	r3, [pc, #4]	@ (8000ac4 <HAL_RCC_OscConfig+0x354>)
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	e029      	b.n	8000b18 <HAL_RCC_OscConfig+0x3a8>
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	fffeffff 	.word	0xfffeffff
 8000acc:	fffbffff 	.word	0xfffbffff
 8000ad0:	ffffe0ff 	.word	0xffffe0ff
 8000ad4:	08001cdc 	.word	0x08001cdc
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ae4:	4bbd      	ldr	r3, [pc, #756]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4bbc      	ldr	r3, [pc, #752]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000aea:	49bd      	ldr	r1, [pc, #756]	@ (8000de0 <HAL_RCC_OscConfig+0x670>)
 8000aec:	400a      	ands	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f7ff fd80 	bl	80005f4 <HAL_GetTick>
 8000af4:	0003      	movs	r3, r0
 8000af6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000af8:	e008      	b.n	8000b0c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000afa:	f7ff fd7b 	bl	80005f4 <HAL_GetTick>
 8000afe:	0002      	movs	r2, r0
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e1ea      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000b0c:	4bb3      	ldr	r3, [pc, #716]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2380      	movs	r3, #128	@ 0x80
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4013      	ands	r3, r2
 8000b16:	d1f0      	bne.n	8000afa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d036      	beq.n	8000b90 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d019      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b2a:	4bac      	ldr	r3, [pc, #688]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b2e:	4bab      	ldr	r3, [pc, #684]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	430a      	orrs	r2, r1
 8000b34:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b36:	f7ff fd5d 	bl	80005f4 <HAL_GetTick>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b40:	f7ff fd58 	bl	80005f4 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e1c7      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b52:	4ba2      	ldr	r3, [pc, #648]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b56:	2202      	movs	r2, #2
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d0f1      	beq.n	8000b40 <HAL_RCC_OscConfig+0x3d0>
 8000b5c:	e018      	b.n	8000b90 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b62:	4b9e      	ldr	r3, [pc, #632]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	438a      	bics	r2, r1
 8000b68:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fd43 	bl	80005f4 <HAL_GetTick>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b72:	e008      	b.n	8000b86 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b74:	f7ff fd3e 	bl	80005f4 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e1ad      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b86:	4b95      	ldr	r3, [pc, #596]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d1f1      	bne.n	8000b74 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2204      	movs	r2, #4
 8000b96:	4013      	ands	r3, r2
 8000b98:	d100      	bne.n	8000b9c <HAL_RCC_OscConfig+0x42c>
 8000b9a:	e0ae      	b.n	8000cfa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b9c:	2027      	movs	r0, #39	@ 0x27
 8000b9e:	183b      	adds	r3, r7, r0
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	055b      	lsls	r3, r3, #21
 8000bac:	4013      	ands	r3, r2
 8000bae:	d109      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bb4:	4b89      	ldr	r3, [pc, #548]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	0549      	lsls	r1, r1, #21
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8000bbe:	183b      	adds	r3, r7, r0
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc4:	4b87      	ldr	r3, [pc, #540]	@ (8000de4 <HAL_RCC_OscConfig+0x674>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d11a      	bne.n	8000c06 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bd0:	4b84      	ldr	r3, [pc, #528]	@ (8000de4 <HAL_RCC_OscConfig+0x674>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b83      	ldr	r3, [pc, #524]	@ (8000de4 <HAL_RCC_OscConfig+0x674>)
 8000bd6:	2180      	movs	r1, #128	@ 0x80
 8000bd8:	0049      	lsls	r1, r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fd09 	bl	80005f4 <HAL_GetTick>
 8000be2:	0003      	movs	r3, r0
 8000be4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be8:	f7ff fd04 	bl	80005f4 <HAL_GetTick>
 8000bec:	0002      	movs	r2, r0
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b64      	cmp	r3, #100	@ 0x64
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e173      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8000de4 <HAL_RCC_OscConfig+0x674>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	2380      	movs	r3, #128	@ 0x80
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4013      	ands	r3, r2
 8000c04:	d0f0      	beq.n	8000be8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d107      	bne.n	8000c22 <HAL_RCC_OscConfig+0x4b2>
 8000c12:	4b72      	ldr	r3, [pc, #456]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c16:	4b71      	ldr	r3, [pc, #452]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c20:	e031      	b.n	8000c86 <HAL_RCC_OscConfig+0x516>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x4d4>
 8000c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c2e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c30:	496b      	ldr	r1, [pc, #428]	@ (8000de0 <HAL_RCC_OscConfig+0x670>)
 8000c32:	400a      	ands	r2, r1
 8000c34:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c36:	4b69      	ldr	r3, [pc, #420]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c3a:	4b68      	ldr	r3, [pc, #416]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c3c:	496a      	ldr	r1, [pc, #424]	@ (8000de8 <HAL_RCC_OscConfig+0x678>)
 8000c3e:	400a      	ands	r2, r1
 8000c40:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c42:	e020      	b.n	8000c86 <HAL_RCC_OscConfig+0x516>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	23a0      	movs	r3, #160	@ 0xa0
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d10e      	bne.n	8000c6e <HAL_RCC_OscConfig+0x4fe>
 8000c50:	4b62      	ldr	r3, [pc, #392]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c54:	4b61      	ldr	r3, [pc, #388]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	00c9      	lsls	r1, r1, #3
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c62:	4b5e      	ldr	r3, [pc, #376]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c6c:	e00b      	b.n	8000c86 <HAL_RCC_OscConfig+0x516>
 8000c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c72:	4b5a      	ldr	r3, [pc, #360]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c74:	495a      	ldr	r1, [pc, #360]	@ (8000de0 <HAL_RCC_OscConfig+0x670>)
 8000c76:	400a      	ands	r2, r1
 8000c78:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c7a:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c7e:	4b57      	ldr	r3, [pc, #348]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000c80:	4959      	ldr	r1, [pc, #356]	@ (8000de8 <HAL_RCC_OscConfig+0x678>)
 8000c82:	400a      	ands	r2, r1
 8000c84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d015      	beq.n	8000cba <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c8e:	f7ff fcb1 	bl	80005f4 <HAL_GetTick>
 8000c92:	0003      	movs	r3, r0
 8000c94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c96:	e009      	b.n	8000cac <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c98:	f7ff fcac 	bl	80005f4 <HAL_GetTick>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	4a52      	ldr	r2, [pc, #328]	@ (8000dec <HAL_RCC_OscConfig+0x67c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d901      	bls.n	8000cac <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e11a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000cac:	4b4b      	ldr	r3, [pc, #300]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000cae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d0ef      	beq.n	8000c98 <HAL_RCC_OscConfig+0x528>
 8000cb8:	e014      	b.n	8000ce4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cba:	f7ff fc9b 	bl	80005f4 <HAL_GetTick>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000cc2:	e009      	b.n	8000cd8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fc96 	bl	80005f4 <HAL_GetTick>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4a47      	ldr	r2, [pc, #284]	@ (8000dec <HAL_RCC_OscConfig+0x67c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e104      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000cd8:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000cda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000cdc:	2380      	movs	r3, #128	@ 0x80
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d1ef      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ce4:	2327      	movs	r3, #39	@ 0x27
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d105      	bne.n	8000cfa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cee:	4b3b      	ldr	r3, [pc, #236]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000cf4:	493e      	ldr	r1, [pc, #248]	@ (8000df0 <HAL_RCC_OscConfig+0x680>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2220      	movs	r2, #32
 8000d00:	4013      	ands	r3, r2
 8000d02:	d049      	beq.n	8000d98 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d026      	beq.n	8000d5a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000d0c:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	430a      	orrs	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d24:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <HAL_RCC_OscConfig+0x684>)
 8000d26:	6a1a      	ldr	r2, [r3, #32]
 8000d28:	4b32      	ldr	r3, [pc, #200]	@ (8000df4 <HAL_RCC_OscConfig+0x684>)
 8000d2a:	2180      	movs	r1, #128	@ 0x80
 8000d2c:	0189      	lsls	r1, r1, #6
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d32:	f7ff fc5f 	bl	80005f4 <HAL_GetTick>
 8000d36:	0003      	movs	r3, r0
 8000d38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d3c:	f7ff fc5a 	bl	80005f4 <HAL_GetTick>
 8000d40:	0002      	movs	r2, r0
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e0c9      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	2202      	movs	r2, #2
 8000d54:	4013      	ands	r3, r2
 8000d56:	d0f1      	beq.n	8000d3c <HAL_RCC_OscConfig+0x5cc>
 8000d58:	e01e      	b.n	8000d98 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	438a      	bics	r2, r1
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <HAL_RCC_OscConfig+0x684>)
 8000d68:	6a1a      	ldr	r2, [r3, #32]
 8000d6a:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <HAL_RCC_OscConfig+0x684>)
 8000d6c:	4922      	ldr	r1, [pc, #136]	@ (8000df8 <HAL_RCC_OscConfig+0x688>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc3f 	bl	80005f4 <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d7c:	f7ff fc3a 	bl	80005f4 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0a9      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2202      	movs	r2, #2
 8000d94:	4013      	ands	r3, r2
 8000d96:	d1f1      	bne.n	8000d7c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d100      	bne.n	8000da2 <HAL_RCC_OscConfig+0x632>
 8000da0:	e09e      	b.n	8000ee0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	2b0c      	cmp	r3, #12
 8000da6:	d100      	bne.n	8000daa <HAL_RCC_OscConfig+0x63a>
 8000da8:	e077      	b.n	8000e9a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d158      	bne.n	8000e64 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_RCC_OscConfig+0x66c>)
 8000db8:	4910      	ldr	r1, [pc, #64]	@ (8000dfc <HAL_RCC_OscConfig+0x68c>)
 8000dba:	400a      	ands	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fc19 	bl	80005f4 <HAL_GetTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000dc6:	e01b      	b.n	8000e00 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc8:	f7ff fc14 	bl	80005f4 <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d914      	bls.n	8000e00 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e083      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	fffffeff 	.word	0xfffffeff
 8000de4:	40007000 	.word	0x40007000
 8000de8:	fffffbff 	.word	0xfffffbff
 8000dec:	00001388 	.word	0x00001388
 8000df0:	efffffff 	.word	0xefffffff
 8000df4:	40010000 	.word	0x40010000
 8000df8:	ffffdfff 	.word	0xffffdfff
 8000dfc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e00:	4b3a      	ldr	r3, [pc, #232]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	049b      	lsls	r3, r3, #18
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d1dd      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e0c:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	4a37      	ldr	r2, [pc, #220]	@ (8000ef0 <HAL_RCC_OscConfig+0x780>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e24:	431a      	orrs	r2, r3
 8000e26:	4b31      	ldr	r3, [pc, #196]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e32:	2180      	movs	r1, #128	@ 0x80
 8000e34:	0449      	lsls	r1, r1, #17
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fbdb 	bl	80005f4 <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e44:	f7ff fbd6 	bl	80005f4 <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e045      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000e56:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	049b      	lsls	r3, r3, #18
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0x6d4>
 8000e62:	e03d      	b.n	8000ee0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e6a:	4922      	ldr	r1, [pc, #136]	@ (8000ef4 <HAL_RCC_OscConfig+0x784>)
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fbc0 	bl	80005f4 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e7a:	f7ff fbbb 	bl	80005f4 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e02a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	049b      	lsls	r3, r3, #18
 8000e94:	4013      	ands	r3, r2
 8000e96:	d1f0      	bne.n	8000e7a <HAL_RCC_OscConfig+0x70a>
 8000e98:	e022      	b.n	8000ee0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e01d      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <HAL_RCC_OscConfig+0x77c>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	2380      	movs	r3, #128	@ 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d10f      	bne.n	8000edc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	23f0      	movs	r3, #240	@ 0xf0
 8000ec0:	039b      	lsls	r3, r3, #14
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d107      	bne.n	8000edc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	23c0      	movs	r3, #192	@ 0xc0
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d001      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b00a      	add	sp, #40	@ 0x28
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	ff02ffff 	.word	0xff02ffff
 8000ef4:	feffffff 	.word	0xfeffffff

08000ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e128      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f0c:	4b96      	ldr	r3, [pc, #600]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d91e      	bls.n	8000f58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1a:	4b93      	ldr	r3, [pc, #588]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4393      	bics	r3, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	4b90      	ldr	r3, [pc, #576]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000f2c:	f7ff fb62 	bl	80005f4 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f34:	e009      	b.n	8000f4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f36:	f7ff fb5d 	bl	80005f4 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a8a      	ldr	r2, [pc, #552]	@ (800116c <HAL_RCC_ClockConfig+0x274>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e109      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f4a:	4b87      	ldr	r3, [pc, #540]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d009      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f62:	4b83      	ldr	r3, [pc, #524]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	22f0      	movs	r2, #240	@ 0xf0
 8000f68:	4393      	bics	r3, r2
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	4b7f      	ldr	r3, [pc, #508]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000f72:	430a      	orrs	r2, r1
 8000f74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d100      	bne.n	8000f82 <HAL_RCC_ClockConfig+0x8a>
 8000f80:	e089      	b.n	8001096 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d107      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f8a:	4b79      	ldr	r3, [pc, #484]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d120      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0e1      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d107      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000fa2:	4b73      	ldr	r3, [pc, #460]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	049b      	lsls	r3, r3, #18
 8000faa:	4013      	ands	r3, r2
 8000fac:	d114      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0d5      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fba:	4b6d      	ldr	r3, [pc, #436]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d109      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0ca      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fc8:	4b69      	ldr	r3, [pc, #420]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0c2      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fd8:	4b65      	ldr	r3, [pc, #404]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4393      	bics	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4b62      	ldr	r3, [pc, #392]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fec:	f7ff fb02 	bl	80005f4 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d111      	bne.n	8001020 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ffc:	e009      	b.n	8001012 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffe:	f7ff faf9 	bl	80005f4 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	4a58      	ldr	r2, [pc, #352]	@ (800116c <HAL_RCC_ClockConfig+0x274>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e0a5      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001012:	4b57      	ldr	r3, [pc, #348]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	220c      	movs	r2, #12
 8001018:	4013      	ands	r3, r2
 800101a:	2b08      	cmp	r3, #8
 800101c:	d1ef      	bne.n	8000ffe <HAL_RCC_ClockConfig+0x106>
 800101e:	e03a      	b.n	8001096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d111      	bne.n	800104c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	e009      	b.n	800103e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102a:	f7ff fae3 	bl	80005f4 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4a4d      	ldr	r2, [pc, #308]	@ (800116c <HAL_RCC_ClockConfig+0x274>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e08f      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800103e:	4b4c      	ldr	r3, [pc, #304]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	220c      	movs	r2, #12
 8001044:	4013      	ands	r3, r2
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d1ef      	bne.n	800102a <HAL_RCC_ClockConfig+0x132>
 800104a:	e024      	b.n	8001096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d11b      	bne.n	800108c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001054:	e009      	b.n	800106a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001056:	f7ff facd 	bl	80005f4 <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4a42      	ldr	r2, [pc, #264]	@ (800116c <HAL_RCC_ClockConfig+0x274>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e079      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	220c      	movs	r2, #12
 8001070:	4013      	ands	r3, r2
 8001072:	2b04      	cmp	r3, #4
 8001074:	d1ef      	bne.n	8001056 <HAL_RCC_ClockConfig+0x15e>
 8001076:	e00e      	b.n	8001096 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001078:	f7ff fabc 	bl	80005f4 <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	4a3a      	ldr	r2, [pc, #232]	@ (800116c <HAL_RCC_ClockConfig+0x274>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e068      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800108c:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	220c      	movs	r2, #12
 8001092:	4013      	ands	r3, r2
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001096:	4b34      	ldr	r3, [pc, #208]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2201      	movs	r2, #1
 800109c:	4013      	ands	r3, r2
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d21e      	bcs.n	80010e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4393      	bics	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010b6:	f7ff fa9d 	bl	80005f4 <HAL_GetTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	e009      	b.n	80010d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c0:	f7ff fa98 	bl	80005f4 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a28      	ldr	r2, [pc, #160]	@ (800116c <HAL_RCC_ClockConfig+0x274>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e044      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <HAL_RCC_ClockConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d1ee      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d009      	beq.n	8001100 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ec:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a20      	ldr	r2, [pc, #128]	@ (8001174 <HAL_RCC_ClockConfig+0x27c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	0019      	movs	r1, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2208      	movs	r2, #8
 8001106:	4013      	ands	r3, r2
 8001108:	d00a      	beq.n	8001120 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a1a      	ldr	r2, [pc, #104]	@ (8001178 <HAL_RCC_ClockConfig+0x280>)
 8001110:	4013      	ands	r3, r2
 8001112:	0019      	movs	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	00da      	lsls	r2, r3, #3
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001120:	f000 f832 	bl	8001188 <HAL_RCC_GetSysClockFreq>
 8001124:	0001      	movs	r1, r0
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_RCC_ClockConfig+0x278>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	220f      	movs	r2, #15
 800112e:	4013      	ands	r3, r2
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <HAL_RCC_ClockConfig+0x284>)
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	000a      	movs	r2, r1
 8001136:	40da      	lsrs	r2, r3
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_RCC_ClockConfig+0x288>)
 800113a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_RCC_ClockConfig+0x28c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	250b      	movs	r5, #11
 8001142:	197c      	adds	r4, r7, r5
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fa0f 	bl	8000568 <HAL_InitTick>
 800114a:	0003      	movs	r3, r0
 800114c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800114e:	197b      	adds	r3, r7, r5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001156:	197b      	adds	r3, r7, r5
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	e000      	b.n	800115e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	40022000 	.word	0x40022000
 800116c:	00001388 	.word	0x00001388
 8001170:	40021000 	.word	0x40021000
 8001174:	fffff8ff 	.word	0xfffff8ff
 8001178:	ffffc7ff 	.word	0xffffc7ff
 800117c:	08001cdc 	.word	0x08001cdc
 8001180:	20000000 	.word	0x20000000
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	220c      	movs	r2, #12
 8001198:	4013      	ands	r3, r2
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d013      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x3e>
 800119e:	d85c      	bhi.n	800125a <HAL_RCC_GetSysClockFreq+0xd2>
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d002      	beq.n	80011aa <HAL_RCC_GetSysClockFreq+0x22>
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d00b      	beq.n	80011c0 <HAL_RCC_GetSysClockFreq+0x38>
 80011a8:	e057      	b.n	800125a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xf8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2210      	movs	r2, #16
 80011b0:	4013      	ands	r3, r2
 80011b2:	d002      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <HAL_RCC_GetSysClockFreq+0xfc>)
 80011b6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80011b8:	e05d      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x100>)
 80011bc:	613b      	str	r3, [r7, #16]
      break;
 80011be:	e05a      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c0:	4b32      	ldr	r3, [pc, #200]	@ (800128c <HAL_RCC_GetSysClockFreq+0x104>)
 80011c2:	613b      	str	r3, [r7, #16]
      break;
 80011c4:	e057      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	0c9b      	lsrs	r3, r3, #18
 80011ca:	220f      	movs	r2, #15
 80011cc:	4013      	ands	r3, r2
 80011ce:	4a30      	ldr	r2, [pc, #192]	@ (8001290 <HAL_RCC_GetSysClockFreq+0x108>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	0d9b      	lsrs	r3, r3, #22
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	3301      	adds	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xf8>)
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	4013      	ands	r3, r2
 80011ea:	d00f      	beq.n	800120c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	000a      	movs	r2, r1
 80011f0:	0152      	lsls	r2, r2, #5
 80011f2:	1a52      	subs	r2, r2, r1
 80011f4:	0193      	lsls	r3, r2, #6
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	185b      	adds	r3, r3, r1
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f7fe ff81 	bl	8000108 <__udivsi3>
 8001206:	0003      	movs	r3, r0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e023      	b.n	8001254 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xf8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	4013      	ands	r3, r2
 8001214:	d00f      	beq.n	8001236 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	000a      	movs	r2, r1
 800121a:	0152      	lsls	r2, r2, #5
 800121c:	1a52      	subs	r2, r2, r1
 800121e:	0193      	lsls	r3, r2, #6
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	185b      	adds	r3, r3, r1
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	0018      	movs	r0, r3
 800122c:	f7fe ff6c 	bl	8000108 <__udivsi3>
 8001230:	0003      	movs	r3, r0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00e      	b.n	8001254 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	000a      	movs	r2, r1
 800123a:	0152      	lsls	r2, r2, #5
 800123c:	1a52      	subs	r2, r2, r1
 800123e:	0193      	lsls	r3, r2, #6
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	185b      	adds	r3, r3, r1
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f7fe ff5c 	bl	8000108 <__udivsi3>
 8001250:	0003      	movs	r3, r0
 8001252:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
      break;
 8001258:	e00d      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xf8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	0b5b      	lsrs	r3, r3, #13
 8001260:	2207      	movs	r2, #7
 8001262:	4013      	ands	r3, r2
 8001264:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	0212      	lsls	r2, r2, #8
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      break;
 8001274:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001276:	693b      	ldr	r3, [r7, #16]
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b006      	add	sp, #24
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	003d0900 	.word	0x003d0900
 8001288:	00f42400 	.word	0x00f42400
 800128c:	007a1200 	.word	0x007a1200
 8001290:	08001cec 	.word	0x08001cec

08001294 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800129c:	2317      	movs	r3, #23
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2220      	movs	r2, #32
 80012aa:	4013      	ands	r3, r2
 80012ac:	d106      	bne.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4013      	ands	r3, r2
 80012b8:	d100      	bne.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80012ba:	e104      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	055b      	lsls	r3, r3, #21
 80012c4:	4013      	ands	r3, r2
 80012c6:	d10a      	bne.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	4bae      	ldr	r3, [pc, #696]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012cc:	4bad      	ldr	r3, [pc, #692]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	0549      	lsls	r1, r1, #21
 80012d2:	430a      	orrs	r2, r1
 80012d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80012d6:	2317      	movs	r3, #23
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4baa      	ldr	r3, [pc, #680]	@ (8001588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	d11a      	bne.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ea:	4ba7      	ldr	r3, [pc, #668]	@ (8001588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4ba6      	ldr	r3, [pc, #664]	@ (8001588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0049      	lsls	r1, r1, #1
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f8:	f7ff f97c 	bl	80005f4 <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	e008      	b.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001302:	f7ff f977 	bl	80005f4 <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b64      	cmp	r3, #100	@ 0x64
 800130e:	d901      	bls.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e133      	b.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	4b9c      	ldr	r3, [pc, #624]	@ (8001588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4013      	ands	r3, r2
 800131e:	d0f0      	beq.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001320:	4b98      	ldr	r3, [pc, #608]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	23c0      	movs	r3, #192	@ 0xc0
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	23c0      	movs	r3, #192	@ 0xc0
 8001332:	039b      	lsls	r3, r3, #14
 8001334:	4013      	ands	r3, r2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d107      	bne.n	800134c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	23c0      	movs	r3, #192	@ 0xc0
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	4013      	ands	r3, r2
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d013      	beq.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	23c0      	movs	r3, #192	@ 0xc0
 8001352:	029b      	lsls	r3, r3, #10
 8001354:	401a      	ands	r2, r3
 8001356:	23c0      	movs	r3, #192	@ 0xc0
 8001358:	029b      	lsls	r3, r3, #10
 800135a:	429a      	cmp	r2, r3
 800135c:	d10a      	bne.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800135e:	4b89      	ldr	r3, [pc, #548]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	401a      	ands	r2, r3
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	429a      	cmp	r2, r3
 800136e:	d101      	bne.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e103      	b.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001374:	4b83      	ldr	r3, [pc, #524]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001378:	23c0      	movs	r3, #192	@ 0xc0
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d049      	beq.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	23c0      	movs	r3, #192	@ 0xc0
 800138c:	029b      	lsls	r3, r3, #10
 800138e:	4013      	ands	r3, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	d004      	beq.n	80013a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2220      	movs	r2, #32
 800139c:	4013      	ands	r3, r2
 800139e:	d10d      	bne.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	23c0      	movs	r3, #192	@ 0xc0
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	4013      	ands	r3, r2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d034      	beq.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4013      	ands	r3, r2
 80013ba:	d02e      	beq.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80013bc:	4b71      	ldr	r3, [pc, #452]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c0:	4a72      	ldr	r2, [pc, #456]	@ (800158c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80013c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	0309      	lsls	r1, r1, #12
 80013d0:	430a      	orrs	r2, r1
 80013d2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013da:	496d      	ldr	r1, [pc, #436]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80013dc:	400a      	ands	r2, r1
 80013de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80013e0:	4b68      	ldr	r3, [pc, #416]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	d014      	beq.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff f900 	bl	80005f4 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013f8:	e009      	b.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff f8fb 	bl	80005f4 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4a63      	ldr	r2, [pc, #396]	@ (8001594 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0b6      	b.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800140e:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d0ef      	beq.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4013      	ands	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	23c0      	movs	r3, #192	@ 0xc0
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	401a      	ands	r2, r3
 8001430:	23c0      	movs	r3, #192	@ 0xc0
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	429a      	cmp	r2, r3
 8001436:	d10c      	bne.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001438:	4b52      	ldr	r3, [pc, #328]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a56      	ldr	r2, [pc, #344]	@ (8001598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	23c0      	movs	r3, #192	@ 0xc0
 8001448:	039b      	lsls	r3, r3, #14
 800144a:	401a      	ands	r2, r3
 800144c:	4b4d      	ldr	r3, [pc, #308]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001454:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	23c0      	movs	r3, #192	@ 0xc0
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	401a      	ands	r2, r3
 8001460:	4b48      	ldr	r3, [pc, #288]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001462:	430a      	orrs	r2, r1
 8001464:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2220      	movs	r2, #32
 800146c:	4013      	ands	r3, r2
 800146e:	d01f      	beq.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	23c0      	movs	r3, #192	@ 0xc0
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	401a      	ands	r2, r3
 800147a:	23c0      	movs	r3, #192	@ 0xc0
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	429a      	cmp	r2, r3
 8001480:	d10c      	bne.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001482:	4b40      	ldr	r3, [pc, #256]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a44      	ldr	r2, [pc, #272]	@ (8001598 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001488:	4013      	ands	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	23c0      	movs	r3, #192	@ 0xc0
 8001492:	039b      	lsls	r3, r3, #14
 8001494:	401a      	ands	r2, r3
 8001496:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800149e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	23c0      	movs	r3, #192	@ 0xc0
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	401a      	ands	r2, r3
 80014aa:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014b0:	2317      	movs	r3, #23
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014c0:	4936      	ldr	r1, [pc, #216]	@ (800159c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	d009      	beq.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	2203      	movs	r2, #3
 80014d6:	4393      	bics	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014e0:	430a      	orrs	r2, r1
 80014e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d009      	beq.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	220c      	movs	r2, #12
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d009      	beq.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001512:	4013      	ands	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800151c:	430a      	orrs	r2, r1
 800151e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2208      	movs	r2, #8
 8001526:	4013      	ands	r3, r2
 8001528:	d009      	beq.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001530:	4013      	ands	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800153a:	430a      	orrs	r2, r1
 800153c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2240      	movs	r2, #64	@ 0x40
 8001544:	4013      	ands	r3, r2
 8001546:	d009      	beq.n	800155c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154c:	4a16      	ldr	r2, [pc, #88]	@ (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800154e:	4013      	ands	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001558:	430a      	orrs	r2, r1
 800155a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	4013      	ands	r3, r2
 8001564:	d009      	beq.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800156c:	4013      	ands	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001576:	430a      	orrs	r2, r1
 8001578:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b006      	add	sp, #24
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	40007000 	.word	0x40007000
 800158c:	fffcffff 	.word	0xfffcffff
 8001590:	fff7ffff 	.word	0xfff7ffff
 8001594:	00001388 	.word	0x00001388
 8001598:	ffcfffff 	.word	0xffcfffff
 800159c:	efffffff 	.word	0xefffffff
 80015a0:	fffff3ff 	.word	0xfffff3ff
 80015a4:	ffffcfff 	.word	0xffffcfff
 80015a8:	fbffffff 	.word	0xfbffffff
 80015ac:	fff3ffff 	.word	0xfff3ffff

080015b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e088      	b.n	80016dc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2221      	movs	r2, #33	@ 0x21
 80015ce:	5c9b      	ldrb	r3, [r3, r2]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe ff41 	bl	8000468 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2221      	movs	r2, #33	@ 0x21
 80015ea:	2102      	movs	r1, #2
 80015ec:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2210      	movs	r2, #16
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d05f      	beq.n	80016bc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	22ca      	movs	r2, #202	@ 0xca
 8001602:	625a      	str	r2, [r3, #36]	@ 0x24
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2253      	movs	r2, #83	@ 0x53
 800160a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800160c:	250f      	movs	r5, #15
 800160e:	197c      	adds	r4, r7, r5
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 fa7c 	bl	8001b10 <RTC_EnterInitMode>
 8001618:	0003      	movs	r3, r0
 800161a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800161c:	0028      	movs	r0, r5
 800161e:	183b      	adds	r3, r7, r0
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d12c      	bne.n	8001680 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	492c      	ldr	r1, [pc, #176]	@ (80016e4 <HAL_RTC_Init+0x134>)
 8001632:	400a      	ands	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68d2      	ldr	r2, [r2, #12]
 800165c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6919      	ldr	r1, [r3, #16]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001672:	183c      	adds	r4, r7, r0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 fa8e 	bl	8001b98 <RTC_ExitInitMode>
 800167c:	0003      	movs	r3, r0
 800167e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001680:	230f      	movs	r3, #15
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d113      	bne.n	80016b2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2103      	movs	r1, #3
 8001696:	438a      	bics	r2, r1
 8001698:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	22ff      	movs	r2, #255	@ 0xff
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80016ba:	e003      	b.n	80016c4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2221      	movs	r2, #33	@ 0x21
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80016d6:	230f      	movs	r3, #15
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	ff8fffbf 	.word	0xff8fffbf

080016e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	5c9b      	ldrb	r3, [r3, r2]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_RTC_SetTime+0x1e>
 8001702:	2302      	movs	r3, #2
 8001704:	e092      	b.n	800182c <HAL_RTC_SetTime+0x144>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2220      	movs	r2, #32
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2221      	movs	r2, #33	@ 0x21
 8001712:	2102      	movs	r1, #2
 8001714:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d125      	bne.n	8001768 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	4013      	ands	r3, r2
 8001726:	d102      	bne.n	800172e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2200      	movs	r2, #0
 800172c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	0018      	movs	r0, r3
 8001734:	f000 fa5a 	bl	8001bec <RTC_ByteToBcd2>
 8001738:	0003      	movs	r3, r0
 800173a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	0018      	movs	r0, r3
 8001742:	f000 fa53 	bl	8001bec <RTC_ByteToBcd2>
 8001746:	0003      	movs	r3, r0
 8001748:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800174a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	0018      	movs	r0, r3
 8001752:	f000 fa4b 	bl	8001bec <RTC_ByteToBcd2>
 8001756:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001758:	0022      	movs	r2, r4
 800175a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	78db      	ldrb	r3, [r3, #3]
 8001760:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001762:	4313      	orrs	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e017      	b.n	8001798 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2240      	movs	r2, #64	@ 0x40
 8001770:	4013      	ands	r3, r2
 8001772:	d102      	bne.n	800177a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2200      	movs	r2, #0
 8001778:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001786:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800178c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001794:	4313      	orrs	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	22ca      	movs	r2, #202	@ 0xca
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2253      	movs	r2, #83	@ 0x53
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80017a8:	2513      	movs	r5, #19
 80017aa:	197c      	adds	r4, r7, r5
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 f9ae 	bl	8001b10 <RTC_EnterInitMode>
 80017b4:	0003      	movs	r3, r0
 80017b6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80017b8:	0028      	movs	r0, r5
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d120      	bne.n	8001804 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	491a      	ldr	r1, [pc, #104]	@ (8001834 <HAL_RTC_SetTime+0x14c>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4917      	ldr	r1, [pc, #92]	@ (8001838 <HAL_RTC_SetTime+0x150>)
 80017da:	400a      	ands	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80017f6:	183c      	adds	r4, r7, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f9cc 	bl	8001b98 <RTC_ExitInitMode>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001804:	2313      	movs	r3, #19
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2221      	movs	r2, #33	@ 0x21
 8001812:	2101      	movs	r1, #1
 8001814:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	22ff      	movs	r2, #255	@ 0xff
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2220      	movs	r2, #32
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

  return status;
 8001826:	2313      	movs	r3, #19
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b006      	add	sp, #24
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	007f7f7f 	.word	0x007f7f7f
 8001838:	fffbffff 	.word	0xfffbffff

0800183c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	045b      	lsls	r3, r3, #17
 800185e:	0c5a      	lsrs	r2, r3, #17
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a22      	ldr	r2, [pc, #136]	@ (80018f4 <HAL_RTC_GetTime+0xb8>)
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	b2db      	uxtb	r3, r3
 8001876:	223f      	movs	r2, #63	@ 0x3f
 8001878:	4013      	ands	r3, r2
 800187a:	b2da      	uxtb	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	b2db      	uxtb	r3, r3
 8001886:	227f      	movs	r2, #127	@ 0x7f
 8001888:	4013      	ands	r3, r2
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	227f      	movs	r2, #127	@ 0x7f
 8001896:	4013      	ands	r3, r2
 8001898:	b2da      	uxtb	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	0d9b      	lsrs	r3, r3, #22
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11a      	bne.n	80018ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f9b8 	bl	8001c2e <RTC_Bcd2ToByte>
 80018be:	0003      	movs	r3, r0
 80018c0:	001a      	movs	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 f9af 	bl	8001c2e <RTC_Bcd2ToByte>
 80018d0:	0003      	movs	r3, r0
 80018d2:	001a      	movs	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 f9a6 	bl	8001c2e <RTC_Bcd2ToByte>
 80018e2:	0003      	movs	r3, r0
 80018e4:	001a      	movs	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b006      	add	sp, #24
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	007f7f7f 	.word	0x007f7f7f

080018f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	5c9b      	ldrb	r3, [r3, r2]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_RTC_SetDate+0x1e>
 8001912:	2302      	movs	r3, #2
 8001914:	e07e      	b.n	8001a14 <HAL_RTC_SetDate+0x11c>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2221      	movs	r2, #33	@ 0x21
 8001922:	2102      	movs	r1, #2
 8001924:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10e      	bne.n	800194a <HAL_RTC_SetDate+0x52>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	001a      	movs	r2, r3
 8001932:	2310      	movs	r3, #16
 8001934:	4013      	ands	r3, r2
 8001936:	d008      	beq.n	800194a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	2210      	movs	r2, #16
 800193e:	4393      	bics	r3, r2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	330a      	adds	r3, #10
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11c      	bne.n	800198a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f949 	bl	8001bec <RTC_ByteToBcd2>
 800195a:	0003      	movs	r3, r0
 800195c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f942 	bl	8001bec <RTC_ByteToBcd2>
 8001968:	0003      	movs	r3, r0
 800196a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800196c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	789b      	ldrb	r3, [r3, #2]
 8001972:	0018      	movs	r0, r3
 8001974:	f000 f93a 	bl	8001bec <RTC_ByteToBcd2>
 8001978:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800197a:	0022      	movs	r2, r4
 800197c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00e      	b.n	80019a8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001996:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800199c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	22ca      	movs	r2, #202	@ 0xca
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2253      	movs	r2, #83	@ 0x53
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019b8:	2513      	movs	r5, #19
 80019ba:	197c      	adds	r4, r7, r5
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 f8a6 	bl	8001b10 <RTC_EnterInitMode>
 80019c4:	0003      	movs	r3, r0
 80019c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80019c8:	0028      	movs	r0, r5
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4910      	ldr	r1, [pc, #64]	@ (8001a1c <HAL_RTC_SetDate+0x124>)
 80019da:	400a      	ands	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80019de:	183c      	adds	r4, r7, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f8d8 	bl	8001b98 <RTC_ExitInitMode>
 80019e8:	0003      	movs	r3, r0
 80019ea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80019ec:	2313      	movs	r3, #19
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2221      	movs	r2, #33	@ 0x21
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	22ff      	movs	r2, #255	@ 0xff
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

  return status;
 8001a0e:	2313      	movs	r3, #19
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781b      	ldrb	r3, [r3, #0]
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b006      	add	sp, #24
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	00ffff3f 	.word	0x00ffff3f

08001a20 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <HAL_RTC_GetDate+0x9c>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	221f      	movs	r2, #31
 8001a4e:	4013      	ands	r3, r2
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	223f      	movs	r2, #63	@ 0x3f
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	0b5b      	lsrs	r3, r3, #13
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f8d5 	bl	8001c2e <RTC_Bcd2ToByte>
 8001a84:	0003      	movs	r3, r0
 8001a86:	001a      	movs	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f8cc 	bl	8001c2e <RTC_Bcd2ToByte>
 8001a96:	0003      	movs	r3, r0
 8001a98:	001a      	movs	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f8c3 	bl	8001c2e <RTC_Bcd2ToByte>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	001a      	movs	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b006      	add	sp, #24
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	00ffff3f 	.word	0x00ffff3f

08001ac0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <HAL_RTC_WaitForSynchro+0x4c>)
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad4:	f7fe fd8e 	bl	80005f4 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ade:	f7fe fd89 	bl	80005f4 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	23fa      	movs	r3, #250	@ 0xfa
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d901      	bls.n	8001af4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e006      	b.n	8001b02 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0ee      	beq.n	8001ade <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	00017f5f 	.word	0x00017f5f

08001b10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2240      	movs	r2, #64	@ 0x40
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d12c      	bne.n	8001b8a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b40:	f7fe fd58 	bl	80005f4 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001b48:	e014      	b.n	8001b74 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001b4a:	f7fe fd53 	bl	80005f4 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1ad2      	subs	r2, r2, r3
 8001b54:	200f      	movs	r0, #15
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	1839      	adds	r1, r7, r0
 8001b5a:	7809      	ldrb	r1, [r1, #0]
 8001b5c:	7019      	strb	r1, [r3, #0]
 8001b5e:	23fa      	movs	r3, #250	@ 0xfa
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d906      	bls.n	8001b74 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2221      	movs	r2, #33	@ 0x21
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8001b6e:	183b      	adds	r3, r7, r0
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d104      	bne.n	8001b8a <RTC_EnterInitMode+0x7a>
 8001b80:	230f      	movs	r3, #15
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d1df      	bne.n	8001b4a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	240f      	movs	r4, #15
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2180      	movs	r1, #128	@ 0x80
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d10c      	bne.n	8001bde <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7ff ff7a 	bl	8001ac0 <HAL_RTC_WaitForSynchro>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d006      	beq.n	8001bde <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2221      	movs	r2, #33	@ 0x21
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001bde:	230f      	movs	r3, #15
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b005      	add	sp, #20
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8001bfc:	e007      	b.n	8001c0e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	1dfa      	adds	r2, r7, #7
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	3a0a      	subs	r2, #10
 8001c0c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	d8f3      	bhi.n	8001bfe <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b004      	add	sp, #16
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	0002      	movs	r2, r0
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	001a      	movs	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	189b      	adds	r3, r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	b2db      	uxtb	r3, r3
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <memset>:
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	1882      	adds	r2, r0, r2
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d100      	bne.n	8001c76 <memset+0xa>
 8001c74:	4770      	bx	lr
 8001c76:	7019      	strb	r1, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	e7f9      	b.n	8001c70 <memset+0x4>

08001c7c <__libc_init_array>:
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	2600      	movs	r6, #0
 8001c80:	4c0c      	ldr	r4, [pc, #48]	@ (8001cb4 <__libc_init_array+0x38>)
 8001c82:	4d0d      	ldr	r5, [pc, #52]	@ (8001cb8 <__libc_init_array+0x3c>)
 8001c84:	1b64      	subs	r4, r4, r5
 8001c86:	10a4      	asrs	r4, r4, #2
 8001c88:	42a6      	cmp	r6, r4
 8001c8a:	d109      	bne.n	8001ca0 <__libc_init_array+0x24>
 8001c8c:	2600      	movs	r6, #0
 8001c8e:	f000 f819 	bl	8001cc4 <_init>
 8001c92:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <__libc_init_array+0x40>)
 8001c94:	4d0a      	ldr	r5, [pc, #40]	@ (8001cc0 <__libc_init_array+0x44>)
 8001c96:	1b64      	subs	r4, r4, r5
 8001c98:	10a4      	asrs	r4, r4, #2
 8001c9a:	42a6      	cmp	r6, r4
 8001c9c:	d105      	bne.n	8001caa <__libc_init_array+0x2e>
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ca0:	00b3      	lsls	r3, r6, #2
 8001ca2:	58eb      	ldr	r3, [r5, r3]
 8001ca4:	4798      	blx	r3
 8001ca6:	3601      	adds	r6, #1
 8001ca8:	e7ee      	b.n	8001c88 <__libc_init_array+0xc>
 8001caa:	00b3      	lsls	r3, r6, #2
 8001cac:	58eb      	ldr	r3, [r5, r3]
 8001cae:	4798      	blx	r3
 8001cb0:	3601      	adds	r6, #1
 8001cb2:	e7f2      	b.n	8001c9a <__libc_init_array+0x1e>
 8001cb4:	08001cf8 	.word	0x08001cf8
 8001cb8:	08001cf8 	.word	0x08001cf8
 8001cbc:	08001cfc 	.word	0x08001cfc
 8001cc0:	08001cf8 	.word	0x08001cf8

08001cc4 <_init>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr

08001cd0 <_fini>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr

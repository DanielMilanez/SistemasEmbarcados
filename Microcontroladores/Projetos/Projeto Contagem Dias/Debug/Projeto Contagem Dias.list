
Projeto Contagem Dias.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08003874  08003874  00004874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a88  08003a88  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a88  08003a88  00004a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a90  08003a90  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a90  08003a90  00004a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a94  08003a94  00004a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003a98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000006c  08003b04  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003b04  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005344  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e0  00000000  00000000  0000a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b2  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d18  00000000  00000000  0000c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008550  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078eed  00000000  00000000  00028732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a161f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab0  00000000  00000000  000a1664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000a3114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800385c 	.word	0x0800385c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800385c 	.word	0x0800385c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 feee 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f84a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f92e 	bl	8000728 <MX_GPIO_Init>
  MX_RTC_Init();
 80004cc:	f000 f8c8 	bl	8000660 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  atualDate.Date  = 1;
 80004d0:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <main+0x90>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	709a      	strb	r2, [r3, #2]
  atualDate.Month = 1;
 80004d6:	4b1d      	ldr	r3, [pc, #116]	@ (800054c <main+0x90>)
 80004d8:	2201      	movs	r2, #1
 80004da:	705a      	strb	r2, [r3, #1]
  atualDate.Year  = 1;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <main+0x90>)
 80004de:	2201      	movs	r2, #1
 80004e0:	70da      	strb	r2, [r3, #3]

  atualTime.Hours   = 0;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <main+0x94>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
  atualTime.Minutes = 0;
 80004e8:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <main+0x94>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	705a      	strb	r2, [r3, #1]
  atualTime.Seconds = 0;
 80004ee:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <main+0x94>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetDate(&hrtc, &atualDate, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 80004f4:	4915      	ldr	r1, [pc, #84]	@ (800054c <main+0x90>)
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <main+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 faba 	bl	8002a74 <HAL_RTC_SetDate>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <main+0x4c>
 8000504:	f000 fe1a 	bl	800113c <Error_Handler>
  if (HAL_RTC_SetTime(&hrtc, &atualTime, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000508:	4911      	ldr	r1, [pc, #68]	@ (8000550 <main+0x94>)
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <main+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f9a8 	bl	8002864 <HAL_RTC_SetTime>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <main+0x60>
 8000518:	f000 fe10 	bl	800113c <Error_Handler>

  Start_lcd();
 800051c:	f000 fba3 	bl	8000c66 <Start_lcd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  Menu_manager();
 8000520:	f000 fbc4 	bl	8000cac <Menu_manager>
	  Keyboard_check();
 8000524:	f000 f9aa 	bl	800087c <Keyboard_check>

	  if (!pause){
 8000528:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <main+0x9c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f7      	bne.n	8000520 <main+0x64>
		  HAL_RTC_GetDate(&hrtc, &atualDate, RTC_FORMAT_BIN);
 8000530:	4906      	ldr	r1, [pc, #24]	@ (800054c <main+0x90>)
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <main+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	0018      	movs	r0, r3
 8000538:	f002 fb30 	bl	8002b9c <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &atualTime, RTC_FORMAT_BIN);
 800053c:	4904      	ldr	r1, [pc, #16]	@ (8000550 <main+0x94>)
 800053e:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <main+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f002 fa38 	bl	80029b8 <HAL_RTC_GetTime>
	  Menu_manager();
 8000548:	e7ea      	b.n	8000520 <main+0x64>
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	200000e0 	.word	0x200000e0
 8000550:	200000cc 	.word	0x200000cc
 8000554:	20000088 	.word	0x20000088
 8000558:	2000010c 	.word	0x2000010c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b09d      	sub	sp, #116	@ 0x74
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	2438      	movs	r4, #56	@ 0x38
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2338      	movs	r3, #56	@ 0x38
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fcf7 	bl	8002f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	2324      	movs	r3, #36	@ 0x24
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	2314      	movs	r3, #20
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f002 fcef 	bl	8002f60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	2324      	movs	r3, #36	@ 0x24
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f002 fce8 	bl	8002f60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	4b30      	ldr	r3, [pc, #192]	@ (8000654 <SystemClock_Config+0xf8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a30      	ldr	r2, [pc, #192]	@ (8000658 <SystemClock_Config+0xfc>)
 8000596:	401a      	ands	r2, r3
 8000598:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <SystemClock_Config+0xf8>)
 800059a:	2180      	movs	r1, #128	@ 0x80
 800059c:	0109      	lsls	r1, r1, #4
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a2:	f001 f975 	bl	8001890 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a6:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <SystemClock_Config+0x100>)
 80005a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80005aa:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <SystemClock_Config+0x100>)
 80005ac:	492a      	ldr	r1, [pc, #168]	@ (8000658 <SystemClock_Config+0xfc>)
 80005ae:	400a      	ands	r2, r1
 80005b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2206      	movs	r2, #6
 80005b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	0021      	movs	r1, r4
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2201      	movs	r2, #1
 80005c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2210      	movs	r2, #16
 80005cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2202      	movs	r2, #2
 80005d2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	02d2      	lsls	r2, r2, #11
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 f95d 	bl	80018ac <HAL_RCC_OscConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f6:	f000 fda1 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	2124      	movs	r1, #36	@ 0x24
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	220f      	movs	r2, #15
 8000600:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2203      	movs	r2, #3
 8000606:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2101      	movs	r1, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fd08 	bl	8002034 <HAL_RCC_ClockConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000628:	f000 fd88 	bl	800113c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800062c:	003b      	movs	r3, r7
 800062e:	2220      	movs	r2, #32
 8000630:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000632:	003b      	movs	r3, r7
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	0252      	lsls	r2, r2, #9
 8000638:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	003b      	movs	r3, r7
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fee7 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000646:	f000 fd79 	bl	800113c <Error_Handler>
  }
}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b01d      	add	sp, #116	@ 0x74
 8000650:	bd90      	pop	{r4, r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	40007000 	.word	0x40007000
 8000658:	ffffe7ff 	.word	0xffffe7ff
 800065c:	40021000 	.word	0x40021000

08000660 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 fc76 	bl	8002f60 <memset>
  RTC_DateTypeDef sDate = {0};
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800067a:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_RTC_Init+0xc0>)
 800067c:	4a29      	ldr	r2, [pc, #164]	@ (8000724 <MX_RTC_Init+0xc4>)
 800067e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000680:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_RTC_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <MX_RTC_Init+0xc0>)
 8000688:	227f      	movs	r2, #127	@ 0x7f
 800068a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_RTC_Init+0xc0>)
 800068e:	22ff      	movs	r2, #255	@ 0xff
 8000690:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000692:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <MX_RTC_Init+0xc0>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_RTC_Init+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <MX_RTC_Init+0xc0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_RTC_Init+0xc0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_RTC_Init+0xc0>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 f83d 	bl	800272c <HAL_RTC_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80006b6:	f000 fd41 	bl	800113c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006d8:	1d39      	adds	r1, r7, #4
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_RTC_Init+0xc0>)
 80006dc:	2201      	movs	r2, #1
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 f8c0 	bl	8002864 <HAL_RTC_SetTime>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80006e8:	f000 fd28 	bl	800113c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2201      	movs	r2, #1
 80006fc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000704:	0039      	movs	r1, r7
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_RTC_Init+0xc0>)
 8000708:	2201      	movs	r2, #1
 800070a:	0018      	movs	r0, r3
 800070c:	f002 f9b2 	bl	8002a74 <HAL_RTC_SetDate>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000714:	f000 fd12 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b006      	add	sp, #24
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000088 	.word	0x20000088
 8000724:	40002800 	.word	0x40002800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b089      	sub	sp, #36	@ 0x24
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	240c      	movs	r4, #12
 8000730:	193b      	adds	r3, r7, r4
 8000732:	0018      	movs	r0, r3
 8000734:	2314      	movs	r3, #20
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f002 fc11 	bl	8002f60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b4c      	ldr	r3, [pc, #304]	@ (8000870 <MX_GPIO_Init+0x148>)
 8000740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000742:	4b4b      	ldr	r3, [pc, #300]	@ (8000870 <MX_GPIO_Init+0x148>)
 8000744:	2104      	movs	r1, #4
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074a:	4b49      	ldr	r3, [pc, #292]	@ (8000870 <MX_GPIO_Init+0x148>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	2204      	movs	r2, #4
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b46      	ldr	r3, [pc, #280]	@ (8000870 <MX_GPIO_Init+0x148>)
 8000758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800075a:	4b45      	ldr	r3, [pc, #276]	@ (8000870 <MX_GPIO_Init+0x148>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000762:	4b43      	ldr	r3, [pc, #268]	@ (8000870 <MX_GPIO_Init+0x148>)
 8000764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <MX_GPIO_Init+0x148>)
 8000770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000772:	4b3f      	ldr	r3, [pc, #252]	@ (8000870 <MX_GPIO_Init+0x148>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	@ 0x2c
 800077a:	4b3d      	ldr	r3, [pc, #244]	@ (8000870 <MX_GPIO_Init+0x148>)
 800077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin|COLUMN_02_Pin
 8000786:	23f8      	movs	r3, #248	@ 0xf8
 8000788:	0099      	lsls	r1, r3, #2
 800078a:	23a0      	movs	r3, #160	@ 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	2200      	movs	r2, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f860 	bl	8001856 <HAL_GPIO_WritePin>
                          |COLUMN_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN_03_Pin|D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);
 8000796:	23e8      	movs	r3, #232	@ 0xe8
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4836      	ldr	r0, [pc, #216]	@ (8000874 <MX_GPIO_Init+0x14c>)
 800079c:	2200      	movs	r2, #0
 800079e:	0019      	movs	r1, r3
 80007a0:	f001 f859 	bl	8001856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80007a4:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x150>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 f853 	bl	8001856 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin COLUMN_02_Pin
                           COLUMN_01_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin|COLUMN_02_Pin
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	22f8      	movs	r2, #248	@ 0xf8
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	601a      	str	r2, [r3, #0]
                          |COLUMN_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2201      	movs	r2, #1
 80007bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	193a      	adds	r2, r7, r4
 80007cc:	23a0      	movs	r3, #160	@ 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 feac 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_03_Pin D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = COLUMN_03_Pin|D6_Pin|RS_Pin|RW_Pin;
 80007d8:	0021      	movs	r1, r4
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	22e8      	movs	r2, #232	@ 0xe8
 80007de:	00d2      	lsls	r2, r2, #3
 80007e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	000c      	movs	r4, r1
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <MX_GPIO_Init+0x14c>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f000 fe97 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800081a:	193b      	adds	r3, r7, r4
 800081c:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <MX_GPIO_Init+0x150>)
 800081e:	0019      	movs	r1, r3
 8000820:	0010      	movs	r0, r2
 8000822:	f000 fe85 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_04_Pin */
  GPIO_InitStruct.Pin = LINE_04_Pin;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	00d2      	lsls	r2, r2, #3
 800082c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2201      	movs	r2, #1
 8000838:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_04_GPIO_Port, &GPIO_InitStruct);
 800083a:	193a      	adds	r2, r7, r4
 800083c:	23a0      	movs	r3, #160	@ 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fe74 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_03_Pin LINE_01_Pin LINE_02_Pin */
  GPIO_InitStruct.Pin = LINE_03_Pin|LINE_01_Pin|LINE_02_Pin;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2238      	movs	r2, #56	@ 0x38
 800084c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	193b      	adds	r3, r7, r4
 800085c:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <MX_GPIO_Init+0x14c>)
 800085e:	0019      	movs	r1, r3
 8000860:	0010      	movs	r0, r2
 8000862:	f000 fe65 	bl	8001530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b009      	add	sp, #36	@ 0x24
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	40021000 	.word	0x40021000
 8000874:	50000400 	.word	0x50000400
 8000878:	50000800 	.word	0x50000800

0800087c <Keyboard_check>:

/* USER CODE BEGIN 4 */
void Keyboard_check(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	switch(atualColumn){
 8000880:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <Keyboard_check+0xcc>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d03f      	beq.n	8000908 <Keyboard_check+0x8c>
 8000888:	dc5b      	bgt.n	8000942 <Keyboard_check+0xc6>
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <Keyboard_check+0x18>
 800088e:	2b01      	cmp	r3, #1
 8000890:	d01d      	beq.n	80008ce <Keyboard_check+0x52>

			atualColumn = 0;
			Verify_press();
			break;
	}
}
 8000892:	e056      	b.n	8000942 <Keyboard_check+0xc6>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 0);
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	0099      	lsls	r1, r3, #2
 8000898:	23a0      	movs	r3, #160	@ 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 ffd9 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	0059      	lsls	r1, r3, #1
 80008a8:	23a0      	movs	r3, #160	@ 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2201      	movs	r2, #1
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 ffd1 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4824      	ldr	r0, [pc, #144]	@ (800094c <Keyboard_check+0xd0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	0019      	movs	r1, r3
 80008be:	f000 ffca 	bl	8001856 <HAL_GPIO_WritePin>
			atualColumn = 1;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <Keyboard_check+0xcc>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
			Verify_press();
 80008c8:	f000 f842 	bl	8000950 <Verify_press>
			break;
 80008cc:	e039      	b.n	8000942 <Keyboard_check+0xc6>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	0099      	lsls	r1, r3, #2
 80008d2:	23a0      	movs	r3, #160	@ 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2201      	movs	r2, #1
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 ffbc 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 0);
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	0059      	lsls	r1, r3, #1
 80008e2:	23a0      	movs	r3, #160	@ 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2200      	movs	r2, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 ffb4 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	4816      	ldr	r0, [pc, #88]	@ (800094c <Keyboard_check+0xd0>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	0019      	movs	r1, r3
 80008f8:	f000 ffad 	bl	8001856 <HAL_GPIO_WritePin>
			atualColumn = 2;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <Keyboard_check+0xcc>)
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]
			Verify_press();
 8000902:	f000 f825 	bl	8000950 <Verify_press>
			break;
 8000906:	e01c      	b.n	8000942 <Keyboard_check+0xc6>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	0099      	lsls	r1, r3, #2
 800090c:	23a0      	movs	r3, #160	@ 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2201      	movs	r2, #1
 8000912:	0018      	movs	r0, r3
 8000914:	f000 ff9f 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	0059      	lsls	r1, r3, #1
 800091c:	23a0      	movs	r3, #160	@ 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2201      	movs	r2, #1
 8000922:	0018      	movs	r0, r3
 8000924:	f000 ff97 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 0);
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <Keyboard_check+0xd0>)
 800092e:	2200      	movs	r2, #0
 8000930:	0019      	movs	r1, r3
 8000932:	f000 ff90 	bl	8001856 <HAL_GPIO_WritePin>
			atualColumn = 0;
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <Keyboard_check+0xcc>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
			Verify_press();
 800093c:	f000 f808 	bl	8000950 <Verify_press>
			break;
 8000940:	46c0      	nop			@ (mov r8, r8)
}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000e4 	.word	0x200000e4
 800094c:	50000400 	.word	0x50000400

08000950 <Verify_press>:

void Verify_press(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	uint8_t bline1 = Debounce(LINE_01_GPIO_Port, LINE_01_Pin),
 8000956:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <Verify_press+0xc0>)
 8000958:	2110      	movs	r1, #16
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f860 	bl	8000a20 <Debounce>
 8000960:	0002      	movs	r2, r0
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	701a      	strb	r2, [r3, #0]
			bline2 = Debounce(LINE_02_GPIO_Port, LINE_02_Pin),
 8000966:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <Verify_press+0xc0>)
 8000968:	2120      	movs	r1, #32
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f858 	bl	8000a20 <Debounce>
 8000970:	0002      	movs	r2, r0
 8000972:	1dbb      	adds	r3, r7, #6
 8000974:	701a      	strb	r2, [r3, #0]
			bline3 = Debounce(LINE_03_GPIO_Port, LINE_03_Pin),
 8000976:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <Verify_press+0xc0>)
 8000978:	2108      	movs	r1, #8
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f850 	bl	8000a20 <Debounce>
 8000980:	0002      	movs	r2, r0
 8000982:	1d7b      	adds	r3, r7, #5
 8000984:	701a      	strb	r2, [r3, #0]
			bline4 = Debounce(LINE_04_GPIO_Port, LINE_04_Pin);
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	00da      	lsls	r2, r3, #3
 800098a:	23a0      	movs	r3, #160	@ 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f000 f845 	bl	8000a20 <Debounce>
 8000996:	0002      	movs	r2, r0
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	701a      	strb	r2, [r3, #0]

	if      (bline1) keyResponse = KeyMap[0][atualColumn];
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <Verify_press+0x64>
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <Verify_press+0xc4>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <Verify_press+0xc8>)
 80009ac:	5c9a      	ldrb	r2, [r3, r2]
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <Verify_press+0xcc>)
 80009b0:	701a      	strb	r2, [r3, #0]
	else if (bline2) keyResponse = KeyMap[1][atualColumn];
	else if (bline3) keyResponse = KeyMap[2][atualColumn];
	else if (bline4) keyResponse = KeyMap[3][atualColumn];
	else keyResponse = '\0';
}
 80009b2:	e029      	b.n	8000a08 <Verify_press+0xb8>
	else if (bline2) keyResponse = KeyMap[1][atualColumn];
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d008      	beq.n	80009ce <Verify_press+0x7e>
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <Verify_press+0xc4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <Verify_press+0xc8>)
 80009c4:	189b      	adds	r3, r3, r2
 80009c6:	78da      	ldrb	r2, [r3, #3]
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <Verify_press+0xcc>)
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	e01c      	b.n	8000a08 <Verify_press+0xb8>
	else if (bline3) keyResponse = KeyMap[2][atualColumn];
 80009ce:	1d7b      	adds	r3, r7, #5
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d008      	beq.n	80009e8 <Verify_press+0x98>
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <Verify_press+0xc4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001a      	movs	r2, r3
 80009dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <Verify_press+0xc8>)
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	799a      	ldrb	r2, [r3, #6]
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <Verify_press+0xcc>)
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	e00f      	b.n	8000a08 <Verify_press+0xb8>
	else if (bline4) keyResponse = KeyMap[3][atualColumn];
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <Verify_press+0xb2>
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <Verify_press+0xc4>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <Verify_press+0xc8>)
 80009f8:	189b      	adds	r3, r3, r2
 80009fa:	7a5a      	ldrb	r2, [r3, #9]
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <Verify_press+0xcc>)
 80009fe:	701a      	strb	r2, [r3, #0]
}
 8000a00:	e002      	b.n	8000a08 <Verify_press+0xb8>
	else keyResponse = '\0';
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <Verify_press+0xcc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	50000400 	.word	0x50000400
 8000a14:	200000e4 	.word	0x200000e4
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	20000110 	.word	0x20000110

08000a20 <Debounce>:

int Debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	000a      	movs	r2, r1
 8000a2a:	1cbb      	adds	r3, r7, #2
 8000a2c:	801a      	strh	r2, [r3, #0]
    uint8_t press = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000a2e:	250e      	movs	r5, #14
 8000a30:	197c      	adds	r4, r7, r5
 8000a32:	1cbb      	adds	r3, r7, #2
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 feee 	bl	800181c <HAL_GPIO_ReadPin>
 8000a40:	0003      	movs	r3, r0
 8000a42:	7023      	strb	r3, [r4, #0]
    uint8_t result = 0;
 8000a44:	240f      	movs	r4, #15
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]

    if (!press){
 8000a4c:	197b      	adds	r3, r7, r5
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11c      	bne.n	8000a8e <Debounce+0x6e>
        timeBounce = HAL_GetTick();
 8000a54:	f000 fc8a 	bl	800136c <HAL_GetTick>
 8000a58:	0002      	movs	r2, r0
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <Debounce+0x7c>)
 8000a5c:	601a      	str	r2, [r3, #0]

        if ((timeBounce - brefTime) > 20){
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <Debounce+0x7c>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <Debounce+0x80>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b14      	cmp	r3, #20
 8000a6a:	d902      	bls.n	8000a72 <Debounce+0x52>
        	result = 1;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
        }

        brefTime = timeBounce;
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <Debounce+0x7c>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <Debounce+0x80>)
 8000a78:	601a      	str	r2, [r3, #0]
        while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin));
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	1cbb      	adds	r3, r7, #2
 8000a7e:	881a      	ldrh	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fec9 	bl	800181c <HAL_GPIO_ReadPin>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d0f6      	beq.n	8000a7c <Debounce+0x5c>
    }

    return result;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	781b      	ldrb	r3, [r3, #0]
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b004      	add	sp, #16
 8000a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9c:	20000104 	.word	0x20000104
 8000aa0:	20000108 	.word	0x20000108

08000aa4 <Info_manager>:

void Info_manager(unsigned data, unsigned rs){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	PORT.P0 = (data >> 0) & 1;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8000c20 <Info_manager+0x17c>)
 8000ab6:	601a      	str	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	2201      	movs	r2, #1
 8000abe:	401a      	ands	r2, r3
 8000ac0:	4b57      	ldr	r3, [pc, #348]	@ (8000c20 <Info_manager+0x17c>)
 8000ac2:	605a      	str	r2, [r3, #4]
	PORT.P2 = (data >> 2) & 1;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	2201      	movs	r2, #1
 8000aca:	401a      	ands	r2, r3
 8000acc:	4b54      	ldr	r3, [pc, #336]	@ (8000c20 <Info_manager+0x17c>)
 8000ace:	609a      	str	r2, [r3, #8]
	PORT.P3 = (data >> 3) & 1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	4b51      	ldr	r3, [pc, #324]	@ (8000c20 <Info_manager+0x17c>)
 8000ada:	60da      	str	r2, [r3, #12]
	PORT.P4 = (data >> 4) & 1;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8000c20 <Info_manager+0x17c>)
 8000ae6:	611a      	str	r2, [r3, #16]
	PORT.P5 = (data >> 5) & 1;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2201      	movs	r2, #1
 8000aee:	401a      	ands	r2, r3
 8000af0:	4b4b      	ldr	r3, [pc, #300]	@ (8000c20 <Info_manager+0x17c>)
 8000af2:	615a      	str	r2, [r3, #20]
	PORT.P6 = (data >> 6) & 1;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	099b      	lsrs	r3, r3, #6
 8000af8:	2201      	movs	r2, #1
 8000afa:	401a      	ands	r2, r3
 8000afc:	4b48      	ldr	r3, [pc, #288]	@ (8000c20 <Info_manager+0x17c>)
 8000afe:	619a      	str	r2, [r3, #24]
	PORT.P7 = (data >> 7) & 1;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	09db      	lsrs	r3, r3, #7
 8000b04:	2201      	movs	r2, #1
 8000b06:	401a      	ands	r2, r3
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <Info_manager+0x17c>)
 8000b0a:	61da      	str	r2, [r3, #28]

	if (rs) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <Info_manager+0x7e>
 8000b12:	2380      	movs	r3, #128	@ 0x80
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4843      	ldr	r0, [pc, #268]	@ (8000c24 <Info_manager+0x180>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	f000 fe9b 	bl	8001856 <HAL_GPIO_WritePin>
 8000b20:	e006      	b.n	8000b30 <Info_manager+0x8c>
	else HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	483f      	ldr	r0, [pc, #252]	@ (8000c24 <Info_manager+0x180>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	f000 fe93 	bl	8001856 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	483b      	ldr	r0, [pc, #236]	@ (8000c24 <Info_manager+0x180>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	0019      	movs	r1, r3
 8000b3a:	f000 fe8c 	bl	8001856 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 8000b3e:	4b38      	ldr	r3, [pc, #224]	@ (8000c20 <Info_manager+0x17c>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	23a0      	movs	r3, #160	@ 0xa0
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	2140      	movs	r1, #64	@ 0x40
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fe83 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 8000b50:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <Info_manager+0x17c>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	23a0      	movs	r3, #160	@ 0xa0
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2180      	movs	r1, #128	@ 0x80
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fe7a 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <Info_manager+0x17c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	482e      	ldr	r0, [pc, #184]	@ (8000c24 <Info_manager+0x180>)
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2140      	movs	r1, #64	@ 0x40
 8000b6e:	f000 fe72 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 8000b72:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <Info_manager+0x17c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	482b      	ldr	r0, [pc, #172]	@ (8000c28 <Info_manager+0x184>)
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	f000 fe6a 	bl	8001856 <HAL_GPIO_WritePin>

	HAL_Delay(0.5);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 fbfc 	bl	8001380 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000b88:	23a0      	movs	r3, #160	@ 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2120      	movs	r1, #32
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fe60 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_Delay(0.5);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 fbf2 	bl	8001380 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000b9c:	23a0      	movs	r3, #160	@ 0xa0
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fe56 	bl	8001856 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <Info_manager+0x17c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	23a0      	movs	r3, #160	@ 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	2140      	movs	r1, #64	@ 0x40
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fe4d 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <Info_manager+0x17c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	23a0      	movs	r3, #160	@ 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fe44 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <Info_manager+0x17c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <Info_manager+0x180>)
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2140      	movs	r1, #64	@ 0x40
 8000bda:	f000 fe3c 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <Info_manager+0x17c>)
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <Info_manager+0x184>)
 8000be6:	001a      	movs	r2, r3
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	f000 fe34 	bl	8001856 <HAL_GPIO_WritePin>

	HAL_Delay(0.5);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fbc6 	bl	8001380 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000bf4:	23a0      	movs	r3, #160	@ 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 fe2a 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_Delay(0.5);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 fbbc 	bl	8001380 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000c08:	23a0      	movs	r3, #160	@ 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2120      	movs	r1, #32
 8000c10:	0018      	movs	r0, r3
 8000c12:	f000 fe20 	bl	8001856 <HAL_GPIO_WritePin>
}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	200000ac 	.word	0x200000ac
 8000c24:	50000400 	.word	0x50000400
 8000c28:	50000800 	.word	0x50000800

08000c2c <Message>:

void Message(char *message){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	for (int i = 0; message[i] != '\0'; ++i){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e00a      	b.n	8000c50 <Message+0x24>
		Info_manager(message[i], 1);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	18d3      	adds	r3, r2, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2101      	movs	r1, #1
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff2d 	bl	8000aa4 <Info_manager>
	for (int i = 0; message[i] != '\0'; ++i){
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1ee      	bne.n	8000c3a <Message+0xe>
	}
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <Start_lcd>:

void Start_lcd(void){
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
    HAL_Delay(20);
 8000c6a:	2014      	movs	r0, #20
 8000c6c:	f000 fb88 	bl	8001380 <HAL_Delay>
    Info_manager(0x33, 0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2033      	movs	r0, #51	@ 0x33
 8000c74:	f7ff ff16 	bl	8000aa4 <Info_manager>
    Info_manager(0x32, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2032      	movs	r0, #50	@ 0x32
 8000c7c:	f7ff ff12 	bl	8000aa4 <Info_manager>

    Info_manager(0x28, 0);
 8000c80:	2100      	movs	r1, #0
 8000c82:	2028      	movs	r0, #40	@ 0x28
 8000c84:	f7ff ff0e 	bl	8000aa4 <Info_manager>

    Info_manager(0x0F, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f7ff ff0a 	bl	8000aa4 <Info_manager>
    Info_manager(0x06, 0);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2006      	movs	r0, #6
 8000c94:	f7ff ff06 	bl	8000aa4 <Info_manager>
    Info_manager(0x01, 0);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff02 	bl	8000aa4 <Info_manager>

    HAL_Delay(2);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f000 fb6d 	bl	8001380 <HAL_Delay>
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <Menu_manager>:

void Menu_manager(void){
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af02      	add	r7, sp, #8
	switch(atualMenu){
 8000cb2:	4b99      	ldr	r3, [pc, #612]	@ (8000f18 <Menu_manager+0x26c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d002      	beq.n	8000cc0 <Menu_manager+0x14>
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d047      	beq.n	8000d4e <Menu_manager+0xa2>
 8000cbe:	e0d9      	b.n	8000e74 <Menu_manager+0x1c8>
		case 1:
			hours   = atualTime.Hours;
 8000cc0:	4b96      	ldr	r3, [pc, #600]	@ (8000f1c <Menu_manager+0x270>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b96      	ldr	r3, [pc, #600]	@ (8000f20 <Menu_manager+0x274>)
 8000cc8:	601a      	str	r2, [r3, #0]
			minutes = atualTime.Minutes;
 8000cca:	4b94      	ldr	r3, [pc, #592]	@ (8000f1c <Menu_manager+0x270>)
 8000ccc:	785b      	ldrb	r3, [r3, #1]
 8000cce:	001a      	movs	r2, r3
 8000cd0:	4b94      	ldr	r3, [pc, #592]	@ (8000f24 <Menu_manager+0x278>)
 8000cd2:	601a      	str	r2, [r3, #0]
			seconds = atualTime.Seconds;
 8000cd4:	4b91      	ldr	r3, [pc, #580]	@ (8000f1c <Menu_manager+0x270>)
 8000cd6:	789b      	ldrb	r3, [r3, #2]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4b93      	ldr	r3, [pc, #588]	@ (8000f28 <Menu_manager+0x27c>)
 8000cdc:	601a      	str	r2, [r3, #0]

			sprintf(firstLine, "TM: %02lu:%02lu:%02lu      ", hours, minutes, seconds);
 8000cde:	4b90      	ldr	r3, [pc, #576]	@ (8000f20 <Menu_manager+0x274>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b90      	ldr	r3, [pc, #576]	@ (8000f24 <Menu_manager+0x278>)
 8000ce4:	681c      	ldr	r4, [r3, #0]
 8000ce6:	4b90      	ldr	r3, [pc, #576]	@ (8000f28 <Menu_manager+0x27c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4990      	ldr	r1, [pc, #576]	@ (8000f2c <Menu_manager+0x280>)
 8000cec:	4890      	ldr	r0, [pc, #576]	@ (8000f30 <Menu_manager+0x284>)
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	0023      	movs	r3, r4
 8000cf2:	f002 f915 	bl	8002f20 <siprintf>
			Info_manager(0x80, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2080      	movs	r0, #128	@ 0x80
 8000cfa:	f7ff fed3 	bl	8000aa4 <Info_manager>
			Message(firstLine);
 8000cfe:	4b8c      	ldr	r3, [pc, #560]	@ (8000f30 <Menu_manager+0x284>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff93 	bl	8000c2c <Message>

			day   = atualDate.Date;
 8000d06:	4b8b      	ldr	r3, [pc, #556]	@ (8000f34 <Menu_manager+0x288>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	4b8a      	ldr	r3, [pc, #552]	@ (8000f38 <Menu_manager+0x28c>)
 8000d0e:	601a      	str	r2, [r3, #0]
			month = atualDate.Month;
 8000d10:	4b88      	ldr	r3, [pc, #544]	@ (8000f34 <Menu_manager+0x288>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	001a      	movs	r2, r3
 8000d16:	4b89      	ldr	r3, [pc, #548]	@ (8000f3c <Menu_manager+0x290>)
 8000d18:	601a      	str	r2, [r3, #0]
			year  = atualDate.Year;
 8000d1a:	4b86      	ldr	r3, [pc, #536]	@ (8000f34 <Menu_manager+0x288>)
 8000d1c:	78db      	ldrb	r3, [r3, #3]
 8000d1e:	001a      	movs	r2, r3
 8000d20:	4b87      	ldr	r3, [pc, #540]	@ (8000f40 <Menu_manager+0x294>)
 8000d22:	601a      	str	r2, [r3, #0]

			sprintf(secondLine, "DT: %02lu/%02lu/%02lu     ", day, month, year);
 8000d24:	4b84      	ldr	r3, [pc, #528]	@ (8000f38 <Menu_manager+0x28c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b84      	ldr	r3, [pc, #528]	@ (8000f3c <Menu_manager+0x290>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	4b84      	ldr	r3, [pc, #528]	@ (8000f40 <Menu_manager+0x294>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4984      	ldr	r1, [pc, #528]	@ (8000f44 <Menu_manager+0x298>)
 8000d32:	4885      	ldr	r0, [pc, #532]	@ (8000f48 <Menu_manager+0x29c>)
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	0023      	movs	r3, r4
 8000d38:	f002 f8f2 	bl	8002f20 <siprintf>
			Info_manager(0xC0, 0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	20c0      	movs	r0, #192	@ 0xc0
 8000d40:	f7ff feb0 	bl	8000aa4 <Info_manager>
			Message(secondLine);
 8000d44:	4b80      	ldr	r3, [pc, #512]	@ (8000f48 <Menu_manager+0x29c>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff70 	bl	8000c2c <Message>
			break;
 8000d4c:	e092      	b.n	8000e74 <Menu_manager+0x1c8>

		case 2:
			Altern_selection();
 8000d4e:	f000 f911 	bl	8000f74 <Altern_selection>
			if (keyResponse == '*') id_char++;
 8000d52:	4b7e      	ldr	r3, [pc, #504]	@ (8000f4c <Menu_manager+0x2a0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d58:	d105      	bne.n	8000d66 <Menu_manager+0xba>
 8000d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f50 <Menu_manager+0x2a4>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b7b      	ldr	r3, [pc, #492]	@ (8000f50 <Menu_manager+0x2a4>)
 8000d64:	701a      	strb	r2, [r3, #0]

			if ((keyResponse != '\0')&& (keyResponse != '#') && (keyResponse != '*') && (flag)) {
 8000d66:	4b79      	ldr	r3, [pc, #484]	@ (8000f4c <Menu_manager+0x2a0>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d029      	beq.n	8000dc2 <Menu_manager+0x116>
 8000d6e:	4b77      	ldr	r3, [pc, #476]	@ (8000f4c <Menu_manager+0x2a0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b23      	cmp	r3, #35	@ 0x23
 8000d74:	d025      	beq.n	8000dc2 <Menu_manager+0x116>
 8000d76:	4b75      	ldr	r3, [pc, #468]	@ (8000f4c <Menu_manager+0x2a0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d7c:	d021      	beq.n	8000dc2 <Menu_manager+0x116>
 8000d7e:	4b75      	ldr	r3, [pc, #468]	@ (8000f54 <Menu_manager+0x2a8>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d01d      	beq.n	8000dc2 <Menu_manager+0x116>
				Info_limit();
 8000d86:	f000 f971 	bl	800106c <Info_limit>
				Info_manager(keyResponse, 1);
 8000d8a:	4b70      	ldr	r3, [pc, #448]	@ (8000f4c <Menu_manager+0x2a0>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff fe87 	bl	8000aa4 <Info_manager>
				str_temp[ctr] = keyResponse;
 8000d96:	4b70      	ldr	r3, [pc, #448]	@ (8000f58 <Menu_manager+0x2ac>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f4c <Menu_manager+0x2a0>)
 8000d9e:	7819      	ldrb	r1, [r3, #0]
 8000da0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f5c <Menu_manager+0x2b0>)
 8000da2:	5499      	strb	r1, [r3, r2]

				id_char++;
 8000da4:	4b6a      	ldr	r3, [pc, #424]	@ (8000f50 <Menu_manager+0x2a4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b68      	ldr	r3, [pc, #416]	@ (8000f50 <Menu_manager+0x2a4>)
 8000dae:	701a      	strb	r2, [r3, #0]
				ctr++;
 8000db0:	4b69      	ldr	r3, [pc, #420]	@ (8000f58 <Menu_manager+0x2ac>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b67      	ldr	r3, [pc, #412]	@ (8000f58 <Menu_manager+0x2ac>)
 8000dba:	701a      	strb	r2, [r3, #0]

				flag = 0;
 8000dbc:	4b65      	ldr	r3, [pc, #404]	@ (8000f54 <Menu_manager+0x2a8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			}

			if (ctr == 2){
 8000dc2:	4b65      	ldr	r3, [pc, #404]	@ (8000f58 <Menu_manager+0x2ac>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d10a      	bne.n	8000de0 <Menu_manager+0x134>
				ctr = 0;
 8000dca:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <Menu_manager+0x2ac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
				x = atoi(str_temp);
 8000dd0:	4b62      	ldr	r3, [pc, #392]	@ (8000f5c <Menu_manager+0x2b0>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 f808 	bl	8002de8 <atoi>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b60      	ldr	r3, [pc, #384]	@ (8000f60 <Menu_manager+0x2b4>)
 8000dde:	701a      	strb	r2, [r3, #0]
			}

			if (id_char == 2)  atualTime.Hours   = x;
 8000de0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f50 <Menu_manager+0x2a4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d104      	bne.n	8000df2 <Menu_manager+0x146>
 8000de8:	4b5d      	ldr	r3, [pc, #372]	@ (8000f60 <Menu_manager+0x2b4>)
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	4b4b      	ldr	r3, [pc, #300]	@ (8000f1c <Menu_manager+0x270>)
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e02b      	b.n	8000e4a <Menu_manager+0x19e>
			else if (id_char == 4)  atualTime.Minutes = x;
 8000df2:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <Menu_manager+0x2a4>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d104      	bne.n	8000e04 <Menu_manager+0x158>
 8000dfa:	4b59      	ldr	r3, [pc, #356]	@ (8000f60 <Menu_manager+0x2b4>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <Menu_manager+0x270>)
 8000e00:	705a      	strb	r2, [r3, #1]
 8000e02:	e022      	b.n	8000e4a <Menu_manager+0x19e>
			else if (id_char == 6)  atualTime.Seconds = x;
 8000e04:	4b52      	ldr	r3, [pc, #328]	@ (8000f50 <Menu_manager+0x2a4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d104      	bne.n	8000e16 <Menu_manager+0x16a>
 8000e0c:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <Menu_manager+0x2b4>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4b42      	ldr	r3, [pc, #264]	@ (8000f1c <Menu_manager+0x270>)
 8000e12:	709a      	strb	r2, [r3, #2]
 8000e14:	e019      	b.n	8000e4a <Menu_manager+0x19e>
			else if (id_char == 8)  atualDate.Date    = x;
 8000e16:	4b4e      	ldr	r3, [pc, #312]	@ (8000f50 <Menu_manager+0x2a4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d104      	bne.n	8000e28 <Menu_manager+0x17c>
 8000e1e:	4b50      	ldr	r3, [pc, #320]	@ (8000f60 <Menu_manager+0x2b4>)
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <Menu_manager+0x288>)
 8000e24:	709a      	strb	r2, [r3, #2]
 8000e26:	e010      	b.n	8000e4a <Menu_manager+0x19e>
			else if (id_char == 10) atualDate.Month   = x;
 8000e28:	4b49      	ldr	r3, [pc, #292]	@ (8000f50 <Menu_manager+0x2a4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b0a      	cmp	r3, #10
 8000e2e:	d104      	bne.n	8000e3a <Menu_manager+0x18e>
 8000e30:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <Menu_manager+0x2b4>)
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4b3f      	ldr	r3, [pc, #252]	@ (8000f34 <Menu_manager+0x288>)
 8000e36:	705a      	strb	r2, [r3, #1]
 8000e38:	e007      	b.n	8000e4a <Menu_manager+0x19e>
			else if (id_char == 0)  atualDate.Year    = x;
 8000e3a:	4b45      	ldr	r3, [pc, #276]	@ (8000f50 <Menu_manager+0x2a4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d103      	bne.n	8000e4a <Menu_manager+0x19e>
 8000e42:	4b47      	ldr	r3, [pc, #284]	@ (8000f60 <Menu_manager+0x2b4>)
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	4b3b      	ldr	r3, [pc, #236]	@ (8000f34 <Menu_manager+0x288>)
 8000e48:	70da      	strb	r2, [r3, #3]

			if (HAL_RTC_SetTime(&hrtc, &atualTime, RTC_FORMAT_BIN)!= HAL_OK) Error_Handler();
 8000e4a:	4934      	ldr	r1, [pc, #208]	@ (8000f1c <Menu_manager+0x270>)
 8000e4c:	4b45      	ldr	r3, [pc, #276]	@ (8000f64 <Menu_manager+0x2b8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 fd07 	bl	8002864 <HAL_RTC_SetTime>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <Menu_manager+0x1b2>
 8000e5a:	f000 f96f 	bl	800113c <Error_Handler>
			if (HAL_RTC_SetDate(&hrtc, &atualDate, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000e5e:	4935      	ldr	r1, [pc, #212]	@ (8000f34 <Menu_manager+0x288>)
 8000e60:	4b40      	ldr	r3, [pc, #256]	@ (8000f64 <Menu_manager+0x2b8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fe05 	bl	8002a74 <HAL_RTC_SetDate>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <Menu_manager+0x1c6>
 8000e6e:	f000 f965 	bl	800113c <Error_Handler>
			break;
 8000e72:	46c0      	nop			@ (mov r8, r8)
		}

	if (keyResponse == '#') {
 8000e74:	4b35      	ldr	r3, [pc, #212]	@ (8000f4c <Menu_manager+0x2a0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b23      	cmp	r3, #35	@ 0x23
 8000e7a:	d148      	bne.n	8000f0e <Menu_manager+0x262>
		Info_manager(0x01, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fe10 	bl	8000aa4 <Info_manager>
		flag = 1;
 8000e84:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <Menu_manager+0x2a8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
		atualMenu++;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <Menu_manager+0x26c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <Menu_manager+0x26c>)
 8000e94:	701a      	strb	r2, [r3, #0]
		if (atualMenu == 2) {
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <Menu_manager+0x26c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d11b      	bne.n	8000ed6 <Menu_manager+0x22a>
			pause = 1;
 8000e9e:	4b32      	ldr	r3, [pc, #200]	@ (8000f68 <Menu_manager+0x2bc>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
			sprintf(firstLine, "SET TM: %02lu:%02lu:%02lu", hours, minutes, seconds);
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <Menu_manager+0x274>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <Menu_manager+0x278>)
 8000eaa:	681c      	ldr	r4, [r3, #0]
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <Menu_manager+0x27c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	492e      	ldr	r1, [pc, #184]	@ (8000f6c <Menu_manager+0x2c0>)
 8000eb2:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <Menu_manager+0x284>)
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	0023      	movs	r3, r4
 8000eb8:	f002 f832 	bl	8002f20 <siprintf>
			sprintf(secondLine, "DT: %02lu/%02lu/%02lu", day, month, year);
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <Menu_manager+0x28c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <Menu_manager+0x290>)
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <Menu_manager+0x294>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4929      	ldr	r1, [pc, #164]	@ (8000f70 <Menu_manager+0x2c4>)
 8000eca:	481f      	ldr	r0, [pc, #124]	@ (8000f48 <Menu_manager+0x29c>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	0023      	movs	r3, r4
 8000ed0:	f002 f826 	bl	8002f20 <siprintf>
 8000ed4:	e009      	b.n	8000eea <Menu_manager+0x23e>
		}
		else if (atualMenu >= 3){
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <Menu_manager+0x26c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d905      	bls.n	8000eea <Menu_manager+0x23e>
			atualMenu = 1;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <Menu_manager+0x26c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
			pause = 0;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <Menu_manager+0x2bc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
		}

		Message(firstLine);
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <Menu_manager+0x284>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fe9d 	bl	8000c2c <Message>
		Info_manager(0xC0, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	20c0      	movs	r0, #192	@ 0xc0
 8000ef6:	f7ff fdd5 	bl	8000aa4 <Info_manager>
		Message(secondLine);
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <Menu_manager+0x29c>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fe95 	bl	8000c2c <Message>

		id_char = 0;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <Menu_manager+0x2a4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
		x = 0;
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <Menu_manager+0x2b4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b001      	add	sp, #4
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	200000cc 	.word	0x200000cc
 8000f20:	20000100 	.word	0x20000100
 8000f24:	200000fc 	.word	0x200000fc
 8000f28:	200000f8 	.word	0x200000f8
 8000f2c:	08003874 	.word	0x08003874
 8000f30:	20000114 	.word	0x20000114
 8000f34:	200000e0 	.word	0x200000e0
 8000f38:	200000ec 	.word	0x200000ec
 8000f3c:	200000f0 	.word	0x200000f0
 8000f40:	200000f4 	.word	0x200000f4
 8000f44:	08003890 	.word	0x08003890
 8000f48:	20000130 	.word	0x20000130
 8000f4c:	20000110 	.word	0x20000110
 8000f50:	200000e6 	.word	0x200000e6
 8000f54:	200000e5 	.word	0x200000e5
 8000f58:	200000e7 	.word	0x200000e7
 8000f5c:	2000014c 	.word	0x2000014c
 8000f60:	200000e8 	.word	0x200000e8
 8000f64:	20000088 	.word	0x20000088
 8000f68:	2000010c 	.word	0x2000010c
 8000f6c:	080038ac 	.word	0x080038ac
 8000f70:	080038c8 	.word	0x080038c8

08000f74 <Altern_selection>:

void Altern_selection(void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	switch(id_char){
 8000f78:	4b39      	ldr	r3, [pc, #228]	@ (8001060 <Altern_selection+0xec>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b0b      	cmp	r3, #11
 8000f7e:	d864      	bhi.n	800104a <Altern_selection+0xd6>
 8000f80:	009a      	lsls	r2, r3, #2
 8000f82:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <Altern_selection+0xf0>)
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	469f      	mov	pc, r3
		case 0:
			Info_manager(0x88, 0);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2088      	movs	r0, #136	@ 0x88
 8000f8e:	f7ff fd89 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000f92:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <Altern_selection+0xf4>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
			break;
 8000f98:	e05f      	b.n	800105a <Altern_selection+0xe6>

		case 1:
			Info_manager(0x89, 0);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2089      	movs	r0, #137	@ 0x89
 8000f9e:	f7ff fd81 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <Altern_selection+0xf4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
			break;
 8000fa8:	e057      	b.n	800105a <Altern_selection+0xe6>

		case 2:
			Info_manager(0x8B, 0);
 8000faa:	2100      	movs	r1, #0
 8000fac:	208b      	movs	r0, #139	@ 0x8b
 8000fae:	f7ff fd79 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <Altern_selection+0xf4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
			break;
 8000fb8:	e04f      	b.n	800105a <Altern_selection+0xe6>

		case 3:
			Info_manager(0x8C, 0);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	208c      	movs	r0, #140	@ 0x8c
 8000fbe:	f7ff fd71 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <Altern_selection+0xf4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
			break;
 8000fc8:	e047      	b.n	800105a <Altern_selection+0xe6>

		case 4:
			Info_manager(0x8E, 0);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	208e      	movs	r0, #142	@ 0x8e
 8000fce:	f7ff fd69 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <Altern_selection+0xf4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
			break;
 8000fd8:	e03f      	b.n	800105a <Altern_selection+0xe6>

		case 5:
			Info_manager(0x8F, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	208f      	movs	r0, #143	@ 0x8f
 8000fde:	f7ff fd61 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <Altern_selection+0xf4>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
			break;
 8000fe8:	e037      	b.n	800105a <Altern_selection+0xe6>

		case 6:
			Info_manager(0xC4, 0);
 8000fea:	2100      	movs	r1, #0
 8000fec:	20c4      	movs	r0, #196	@ 0xc4
 8000fee:	f7ff fd59 	bl	8000aa4 <Info_manager>
			flag = 1;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <Altern_selection+0xf4>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e02f      	b.n	800105a <Altern_selection+0xe6>

		case 7:
			Info_manager(0xC5, 0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	20c5      	movs	r0, #197	@ 0xc5
 8000ffe:	f7ff fd51 	bl	8000aa4 <Info_manager>
			flag = 1;
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <Altern_selection+0xf4>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
			break;
 8001008:	e027      	b.n	800105a <Altern_selection+0xe6>

		case 8:
			Info_manager(0xC7, 0);
 800100a:	2100      	movs	r1, #0
 800100c:	20c7      	movs	r0, #199	@ 0xc7
 800100e:	f7ff fd49 	bl	8000aa4 <Info_manager>
			flag = 1;
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <Altern_selection+0xf4>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
			break;
 8001018:	e01f      	b.n	800105a <Altern_selection+0xe6>

		case 9:
			Info_manager(0xC8, 0);
 800101a:	2100      	movs	r1, #0
 800101c:	20c8      	movs	r0, #200	@ 0xc8
 800101e:	f7ff fd41 	bl	8000aa4 <Info_manager>
			flag = 1;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <Altern_selection+0xf4>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
			break;
 8001028:	e017      	b.n	800105a <Altern_selection+0xe6>

		case 10:
			Info_manager(0xCA, 0);
 800102a:	2100      	movs	r1, #0
 800102c:	20ca      	movs	r0, #202	@ 0xca
 800102e:	f7ff fd39 	bl	8000aa4 <Info_manager>
			flag = 1;
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <Altern_selection+0xf4>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
			break;
 8001038:	e00f      	b.n	800105a <Altern_selection+0xe6>

		case 11:
			Info_manager(0xCB, 0);
 800103a:	2100      	movs	r1, #0
 800103c:	20cb      	movs	r0, #203	@ 0xcb
 800103e:	f7ff fd31 	bl	8000aa4 <Info_manager>
			flag = 1;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <Altern_selection+0xf4>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
			break;
 8001048:	e007      	b.n	800105a <Altern_selection+0xe6>

		default:
			Info_manager(0x88, 0);
 800104a:	2100      	movs	r1, #0
 800104c:	2088      	movs	r0, #136	@ 0x88
 800104e:	f7ff fd29 	bl	8000aa4 <Info_manager>
			id_char = 0;
 8001052:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <Altern_selection+0xec>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
			break;
 8001058:	46c0      	nop			@ (mov r8, r8)
	}
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000e6 	.word	0x200000e6
 8001064:	080038e0 	.word	0x080038e0
 8001068:	200000e5 	.word	0x200000e5

0800106c <Info_limit>:

void Info_limit(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	switch(id_char){
 8001070:	4b2e      	ldr	r3, [pc, #184]	@ (800112c <Info_limit+0xc0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b09      	cmp	r3, #9
 8001076:	d855      	bhi.n	8001124 <Info_limit+0xb8>
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <Info_limit+0xc4>)
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	469f      	mov	pc, r3
		case 0:
			if (keyResponse >= '3') keyResponse = '2';
 8001082:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <Info_limit+0xc8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b32      	cmp	r3, #50	@ 0x32
 8001088:	d93f      	bls.n	800110a <Info_limit+0x9e>
 800108a:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <Info_limit+0xc8>)
 800108c:	2232      	movs	r2, #50	@ 0x32
 800108e:	701a      	strb	r2, [r3, #0]
			break;
 8001090:	e03b      	b.n	800110a <Info_limit+0x9e>

		case 1:
			if (keyResponse >= '4' && str_temp[0] == '2') keyResponse = '3';
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <Info_limit+0xc8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b33      	cmp	r3, #51	@ 0x33
 8001098:	d939      	bls.n	800110e <Info_limit+0xa2>
 800109a:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <Info_limit+0xcc>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b32      	cmp	r3, #50	@ 0x32
 80010a0:	d135      	bne.n	800110e <Info_limit+0xa2>
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <Info_limit+0xc8>)
 80010a4:	2233      	movs	r2, #51	@ 0x33
 80010a6:	701a      	strb	r2, [r3, #0]
			break;
 80010a8:	e031      	b.n	800110e <Info_limit+0xa2>

		case 2:
		case 4:
			if (keyResponse >= '6') keyResponse = '5';
 80010aa:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <Info_limit+0xc8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b35      	cmp	r3, #53	@ 0x35
 80010b0:	d92f      	bls.n	8001112 <Info_limit+0xa6>
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <Info_limit+0xc8>)
 80010b4:	2235      	movs	r2, #53	@ 0x35
 80010b6:	701a      	strb	r2, [r3, #0]
			break;
 80010b8:	e02b      	b.n	8001112 <Info_limit+0xa6>

		case 6:
			if (keyResponse >= '4') keyResponse = '3';
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <Info_limit+0xc8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b33      	cmp	r3, #51	@ 0x33
 80010c0:	d929      	bls.n	8001116 <Info_limit+0xaa>
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <Info_limit+0xc8>)
 80010c4:	2233      	movs	r2, #51	@ 0x33
 80010c6:	701a      	strb	r2, [r3, #0]
			break;
 80010c8:	e025      	b.n	8001116 <Info_limit+0xaa>

		case 7:
			if (keyResponse >= '4' && str_temp[0] == '3') keyResponse = '0';
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <Info_limit+0xc8>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b33      	cmp	r3, #51	@ 0x33
 80010d0:	d923      	bls.n	800111a <Info_limit+0xae>
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <Info_limit+0xcc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b33      	cmp	r3, #51	@ 0x33
 80010d8:	d11f      	bne.n	800111a <Info_limit+0xae>
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <Info_limit+0xc8>)
 80010dc:	2230      	movs	r2, #48	@ 0x30
 80010de:	701a      	strb	r2, [r3, #0]
			break;
 80010e0:	e01b      	b.n	800111a <Info_limit+0xae>

		case 8:
			if (keyResponse >= '2') keyResponse = '1';
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <Info_limit+0xc8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b31      	cmp	r3, #49	@ 0x31
 80010e8:	d919      	bls.n	800111e <Info_limit+0xb2>
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <Info_limit+0xc8>)
 80010ec:	2231      	movs	r2, #49	@ 0x31
 80010ee:	701a      	strb	r2, [r3, #0]
			break;
 80010f0:	e015      	b.n	800111e <Info_limit+0xb2>

		case 9:
			if (keyResponse >= '3' && str_temp[0] == '1') keyResponse = '2';
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <Info_limit+0xc8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b32      	cmp	r3, #50	@ 0x32
 80010f8:	d913      	bls.n	8001122 <Info_limit+0xb6>
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <Info_limit+0xcc>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b31      	cmp	r3, #49	@ 0x31
 8001100:	d10f      	bne.n	8001122 <Info_limit+0xb6>
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <Info_limit+0xc8>)
 8001104:	2232      	movs	r2, #50	@ 0x32
 8001106:	701a      	strb	r2, [r3, #0]
			break;
 8001108:	e00b      	b.n	8001122 <Info_limit+0xb6>
			break;
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	e00a      	b.n	8001124 <Info_limit+0xb8>
			break;
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	e008      	b.n	8001124 <Info_limit+0xb8>
			break;
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	e006      	b.n	8001124 <Info_limit+0xb8>
			break;
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	e004      	b.n	8001124 <Info_limit+0xb8>
			break;
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	e002      	b.n	8001124 <Info_limit+0xb8>
			break;
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	e000      	b.n	8001124 <Info_limit+0xb8>
			break;
 8001122:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	200000e6 	.word	0x200000e6
 8001130:	08003910 	.word	0x08003910
 8001134:	20000110 	.word	0x20000110
 8001138:	2000014c 	.word	0x2000014c

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <HAL_MspInit+0x24>)
 800114e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_MspInit+0x24>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <HAL_MspInit+0x24>)
 800115a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_MspInit+0x24>)
 800115e:	2180      	movs	r1, #128	@ 0x80
 8001160:	0549      	lsls	r1, r1, #21
 8001162:	430a      	orrs	r2, r1
 8001164:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <HAL_RTC_MspInit+0x28>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d106      	bne.n	8001190 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_RTC_MspInit+0x2c>)
 8001184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_RTC_MspInit+0x2c>)
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	02c9      	lsls	r1, r1, #11
 800118c:	430a      	orrs	r2, r1
 800118e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40002800 	.word	0x40002800
 800119c:	40021000 	.word	0x40021000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	e7fd      	b.n	80011a4 <NMI_Handler+0x4>

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	e7fd      	b.n	80011ac <HardFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8be 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f001 feb4 	bl	8002f70 <__errno>
 8001208:	0003      	movs	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	2301      	movs	r3, #1
 8001210:	425b      	negs	r3, r3
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	18d2      	adds	r2, r2, r3
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <_sbrk+0x64>)
 8001224:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b006      	add	sp, #24
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20002000 	.word	0x20002000
 8001234:	00000400 	.word	0x00000400
 8001238:	20000154 	.word	0x20000154
 800123c:	200002a8 	.word	0x200002a8

08001240 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800124e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001250:	f7ff fff6 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f001 fe7f 	bl	8002f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff f91d 	bl	80004bc <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   r0, =_estack
 8001284:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001290:	08003a98 	.word	0x08003a98
  ldr r2, =_sbss
 8001294:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001298:	200002a4 	.word	0x200002a4

0800129c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_COMP_IRQHandler>
	...

080012a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_Init+0x3c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Init+0x3c>)
 80012b2:	2140      	movs	r1, #64	@ 0x40
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f811 	bl	80012e0 <HAL_InitTick>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d003      	beq.n	80012ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e001      	b.n	80012ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ca:	f7ff ff3d 	bl	8001148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_InitTick+0x5c>)
 80012ea:	681c      	ldr	r4, [r3, #0]
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <HAL_InitTick+0x60>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	0019      	movs	r1, r3
 80012f2:	23fa      	movs	r3, #250	@ 0xfa
 80012f4:	0098      	lsls	r0, r3, #2
 80012f6:	f7fe ff11 	bl	800011c <__udivsi3>
 80012fa:	0003      	movs	r3, r0
 80012fc:	0019      	movs	r1, r3
 80012fe:	0020      	movs	r0, r4
 8001300:	f7fe ff0c 	bl	800011c <__udivsi3>
 8001304:	0003      	movs	r3, r0
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f905 	bl	8001516 <HAL_SYSTICK_Config>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e00f      	b.n	8001334 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d80b      	bhi.n	8001332 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2301      	movs	r3, #1
 800131e:	425b      	negs	r3, r3
 8001320:	2200      	movs	r2, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f8e2 	bl	80014ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_InitTick+0x64>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b003      	add	sp, #12
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	20000010 	.word	0x20000010
 8001340:	20000018 	.word	0x20000018
 8001344:	20000014 	.word	0x20000014

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_IncTick+0x1c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_IncTick+0x20>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	18d2      	adds	r2, r2, r3
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <HAL_IncTick+0x20>)
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	20000018 	.word	0x20000018
 8001368:	20000158 	.word	0x20000158

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b02      	ldr	r3, [pc, #8]	@ (800137c <HAL_GetTick+0x10>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	20000158 	.word	0x20000158

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff fff0 	bl	800136c <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	001a      	movs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	189b      	adds	r3, r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	f7ff ffe0 	bl	800136c <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	20000018 	.word	0x20000018

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	0002      	movs	r2, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b7f      	cmp	r3, #127	@ 0x7f
 80013dc:	d828      	bhi.n	8001430 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013de:	4a2f      	ldr	r2, [pc, #188]	@ (800149c <__NVIC_SetPriority+0xd4>)
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	33c0      	adds	r3, #192	@ 0xc0
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	589b      	ldr	r3, [r3, r2]
 80013ee:	1dfa      	adds	r2, r7, #7
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	0011      	movs	r1, r2
 80013f4:	2203      	movs	r2, #3
 80013f6:	400a      	ands	r2, r1
 80013f8:	00d2      	lsls	r2, r2, #3
 80013fa:	21ff      	movs	r1, #255	@ 0xff
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	43d2      	mvns	r2, r2
 8001402:	401a      	ands	r2, r3
 8001404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	019b      	lsls	r3, r3, #6
 800140a:	22ff      	movs	r2, #255	@ 0xff
 800140c:	401a      	ands	r2, r3
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	2303      	movs	r3, #3
 8001416:	4003      	ands	r3, r0
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141c:	481f      	ldr	r0, [pc, #124]	@ (800149c <__NVIC_SetPriority+0xd4>)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	430a      	orrs	r2, r1
 8001428:	33c0      	adds	r3, #192	@ 0xc0
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800142e:	e031      	b.n	8001494 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <__NVIC_SetPriority+0xd8>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	0019      	movs	r1, r3
 8001438:	230f      	movs	r3, #15
 800143a:	400b      	ands	r3, r1
 800143c:	3b08      	subs	r3, #8
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3306      	adds	r3, #6
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	3304      	adds	r3, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1dfa      	adds	r2, r7, #7
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	0011      	movs	r1, r2
 8001450:	2203      	movs	r2, #3
 8001452:	400a      	ands	r2, r1
 8001454:	00d2      	lsls	r2, r2, #3
 8001456:	21ff      	movs	r1, #255	@ 0xff
 8001458:	4091      	lsls	r1, r2
 800145a:	000a      	movs	r2, r1
 800145c:	43d2      	mvns	r2, r2
 800145e:	401a      	ands	r2, r3
 8001460:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	019b      	lsls	r3, r3, #6
 8001466:	22ff      	movs	r2, #255	@ 0xff
 8001468:	401a      	ands	r2, r3
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	2303      	movs	r3, #3
 8001472:	4003      	ands	r3, r0
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <__NVIC_SetPriority+0xd8>)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	001c      	movs	r4, r3
 8001480:	230f      	movs	r3, #15
 8001482:	4023      	ands	r3, r4
 8001484:	3b08      	subs	r3, #8
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	430a      	orrs	r2, r1
 800148a:	3306      	adds	r3, #6
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	18c3      	adds	r3, r0, r3
 8001490:	3304      	adds	r3, #4
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b003      	add	sp, #12
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	045b      	lsls	r3, r3, #17
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d301      	bcc.n	80014bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b8:	2301      	movs	r3, #1
 80014ba:	e010      	b.n	80014de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <SysTick_Config+0x44>)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	3a01      	subs	r2, #1
 80014c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c4:	2301      	movs	r3, #1
 80014c6:	425b      	negs	r3, r3
 80014c8:	2103      	movs	r1, #3
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff ff7c 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <SysTick_Config+0x44>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <SysTick_Config+0x44>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	210f      	movs	r1, #15
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	187b      	adds	r3, r7, r1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25b      	sxtb	r3, r3
 8001506:	0011      	movs	r1, r2
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b004      	add	sp, #16
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ffbf 	bl	80014a4 <SysTick_Config>
 8001526:	0003      	movs	r3, r0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001546:	e14f      	b.n	80017e8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d100      	bne.n	8001560 <HAL_GPIO_Init+0x30>
 800155e:	e140      	b.n	80017e2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	4013      	ands	r3, r2
 8001568:	2b01      	cmp	r3, #1
 800156a:	d005      	beq.n	8001578 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2203      	movs	r2, #3
 8001572:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001574:	2b02      	cmp	r3, #2
 8001576:	d130      	bne.n	80015da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ae:	2201      	movs	r2, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	2201      	movs	r2, #1
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d017      	beq.n	8001616 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	43da      	mvns	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2203      	movs	r2, #3
 800161c:	4013      	ands	r3, r2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d123      	bne.n	800166a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	58d3      	ldr	r3, [r2, r3]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2207      	movs	r2, #7
 8001634:	4013      	ands	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2107      	movs	r1, #7
 800164e:	400b      	ands	r3, r1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	6939      	ldr	r1, [r7, #16]
 8001668:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	401a      	ands	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	23c0      	movs	r3, #192	@ 0xc0
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	4013      	ands	r3, r2
 80016a8:	d100      	bne.n	80016ac <HAL_GPIO_Init+0x17c>
 80016aa:	e09a      	b.n	80017e2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	4b54      	ldr	r3, [pc, #336]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 80016ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b8:	4a52      	ldr	r2, [pc, #328]	@ (8001804 <HAL_GPIO_Init+0x2d4>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	589b      	ldr	r3, [r3, r2]
 80016c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2203      	movs	r2, #3
 80016ca:	4013      	ands	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	43da      	mvns	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	23a0      	movs	r3, #160	@ 0xa0
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x1ea>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a47      	ldr	r2, [pc, #284]	@ (8001808 <HAL_GPIO_Init+0x2d8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x1e6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a46      	ldr	r2, [pc, #280]	@ (800180c <HAL_GPIO_Init+0x2dc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x1e2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a45      	ldr	r2, [pc, #276]	@ (8001810 <HAL_GPIO_Init+0x2e0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x1de>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a44      	ldr	r2, [pc, #272]	@ (8001814 <HAL_GPIO_Init+0x2e4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x1da>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x1ec>
 800170a:	2306      	movs	r3, #6
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x1ec>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x1ec>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x1ec>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x1ec>
 800171a:	2300      	movs	r3, #0
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	2103      	movs	r1, #3
 8001720:	400a      	ands	r2, r1
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	@ (8001804 <HAL_GPIO_Init+0x2d4>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	2380      	movs	r3, #128	@ 0x80
 8001750:	035b      	lsls	r3, r3, #13
 8001752:	4013      	ands	r3, r2
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	039b      	lsls	r3, r3, #14
 800177c:	4013      	ands	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	029b      	lsls	r3, r3, #10
 80017a6:	4013      	ands	r3, r2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43da      	mvns	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	025b      	lsls	r3, r3, #9
 80017d0:	4013      	ands	r3, r2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_GPIO_Init+0x2e8>)
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	40da      	lsrs	r2, r3
 80017f0:	1e13      	subs	r3, r2, #0
 80017f2:	d000      	beq.n	80017f6 <HAL_GPIO_Init+0x2c6>
 80017f4:	e6a8      	b.n	8001548 <HAL_GPIO_Init+0x18>
  }
}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b006      	add	sp, #24
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	50000400 	.word	0x50000400
 800180c:	50000800 	.word	0x50000800
 8001810:	50000c00 	.word	0x50000c00
 8001814:	50001c00 	.word	0x50001c00
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	000a      	movs	r2, r1
 8001826:	1cbb      	adds	r3, r7, #2
 8001828:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	1cba      	adds	r2, r7, #2
 8001830:	8812      	ldrh	r2, [r2, #0]
 8001832:	4013      	ands	r3, r2
 8001834:	d004      	beq.n	8001840 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001836:	230f      	movs	r3, #15
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e003      	b.n	8001848 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001840:	230f      	movs	r3, #15
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001848:	230f      	movs	r3, #15
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	781b      	ldrb	r3, [r3, #0]
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b004      	add	sp, #16
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	0008      	movs	r0, r1
 8001860:	0011      	movs	r1, r2
 8001862:	1cbb      	adds	r3, r7, #2
 8001864:	1c02      	adds	r2, r0, #0
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	1c7b      	adds	r3, r7, #1
 800186a:	1c0a      	adds	r2, r1, #0
 800186c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800186e:	1c7b      	adds	r3, r7, #1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800187e:	e003      	b.n	8001888 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001880:	1cbb      	adds	r3, r7, #2
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	0049      	lsls	r1, r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f000 fbaf 	bl	800201e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c0:	4bcf      	ldr	r3, [pc, #828]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	220c      	movs	r2, #12
 80018c6:	4013      	ands	r3, r2
 80018c8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ca:	4bcd      	ldr	r3, [pc, #820]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	4013      	ands	r3, r2
 80018d4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2201      	movs	r2, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	d100      	bne.n	80018e2 <HAL_RCC_OscConfig+0x36>
 80018e0:	e07e      	b.n	80019e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d007      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x68>
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	4bc1      	ldr	r3, [pc, #772]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x5a>
 8001904:	e06b      	b.n	80019de <HAL_RCC_OscConfig+0x132>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d167      	bne.n	80019de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	f000 fb85 	bl	800201e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	025b      	lsls	r3, r3, #9
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x84>
 8001920:	4bb7      	ldr	r3, [pc, #732]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4bb6      	ldr	r3, [pc, #728]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001926:	2180      	movs	r1, #128	@ 0x80
 8001928:	0249      	lsls	r1, r1, #9
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e027      	b.n	8001980 <HAL_RCC_OscConfig+0xd4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	23a0      	movs	r3, #160	@ 0xa0
 8001936:	02db      	lsls	r3, r3, #11
 8001938:	429a      	cmp	r2, r3
 800193a:	d10e      	bne.n	800195a <HAL_RCC_OscConfig+0xae>
 800193c:	4bb0      	ldr	r3, [pc, #704]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4baf      	ldr	r3, [pc, #700]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001942:	2180      	movs	r1, #128	@ 0x80
 8001944:	02c9      	lsls	r1, r1, #11
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	4bad      	ldr	r3, [pc, #692]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4bac      	ldr	r3, [pc, #688]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	0249      	lsls	r1, r1, #9
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e012      	b.n	8001980 <HAL_RCC_OscConfig+0xd4>
 800195a:	4ba9      	ldr	r3, [pc, #676]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4ba8      	ldr	r3, [pc, #672]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001960:	49a8      	ldr	r1, [pc, #672]	@ (8001c04 <HAL_RCC_OscConfig+0x358>)
 8001962:	400a      	ands	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	4ba6      	ldr	r3, [pc, #664]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	4013      	ands	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4ba2      	ldr	r3, [pc, #648]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4ba1      	ldr	r3, [pc, #644]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 800197a:	49a3      	ldr	r1, [pc, #652]	@ (8001c08 <HAL_RCC_OscConfig+0x35c>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fcf0 	bl	800136c <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff fceb 	bl	800136c <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	@ 0x64
 800199e:	d902      	bls.n	80019a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f000 fb3c 	bl	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a6:	4b96      	ldr	r3, [pc, #600]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	d0ef      	beq.n	8001992 <HAL_RCC_OscConfig+0xe6>
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fcda 	bl	800136c <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019be:	f7ff fcd5 	bl	800136c <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e326      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019d0:	4b8b      	ldr	r3, [pc, #556]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x112>
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d100      	bne.n	80019ec <HAL_RCC_OscConfig+0x140>
 80019ea:	e08b      	b.n	8001b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d13e      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1d0>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d13b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a04:	4b7e      	ldr	r3, [pc, #504]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_RCC_OscConfig+0x16c>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e302      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b79      	ldr	r3, [pc, #484]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a7b      	ldr	r2, [pc, #492]	@ (8001c0c <HAL_RCC_OscConfig+0x360>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	021a      	lsls	r2, r3, #8
 8001a28:	4b75      	ldr	r3, [pc, #468]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a2e:	4b74      	ldr	r3, [pc, #464]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2209      	movs	r2, #9
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b71      	ldr	r3, [pc, #452]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a40:	f000 fc40 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8001a44:	0001      	movs	r1, r0
 8001a46:	4b6e      	ldr	r3, [pc, #440]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	4013      	ands	r3, r2
 8001a50:	4a6f      	ldr	r2, [pc, #444]	@ (8001c10 <HAL_RCC_OscConfig+0x364>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	000a      	movs	r2, r1
 8001a56:	40da      	lsrs	r2, r3
 8001a58:	4b6e      	ldr	r3, [pc, #440]	@ (8001c14 <HAL_RCC_OscConfig+0x368>)
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a5c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c18 <HAL_RCC_OscConfig+0x36c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2513      	movs	r5, #19
 8001a62:	197c      	adds	r4, r7, r5
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff fc3b 	bl	80012e0 <HAL_InitTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a6e:	197b      	adds	r3, r7, r5
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d046      	beq.n	8001b04 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a76:	197b      	adds	r3, r7, r5
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	e2d0      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d027      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a82:	4b5f      	ldr	r3, [pc, #380]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2209      	movs	r2, #9
 8001a88:	4393      	bics	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc6a 	bl	800136c <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fc65 	bl	800136c <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e2b6      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f1      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a53      	ldr	r2, [pc, #332]	@ (8001c0c <HAL_RCC_OscConfig+0x360>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	021a      	lsls	r2, r3, #8
 8001aca:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	e018      	b.n	8001b04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	438a      	bics	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fc45 	bl	800136c <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fc40 	bl	800136c <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e291      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001afa:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	d1f1      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d100      	bne.n	8001b10 <HAL_RCC_OscConfig+0x264>
 8001b0e:	e0a1      	b.n	8001c54 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d140      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b16:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x282>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e277      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2e:	4b34      	ldr	r3, [pc, #208]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a3a      	ldr	r2, [pc, #232]	@ (8001c1c <HAL_RCC_OscConfig+0x370>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3c:	4b30      	ldr	r3, [pc, #192]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b42:	4b2f      	ldr	r3, [pc, #188]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	0a19      	lsrs	r1, r3, #8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	061a      	lsls	r2, r3, #24
 8001b50:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	0b5b      	lsrs	r3, r3, #13
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	0212      	lsls	r2, r2, #8
 8001b62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b64:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	4928      	ldr	r1, [pc, #160]	@ (8001c10 <HAL_RCC_OscConfig+0x364>)
 8001b70:	5ccb      	ldrb	r3, [r1, r3]
 8001b72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <HAL_RCC_OscConfig+0x368>)
 8001b76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <HAL_RCC_OscConfig+0x36c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2513      	movs	r5, #19
 8001b7e:	197c      	adds	r4, r7, r5
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fbad 	bl	80012e0 <HAL_InitTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b8a:	197b      	adds	r3, r7, r5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d060      	beq.n	8001c54 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001b92:	197b      	adds	r3, r7, r5
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	e242      	b.n	800201e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d03f      	beq.n	8001c20 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ba0:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	0049      	lsls	r1, r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7ff fbdd 	bl	800136c <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fbd8 	bl	800136c <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e229      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bca:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <HAL_RCC_OscConfig+0x370>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	0a19      	lsrs	r1, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	061a      	lsls	r2, r3, #24
 8001bf8:	4b01      	ldr	r3, [pc, #4]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	e029      	b.n	8001c54 <HAL_RCC_OscConfig+0x3a8>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	fffeffff 	.word	0xfffeffff
 8001c08:	fffbffff 	.word	0xfffbffff
 8001c0c:	ffffe0ff 	.word	0xffffe0ff
 8001c10:	08003938 	.word	0x08003938
 8001c14:	20000010 	.word	0x20000010
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c20:	4bbd      	ldr	r3, [pc, #756]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4bbc      	ldr	r3, [pc, #752]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c26:	49bd      	ldr	r1, [pc, #756]	@ (8001f1c <HAL_RCC_OscConfig+0x670>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb9e 	bl	800136c <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c36:	f7ff fb99 	bl	800136c <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1ea      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c48:	4bb3      	ldr	r3, [pc, #716]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d036      	beq.n	8001ccc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4bac      	ldr	r3, [pc, #688]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c6a:	4bab      	ldr	r3, [pc, #684]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb7b 	bl	800136c <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fb76 	bl	800136c <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1c7      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c8e:	4ba2      	ldr	r3, [pc, #648]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f1      	beq.n	8001c7c <HAL_RCC_OscConfig+0x3d0>
 8001c98:	e018      	b.n	8001ccc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001c9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c9e:	4b9e      	ldr	r3, [pc, #632]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fb61 	bl	800136c <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fb5c 	bl	800136c <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1ad      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cc2:	4b95      	ldr	r3, [pc, #596]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d1f1      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d100      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x42c>
 8001cd6:	e0ae      	b.n	8001e36 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd8:	2027      	movs	r0, #39	@ 0x27
 8001cda:	183b      	adds	r3, r7, r0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	055b      	lsls	r3, r3, #21
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d109      	bne.n	8001d00 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	4b8a      	ldr	r3, [pc, #552]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cf0:	4b89      	ldr	r3, [pc, #548]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001cf2:	2180      	movs	r1, #128	@ 0x80
 8001cf4:	0549      	lsls	r1, r1, #21
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001cfa:	183b      	adds	r3, r7, r0
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b87      	ldr	r3, [pc, #540]	@ (8001f20 <HAL_RCC_OscConfig+0x674>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d11a      	bne.n	8001d42 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0c:	4b84      	ldr	r3, [pc, #528]	@ (8001f20 <HAL_RCC_OscConfig+0x674>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b83      	ldr	r3, [pc, #524]	@ (8001f20 <HAL_RCC_OscConfig+0x674>)
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	0049      	lsls	r1, r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fb27 	bl	800136c <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7ff fb22 	bl	800136c <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e173      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b7a      	ldr	r3, [pc, #488]	@ (8001f20 <HAL_RCC_OscConfig+0x674>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	2380      	movs	r3, #128	@ 0x80
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4b2>
 8001d4e:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d52:	4b71      	ldr	r3, [pc, #452]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d54:	2180      	movs	r1, #128	@ 0x80
 8001d56:	0049      	lsls	r1, r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d5c:	e031      	b.n	8001dc2 <HAL_RCC_OscConfig+0x516>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4d4>
 8001d66:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d6c:	496b      	ldr	r1, [pc, #428]	@ (8001f1c <HAL_RCC_OscConfig+0x670>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d72:	4b69      	ldr	r3, [pc, #420]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d76:	4b68      	ldr	r3, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d78:	496a      	ldr	r1, [pc, #424]	@ (8001f24 <HAL_RCC_OscConfig+0x678>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d7e:	e020      	b.n	8001dc2 <HAL_RCC_OscConfig+0x516>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	23a0      	movs	r3, #160	@ 0xa0
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10e      	bne.n	8001daa <HAL_RCC_OscConfig+0x4fe>
 8001d8c:	4b62      	ldr	r3, [pc, #392]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d90:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	00c9      	lsls	r1, r1, #3
 8001d96:	430a      	orrs	r2, r1
 8001d98:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001da0:	2180      	movs	r1, #128	@ 0x80
 8001da2:	0049      	lsls	r1, r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x516>
 8001daa:	4b5b      	ldr	r3, [pc, #364]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dae:	4b5a      	ldr	r3, [pc, #360]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001db0:	495a      	ldr	r1, [pc, #360]	@ (8001f1c <HAL_RCC_OscConfig+0x670>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001db6:	4b58      	ldr	r3, [pc, #352]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001db8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dba:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001dbc:	4959      	ldr	r1, [pc, #356]	@ (8001f24 <HAL_RCC_OscConfig+0x678>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7ff facf 	bl	800136c <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd2:	e009      	b.n	8001de8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff faca 	bl	800136c <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	4a52      	ldr	r2, [pc, #328]	@ (8001f28 <HAL_RCC_OscConfig+0x67c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e11a      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001de8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0ef      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x528>
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fab9 	bl	800136c <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dfe:	e009      	b.n	8001e14 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff fab4 	bl	800136c <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	4a47      	ldr	r2, [pc, #284]	@ (8001f28 <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e104      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e14:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d1ef      	bne.n	8001e00 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e20:	2327      	movs	r3, #39	@ 0x27
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e30:	493e      	ldr	r1, [pc, #248]	@ (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d049      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d026      	beq.n	8001e96 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e48:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e58:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e60:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <HAL_RCC_OscConfig+0x684>)
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	4b32      	ldr	r3, [pc, #200]	@ (8001f30 <HAL_RCC_OscConfig+0x684>)
 8001e66:	2180      	movs	r1, #128	@ 0x80
 8001e68:	0189      	lsls	r1, r1, #6
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fa7d 	bl	800136c <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e78:	f7ff fa78 	bl	800136c <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0c9      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d0f1      	beq.n	8001e78 <HAL_RCC_OscConfig+0x5cc>
 8001e94:	e01e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <HAL_RCC_OscConfig+0x684>)
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <HAL_RCC_OscConfig+0x684>)
 8001ea8:	4922      	ldr	r1, [pc, #136]	@ (8001f34 <HAL_RCC_OscConfig+0x688>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fa5d 	bl	800136c <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb8:	f7ff fa58 	bl	800136c <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0a9      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f1      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <HAL_RCC_OscConfig+0x632>
 8001edc:	e09e      	b.n	800201c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d100      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x63a>
 8001ee4:	e077      	b.n	8001fd6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d158      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_OscConfig+0x66c>)
 8001ef4:	4910      	ldr	r1, [pc, #64]	@ (8001f38 <HAL_RCC_OscConfig+0x68c>)
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fa37 	bl	800136c <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f02:	e01b      	b.n	8001f3c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fa32 	bl	800136c <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d914      	bls.n	8001f3c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e083      	b.n	800201e <HAL_RCC_OscConfig+0x772>
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	fffffeff 	.word	0xfffffeff
 8001f20:	40007000 	.word	0x40007000
 8001f24:	fffffbff 	.word	0xfffffbff
 8001f28:	00001388 	.word	0x00001388
 8001f2c:	efffffff 	.word	0xefffffff
 8001f30:	40010000 	.word	0x40010000
 8001f34:	ffffdfff 	.word	0xffffdfff
 8001f38:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	049b      	lsls	r3, r3, #18
 8001f44:	4013      	ands	r3, r2
 8001f46:	d1dd      	bne.n	8001f04 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a37      	ldr	r2, [pc, #220]	@ (800202c <HAL_RCC_OscConfig+0x780>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f60:	431a      	orrs	r2, r3
 8001f62:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001f6e:	2180      	movs	r1, #128	@ 0x80
 8001f70:	0449      	lsls	r1, r1, #17
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff f9f9 	bl	800136c <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f9f4 	bl	800136c <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e045      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f92:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x6d4>
 8001f9e:	e03d      	b.n	800201c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001fa6:	4922      	ldr	r1, [pc, #136]	@ (8002030 <HAL_RCC_OscConfig+0x784>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff f9de 	bl	800136c <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f9d9 	bl	800136c <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e02a      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fc8:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	049b      	lsls	r3, r3, #18
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x70a>
 8001fd4:	e022      	b.n	800201c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e01d      	b.n	800201e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_OscConfig+0x77c>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	401a      	ands	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d10f      	bne.n	8002018 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	23f0      	movs	r3, #240	@ 0xf0
 8001ffc:	039b      	lsls	r3, r3, #14
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	23c0      	movs	r3, #192	@ 0xc0
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b00a      	add	sp, #40	@ 0x28
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	40021000 	.word	0x40021000
 800202c:	ff02ffff 	.word	0xff02ffff
 8002030:	feffffff 	.word	0xfeffffff

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e128      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b96      	ldr	r3, [pc, #600]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d91e      	bls.n	8002094 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b93      	ldr	r3, [pc, #588]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	4b90      	ldr	r3, [pc, #576]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002068:	f7ff f980 	bl	800136c <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	e009      	b.n	8002086 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002072:	f7ff f97b 	bl	800136c <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	4a8a      	ldr	r2, [pc, #552]	@ (80022a8 <HAL_RCC_ClockConfig+0x274>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e109      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b87      	ldr	r3, [pc, #540]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209e:	4b83      	ldr	r3, [pc, #524]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	22f0      	movs	r2, #240	@ 0xf0
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	d100      	bne.n	80020be <HAL_RCC_ClockConfig+0x8a>
 80020bc:	e089      	b.n	80021d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c6:	4b79      	ldr	r3, [pc, #484]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	029b      	lsls	r3, r3, #10
 80020ce:	4013      	ands	r3, r2
 80020d0:	d120      	bne.n	8002114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0e1      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020de:	4b73      	ldr	r3, [pc, #460]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	049b      	lsls	r3, r3, #18
 80020e6:	4013      	ands	r3, r2
 80020e8:	d114      	bne.n	8002114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0d5      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f6:	4b6d      	ldr	r3, [pc, #436]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2204      	movs	r2, #4
 80020fc:	4013      	ands	r3, r2
 80020fe:	d109      	bne.n	8002114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ca      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002104:	4b69      	ldr	r3, [pc, #420]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0c2      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002114:	4b65      	ldr	r3, [pc, #404]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2203      	movs	r2, #3
 800211a:	4393      	bics	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4b62      	ldr	r3, [pc, #392]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002124:	430a      	orrs	r2, r1
 8002126:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7ff f920 	bl	800136c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d111      	bne.n	800215c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	e009      	b.n	800214e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7ff f917 	bl	800136c <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	4a58      	ldr	r2, [pc, #352]	@ (80022a8 <HAL_RCC_ClockConfig+0x274>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0a5      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800214e:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	220c      	movs	r2, #12
 8002154:	4013      	ands	r3, r2
 8002156:	2b08      	cmp	r3, #8
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_ClockConfig+0x106>
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d111      	bne.n	8002188 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	e009      	b.n	800217a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7ff f901 	bl	800136c <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a4d      	ldr	r2, [pc, #308]	@ (80022a8 <HAL_RCC_ClockConfig+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e08f      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217a:	4b4c      	ldr	r3, [pc, #304]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	220c      	movs	r2, #12
 8002180:	4013      	ands	r3, r2
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_ClockConfig+0x132>
 8002186:	e024      	b.n	80021d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d11b      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7ff f8eb 	bl	800136c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a42      	ldr	r2, [pc, #264]	@ (80022a8 <HAL_RCC_ClockConfig+0x274>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e079      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	220c      	movs	r2, #12
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d1ef      	bne.n	8002192 <HAL_RCC_ClockConfig+0x15e>
 80021b2:	e00e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff f8da 	bl	800136c <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	4a3a      	ldr	r2, [pc, #232]	@ (80022a8 <HAL_RCC_ClockConfig+0x274>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e068      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021c8:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	220c      	movs	r2, #12
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d2:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d21e      	bcs.n	800221e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4393      	bics	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021f2:	f7ff f8bb 	bl	800136c <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	e009      	b.n	8002210 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff f8b6 	bl	800136c <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <HAL_RCC_ClockConfig+0x274>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e044      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_RCC_ClockConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2204      	movs	r2, #4
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a20      	ldr	r2, [pc, #128]	@ (80022b0 <HAL_RCC_ClockConfig+0x27c>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002238:	430a      	orrs	r2, r1
 800223a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2208      	movs	r2, #8
 8002242:	4013      	ands	r3, r2
 8002244:	d00a      	beq.n	800225c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4a1a      	ldr	r2, [pc, #104]	@ (80022b4 <HAL_RCC_ClockConfig+0x280>)
 800224c:	4013      	ands	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00da      	lsls	r2, r3, #3
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800225c:	f000 f832 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002260:	0001      	movs	r1, r0
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_RCC_ClockConfig+0x278>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	220f      	movs	r2, #15
 800226a:	4013      	ands	r3, r2
 800226c:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_RCC_ClockConfig+0x284>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	000a      	movs	r2, r1
 8002272:	40da      	lsrs	r2, r3
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <HAL_RCC_ClockConfig+0x288>)
 8002276:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_RCC_ClockConfig+0x28c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	250b      	movs	r5, #11
 800227e:	197c      	adds	r4, r7, r5
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff f82d 	bl	80012e0 <HAL_InitTick>
 8002286:	0003      	movs	r3, r0
 8002288:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800228a:	197b      	adds	r3, r7, r5
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002292:	197b      	adds	r3, r7, r5
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	e000      	b.n	800229a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	40022000 	.word	0x40022000
 80022a8:	00001388 	.word	0x00001388
 80022ac:	40021000 	.word	0x40021000
 80022b0:	fffff8ff 	.word	0xfffff8ff
 80022b4:	ffffc7ff 	.word	0xffffc7ff
 80022b8:	08003938 	.word	0x08003938
 80022bc:	20000010 	.word	0x20000010
 80022c0:	20000014 	.word	0x20000014

080022c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b08e      	sub	sp, #56	@ 0x38
 80022c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022ca:	4b4c      	ldr	r3, [pc, #304]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x138>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022d2:	230c      	movs	r3, #12
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d014      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022da:	d900      	bls.n	80022de <HAL_RCC_GetSysClockFreq+0x1a>
 80022dc:	e07b      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x112>
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x24>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022e6:	e076      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022e8:	4b44      	ldr	r3, [pc, #272]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x138>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	4013      	ands	r3, r2
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022f2:	4b43      	ldr	r3, [pc, #268]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022f4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022f6:	e07c      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022f8:	4b42      	ldr	r3, [pc, #264]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x140>)
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80022fc:	e079      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b42      	ldr	r3, [pc, #264]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x144>)
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002302:	e076      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002306:	0c9a      	lsrs	r2, r3, #18
 8002308:	230f      	movs	r3, #15
 800230a:	401a      	ands	r2, r3
 800230c:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <HAL_RCC_GetSysClockFreq+0x148>)
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	0d9a      	lsrs	r2, r3, #22
 8002316:	2303      	movs	r3, #3
 8002318:	4013      	ands	r3, r2
 800231a:	3301      	adds	r3, #1
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231e:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	025b      	lsls	r3, r3, #9
 8002326:	4013      	ands	r3, r2
 8002328:	d01a      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x144>)
 8002334:	2300      	movs	r3, #0
 8002336:	69b8      	ldr	r0, [r7, #24]
 8002338:	69f9      	ldr	r1, [r7, #28]
 800233a:	f7fd ff9b 	bl	8000274 <__aeabi_lmul>
 800233e:	0002      	movs	r2, r0
 8002340:	000b      	movs	r3, r1
 8002342:	0010      	movs	r0, r2
 8002344:	0019      	movs	r1, r3
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f7fd ff6f 	bl	8000234 <__aeabi_uldivmod>
 8002356:	0002      	movs	r2, r0
 8002358:	000b      	movs	r3, r1
 800235a:	0013      	movs	r3, r2
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
 800235e:	e037      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	4013      	ands	r3, r2
 8002368:	d01a      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002374:	2300      	movs	r3, #0
 8002376:	68b8      	ldr	r0, [r7, #8]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	f7fd ff7b 	bl	8000274 <__aeabi_lmul>
 800237e:	0002      	movs	r2, r0
 8002380:	000b      	movs	r3, r1
 8002382:	0010      	movs	r0, r2
 8002384:	0019      	movs	r1, r3
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f7fd ff4f 	bl	8000234 <__aeabi_uldivmod>
 8002396:	0002      	movs	r2, r0
 8002398:	000b      	movs	r3, r1
 800239a:	0013      	movs	r3, r2
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
 800239e:	e017      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a2:	0018      	movs	r0, r3
 80023a4:	2300      	movs	r3, #0
 80023a6:	0019      	movs	r1, r3
 80023a8:	4a16      	ldr	r2, [pc, #88]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x140>)
 80023aa:	2300      	movs	r3, #0
 80023ac:	f7fd ff62 	bl	8000274 <__aeabi_lmul>
 80023b0:	0002      	movs	r2, r0
 80023b2:	000b      	movs	r3, r1
 80023b4:	0010      	movs	r0, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	001c      	movs	r4, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	001d      	movs	r5, r3
 80023c0:	0022      	movs	r2, r4
 80023c2:	002b      	movs	r3, r5
 80023c4:	f7fd ff36 	bl	8000234 <__aeabi_uldivmod>
 80023c8:	0002      	movs	r2, r0
 80023ca:	000b      	movs	r3, r1
 80023cc:	0013      	movs	r3, r2
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80023d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80023d4:	e00d      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x138>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0b5b      	lsrs	r3, r3, #13
 80023dc:	2207      	movs	r2, #7
 80023de:	4013      	ands	r3, r2
 80023e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	3301      	adds	r3, #1
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	0212      	lsls	r2, r2, #8
 80023ea:	409a      	lsls	r2, r3
 80023ec:	0013      	movs	r3, r2
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80023f0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b00e      	add	sp, #56	@ 0x38
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	003d0900 	.word	0x003d0900
 8002404:	00f42400 	.word	0x00f42400
 8002408:	007a1200 	.word	0x007a1200
 800240c:	08003948 	.word	0x08003948

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002418:	2317      	movs	r3, #23
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2220      	movs	r2, #32
 8002426:	4013      	ands	r3, r2
 8002428:	d106      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4013      	ands	r3, r2
 8002434:	d100      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002436:	e104      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002438:	4bb1      	ldr	r3, [pc, #708]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800243a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	055b      	lsls	r3, r3, #21
 8002440:	4013      	ands	r3, r2
 8002442:	d10a      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4bae      	ldr	r3, [pc, #696]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002448:	4bad      	ldr	r3, [pc, #692]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800244a:	2180      	movs	r1, #128	@ 0x80
 800244c:	0549      	lsls	r1, r1, #21
 800244e:	430a      	orrs	r2, r1
 8002450:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4baa      	ldr	r3, [pc, #680]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d11a      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4ba7      	ldr	r3, [pc, #668]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4ba6      	ldr	r3, [pc, #664]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	0049      	lsls	r1, r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002474:	f7fe ff7a 	bl	800136c <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e008      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247e:	f7fe ff75 	bl	800136c <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	@ 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e133      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b9c      	ldr	r3, [pc, #624]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2380      	movs	r3, #128	@ 0x80
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d0f0      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800249c:	4b98      	ldr	r3, [pc, #608]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	23c0      	movs	r3, #192	@ 0xc0
 80024a2:	039b      	lsls	r3, r3, #14
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	23c0      	movs	r3, #192	@ 0xc0
 80024ae:	039b      	lsls	r3, r3, #14
 80024b0:	4013      	ands	r3, r2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	23c0      	movs	r3, #192	@ 0xc0
 80024be:	039b      	lsls	r3, r3, #14
 80024c0:	4013      	ands	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d013      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	23c0      	movs	r3, #192	@ 0xc0
 80024ce:	029b      	lsls	r3, r3, #10
 80024d0:	401a      	ands	r2, r3
 80024d2:	23c0      	movs	r3, #192	@ 0xc0
 80024d4:	029b      	lsls	r3, r3, #10
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10a      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024da:	4b89      	ldr	r3, [pc, #548]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	401a      	ands	r2, r3
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d101      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e103      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024f0:	4b83      	ldr	r3, [pc, #524]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024f4:	23c0      	movs	r3, #192	@ 0xc0
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d049      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	23c0      	movs	r3, #192	@ 0xc0
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d004      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2220      	movs	r2, #32
 8002518:	4013      	ands	r3, r2
 800251a:	d10d      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	23c0      	movs	r3, #192	@ 0xc0
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	4013      	ands	r3, r2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d034      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4013      	ands	r3, r2
 8002536:	d02e      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002538:	4b71      	ldr	r3, [pc, #452]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800253a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253c:	4a72      	ldr	r2, [pc, #456]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002542:	4b6f      	ldr	r3, [pc, #444]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002546:	4b6e      	ldr	r3, [pc, #440]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	0309      	lsls	r1, r1, #12
 800254c:	430a      	orrs	r2, r1
 800254e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b6b      	ldr	r3, [pc, #428]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002554:	4b6a      	ldr	r3, [pc, #424]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002556:	496d      	ldr	r1, [pc, #436]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002558:	400a      	ands	r2, r1
 800255a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800255c:	4b68      	ldr	r3, [pc, #416]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d014      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fefe 	bl	800136c <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002574:	e009      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fef9 	bl	800136c <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a63      	ldr	r2, [pc, #396]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0b6      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800258a:	4b5d      	ldr	r3, [pc, #372]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800258c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800258e:	2380      	movs	r3, #128	@ 0x80
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d0ef      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	23c0      	movs	r3, #192	@ 0xc0
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	401a      	ands	r2, r3
 80025ac:	23c0      	movs	r3, #192	@ 0xc0
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025b4:	4b52      	ldr	r3, [pc, #328]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	23c0      	movs	r3, #192	@ 0xc0
 80025c4:	039b      	lsls	r3, r3, #14
 80025c6:	401a      	ands	r2, r3
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	23c0      	movs	r3, #192	@ 0xc0
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	401a      	ands	r2, r3
 80025dc:	4b48      	ldr	r3, [pc, #288]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2220      	movs	r2, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d01f      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	23c0      	movs	r3, #192	@ 0xc0
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	401a      	ands	r2, r3
 80025f6:	23c0      	movs	r3, #192	@ 0xc0
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d10c      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80025fe:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a44      	ldr	r2, [pc, #272]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	23c0      	movs	r3, #192	@ 0xc0
 800260e:	039b      	lsls	r3, r3, #14
 8002610:	401a      	ands	r2, r3
 8002612:	4b3b      	ldr	r3, [pc, #236]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4b39      	ldr	r3, [pc, #228]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	23c0      	movs	r3, #192	@ 0xc0
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	401a      	ands	r2, r3
 8002626:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002628:	430a      	orrs	r2, r1
 800262a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800262c:	2317      	movs	r3, #23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800263c:	4936      	ldr	r1, [pc, #216]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800263e:	400a      	ands	r2, r1
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264c:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002650:	2203      	movs	r2, #3
 8002652:	4393      	bics	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800265c:	430a      	orrs	r2, r1
 800265e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800266a:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	220c      	movs	r2, #12
 8002670:	4393      	bics	r3, r2
 8002672:	0019      	movs	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800267a:	430a      	orrs	r2, r1
 800267c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2204      	movs	r2, #4
 8002684:	4013      	ands	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	4a23      	ldr	r2, [pc, #140]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002698:	430a      	orrs	r2, r1
 800269a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	4013      	ands	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a6:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b6:	430a      	orrs	r2, r1
 80026b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2240      	movs	r2, #64	@ 0x40
 80026c0:	4013      	ands	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2280      	movs	r2, #128	@ 0x80
 80026de:	4013      	ands	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e6:	4a10      	ldr	r2, [pc, #64]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	fffcffff 	.word	0xfffcffff
 800270c:	fff7ffff 	.word	0xfff7ffff
 8002710:	00001388 	.word	0x00001388
 8002714:	ffcfffff 	.word	0xffcfffff
 8002718:	efffffff 	.word	0xefffffff
 800271c:	fffff3ff 	.word	0xfffff3ff
 8002720:	ffffcfff 	.word	0xffffcfff
 8002724:	fbffffff 	.word	0xfbffffff
 8002728:	fff3ffff 	.word	0xfff3ffff

0800272c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002734:	230f      	movs	r3, #15
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e088      	b.n	8002858 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2221      	movs	r2, #33	@ 0x21
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	2100      	movs	r1, #0
 8002758:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f7fe fd07 	bl	8001170 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2221      	movs	r2, #33	@ 0x21
 8002766:	2102      	movs	r1, #2
 8002768:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	2b10      	cmp	r3, #16
 8002776:	d05f      	beq.n	8002838 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	22ca      	movs	r2, #202	@ 0xca
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2253      	movs	r2, #83	@ 0x53
 8002786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002788:	250f      	movs	r5, #15
 800278a:	197c      	adds	r4, r7, r5
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fa7c 	bl	8002c8c <RTC_EnterInitMode>
 8002794:	0003      	movs	r3, r0
 8002796:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002798:	0028      	movs	r0, r5
 800279a:	183b      	adds	r3, r7, r0
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12c      	bne.n	80027fc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	492c      	ldr	r1, [pc, #176]	@ (8002860 <HAL_RTC_Init+0x134>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68d2      	ldr	r2, [r2, #12]
 80027d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6919      	ldr	r1, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80027ee:	183c      	adds	r4, r7, r0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 fa8e 	bl	8002d14 <RTC_ExitInitMode>
 80027f8:	0003      	movs	r3, r0
 80027fa:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d113      	bne.n	800282e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2103      	movs	r1, #3
 8002812:	438a      	bics	r2, r1
 8002814:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	22ff      	movs	r2, #255	@ 0xff
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24
 8002836:	e003      	b.n	8002840 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002840:	230f      	movs	r3, #15
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2221      	movs	r2, #33	@ 0x21
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002852:	230f      	movs	r3, #15
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	781b      	ldrb	r3, [r3, #0]
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bdb0      	pop	{r4, r5, r7, pc}
 8002860:	ff8fffbf 	.word	0xff8fffbf

08002864 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002864:	b5b0      	push	{r4, r5, r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	5c9b      	ldrb	r3, [r3, r2]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_RTC_SetTime+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e092      	b.n	80029a8 <HAL_RTC_SetTime+0x144>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2221      	movs	r2, #33	@ 0x21
 800288e:	2102      	movs	r1, #2
 8002890:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d125      	bne.n	80028e4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2240      	movs	r2, #64	@ 0x40
 80028a0:	4013      	ands	r3, r2
 80028a2:	d102      	bne.n	80028aa <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 fa5a 	bl	8002d68 <RTC_ByteToBcd2>
 80028b4:	0003      	movs	r3, r0
 80028b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	785b      	ldrb	r3, [r3, #1]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fa53 	bl	8002d68 <RTC_ByteToBcd2>
 80028c2:	0003      	movs	r3, r0
 80028c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 fa4b 	bl	8002d68 <RTC_ByteToBcd2>
 80028d2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028d4:	0022      	movs	r2, r4
 80028d6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	78db      	ldrb	r3, [r3, #3]
 80028dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e017      	b.n	8002914 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2240      	movs	r2, #64	@ 0x40
 80028ec:	4013      	ands	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002902:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002908:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	78db      	ldrb	r3, [r3, #3]
 800290e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	22ca      	movs	r2, #202	@ 0xca
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2253      	movs	r2, #83	@ 0x53
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002924:	2513      	movs	r5, #19
 8002926:	197c      	adds	r4, r7, r5
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f9ae 	bl	8002c8c <RTC_EnterInitMode>
 8002930:	0003      	movs	r3, r0
 8002932:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002934:	0028      	movs	r0, r5
 8002936:	183b      	adds	r3, r7, r0
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d120      	bne.n	8002980 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	491a      	ldr	r1, [pc, #104]	@ (80029b0 <HAL_RTC_SetTime+0x14c>)
 8002946:	400a      	ands	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4917      	ldr	r1, [pc, #92]	@ (80029b4 <HAL_RTC_SetTime+0x150>)
 8002956:	400a      	ands	r2, r1
 8002958:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6899      	ldr	r1, [r3, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002972:	183c      	adds	r4, r7, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f9cc 	bl	8002d14 <RTC_ExitInitMode>
 800297c:	0003      	movs	r3, r0
 800297e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002980:	2313      	movs	r3, #19
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2221      	movs	r2, #33	@ 0x21
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	22ff      	movs	r2, #255	@ 0xff
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	2100      	movs	r1, #0
 80029a0:	5499      	strb	r1, [r3, r2]

  return status;
 80029a2:	2313      	movs	r3, #19
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	781b      	ldrb	r3, [r3, #0]
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b006      	add	sp, #24
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	007f7f7f 	.word	0x007f7f7f
 80029b4:	fffbffff 	.word	0xfffbffff

080029b8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	045b      	lsls	r3, r3, #17
 80029da:	0c5a      	lsrs	r2, r3, #17
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a22      	ldr	r2, [pc, #136]	@ (8002a70 <HAL_RTC_GetTime+0xb8>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	223f      	movs	r2, #63	@ 0x3f
 80029f4:	4013      	ands	r3, r2
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	227f      	movs	r2, #127	@ 0x7f
 8002a04:	4013      	ands	r3, r2
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	227f      	movs	r2, #127	@ 0x7f
 8002a12:	4013      	ands	r3, r2
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	0d9b      	lsrs	r3, r3, #22
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2201      	movs	r2, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d11a      	bne.n	8002a66 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f9b8 	bl	8002daa <RTC_Bcd2ToByte>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f9af 	bl	8002daa <RTC_Bcd2ToByte>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	001a      	movs	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	789b      	ldrb	r3, [r3, #2]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 f9a6 	bl	8002daa <RTC_Bcd2ToByte>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	001a      	movs	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b006      	add	sp, #24
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	007f7f7f 	.word	0x007f7f7f

08002a74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a74:	b5b0      	push	{r4, r5, r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_RTC_SetDate+0x1e>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e07e      	b.n	8002b90 <HAL_RTC_SetDate+0x11c>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	@ 0x21
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_RTC_SetDate+0x52>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	001a      	movs	r2, r3
 8002aae:	2310      	movs	r3, #16
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4393      	bics	r3, r2
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	330a      	adds	r3, #10
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11c      	bne.n	8002b06 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f949 	bl	8002d68 <RTC_ByteToBcd2>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f942 	bl	8002d68 <RTC_ByteToBcd2>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ae8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	789b      	ldrb	r3, [r3, #2]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f93a 	bl	8002d68 <RTC_ByteToBcd2>
 8002af4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002af6:	0022      	movs	r2, r4
 8002af8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e00e      	b.n	8002b24 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b12:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	22ca      	movs	r2, #202	@ 0xca
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2253      	movs	r2, #83	@ 0x53
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b34:	2513      	movs	r5, #19
 8002b36:	197c      	adds	r4, r7, r5
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f8a6 	bl	8002c8c <RTC_EnterInitMode>
 8002b40:	0003      	movs	r3, r0
 8002b42:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002b44:	0028      	movs	r0, r5
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4910      	ldr	r1, [pc, #64]	@ (8002b98 <HAL_RTC_SetDate+0x124>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b5a:	183c      	adds	r4, r7, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f000 f8d8 	bl	8002d14 <RTC_ExitInitMode>
 8002b64:	0003      	movs	r3, r0
 8002b66:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002b68:	2313      	movs	r3, #19
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2221      	movs	r2, #33	@ 0x21
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	22ff      	movs	r2, #255	@ 0xff
 8002b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]

  return status;
 8002b8a:	2313      	movs	r3, #19
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bdb0      	pop	{r4, r5, r7, pc}
 8002b98:	00ffff3f 	.word	0x00ffff3f

08002b9c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a21      	ldr	r2, [pc, #132]	@ (8002c38 <HAL_RTC_GetDate+0x9c>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	221f      	movs	r2, #31
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	223f      	movs	r2, #63	@ 0x3f
 8002bd8:	4013      	ands	r3, r2
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	0b5b      	lsrs	r3, r3, #13
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2207      	movs	r2, #7
 8002be8:	4013      	ands	r3, r2
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11a      	bne.n	8002c2c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	78db      	ldrb	r3, [r3, #3]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f8d5 	bl	8002daa <RTC_Bcd2ToByte>
 8002c00:	0003      	movs	r3, r0
 8002c02:	001a      	movs	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f8cc 	bl	8002daa <RTC_Bcd2ToByte>
 8002c12:	0003      	movs	r3, r0
 8002c14:	001a      	movs	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	789b      	ldrb	r3, [r3, #2]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f8c3 	bl	8002daa <RTC_Bcd2ToByte>
 8002c24:	0003      	movs	r3, r0
 8002c26:	001a      	movs	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b006      	add	sp, #24
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	00ffff3f 	.word	0x00ffff3f

08002c3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c88 <HAL_RTC_WaitForSynchro+0x4c>)
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c50:	f7fe fb8c 	bl	800136c <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c58:	e00a      	b.n	8002c70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c5a:	f7fe fb87 	bl	800136c <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad2      	subs	r2, r2, r3
 8002c64:	23fa      	movs	r3, #250	@ 0xfa
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d901      	bls.n	8002c70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e006      	b.n	8002c7e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b004      	add	sp, #16
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	00017f5f 	.word	0x00017f5f

08002c8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d12c      	bne.n	8002d06 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fb56 	bl	800136c <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cc4:	e014      	b.n	8002cf0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cc6:	f7fe fb51 	bl	800136c <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	200f      	movs	r0, #15
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	1839      	adds	r1, r7, r0
 8002cd6:	7809      	ldrb	r1, [r1, #0]
 8002cd8:	7019      	strb	r1, [r3, #0]
 8002cda:	23fa      	movs	r3, #250	@ 0xfa
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d906      	bls.n	8002cf0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2221      	movs	r2, #33	@ 0x21
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2240      	movs	r2, #64	@ 0x40
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d104      	bne.n	8002d06 <RTC_EnterInitMode+0x7a>
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d1df      	bne.n	8002cc6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002d06:	230f      	movs	r3, #15
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b004      	add	sp, #16
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	240f      	movs	r4, #15
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2180      	movs	r1, #128	@ 0x80
 8002d30:	438a      	bics	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d10c      	bne.n	8002d5a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff ff7a 	bl	8002c3c <HAL_RTC_WaitForSynchro>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d006      	beq.n	8002d5a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2221      	movs	r2, #33	@ 0x21
 8002d50:	2104      	movs	r1, #4
 8002d52:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b005      	add	sp, #20
 8002d66:	bd90      	pop	{r4, r7, pc}

08002d68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	0002      	movs	r2, r0
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002d78:	e007      	b.n	8002d8a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	1dfa      	adds	r2, r7, #7
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	3a0a      	subs	r2, #10
 8002d88:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	d8f3      	bhi.n	8002d7a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b2db      	uxtb	r3, r3
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}

08002daa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	0002      	movs	r2, r0
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	189b      	adds	r3, r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	400b      	ands	r3, r1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	b2db      	uxtb	r3, r3
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <atoi>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	220a      	movs	r2, #10
 8002dec:	2100      	movs	r1, #0
 8002dee:	f000 f88b 	bl	8002f08 <strtol>
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <_strtol_l.constprop.0>:
 8002df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	0017      	movs	r7, r2
 8002dfa:	001e      	movs	r6, r3
 8002dfc:	9003      	str	r0, [sp, #12]
 8002dfe:	9101      	str	r1, [sp, #4]
 8002e00:	2b24      	cmp	r3, #36	@ 0x24
 8002e02:	d844      	bhi.n	8002e8e <_strtol_l.constprop.0+0x9a>
 8002e04:	000c      	movs	r4, r1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d041      	beq.n	8002e8e <_strtol_l.constprop.0+0x9a>
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f00 <_strtol_l.constprop.0+0x10c>)
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	469c      	mov	ip, r3
 8002e10:	0023      	movs	r3, r4
 8002e12:	4661      	mov	r1, ip
 8002e14:	781d      	ldrb	r5, [r3, #0]
 8002e16:	3401      	adds	r4, #1
 8002e18:	5d48      	ldrb	r0, [r1, r5]
 8002e1a:	0001      	movs	r1, r0
 8002e1c:	4011      	ands	r1, r2
 8002e1e:	4210      	tst	r0, r2
 8002e20:	d1f6      	bne.n	8002e10 <_strtol_l.constprop.0+0x1c>
 8002e22:	2d2d      	cmp	r5, #45	@ 0x2d
 8002e24:	d13a      	bne.n	8002e9c <_strtol_l.constprop.0+0xa8>
 8002e26:	7825      	ldrb	r5, [r4, #0]
 8002e28:	1c9c      	adds	r4, r3, #2
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2210      	movs	r2, #16
 8002e30:	0033      	movs	r3, r6
 8002e32:	4393      	bics	r3, r2
 8002e34:	d109      	bne.n	8002e4a <_strtol_l.constprop.0+0x56>
 8002e36:	2d30      	cmp	r5, #48	@ 0x30
 8002e38:	d136      	bne.n	8002ea8 <_strtol_l.constprop.0+0xb4>
 8002e3a:	2120      	movs	r1, #32
 8002e3c:	7823      	ldrb	r3, [r4, #0]
 8002e3e:	438b      	bics	r3, r1
 8002e40:	2b58      	cmp	r3, #88	@ 0x58
 8002e42:	d131      	bne.n	8002ea8 <_strtol_l.constprop.0+0xb4>
 8002e44:	0016      	movs	r6, r2
 8002e46:	7865      	ldrb	r5, [r4, #1]
 8002e48:	3402      	adds	r4, #2
 8002e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f04 <_strtol_l.constprop.0+0x110>)
 8002e4c:	9b00      	ldr	r3, [sp, #0]
 8002e4e:	4694      	mov	ip, r2
 8002e50:	4463      	add	r3, ip
 8002e52:	0031      	movs	r1, r6
 8002e54:	0018      	movs	r0, r3
 8002e56:	9302      	str	r3, [sp, #8]
 8002e58:	f7fd f9e6 	bl	8000228 <__aeabi_uidivmod>
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4684      	mov	ip, r0
 8002e60:	0010      	movs	r0, r2
 8002e62:	002b      	movs	r3, r5
 8002e64:	3b30      	subs	r3, #48	@ 0x30
 8002e66:	2b09      	cmp	r3, #9
 8002e68:	d825      	bhi.n	8002eb6 <_strtol_l.constprop.0+0xc2>
 8002e6a:	001d      	movs	r5, r3
 8002e6c:	42ae      	cmp	r6, r5
 8002e6e:	dd31      	ble.n	8002ed4 <_strtol_l.constprop.0+0xe0>
 8002e70:	1c53      	adds	r3, r2, #1
 8002e72:	d009      	beq.n	8002e88 <_strtol_l.constprop.0+0x94>
 8002e74:	2201      	movs	r2, #1
 8002e76:	4252      	negs	r2, r2
 8002e78:	4584      	cmp	ip, r0
 8002e7a:	d305      	bcc.n	8002e88 <_strtol_l.constprop.0+0x94>
 8002e7c:	d101      	bne.n	8002e82 <_strtol_l.constprop.0+0x8e>
 8002e7e:	42a9      	cmp	r1, r5
 8002e80:	db25      	blt.n	8002ece <_strtol_l.constprop.0+0xda>
 8002e82:	2201      	movs	r2, #1
 8002e84:	4370      	muls	r0, r6
 8002e86:	1828      	adds	r0, r5, r0
 8002e88:	7825      	ldrb	r5, [r4, #0]
 8002e8a:	3401      	adds	r4, #1
 8002e8c:	e7e9      	b.n	8002e62 <_strtol_l.constprop.0+0x6e>
 8002e8e:	f000 f86f 	bl	8002f70 <__errno>
 8002e92:	2316      	movs	r3, #22
 8002e94:	6003      	str	r3, [r0, #0]
 8002e96:	2000      	movs	r0, #0
 8002e98:	b005      	add	sp, #20
 8002e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9c:	9100      	str	r1, [sp, #0]
 8002e9e:	2d2b      	cmp	r5, #43	@ 0x2b
 8002ea0:	d1c5      	bne.n	8002e2e <_strtol_l.constprop.0+0x3a>
 8002ea2:	7825      	ldrb	r5, [r4, #0]
 8002ea4:	1c9c      	adds	r4, r3, #2
 8002ea6:	e7c2      	b.n	8002e2e <_strtol_l.constprop.0+0x3a>
 8002ea8:	2e00      	cmp	r6, #0
 8002eaa:	d1ce      	bne.n	8002e4a <_strtol_l.constprop.0+0x56>
 8002eac:	3608      	adds	r6, #8
 8002eae:	2d30      	cmp	r5, #48	@ 0x30
 8002eb0:	d0cb      	beq.n	8002e4a <_strtol_l.constprop.0+0x56>
 8002eb2:	3602      	adds	r6, #2
 8002eb4:	e7c9      	b.n	8002e4a <_strtol_l.constprop.0+0x56>
 8002eb6:	002b      	movs	r3, r5
 8002eb8:	3b41      	subs	r3, #65	@ 0x41
 8002eba:	2b19      	cmp	r3, #25
 8002ebc:	d801      	bhi.n	8002ec2 <_strtol_l.constprop.0+0xce>
 8002ebe:	3d37      	subs	r5, #55	@ 0x37
 8002ec0:	e7d4      	b.n	8002e6c <_strtol_l.constprop.0+0x78>
 8002ec2:	002b      	movs	r3, r5
 8002ec4:	3b61      	subs	r3, #97	@ 0x61
 8002ec6:	2b19      	cmp	r3, #25
 8002ec8:	d804      	bhi.n	8002ed4 <_strtol_l.constprop.0+0xe0>
 8002eca:	3d57      	subs	r5, #87	@ 0x57
 8002ecc:	e7ce      	b.n	8002e6c <_strtol_l.constprop.0+0x78>
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4252      	negs	r2, r2
 8002ed2:	e7d9      	b.n	8002e88 <_strtol_l.constprop.0+0x94>
 8002ed4:	1c53      	adds	r3, r2, #1
 8002ed6:	d108      	bne.n	8002eea <_strtol_l.constprop.0+0xf6>
 8002ed8:	2322      	movs	r3, #34	@ 0x22
 8002eda:	9a03      	ldr	r2, [sp, #12]
 8002edc:	9802      	ldr	r0, [sp, #8]
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	2f00      	cmp	r7, #0
 8002ee2:	d0d9      	beq.n	8002e98 <_strtol_l.constprop.0+0xa4>
 8002ee4:	1e63      	subs	r3, r4, #1
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	e007      	b.n	8002efa <_strtol_l.constprop.0+0x106>
 8002eea:	9b00      	ldr	r3, [sp, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d000      	beq.n	8002ef2 <_strtol_l.constprop.0+0xfe>
 8002ef0:	4240      	negs	r0, r0
 8002ef2:	2f00      	cmp	r7, #0
 8002ef4:	d0d0      	beq.n	8002e98 <_strtol_l.constprop.0+0xa4>
 8002ef6:	2a00      	cmp	r2, #0
 8002ef8:	d1f4      	bne.n	8002ee4 <_strtol_l.constprop.0+0xf0>
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	e7cb      	b.n	8002e98 <_strtol_l.constprop.0+0xa4>
 8002f00:	08003952 	.word	0x08003952
 8002f04:	7fffffff 	.word	0x7fffffff

08002f08 <strtol>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	4c04      	ldr	r4, [pc, #16]	@ (8002f1c <strtol+0x14>)
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	000a      	movs	r2, r1
 8002f10:	0001      	movs	r1, r0
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	f7ff ff6e 	bl	8002df4 <_strtol_l.constprop.0>
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	2000001c 	.word	0x2000001c

08002f20 <siprintf>:
 8002f20:	b40e      	push	{r1, r2, r3}
 8002f22:	b500      	push	{lr}
 8002f24:	490b      	ldr	r1, [pc, #44]	@ (8002f54 <siprintf+0x34>)
 8002f26:	b09c      	sub	sp, #112	@ 0x70
 8002f28:	ab1d      	add	r3, sp, #116	@ 0x74
 8002f2a:	9002      	str	r0, [sp, #8]
 8002f2c:	9006      	str	r0, [sp, #24]
 8002f2e:	9107      	str	r1, [sp, #28]
 8002f30:	9104      	str	r1, [sp, #16]
 8002f32:	4809      	ldr	r0, [pc, #36]	@ (8002f58 <siprintf+0x38>)
 8002f34:	4909      	ldr	r1, [pc, #36]	@ (8002f5c <siprintf+0x3c>)
 8002f36:	cb04      	ldmia	r3!, {r2}
 8002f38:	9105      	str	r1, [sp, #20]
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	a902      	add	r1, sp, #8
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	f000 f99e 	bl	8003280 <_svfiprintf_r>
 8002f44:	2200      	movs	r2, #0
 8002f46:	9b02      	ldr	r3, [sp, #8]
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	b01c      	add	sp, #112	@ 0x70
 8002f4c:	bc08      	pop	{r3}
 8002f4e:	b003      	add	sp, #12
 8002f50:	4718      	bx	r3
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	7fffffff 	.word	0x7fffffff
 8002f58:	2000001c 	.word	0x2000001c
 8002f5c:	ffff0208 	.word	0xffff0208

08002f60 <memset>:
 8002f60:	0003      	movs	r3, r0
 8002f62:	1882      	adds	r2, r0, r2
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <memset+0xa>
 8002f68:	4770      	bx	lr
 8002f6a:	7019      	strb	r1, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	e7f9      	b.n	8002f64 <memset+0x4>

08002f70 <__errno>:
 8002f70:	4b01      	ldr	r3, [pc, #4]	@ (8002f78 <__errno+0x8>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	4770      	bx	lr
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	2000001c 	.word	0x2000001c

08002f7c <__libc_init_array>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	2600      	movs	r6, #0
 8002f80:	4c0c      	ldr	r4, [pc, #48]	@ (8002fb4 <__libc_init_array+0x38>)
 8002f82:	4d0d      	ldr	r5, [pc, #52]	@ (8002fb8 <__libc_init_array+0x3c>)
 8002f84:	1b64      	subs	r4, r4, r5
 8002f86:	10a4      	asrs	r4, r4, #2
 8002f88:	42a6      	cmp	r6, r4
 8002f8a:	d109      	bne.n	8002fa0 <__libc_init_array+0x24>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	f000 fc65 	bl	800385c <_init>
 8002f92:	4c0a      	ldr	r4, [pc, #40]	@ (8002fbc <__libc_init_array+0x40>)
 8002f94:	4d0a      	ldr	r5, [pc, #40]	@ (8002fc0 <__libc_init_array+0x44>)
 8002f96:	1b64      	subs	r4, r4, r5
 8002f98:	10a4      	asrs	r4, r4, #2
 8002f9a:	42a6      	cmp	r6, r4
 8002f9c:	d105      	bne.n	8002faa <__libc_init_array+0x2e>
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	00b3      	lsls	r3, r6, #2
 8002fa2:	58eb      	ldr	r3, [r5, r3]
 8002fa4:	4798      	blx	r3
 8002fa6:	3601      	adds	r6, #1
 8002fa8:	e7ee      	b.n	8002f88 <__libc_init_array+0xc>
 8002faa:	00b3      	lsls	r3, r6, #2
 8002fac:	58eb      	ldr	r3, [r5, r3]
 8002fae:	4798      	blx	r3
 8002fb0:	3601      	adds	r6, #1
 8002fb2:	e7f2      	b.n	8002f9a <__libc_init_array+0x1e>
 8002fb4:	08003a90 	.word	0x08003a90
 8002fb8:	08003a90 	.word	0x08003a90
 8002fbc:	08003a94 	.word	0x08003a94
 8002fc0:	08003a90 	.word	0x08003a90

08002fc4 <__retarget_lock_acquire_recursive>:
 8002fc4:	4770      	bx	lr

08002fc6 <__retarget_lock_release_recursive>:
 8002fc6:	4770      	bx	lr

08002fc8 <_free_r>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	0005      	movs	r5, r0
 8002fcc:	1e0c      	subs	r4, r1, #0
 8002fce:	d010      	beq.n	8002ff2 <_free_r+0x2a>
 8002fd0:	3c04      	subs	r4, #4
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	da00      	bge.n	8002fda <_free_r+0x12>
 8002fd8:	18e4      	adds	r4, r4, r3
 8002fda:	0028      	movs	r0, r5
 8002fdc:	f000 f8e0 	bl	80031a0 <__malloc_lock>
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <_free_r+0x90>)
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <_free_r+0x2c>
 8002fe8:	6063      	str	r3, [r4, #4]
 8002fea:	6014      	str	r4, [r2, #0]
 8002fec:	0028      	movs	r0, r5
 8002fee:	f000 f8df 	bl	80031b0 <__malloc_unlock>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	42a3      	cmp	r3, r4
 8002ff6:	d908      	bls.n	800300a <_free_r+0x42>
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	1821      	adds	r1, r4, r0
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d1f3      	bne.n	8002fe8 <_free_r+0x20>
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	1809      	adds	r1, r1, r0
 8003006:	6021      	str	r1, [r4, #0]
 8003008:	e7ee      	b.n	8002fe8 <_free_r+0x20>
 800300a:	001a      	movs	r2, r3
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <_free_r+0x4e>
 8003012:	42a3      	cmp	r3, r4
 8003014:	d9f9      	bls.n	800300a <_free_r+0x42>
 8003016:	6811      	ldr	r1, [r2, #0]
 8003018:	1850      	adds	r0, r2, r1
 800301a:	42a0      	cmp	r0, r4
 800301c:	d10b      	bne.n	8003036 <_free_r+0x6e>
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	1809      	adds	r1, r1, r0
 8003022:	1850      	adds	r0, r2, r1
 8003024:	6011      	str	r1, [r2, #0]
 8003026:	4283      	cmp	r3, r0
 8003028:	d1e0      	bne.n	8002fec <_free_r+0x24>
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	1841      	adds	r1, r0, r1
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	6053      	str	r3, [r2, #4]
 8003034:	e7da      	b.n	8002fec <_free_r+0x24>
 8003036:	42a0      	cmp	r0, r4
 8003038:	d902      	bls.n	8003040 <_free_r+0x78>
 800303a:	230c      	movs	r3, #12
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	e7d5      	b.n	8002fec <_free_r+0x24>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	d103      	bne.n	8003050 <_free_r+0x88>
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	1809      	adds	r1, r1, r0
 800304e:	6021      	str	r1, [r4, #0]
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6054      	str	r4, [r2, #4]
 8003054:	e7ca      	b.n	8002fec <_free_r+0x24>
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	200002a0 	.word	0x200002a0

0800305c <sbrk_aligned>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4e0f      	ldr	r6, [pc, #60]	@ (800309c <sbrk_aligned+0x40>)
 8003060:	000d      	movs	r5, r1
 8003062:	6831      	ldr	r1, [r6, #0]
 8003064:	0004      	movs	r4, r0
 8003066:	2900      	cmp	r1, #0
 8003068:	d102      	bne.n	8003070 <sbrk_aligned+0x14>
 800306a:	f000 fb99 	bl	80037a0 <_sbrk_r>
 800306e:	6030      	str	r0, [r6, #0]
 8003070:	0029      	movs	r1, r5
 8003072:	0020      	movs	r0, r4
 8003074:	f000 fb94 	bl	80037a0 <_sbrk_r>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d103      	bne.n	8003084 <sbrk_aligned+0x28>
 800307c:	2501      	movs	r5, #1
 800307e:	426d      	negs	r5, r5
 8003080:	0028      	movs	r0, r5
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	2303      	movs	r3, #3
 8003086:	1cc5      	adds	r5, r0, #3
 8003088:	439d      	bics	r5, r3
 800308a:	42a8      	cmp	r0, r5
 800308c:	d0f8      	beq.n	8003080 <sbrk_aligned+0x24>
 800308e:	1a29      	subs	r1, r5, r0
 8003090:	0020      	movs	r0, r4
 8003092:	f000 fb85 	bl	80037a0 <_sbrk_r>
 8003096:	3001      	adds	r0, #1
 8003098:	d1f2      	bne.n	8003080 <sbrk_aligned+0x24>
 800309a:	e7ef      	b.n	800307c <sbrk_aligned+0x20>
 800309c:	2000029c 	.word	0x2000029c

080030a0 <_malloc_r>:
 80030a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030a2:	2203      	movs	r2, #3
 80030a4:	1ccb      	adds	r3, r1, #3
 80030a6:	4393      	bics	r3, r2
 80030a8:	3308      	adds	r3, #8
 80030aa:	0005      	movs	r5, r0
 80030ac:	001f      	movs	r7, r3
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d234      	bcs.n	800311c <_malloc_r+0x7c>
 80030b2:	270c      	movs	r7, #12
 80030b4:	42b9      	cmp	r1, r7
 80030b6:	d833      	bhi.n	8003120 <_malloc_r+0x80>
 80030b8:	0028      	movs	r0, r5
 80030ba:	f000 f871 	bl	80031a0 <__malloc_lock>
 80030be:	4e37      	ldr	r6, [pc, #220]	@ (800319c <_malloc_r+0xfc>)
 80030c0:	6833      	ldr	r3, [r6, #0]
 80030c2:	001c      	movs	r4, r3
 80030c4:	2c00      	cmp	r4, #0
 80030c6:	d12f      	bne.n	8003128 <_malloc_r+0x88>
 80030c8:	0039      	movs	r1, r7
 80030ca:	0028      	movs	r0, r5
 80030cc:	f7ff ffc6 	bl	800305c <sbrk_aligned>
 80030d0:	0004      	movs	r4, r0
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d15f      	bne.n	8003196 <_malloc_r+0xf6>
 80030d6:	6834      	ldr	r4, [r6, #0]
 80030d8:	9400      	str	r4, [sp, #0]
 80030da:	9b00      	ldr	r3, [sp, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d14a      	bne.n	8003176 <_malloc_r+0xd6>
 80030e0:	2c00      	cmp	r4, #0
 80030e2:	d052      	beq.n	800318a <_malloc_r+0xea>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	0028      	movs	r0, r5
 80030e8:	18e3      	adds	r3, r4, r3
 80030ea:	9900      	ldr	r1, [sp, #0]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	f000 fb57 	bl	80037a0 <_sbrk_r>
 80030f2:	9b01      	ldr	r3, [sp, #4]
 80030f4:	4283      	cmp	r3, r0
 80030f6:	d148      	bne.n	800318a <_malloc_r+0xea>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	0028      	movs	r0, r5
 80030fc:	1aff      	subs	r7, r7, r3
 80030fe:	0039      	movs	r1, r7
 8003100:	f7ff ffac 	bl	800305c <sbrk_aligned>
 8003104:	3001      	adds	r0, #1
 8003106:	d040      	beq.n	800318a <_malloc_r+0xea>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	19db      	adds	r3, r3, r7
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	6833      	ldr	r3, [r6, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	2a00      	cmp	r2, #0
 8003114:	d133      	bne.n	800317e <_malloc_r+0xde>
 8003116:	9b00      	ldr	r3, [sp, #0]
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	e019      	b.n	8003150 <_malloc_r+0xb0>
 800311c:	2b00      	cmp	r3, #0
 800311e:	dac9      	bge.n	80030b4 <_malloc_r+0x14>
 8003120:	230c      	movs	r3, #12
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	2000      	movs	r0, #0
 8003126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003128:	6821      	ldr	r1, [r4, #0]
 800312a:	1bc9      	subs	r1, r1, r7
 800312c:	d420      	bmi.n	8003170 <_malloc_r+0xd0>
 800312e:	290b      	cmp	r1, #11
 8003130:	d90a      	bls.n	8003148 <_malloc_r+0xa8>
 8003132:	19e2      	adds	r2, r4, r7
 8003134:	6027      	str	r7, [r4, #0]
 8003136:	42a3      	cmp	r3, r4
 8003138:	d104      	bne.n	8003144 <_malloc_r+0xa4>
 800313a:	6032      	str	r2, [r6, #0]
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	6011      	str	r1, [r2, #0]
 8003140:	6053      	str	r3, [r2, #4]
 8003142:	e005      	b.n	8003150 <_malloc_r+0xb0>
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e7f9      	b.n	800313c <_malloc_r+0x9c>
 8003148:	6862      	ldr	r2, [r4, #4]
 800314a:	42a3      	cmp	r3, r4
 800314c:	d10e      	bne.n	800316c <_malloc_r+0xcc>
 800314e:	6032      	str	r2, [r6, #0]
 8003150:	0028      	movs	r0, r5
 8003152:	f000 f82d 	bl	80031b0 <__malloc_unlock>
 8003156:	0020      	movs	r0, r4
 8003158:	2207      	movs	r2, #7
 800315a:	300b      	adds	r0, #11
 800315c:	1d23      	adds	r3, r4, #4
 800315e:	4390      	bics	r0, r2
 8003160:	1ac2      	subs	r2, r0, r3
 8003162:	4298      	cmp	r0, r3
 8003164:	d0df      	beq.n	8003126 <_malloc_r+0x86>
 8003166:	1a1b      	subs	r3, r3, r0
 8003168:	50a3      	str	r3, [r4, r2]
 800316a:	e7dc      	b.n	8003126 <_malloc_r+0x86>
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e7ef      	b.n	8003150 <_malloc_r+0xb0>
 8003170:	0023      	movs	r3, r4
 8003172:	6864      	ldr	r4, [r4, #4]
 8003174:	e7a6      	b.n	80030c4 <_malloc_r+0x24>
 8003176:	9c00      	ldr	r4, [sp, #0]
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	e7ad      	b.n	80030da <_malloc_r+0x3a>
 800317e:	001a      	movs	r2, r3
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	42a3      	cmp	r3, r4
 8003184:	d1fb      	bne.n	800317e <_malloc_r+0xde>
 8003186:	2300      	movs	r3, #0
 8003188:	e7da      	b.n	8003140 <_malloc_r+0xa0>
 800318a:	230c      	movs	r3, #12
 800318c:	0028      	movs	r0, r5
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	f000 f80e 	bl	80031b0 <__malloc_unlock>
 8003194:	e7c6      	b.n	8003124 <_malloc_r+0x84>
 8003196:	6007      	str	r7, [r0, #0]
 8003198:	e7da      	b.n	8003150 <_malloc_r+0xb0>
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	200002a0 	.word	0x200002a0

080031a0 <__malloc_lock>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	4802      	ldr	r0, [pc, #8]	@ (80031ac <__malloc_lock+0xc>)
 80031a4:	f7ff ff0e 	bl	8002fc4 <__retarget_lock_acquire_recursive>
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	20000298 	.word	0x20000298

080031b0 <__malloc_unlock>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4802      	ldr	r0, [pc, #8]	@ (80031bc <__malloc_unlock+0xc>)
 80031b4:	f7ff ff07 	bl	8002fc6 <__retarget_lock_release_recursive>
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	20000298 	.word	0x20000298

080031c0 <__ssputs_r>:
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	688e      	ldr	r6, [r1, #8]
 80031c4:	b085      	sub	sp, #20
 80031c6:	001f      	movs	r7, r3
 80031c8:	000c      	movs	r4, r1
 80031ca:	680b      	ldr	r3, [r1, #0]
 80031cc:	9002      	str	r0, [sp, #8]
 80031ce:	9203      	str	r2, [sp, #12]
 80031d0:	42be      	cmp	r6, r7
 80031d2:	d830      	bhi.n	8003236 <__ssputs_r+0x76>
 80031d4:	210c      	movs	r1, #12
 80031d6:	5e62      	ldrsh	r2, [r4, r1]
 80031d8:	2190      	movs	r1, #144	@ 0x90
 80031da:	00c9      	lsls	r1, r1, #3
 80031dc:	420a      	tst	r2, r1
 80031de:	d028      	beq.n	8003232 <__ssputs_r+0x72>
 80031e0:	2003      	movs	r0, #3
 80031e2:	6921      	ldr	r1, [r4, #16]
 80031e4:	1a5b      	subs	r3, r3, r1
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6963      	ldr	r3, [r4, #20]
 80031ea:	4343      	muls	r3, r0
 80031ec:	9801      	ldr	r0, [sp, #4]
 80031ee:	0fdd      	lsrs	r5, r3, #31
 80031f0:	18ed      	adds	r5, r5, r3
 80031f2:	1c7b      	adds	r3, r7, #1
 80031f4:	181b      	adds	r3, r3, r0
 80031f6:	106d      	asrs	r5, r5, #1
 80031f8:	42ab      	cmp	r3, r5
 80031fa:	d900      	bls.n	80031fe <__ssputs_r+0x3e>
 80031fc:	001d      	movs	r5, r3
 80031fe:	0552      	lsls	r2, r2, #21
 8003200:	d528      	bpl.n	8003254 <__ssputs_r+0x94>
 8003202:	0029      	movs	r1, r5
 8003204:	9802      	ldr	r0, [sp, #8]
 8003206:	f7ff ff4b 	bl	80030a0 <_malloc_r>
 800320a:	1e06      	subs	r6, r0, #0
 800320c:	d02c      	beq.n	8003268 <__ssputs_r+0xa8>
 800320e:	9a01      	ldr	r2, [sp, #4]
 8003210:	6921      	ldr	r1, [r4, #16]
 8003212:	f000 fae2 	bl	80037da <memcpy>
 8003216:	89a2      	ldrh	r2, [r4, #12]
 8003218:	4b18      	ldr	r3, [pc, #96]	@ (800327c <__ssputs_r+0xbc>)
 800321a:	401a      	ands	r2, r3
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	4313      	orrs	r3, r2
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	9b01      	ldr	r3, [sp, #4]
 8003224:	6126      	str	r6, [r4, #16]
 8003226:	18f6      	adds	r6, r6, r3
 8003228:	6026      	str	r6, [r4, #0]
 800322a:	003e      	movs	r6, r7
 800322c:	6165      	str	r5, [r4, #20]
 800322e:	1aed      	subs	r5, r5, r3
 8003230:	60a5      	str	r5, [r4, #8]
 8003232:	42be      	cmp	r6, r7
 8003234:	d900      	bls.n	8003238 <__ssputs_r+0x78>
 8003236:	003e      	movs	r6, r7
 8003238:	0032      	movs	r2, r6
 800323a:	9903      	ldr	r1, [sp, #12]
 800323c:	6820      	ldr	r0, [r4, #0]
 800323e:	f000 fa9b 	bl	8003778 <memmove>
 8003242:	2000      	movs	r0, #0
 8003244:	68a3      	ldr	r3, [r4, #8]
 8003246:	1b9b      	subs	r3, r3, r6
 8003248:	60a3      	str	r3, [r4, #8]
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	199b      	adds	r3, r3, r6
 800324e:	6023      	str	r3, [r4, #0]
 8003250:	b005      	add	sp, #20
 8003252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003254:	002a      	movs	r2, r5
 8003256:	9802      	ldr	r0, [sp, #8]
 8003258:	f000 fac8 	bl	80037ec <_realloc_r>
 800325c:	1e06      	subs	r6, r0, #0
 800325e:	d1e0      	bne.n	8003222 <__ssputs_r+0x62>
 8003260:	6921      	ldr	r1, [r4, #16]
 8003262:	9802      	ldr	r0, [sp, #8]
 8003264:	f7ff feb0 	bl	8002fc8 <_free_r>
 8003268:	230c      	movs	r3, #12
 800326a:	2001      	movs	r0, #1
 800326c:	9a02      	ldr	r2, [sp, #8]
 800326e:	4240      	negs	r0, r0
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	89a2      	ldrh	r2, [r4, #12]
 8003274:	3334      	adds	r3, #52	@ 0x34
 8003276:	4313      	orrs	r3, r2
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	e7e9      	b.n	8003250 <__ssputs_r+0x90>
 800327c:	fffffb7f 	.word	0xfffffb7f

08003280 <_svfiprintf_r>:
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003282:	b0a1      	sub	sp, #132	@ 0x84
 8003284:	9003      	str	r0, [sp, #12]
 8003286:	001d      	movs	r5, r3
 8003288:	898b      	ldrh	r3, [r1, #12]
 800328a:	000f      	movs	r7, r1
 800328c:	0016      	movs	r6, r2
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	d511      	bpl.n	80032b6 <_svfiprintf_r+0x36>
 8003292:	690b      	ldr	r3, [r1, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10e      	bne.n	80032b6 <_svfiprintf_r+0x36>
 8003298:	2140      	movs	r1, #64	@ 0x40
 800329a:	f7ff ff01 	bl	80030a0 <_malloc_r>
 800329e:	6038      	str	r0, [r7, #0]
 80032a0:	6138      	str	r0, [r7, #16]
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d105      	bne.n	80032b2 <_svfiprintf_r+0x32>
 80032a6:	230c      	movs	r3, #12
 80032a8:	9a03      	ldr	r2, [sp, #12]
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	2001      	movs	r0, #1
 80032ae:	4240      	negs	r0, r0
 80032b0:	e0cf      	b.n	8003452 <_svfiprintf_r+0x1d2>
 80032b2:	2340      	movs	r3, #64	@ 0x40
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	2300      	movs	r3, #0
 80032b8:	ac08      	add	r4, sp, #32
 80032ba:	6163      	str	r3, [r4, #20]
 80032bc:	3320      	adds	r3, #32
 80032be:	7663      	strb	r3, [r4, #25]
 80032c0:	3310      	adds	r3, #16
 80032c2:	76a3      	strb	r3, [r4, #26]
 80032c4:	9507      	str	r5, [sp, #28]
 80032c6:	0035      	movs	r5, r6
 80032c8:	782b      	ldrb	r3, [r5, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <_svfiprintf_r+0x52>
 80032ce:	2b25      	cmp	r3, #37	@ 0x25
 80032d0:	d148      	bne.n	8003364 <_svfiprintf_r+0xe4>
 80032d2:	1bab      	subs	r3, r5, r6
 80032d4:	9305      	str	r3, [sp, #20]
 80032d6:	42b5      	cmp	r5, r6
 80032d8:	d00b      	beq.n	80032f2 <_svfiprintf_r+0x72>
 80032da:	0032      	movs	r2, r6
 80032dc:	0039      	movs	r1, r7
 80032de:	9803      	ldr	r0, [sp, #12]
 80032e0:	f7ff ff6e 	bl	80031c0 <__ssputs_r>
 80032e4:	3001      	adds	r0, #1
 80032e6:	d100      	bne.n	80032ea <_svfiprintf_r+0x6a>
 80032e8:	e0ae      	b.n	8003448 <_svfiprintf_r+0x1c8>
 80032ea:	6963      	ldr	r3, [r4, #20]
 80032ec:	9a05      	ldr	r2, [sp, #20]
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	6163      	str	r3, [r4, #20]
 80032f2:	782b      	ldrb	r3, [r5, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d100      	bne.n	80032fa <_svfiprintf_r+0x7a>
 80032f8:	e0a6      	b.n	8003448 <_svfiprintf_r+0x1c8>
 80032fa:	2201      	movs	r2, #1
 80032fc:	2300      	movs	r3, #0
 80032fe:	4252      	negs	r2, r2
 8003300:	6062      	str	r2, [r4, #4]
 8003302:	a904      	add	r1, sp, #16
 8003304:	3254      	adds	r2, #84	@ 0x54
 8003306:	1852      	adds	r2, r2, r1
 8003308:	1c6e      	adds	r6, r5, #1
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	60e3      	str	r3, [r4, #12]
 800330e:	60a3      	str	r3, [r4, #8]
 8003310:	7013      	strb	r3, [r2, #0]
 8003312:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003314:	4b54      	ldr	r3, [pc, #336]	@ (8003468 <_svfiprintf_r+0x1e8>)
 8003316:	2205      	movs	r2, #5
 8003318:	0018      	movs	r0, r3
 800331a:	7831      	ldrb	r1, [r6, #0]
 800331c:	9305      	str	r3, [sp, #20]
 800331e:	f000 fa51 	bl	80037c4 <memchr>
 8003322:	1c75      	adds	r5, r6, #1
 8003324:	2800      	cmp	r0, #0
 8003326:	d11f      	bne.n	8003368 <_svfiprintf_r+0xe8>
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	06d3      	lsls	r3, r2, #27
 800332c:	d504      	bpl.n	8003338 <_svfiprintf_r+0xb8>
 800332e:	2353      	movs	r3, #83	@ 0x53
 8003330:	a904      	add	r1, sp, #16
 8003332:	185b      	adds	r3, r3, r1
 8003334:	2120      	movs	r1, #32
 8003336:	7019      	strb	r1, [r3, #0]
 8003338:	0713      	lsls	r3, r2, #28
 800333a:	d504      	bpl.n	8003346 <_svfiprintf_r+0xc6>
 800333c:	2353      	movs	r3, #83	@ 0x53
 800333e:	a904      	add	r1, sp, #16
 8003340:	185b      	adds	r3, r3, r1
 8003342:	212b      	movs	r1, #43	@ 0x2b
 8003344:	7019      	strb	r1, [r3, #0]
 8003346:	7833      	ldrb	r3, [r6, #0]
 8003348:	2b2a      	cmp	r3, #42	@ 0x2a
 800334a:	d016      	beq.n	800337a <_svfiprintf_r+0xfa>
 800334c:	0035      	movs	r5, r6
 800334e:	2100      	movs	r1, #0
 8003350:	200a      	movs	r0, #10
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	782a      	ldrb	r2, [r5, #0]
 8003356:	1c6e      	adds	r6, r5, #1
 8003358:	3a30      	subs	r2, #48	@ 0x30
 800335a:	2a09      	cmp	r2, #9
 800335c:	d950      	bls.n	8003400 <_svfiprintf_r+0x180>
 800335e:	2900      	cmp	r1, #0
 8003360:	d111      	bne.n	8003386 <_svfiprintf_r+0x106>
 8003362:	e017      	b.n	8003394 <_svfiprintf_r+0x114>
 8003364:	3501      	adds	r5, #1
 8003366:	e7af      	b.n	80032c8 <_svfiprintf_r+0x48>
 8003368:	9b05      	ldr	r3, [sp, #20]
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	1ac0      	subs	r0, r0, r3
 800336e:	2301      	movs	r3, #1
 8003370:	4083      	lsls	r3, r0
 8003372:	4313      	orrs	r3, r2
 8003374:	002e      	movs	r6, r5
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	e7cc      	b.n	8003314 <_svfiprintf_r+0x94>
 800337a:	9b07      	ldr	r3, [sp, #28]
 800337c:	1d19      	adds	r1, r3, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	9107      	str	r1, [sp, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db01      	blt.n	800338a <_svfiprintf_r+0x10a>
 8003386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003388:	e004      	b.n	8003394 <_svfiprintf_r+0x114>
 800338a:	425b      	negs	r3, r3
 800338c:	60e3      	str	r3, [r4, #12]
 800338e:	2302      	movs	r3, #2
 8003390:	4313      	orrs	r3, r2
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	782b      	ldrb	r3, [r5, #0]
 8003396:	2b2e      	cmp	r3, #46	@ 0x2e
 8003398:	d10c      	bne.n	80033b4 <_svfiprintf_r+0x134>
 800339a:	786b      	ldrb	r3, [r5, #1]
 800339c:	2b2a      	cmp	r3, #42	@ 0x2a
 800339e:	d134      	bne.n	800340a <_svfiprintf_r+0x18a>
 80033a0:	9b07      	ldr	r3, [sp, #28]
 80033a2:	3502      	adds	r5, #2
 80033a4:	1d1a      	adds	r2, r3, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	9207      	str	r2, [sp, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da01      	bge.n	80033b2 <_svfiprintf_r+0x132>
 80033ae:	2301      	movs	r3, #1
 80033b0:	425b      	negs	r3, r3
 80033b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80033b4:	4e2d      	ldr	r6, [pc, #180]	@ (800346c <_svfiprintf_r+0x1ec>)
 80033b6:	2203      	movs	r2, #3
 80033b8:	0030      	movs	r0, r6
 80033ba:	7829      	ldrb	r1, [r5, #0]
 80033bc:	f000 fa02 	bl	80037c4 <memchr>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d006      	beq.n	80033d2 <_svfiprintf_r+0x152>
 80033c4:	2340      	movs	r3, #64	@ 0x40
 80033c6:	1b80      	subs	r0, r0, r6
 80033c8:	4083      	lsls	r3, r0
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	3501      	adds	r5, #1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	7829      	ldrb	r1, [r5, #0]
 80033d4:	2206      	movs	r2, #6
 80033d6:	4826      	ldr	r0, [pc, #152]	@ (8003470 <_svfiprintf_r+0x1f0>)
 80033d8:	1c6e      	adds	r6, r5, #1
 80033da:	7621      	strb	r1, [r4, #24]
 80033dc:	f000 f9f2 	bl	80037c4 <memchr>
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d038      	beq.n	8003456 <_svfiprintf_r+0x1d6>
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <_svfiprintf_r+0x1f4>)
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d122      	bne.n	8003430 <_svfiprintf_r+0x1b0>
 80033ea:	2207      	movs	r2, #7
 80033ec:	9b07      	ldr	r3, [sp, #28]
 80033ee:	3307      	adds	r3, #7
 80033f0:	4393      	bics	r3, r2
 80033f2:	3308      	adds	r3, #8
 80033f4:	9307      	str	r3, [sp, #28]
 80033f6:	6963      	ldr	r3, [r4, #20]
 80033f8:	9a04      	ldr	r2, [sp, #16]
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	6163      	str	r3, [r4, #20]
 80033fe:	e762      	b.n	80032c6 <_svfiprintf_r+0x46>
 8003400:	4343      	muls	r3, r0
 8003402:	0035      	movs	r5, r6
 8003404:	2101      	movs	r1, #1
 8003406:	189b      	adds	r3, r3, r2
 8003408:	e7a4      	b.n	8003354 <_svfiprintf_r+0xd4>
 800340a:	2300      	movs	r3, #0
 800340c:	200a      	movs	r0, #10
 800340e:	0019      	movs	r1, r3
 8003410:	3501      	adds	r5, #1
 8003412:	6063      	str	r3, [r4, #4]
 8003414:	782a      	ldrb	r2, [r5, #0]
 8003416:	1c6e      	adds	r6, r5, #1
 8003418:	3a30      	subs	r2, #48	@ 0x30
 800341a:	2a09      	cmp	r2, #9
 800341c:	d903      	bls.n	8003426 <_svfiprintf_r+0x1a6>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0c8      	beq.n	80033b4 <_svfiprintf_r+0x134>
 8003422:	9109      	str	r1, [sp, #36]	@ 0x24
 8003424:	e7c6      	b.n	80033b4 <_svfiprintf_r+0x134>
 8003426:	4341      	muls	r1, r0
 8003428:	0035      	movs	r5, r6
 800342a:	2301      	movs	r3, #1
 800342c:	1889      	adds	r1, r1, r2
 800342e:	e7f1      	b.n	8003414 <_svfiprintf_r+0x194>
 8003430:	aa07      	add	r2, sp, #28
 8003432:	9200      	str	r2, [sp, #0]
 8003434:	0021      	movs	r1, r4
 8003436:	003a      	movs	r2, r7
 8003438:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <_svfiprintf_r+0x1f8>)
 800343a:	9803      	ldr	r0, [sp, #12]
 800343c:	e000      	b.n	8003440 <_svfiprintf_r+0x1c0>
 800343e:	bf00      	nop
 8003440:	9004      	str	r0, [sp, #16]
 8003442:	9b04      	ldr	r3, [sp, #16]
 8003444:	3301      	adds	r3, #1
 8003446:	d1d6      	bne.n	80033f6 <_svfiprintf_r+0x176>
 8003448:	89bb      	ldrh	r3, [r7, #12]
 800344a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800344c:	065b      	lsls	r3, r3, #25
 800344e:	d500      	bpl.n	8003452 <_svfiprintf_r+0x1d2>
 8003450:	e72c      	b.n	80032ac <_svfiprintf_r+0x2c>
 8003452:	b021      	add	sp, #132	@ 0x84
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	aa07      	add	r2, sp, #28
 8003458:	9200      	str	r2, [sp, #0]
 800345a:	0021      	movs	r1, r4
 800345c:	003a      	movs	r2, r7
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <_svfiprintf_r+0x1f8>)
 8003460:	9803      	ldr	r0, [sp, #12]
 8003462:	f000 f87b 	bl	800355c <_printf_i>
 8003466:	e7eb      	b.n	8003440 <_svfiprintf_r+0x1c0>
 8003468:	08003a52 	.word	0x08003a52
 800346c:	08003a58 	.word	0x08003a58
 8003470:	08003a5c 	.word	0x08003a5c
 8003474:	00000000 	.word	0x00000000
 8003478:	080031c1 	.word	0x080031c1

0800347c <_printf_common>:
 800347c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800347e:	0016      	movs	r6, r2
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	688a      	ldr	r2, [r1, #8]
 8003484:	690b      	ldr	r3, [r1, #16]
 8003486:	000c      	movs	r4, r1
 8003488:	9000      	str	r0, [sp, #0]
 800348a:	4293      	cmp	r3, r2
 800348c:	da00      	bge.n	8003490 <_printf_common+0x14>
 800348e:	0013      	movs	r3, r2
 8003490:	0022      	movs	r2, r4
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	3243      	adds	r2, #67	@ 0x43
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	2a00      	cmp	r2, #0
 800349a:	d001      	beq.n	80034a0 <_printf_common+0x24>
 800349c:	3301      	adds	r3, #1
 800349e:	6033      	str	r3, [r6, #0]
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	d502      	bpl.n	80034ac <_printf_common+0x30>
 80034a6:	6833      	ldr	r3, [r6, #0]
 80034a8:	3302      	adds	r3, #2
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	2306      	movs	r3, #6
 80034b0:	0015      	movs	r5, r2
 80034b2:	401d      	ands	r5, r3
 80034b4:	421a      	tst	r2, r3
 80034b6:	d027      	beq.n	8003508 <_printf_common+0x8c>
 80034b8:	0023      	movs	r3, r4
 80034ba:	3343      	adds	r3, #67	@ 0x43
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	1e5a      	subs	r2, r3, #1
 80034c0:	4193      	sbcs	r3, r2
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	d430      	bmi.n	800352a <_printf_common+0xae>
 80034c8:	0022      	movs	r2, r4
 80034ca:	9901      	ldr	r1, [sp, #4]
 80034cc:	9800      	ldr	r0, [sp, #0]
 80034ce:	9d08      	ldr	r5, [sp, #32]
 80034d0:	3243      	adds	r2, #67	@ 0x43
 80034d2:	47a8      	blx	r5
 80034d4:	3001      	adds	r0, #1
 80034d6:	d025      	beq.n	8003524 <_printf_common+0xa8>
 80034d8:	2206      	movs	r2, #6
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	2500      	movs	r5, #0
 80034de:	4013      	ands	r3, r2
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d105      	bne.n	80034f0 <_printf_common+0x74>
 80034e4:	6833      	ldr	r3, [r6, #0]
 80034e6:	68e5      	ldr	r5, [r4, #12]
 80034e8:	1aed      	subs	r5, r5, r3
 80034ea:	43eb      	mvns	r3, r5
 80034ec:	17db      	asrs	r3, r3, #31
 80034ee:	401d      	ands	r5, r3
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	6922      	ldr	r2, [r4, #16]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	dd01      	ble.n	80034fc <_printf_common+0x80>
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	18ed      	adds	r5, r5, r3
 80034fc:	2600      	movs	r6, #0
 80034fe:	42b5      	cmp	r5, r6
 8003500:	d120      	bne.n	8003544 <_printf_common+0xc8>
 8003502:	2000      	movs	r0, #0
 8003504:	e010      	b.n	8003528 <_printf_common+0xac>
 8003506:	3501      	adds	r5, #1
 8003508:	68e3      	ldr	r3, [r4, #12]
 800350a:	6832      	ldr	r2, [r6, #0]
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	42ab      	cmp	r3, r5
 8003510:	ddd2      	ble.n	80034b8 <_printf_common+0x3c>
 8003512:	0022      	movs	r2, r4
 8003514:	2301      	movs	r3, #1
 8003516:	9901      	ldr	r1, [sp, #4]
 8003518:	9800      	ldr	r0, [sp, #0]
 800351a:	9f08      	ldr	r7, [sp, #32]
 800351c:	3219      	adds	r2, #25
 800351e:	47b8      	blx	r7
 8003520:	3001      	adds	r0, #1
 8003522:	d1f0      	bne.n	8003506 <_printf_common+0x8a>
 8003524:	2001      	movs	r0, #1
 8003526:	4240      	negs	r0, r0
 8003528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800352a:	2030      	movs	r0, #48	@ 0x30
 800352c:	18e1      	adds	r1, r4, r3
 800352e:	3143      	adds	r1, #67	@ 0x43
 8003530:	7008      	strb	r0, [r1, #0]
 8003532:	0021      	movs	r1, r4
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	3145      	adds	r1, #69	@ 0x45
 8003538:	7809      	ldrb	r1, [r1, #0]
 800353a:	18a2      	adds	r2, r4, r2
 800353c:	3243      	adds	r2, #67	@ 0x43
 800353e:	3302      	adds	r3, #2
 8003540:	7011      	strb	r1, [r2, #0]
 8003542:	e7c1      	b.n	80034c8 <_printf_common+0x4c>
 8003544:	0022      	movs	r2, r4
 8003546:	2301      	movs	r3, #1
 8003548:	9901      	ldr	r1, [sp, #4]
 800354a:	9800      	ldr	r0, [sp, #0]
 800354c:	9f08      	ldr	r7, [sp, #32]
 800354e:	321a      	adds	r2, #26
 8003550:	47b8      	blx	r7
 8003552:	3001      	adds	r0, #1
 8003554:	d0e6      	beq.n	8003524 <_printf_common+0xa8>
 8003556:	3601      	adds	r6, #1
 8003558:	e7d1      	b.n	80034fe <_printf_common+0x82>
	...

0800355c <_printf_i>:
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b08b      	sub	sp, #44	@ 0x2c
 8003560:	9206      	str	r2, [sp, #24]
 8003562:	000a      	movs	r2, r1
 8003564:	3243      	adds	r2, #67	@ 0x43
 8003566:	9307      	str	r3, [sp, #28]
 8003568:	9005      	str	r0, [sp, #20]
 800356a:	9203      	str	r2, [sp, #12]
 800356c:	7e0a      	ldrb	r2, [r1, #24]
 800356e:	000c      	movs	r4, r1
 8003570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003572:	2a78      	cmp	r2, #120	@ 0x78
 8003574:	d809      	bhi.n	800358a <_printf_i+0x2e>
 8003576:	2a62      	cmp	r2, #98	@ 0x62
 8003578:	d80b      	bhi.n	8003592 <_printf_i+0x36>
 800357a:	2a00      	cmp	r2, #0
 800357c:	d100      	bne.n	8003580 <_printf_i+0x24>
 800357e:	e0bc      	b.n	80036fa <_printf_i+0x19e>
 8003580:	497b      	ldr	r1, [pc, #492]	@ (8003770 <_printf_i+0x214>)
 8003582:	9104      	str	r1, [sp, #16]
 8003584:	2a58      	cmp	r2, #88	@ 0x58
 8003586:	d100      	bne.n	800358a <_printf_i+0x2e>
 8003588:	e090      	b.n	80036ac <_printf_i+0x150>
 800358a:	0025      	movs	r5, r4
 800358c:	3542      	adds	r5, #66	@ 0x42
 800358e:	702a      	strb	r2, [r5, #0]
 8003590:	e022      	b.n	80035d8 <_printf_i+0x7c>
 8003592:	0010      	movs	r0, r2
 8003594:	3863      	subs	r0, #99	@ 0x63
 8003596:	2815      	cmp	r0, #21
 8003598:	d8f7      	bhi.n	800358a <_printf_i+0x2e>
 800359a:	f7fc fdb5 	bl	8000108 <__gnu_thumb1_case_shi>
 800359e:	0016      	.short	0x0016
 80035a0:	fff6001f 	.word	0xfff6001f
 80035a4:	fff6fff6 	.word	0xfff6fff6
 80035a8:	001ffff6 	.word	0x001ffff6
 80035ac:	fff6fff6 	.word	0xfff6fff6
 80035b0:	fff6fff6 	.word	0xfff6fff6
 80035b4:	003600a1 	.word	0x003600a1
 80035b8:	fff60080 	.word	0xfff60080
 80035bc:	00b2fff6 	.word	0x00b2fff6
 80035c0:	0036fff6 	.word	0x0036fff6
 80035c4:	fff6fff6 	.word	0xfff6fff6
 80035c8:	0084      	.short	0x0084
 80035ca:	0025      	movs	r5, r4
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	3542      	adds	r5, #66	@ 0x42
 80035d0:	1d11      	adds	r1, r2, #4
 80035d2:	6019      	str	r1, [r3, #0]
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	702b      	strb	r3, [r5, #0]
 80035d8:	2301      	movs	r3, #1
 80035da:	e0a0      	b.n	800371e <_printf_i+0x1c2>
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	6809      	ldr	r1, [r1, #0]
 80035e0:	1d02      	adds	r2, r0, #4
 80035e2:	060d      	lsls	r5, r1, #24
 80035e4:	d50b      	bpl.n	80035fe <_printf_i+0xa2>
 80035e6:	6806      	ldr	r6, [r0, #0]
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	2e00      	cmp	r6, #0
 80035ec:	da03      	bge.n	80035f6 <_printf_i+0x9a>
 80035ee:	232d      	movs	r3, #45	@ 0x2d
 80035f0:	9a03      	ldr	r2, [sp, #12]
 80035f2:	4276      	negs	r6, r6
 80035f4:	7013      	strb	r3, [r2, #0]
 80035f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003770 <_printf_i+0x214>)
 80035f8:	270a      	movs	r7, #10
 80035fa:	9304      	str	r3, [sp, #16]
 80035fc:	e018      	b.n	8003630 <_printf_i+0xd4>
 80035fe:	6806      	ldr	r6, [r0, #0]
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	0649      	lsls	r1, r1, #25
 8003604:	d5f1      	bpl.n	80035ea <_printf_i+0x8e>
 8003606:	b236      	sxth	r6, r6
 8003608:	e7ef      	b.n	80035ea <_printf_i+0x8e>
 800360a:	6808      	ldr	r0, [r1, #0]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	c940      	ldmia	r1!, {r6}
 8003610:	0605      	lsls	r5, r0, #24
 8003612:	d402      	bmi.n	800361a <_printf_i+0xbe>
 8003614:	0640      	lsls	r0, r0, #25
 8003616:	d500      	bpl.n	800361a <_printf_i+0xbe>
 8003618:	b2b6      	uxth	r6, r6
 800361a:	6019      	str	r1, [r3, #0]
 800361c:	4b54      	ldr	r3, [pc, #336]	@ (8003770 <_printf_i+0x214>)
 800361e:	270a      	movs	r7, #10
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	2a6f      	cmp	r2, #111	@ 0x6f
 8003624:	d100      	bne.n	8003628 <_printf_i+0xcc>
 8003626:	3f02      	subs	r7, #2
 8003628:	0023      	movs	r3, r4
 800362a:	2200      	movs	r2, #0
 800362c:	3343      	adds	r3, #67	@ 0x43
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	60a3      	str	r3, [r4, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db03      	blt.n	8003640 <_printf_i+0xe4>
 8003638:	2104      	movs	r1, #4
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	438a      	bics	r2, r1
 800363e:	6022      	str	r2, [r4, #0]
 8003640:	2e00      	cmp	r6, #0
 8003642:	d102      	bne.n	800364a <_printf_i+0xee>
 8003644:	9d03      	ldr	r5, [sp, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <_printf_i+0x108>
 800364a:	9d03      	ldr	r5, [sp, #12]
 800364c:	0030      	movs	r0, r6
 800364e:	0039      	movs	r1, r7
 8003650:	f7fc fdea 	bl	8000228 <__aeabi_uidivmod>
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	3d01      	subs	r5, #1
 8003658:	5c5b      	ldrb	r3, [r3, r1]
 800365a:	702b      	strb	r3, [r5, #0]
 800365c:	0033      	movs	r3, r6
 800365e:	0006      	movs	r6, r0
 8003660:	429f      	cmp	r7, r3
 8003662:	d9f3      	bls.n	800364c <_printf_i+0xf0>
 8003664:	2f08      	cmp	r7, #8
 8003666:	d109      	bne.n	800367c <_printf_i+0x120>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	07db      	lsls	r3, r3, #31
 800366c:	d506      	bpl.n	800367c <_printf_i+0x120>
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	dc02      	bgt.n	800367c <_printf_i+0x120>
 8003676:	2330      	movs	r3, #48	@ 0x30
 8003678:	3d01      	subs	r5, #1
 800367a:	702b      	strb	r3, [r5, #0]
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	1b5b      	subs	r3, r3, r5
 8003680:	6123      	str	r3, [r4, #16]
 8003682:	9b07      	ldr	r3, [sp, #28]
 8003684:	0021      	movs	r1, r4
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	9805      	ldr	r0, [sp, #20]
 800368a:	9b06      	ldr	r3, [sp, #24]
 800368c:	aa09      	add	r2, sp, #36	@ 0x24
 800368e:	f7ff fef5 	bl	800347c <_printf_common>
 8003692:	3001      	adds	r0, #1
 8003694:	d148      	bne.n	8003728 <_printf_i+0x1cc>
 8003696:	2001      	movs	r0, #1
 8003698:	4240      	negs	r0, r0
 800369a:	b00b      	add	sp, #44	@ 0x2c
 800369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369e:	2220      	movs	r2, #32
 80036a0:	6809      	ldr	r1, [r1, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	6022      	str	r2, [r4, #0]
 80036a6:	2278      	movs	r2, #120	@ 0x78
 80036a8:	4932      	ldr	r1, [pc, #200]	@ (8003774 <_printf_i+0x218>)
 80036aa:	9104      	str	r1, [sp, #16]
 80036ac:	0021      	movs	r1, r4
 80036ae:	3145      	adds	r1, #69	@ 0x45
 80036b0:	700a      	strb	r2, [r1, #0]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	c940      	ldmia	r1!, {r6}
 80036b8:	0610      	lsls	r0, r2, #24
 80036ba:	d402      	bmi.n	80036c2 <_printf_i+0x166>
 80036bc:	0650      	lsls	r0, r2, #25
 80036be:	d500      	bpl.n	80036c2 <_printf_i+0x166>
 80036c0:	b2b6      	uxth	r6, r6
 80036c2:	6019      	str	r1, [r3, #0]
 80036c4:	07d3      	lsls	r3, r2, #31
 80036c6:	d502      	bpl.n	80036ce <_printf_i+0x172>
 80036c8:	2320      	movs	r3, #32
 80036ca:	4313      	orrs	r3, r2
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d001      	beq.n	80036d6 <_printf_i+0x17a>
 80036d2:	2710      	movs	r7, #16
 80036d4:	e7a8      	b.n	8003628 <_printf_i+0xcc>
 80036d6:	2220      	movs	r2, #32
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	4393      	bics	r3, r2
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	e7f8      	b.n	80036d2 <_printf_i+0x176>
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	680d      	ldr	r5, [r1, #0]
 80036e4:	1d10      	adds	r0, r2, #4
 80036e6:	6949      	ldr	r1, [r1, #20]
 80036e8:	6018      	str	r0, [r3, #0]
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	062e      	lsls	r6, r5, #24
 80036ee:	d501      	bpl.n	80036f4 <_printf_i+0x198>
 80036f0:	6019      	str	r1, [r3, #0]
 80036f2:	e002      	b.n	80036fa <_printf_i+0x19e>
 80036f4:	066d      	lsls	r5, r5, #25
 80036f6:	d5fb      	bpl.n	80036f0 <_printf_i+0x194>
 80036f8:	8019      	strh	r1, [r3, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	9d03      	ldr	r5, [sp, #12]
 80036fe:	6123      	str	r3, [r4, #16]
 8003700:	e7bf      	b.n	8003682 <_printf_i+0x126>
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	1d11      	adds	r1, r2, #4
 8003706:	6019      	str	r1, [r3, #0]
 8003708:	6815      	ldr	r5, [r2, #0]
 800370a:	2100      	movs	r1, #0
 800370c:	0028      	movs	r0, r5
 800370e:	6862      	ldr	r2, [r4, #4]
 8003710:	f000 f858 	bl	80037c4 <memchr>
 8003714:	2800      	cmp	r0, #0
 8003716:	d001      	beq.n	800371c <_printf_i+0x1c0>
 8003718:	1b40      	subs	r0, r0, r5
 800371a:	6060      	str	r0, [r4, #4]
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	6123      	str	r3, [r4, #16]
 8003720:	2300      	movs	r3, #0
 8003722:	9a03      	ldr	r2, [sp, #12]
 8003724:	7013      	strb	r3, [r2, #0]
 8003726:	e7ac      	b.n	8003682 <_printf_i+0x126>
 8003728:	002a      	movs	r2, r5
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	9906      	ldr	r1, [sp, #24]
 800372e:	9805      	ldr	r0, [sp, #20]
 8003730:	9d07      	ldr	r5, [sp, #28]
 8003732:	47a8      	blx	r5
 8003734:	3001      	adds	r0, #1
 8003736:	d0ae      	beq.n	8003696 <_printf_i+0x13a>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	079b      	lsls	r3, r3, #30
 800373c:	d415      	bmi.n	800376a <_printf_i+0x20e>
 800373e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003740:	68e0      	ldr	r0, [r4, #12]
 8003742:	4298      	cmp	r0, r3
 8003744:	daa9      	bge.n	800369a <_printf_i+0x13e>
 8003746:	0018      	movs	r0, r3
 8003748:	e7a7      	b.n	800369a <_printf_i+0x13e>
 800374a:	0022      	movs	r2, r4
 800374c:	2301      	movs	r3, #1
 800374e:	9906      	ldr	r1, [sp, #24]
 8003750:	9805      	ldr	r0, [sp, #20]
 8003752:	9e07      	ldr	r6, [sp, #28]
 8003754:	3219      	adds	r2, #25
 8003756:	47b0      	blx	r6
 8003758:	3001      	adds	r0, #1
 800375a:	d09c      	beq.n	8003696 <_printf_i+0x13a>
 800375c:	3501      	adds	r5, #1
 800375e:	68e3      	ldr	r3, [r4, #12]
 8003760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	42ab      	cmp	r3, r5
 8003766:	dcf0      	bgt.n	800374a <_printf_i+0x1ee>
 8003768:	e7e9      	b.n	800373e <_printf_i+0x1e2>
 800376a:	2500      	movs	r5, #0
 800376c:	e7f7      	b.n	800375e <_printf_i+0x202>
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	08003a63 	.word	0x08003a63
 8003774:	08003a74 	.word	0x08003a74

08003778 <memmove>:
 8003778:	b510      	push	{r4, lr}
 800377a:	4288      	cmp	r0, r1
 800377c:	d806      	bhi.n	800378c <memmove+0x14>
 800377e:	2300      	movs	r3, #0
 8003780:	429a      	cmp	r2, r3
 8003782:	d008      	beq.n	8003796 <memmove+0x1e>
 8003784:	5ccc      	ldrb	r4, [r1, r3]
 8003786:	54c4      	strb	r4, [r0, r3]
 8003788:	3301      	adds	r3, #1
 800378a:	e7f9      	b.n	8003780 <memmove+0x8>
 800378c:	188b      	adds	r3, r1, r2
 800378e:	4298      	cmp	r0, r3
 8003790:	d2f5      	bcs.n	800377e <memmove+0x6>
 8003792:	3a01      	subs	r2, #1
 8003794:	d200      	bcs.n	8003798 <memmove+0x20>
 8003796:	bd10      	pop	{r4, pc}
 8003798:	5c8b      	ldrb	r3, [r1, r2]
 800379a:	5483      	strb	r3, [r0, r2]
 800379c:	e7f9      	b.n	8003792 <memmove+0x1a>
	...

080037a0 <_sbrk_r>:
 80037a0:	2300      	movs	r3, #0
 80037a2:	b570      	push	{r4, r5, r6, lr}
 80037a4:	4d06      	ldr	r5, [pc, #24]	@ (80037c0 <_sbrk_r+0x20>)
 80037a6:	0004      	movs	r4, r0
 80037a8:	0008      	movs	r0, r1
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	f7fd fd12 	bl	80011d4 <_sbrk>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d103      	bne.n	80037bc <_sbrk_r+0x1c>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d000      	beq.n	80037bc <_sbrk_r+0x1c>
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	bd70      	pop	{r4, r5, r6, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	20000294 	.word	0x20000294

080037c4 <memchr>:
 80037c4:	b2c9      	uxtb	r1, r1
 80037c6:	1882      	adds	r2, r0, r2
 80037c8:	4290      	cmp	r0, r2
 80037ca:	d101      	bne.n	80037d0 <memchr+0xc>
 80037cc:	2000      	movs	r0, #0
 80037ce:	4770      	bx	lr
 80037d0:	7803      	ldrb	r3, [r0, #0]
 80037d2:	428b      	cmp	r3, r1
 80037d4:	d0fb      	beq.n	80037ce <memchr+0xa>
 80037d6:	3001      	adds	r0, #1
 80037d8:	e7f6      	b.n	80037c8 <memchr+0x4>

080037da <memcpy>:
 80037da:	2300      	movs	r3, #0
 80037dc:	b510      	push	{r4, lr}
 80037de:	429a      	cmp	r2, r3
 80037e0:	d100      	bne.n	80037e4 <memcpy+0xa>
 80037e2:	bd10      	pop	{r4, pc}
 80037e4:	5ccc      	ldrb	r4, [r1, r3]
 80037e6:	54c4      	strb	r4, [r0, r3]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e7f8      	b.n	80037de <memcpy+0x4>

080037ec <_realloc_r>:
 80037ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ee:	0006      	movs	r6, r0
 80037f0:	000c      	movs	r4, r1
 80037f2:	0015      	movs	r5, r2
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d105      	bne.n	8003804 <_realloc_r+0x18>
 80037f8:	0011      	movs	r1, r2
 80037fa:	f7ff fc51 	bl	80030a0 <_malloc_r>
 80037fe:	0004      	movs	r4, r0
 8003800:	0020      	movs	r0, r4
 8003802:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003804:	2a00      	cmp	r2, #0
 8003806:	d103      	bne.n	8003810 <_realloc_r+0x24>
 8003808:	f7ff fbde 	bl	8002fc8 <_free_r>
 800380c:	2400      	movs	r4, #0
 800380e:	e7f7      	b.n	8003800 <_realloc_r+0x14>
 8003810:	f000 f81b 	bl	800384a <_malloc_usable_size_r>
 8003814:	0007      	movs	r7, r0
 8003816:	4285      	cmp	r5, r0
 8003818:	d802      	bhi.n	8003820 <_realloc_r+0x34>
 800381a:	0843      	lsrs	r3, r0, #1
 800381c:	42ab      	cmp	r3, r5
 800381e:	d3ef      	bcc.n	8003800 <_realloc_r+0x14>
 8003820:	0029      	movs	r1, r5
 8003822:	0030      	movs	r0, r6
 8003824:	f7ff fc3c 	bl	80030a0 <_malloc_r>
 8003828:	9001      	str	r0, [sp, #4]
 800382a:	2800      	cmp	r0, #0
 800382c:	d0ee      	beq.n	800380c <_realloc_r+0x20>
 800382e:	002a      	movs	r2, r5
 8003830:	42bd      	cmp	r5, r7
 8003832:	d900      	bls.n	8003836 <_realloc_r+0x4a>
 8003834:	003a      	movs	r2, r7
 8003836:	0021      	movs	r1, r4
 8003838:	9801      	ldr	r0, [sp, #4]
 800383a:	f7ff ffce 	bl	80037da <memcpy>
 800383e:	0021      	movs	r1, r4
 8003840:	0030      	movs	r0, r6
 8003842:	f7ff fbc1 	bl	8002fc8 <_free_r>
 8003846:	9c01      	ldr	r4, [sp, #4]
 8003848:	e7da      	b.n	8003800 <_realloc_r+0x14>

0800384a <_malloc_usable_size_r>:
 800384a:	1f0b      	subs	r3, r1, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	1f18      	subs	r0, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	da01      	bge.n	8003858 <_malloc_usable_size_r+0xe>
 8003854:	580b      	ldr	r3, [r1, r0]
 8003856:	18c0      	adds	r0, r0, r3
 8003858:	4770      	bx	lr
	...

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

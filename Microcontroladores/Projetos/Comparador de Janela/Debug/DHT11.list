
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001dd0  08001dd0  00002dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dec  08001dec  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001dec  08001dec  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001dec  08001dec  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dec  08001dec  00002dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001df0  08001df0  00002df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001df4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001e00  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001e00  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068ae  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140a  00000000  00000000  000098e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000605  00000000  00000000  0000b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ac3  00000000  00000000  0000bae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000887a  00000000  00000000  0001e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000752d7  00000000  00000000  00026e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c0f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bcc  00000000  00000000  0009c13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0009dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001db8 	.word	0x08001db8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001db8 	.word	0x08001db8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa6e 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f844 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e6 	bl	80003fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f890 	bl	8000354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <main+0x78>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fb2e 	bl	8001898 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  DHT11_START();
 800023c:	f000 f914 	bl	8000468 <DHT11_START>

	  if(DHT11_CHECK_RESPONSE()){
 8000240:	f000 f988 	bl	8000554 <DHT11_CHECK_RESPONSE>
 8000244:	1e03      	subs	r3, r0, #0
 8000246:	d021      	beq.n	800028c <main+0x6c>
		  hum_int  = DHT11_READ_RESPONSE();
 8000248:	f000 f944 	bl	80004d4 <DHT11_READ_RESPONSE>
 800024c:	0003      	movs	r3, r0
 800024e:	001a      	movs	r2, r3
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <main+0x7c>)
 8000252:	701a      	strb	r2, [r3, #0]
		  hum_dec  = DHT11_CHECK_RESPONSE();
 8000254:	f000 f97e 	bl	8000554 <DHT11_CHECK_RESPONSE>
 8000258:	0003      	movs	r3, r0
 800025a:	001a      	movs	r2, r3
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <main+0x80>)
 800025e:	701a      	strb	r2, [r3, #0]
		  temp_int = DHT11_CHECK_RESPONSE();
 8000260:	f000 f978 	bl	8000554 <DHT11_CHECK_RESPONSE>
 8000264:	0003      	movs	r3, r0
 8000266:	001a      	movs	r2, r3
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <main+0x84>)
 800026a:	701a      	strb	r2, [r3, #0]
		  temp_dec = DHT11_CHECK_RESPONSE();
 800026c:	f000 f972 	bl	8000554 <DHT11_CHECK_RESPONSE>
 8000270:	0003      	movs	r3, r0
 8000272:	001a      	movs	r2, r3
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <main+0x88>)
 8000276:	701a      	strb	r2, [r3, #0]
		  DHT11_READ_RESPONSE();
 8000278:	f000 f92c 	bl	80004d4 <DHT11_READ_RESPONSE>

		  temp = temp_int;
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <main+0x84>)
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <main+0x8c>)
 8000282:	701a      	strb	r2, [r3, #0]
		  hum  = hum_int;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <main+0x7c>)
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <main+0x90>)
 800028a:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(2000);
 800028c:	23fa      	movs	r3, #250	@ 0xfa
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	0018      	movs	r0, r3
 8000292:	f000 faa7 	bl	80007e4 <HAL_Delay>
	  DHT11_START();
 8000296:	e7d1      	b.n	800023c <main+0x1c>
 8000298:	20000028 	.word	0x20000028
 800029c:	20000068 	.word	0x20000068
 80002a0:	20000069 	.word	0x20000069
 80002a4:	2000006a 	.word	0x2000006a
 80002a8:	2000006b 	.word	0x2000006b
 80002ac:	2000006d 	.word	0x2000006d
 80002b0:	2000006c 	.word	0x2000006c

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b095      	sub	sp, #84	@ 0x54
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	2418      	movs	r4, #24
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	0018      	movs	r0, r3
 80002c0:	2338      	movs	r3, #56	@ 0x38
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f001 fd4b 	bl	8001d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	0018      	movs	r0, r3
 80002ce:	2314      	movs	r3, #20
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f001 fd44 	bl	8001d60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d8:	4b1c      	ldr	r3, [pc, #112]	@ (800034c <SystemClock_Config+0x98>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <SystemClock_Config+0x9c>)
 80002de:	401a      	ands	r2, r3
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <SystemClock_Config+0x98>)
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	0109      	lsls	r1, r1, #4
 80002e6:	430a      	orrs	r2, r1
 80002e8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	0021      	movs	r1, r4
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2210      	movs	r2, #16
 80002fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	187b      	adds	r3, r7, r1
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fcf4 	bl	8000cf4 <HAL_RCC_OscConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000310:	f000 f980 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	220f      	movs	r2, #15
 8000318:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2280      	movs	r2, #128	@ 0x80
 8000324:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2100      	movs	r1, #0
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f8a0 	bl	800147c <HAL_RCC_ClockConfig>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000340:	f000 f968 	bl	8000614 <Error_Handler>
  }
}
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b015      	add	sp, #84	@ 0x54
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	40007000 	.word	0x40007000
 8000350:	ffffe7ff 	.word	0xffffe7ff

08000354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035a:	2308      	movs	r3, #8
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	2310      	movs	r3, #16
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f001 fcfb 	bl	8001d60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036a:	003b      	movs	r3, r7
 800036c:	0018      	movs	r0, r3
 800036e:	2308      	movs	r3, #8
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f001 fcf4 	bl	8001d60 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000378:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 800037a:	2280      	movs	r2, #128	@ 0x80
 800037c:	05d2      	lsls	r2, r2, #23
 800037e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000380:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 8000382:	2207      	movs	r2, #7
 8000384:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800038c:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 800038e:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <MX_TIM2_Init+0xa4>)
 8000390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000398:	4b16      	ldr	r3, [pc, #88]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039e:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fa39 	bl	8001818 <HAL_TIM_Base_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003aa:	f000 f933 	bl	8000614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ae:	2108      	movs	r1, #8
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2280      	movs	r2, #128	@ 0x80
 80003b4:	0152      	lsls	r2, r2, #5
 80003b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b8:	187a      	adds	r2, r7, r1
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f001 faae 	bl	8001920 <HAL_TIM_ConfigClockSource>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003c8:	f000 f924 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003cc:	003b      	movs	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003d8:	003a      	movs	r2, r7
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_TIM2_Init+0xa0>)
 80003dc:	0011      	movs	r1, r2
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 fc66 	bl	8001cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003e8:	f000 f914 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ec:	46c0      	nop			@ (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b006      	add	sp, #24
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	0000ffff 	.word	0x0000ffff

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	0018      	movs	r0, r3
 8000406:	2314      	movs	r3, #20
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f001 fca8 	bl	8001d60 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_GPIO_Init+0x68>)
 8000412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000414:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_GPIO_Init+0x68>)
 8000416:	2101      	movs	r1, #1
 8000418:	430a      	orrs	r2, r1
 800041a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_GPIO_Init+0x68>)
 800041e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000420:	2201      	movs	r2, #1
 8000422:	4013      	ands	r3, r2
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000428:	23a0      	movs	r3, #160	@ 0xa0
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	2201      	movs	r2, #1
 800042e:	2120      	movs	r1, #32
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fc42 	bl	8000cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2220      	movs	r2, #32
 800043a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2211      	movs	r2, #17
 8000440:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2201      	movs	r2, #1
 8000446:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2203      	movs	r2, #3
 800044c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800044e:	1d3a      	adds	r2, r7, #4
 8000450:	23a0      	movs	r3, #160	@ 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fa9c 	bl	8000994 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b006      	add	sp, #24
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000

08000468 <DHT11_START>:

/* USER CODE BEGIN 4 */
void DHT11_START(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800046c:	23a0      	movs	r3, #160	@ 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2200      	movs	r2, #0
 8000472:	2120      	movs	r1, #32
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fc20 	bl	8000cba <HAL_GPIO_WritePin>
	HAL_Delay(18);
 800047a:	2012      	movs	r0, #18
 800047c:	f000 f9b2 	bl	80007e4 <HAL_Delay>

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000480:	23a0      	movs	r3, #160	@ 0xa0
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fc16 	bl	8000cba <HAL_GPIO_WritePin>
	DELAY_MICRO(20);
 800048e:	2014      	movs	r0, #20
 8000490:	f000 f806 	bl	80004a0 <DELAY_MICRO>

	DHT11_ALTERN_PIN(INPUT);
 8000494:	2000      	movs	r0, #0
 8000496:	f000 f87e 	bl	8000596 <DHT11_ALTERN_PIN>
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <DELAY_MICRO>:
void DELAY_MICRO(uint16_t us){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	0002      	movs	r2, r0
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <DELAY_MICRO+0x30>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2200      	movs	r2, #0
 80004b2:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <DELAY_MICRO+0x30>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004bc:	1dbb      	adds	r3, r7, #6
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d3f8      	bcc.n	80004b6 <DELAY_MICRO+0x16>
}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	20000028 	.word	0x20000028

080004d4 <DHT11_READ_RESPONSE>:
uint8_t DHT11_READ_RESPONSE(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 8; ++i){
 80004e0:	2300      	movs	r3, #0
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	e02d      	b.n	8000542 <DHT11_READ_RESPONSE+0x6e>
		while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	23a0      	movs	r3, #160	@ 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2120      	movs	r1, #32
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fbc6 	bl	8000c80 <HAL_GPIO_ReadPin>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d0f7      	beq.n	80004e8 <DHT11_READ_RESPONSE+0x14>
		DELAY_MICRO(40);
 80004f8:	2028      	movs	r0, #40	@ 0x28
 80004fa:	f7ff ffd1 	bl	80004a0 <DELAY_MICRO>
		if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) result |= (1 << (7 - i));
 80004fe:	23a0      	movs	r3, #160	@ 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2120      	movs	r1, #32
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fbbb 	bl	8000c80 <HAL_GPIO_ReadPin>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d00d      	beq.n	800052a <DHT11_READ_RESPONSE+0x56>
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	2207      	movs	r2, #7
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	2201      	movs	r2, #1
 8000516:	409a      	lsls	r2, r3
 8000518:	0013      	movs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b25a      	sxtb	r2, r3
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	23a0      	movs	r3, #160	@ 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2120      	movs	r1, #32
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fba4 	bl	8000c80 <HAL_GPIO_ReadPin>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d1f7      	bne.n	800052c <DHT11_READ_RESPONSE+0x58>
	for(int i = 0; i < 8; ++i){
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	2b07      	cmp	r3, #7
 8000546:	ddce      	ble.n	80004e6 <DHT11_READ_RESPONSE+0x12>
	}

	return result;
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	781b      	ldrb	r3, [r3, #0]
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <DHT11_CHECK_RESPONSE>:
uint8_t DHT11_CHECK_RESPONSE(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	DELAY_MICRO(40);
 8000558:	2028      	movs	r0, #40	@ 0x28
 800055a:	f7ff ffa1 	bl	80004a0 <DELAY_MICRO>
	if(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 800055e:	23a0      	movs	r3, #160	@ 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2120      	movs	r1, #32
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fb8b 	bl	8000c80 <HAL_GPIO_ReadPin>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d10f      	bne.n	800058e <DHT11_CHECK_RESPONSE+0x3a>
		DELAY_MICRO(80);
 800056e:	2050      	movs	r0, #80	@ 0x50
 8000570:	f7ff ff96 	bl	80004a0 <DELAY_MICRO>
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 8000574:	23a0      	movs	r3, #160	@ 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2120      	movs	r1, #32
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fb80 	bl	8000c80 <HAL_GPIO_ReadPin>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d004      	beq.n	800058e <DHT11_CHECK_RESPONSE+0x3a>
			DELAY_MICRO(80);
 8000584:	2050      	movs	r0, #80	@ 0x50
 8000586:	f7ff ff8b 	bl	80004a0 <DELAY_MICRO>
			return 1;
 800058a:	2301      	movs	r3, #1
 800058c:	e000      	b.n	8000590 <DHT11_CHECK_RESPONSE+0x3c>
		}
	}

	return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	0018      	movs	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <DHT11_ALTERN_PIN>:

void DHT11_ALTERN_PIN(uint8_t mode){
 8000596:	b590      	push	{r4, r7, lr}
 8000598:	b089      	sub	sp, #36	@ 0x24
 800059a:	af00      	add	r7, sp, #0
 800059c:	0002      	movs	r2, r0
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	240c      	movs	r4, #12
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	0018      	movs	r0, r3
 80005a8:	2314      	movs	r3, #20
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f001 fbd7 	bl	8001d60 <memset>

	if(mode == INPUT){
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d110      	bne.n	80005dc <DHT11_ALTERN_PIN+0x46>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2220      	movs	r2, #32
 80005be:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80005cc:	193a      	adds	r2, r7, r4
 80005ce:	23a0      	movs	r3, #160	@ 0xa0
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 f9dd 	bl	8000994 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
	}
}
 80005da:	e017      	b.n	800060c <DHT11_ALTERN_PIN+0x76>
	else if (mode == OUTPUT){
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d113      	bne.n	800060c <DHT11_ALTERN_PIN+0x76>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 80005e4:	210c      	movs	r1, #12
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2220      	movs	r2, #32
 80005ea:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2211      	movs	r2, #17
 80005f0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2203      	movs	r2, #3
 80005fc:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	23a0      	movs	r3, #160	@ 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 f9c4 	bl	8000994 <HAL_GPIO_Init>
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b009      	add	sp, #36	@ 0x24
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	e7fd      	b.n	800061c <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <HAL_MspInit+0x24>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_MspInit+0x24>)
 800062a:	2101      	movs	r1, #1
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <HAL_MspInit+0x24>)
 8000632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <HAL_MspInit+0x24>)
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	0549      	lsls	r1, r1, #21
 800063a:	430a      	orrs	r2, r1
 800063c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	429a      	cmp	r2, r3
 800065a:	d105      	bne.n	8000668 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <HAL_TIM_Base_MspInit+0x28>)
 800065e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <HAL_TIM_Base_MspInit+0x28>)
 8000662:	2101      	movs	r1, #1
 8000664:	430a      	orrs	r2, r1
 8000666:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	e7fd      	b.n	8000678 <NMI_Handler+0x4>

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	e7fd      	b.n	8000680 <HardFault_Handler+0x4>

08000684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f886 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b4:	f7ff fff7 	bl	80006a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006de:	f001 fb47 	bl	8001d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006e2:	f7ff fd9d 	bl	8000220 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	08001df4 	.word	0x08001df4
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	20000074 	.word	0x20000074

08000700 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_COMP_IRQHandler>
	...

08000704 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <HAL_Init+0x3c>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <HAL_Init+0x3c>)
 8000716:	2140      	movs	r1, #64	@ 0x40
 8000718:	430a      	orrs	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f811 	bl	8000744 <HAL_InitTick>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d003      	beq.n	800072e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e001      	b.n	8000732 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800072e:	f7ff ff77 	bl	8000620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
}
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <HAL_InitTick+0x5c>)
 800074e:	681c      	ldr	r4, [r3, #0]
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_InitTick+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	0019      	movs	r1, r3
 8000756:	23fa      	movs	r3, #250	@ 0xfa
 8000758:	0098      	lsls	r0, r3, #2
 800075a:	f7ff fcd5 	bl	8000108 <__udivsi3>
 800075e:	0003      	movs	r3, r0
 8000760:	0019      	movs	r1, r3
 8000762:	0020      	movs	r0, r4
 8000764:	f7ff fcd0 	bl	8000108 <__udivsi3>
 8000768:	0003      	movs	r3, r0
 800076a:	0018      	movs	r0, r3
 800076c:	f000 f905 	bl	800097a <HAL_SYSTICK_Config>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e00f      	b.n	8000798 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d80b      	bhi.n	8000796 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	425b      	negs	r3, r3
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f000 f8e2 	bl	8000950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_InitTick+0x64>)
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b003      	add	sp, #12
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	001a      	movs	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	18d2      	adds	r2, r2, r3
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <HAL_IncTick+0x20>)
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000070 	.word	0x20000070

080007d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	@ (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000070 	.word	0x20000070

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff0 	bl	80007d0 <HAL_GetTick>
 80007f0:	0003      	movs	r3, r0
 80007f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	001a      	movs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	189b      	adds	r3, r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	f7ff ffe0 	bl	80007d0 <HAL_GetTick>
 8000810:	0002      	movs	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	20000008 	.word	0x20000008

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000840:	d828      	bhi.n	8000894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000842:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <__NVIC_SetPriority+0xd4>)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	33c0      	adds	r3, #192	@ 0xc0
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	589b      	ldr	r3, [r3, r2]
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	2203      	movs	r2, #3
 800085a:	400a      	ands	r2, r1
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	21ff      	movs	r1, #255	@ 0xff
 8000860:	4091      	lsls	r1, r2
 8000862:	000a      	movs	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	401a      	ands	r2, r3
 8000868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	22ff      	movs	r2, #255	@ 0xff
 8000870:	401a      	ands	r2, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	2303      	movs	r3, #3
 800087a:	4003      	ands	r3, r0
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	481f      	ldr	r0, [pc, #124]	@ (8000900 <__NVIC_SetPriority+0xd4>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	33c0      	adds	r3, #192	@ 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000892:	e031      	b.n	80008f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <__NVIC_SetPriority+0xd8>)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	230f      	movs	r3, #15
 800089e:	400b      	ands	r3, r1
 80008a0:	3b08      	subs	r3, #8
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	3306      	adds	r3, #6
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	3304      	adds	r3, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	400a      	ands	r2, r1
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	21ff      	movs	r1, #255	@ 0xff
 80008bc:	4091      	lsls	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	22ff      	movs	r2, #255	@ 0xff
 80008cc:	401a      	ands	r2, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	2303      	movs	r3, #3
 80008d6:	4003      	ands	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001c      	movs	r4, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4023      	ands	r3, r4
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	430a      	orrs	r2, r1
 80008ee:	3306      	adds	r3, #6
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18c3      	adds	r3, r0, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	045b      	lsls	r3, r3, #17
 8000918:	429a      	cmp	r2, r3
 800091a:	d301      	bcc.n	8000920 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091c:	2301      	movs	r3, #1
 800091e:	e010      	b.n	8000942 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <SysTick_Config+0x44>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	3a01      	subs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000928:	2301      	movs	r3, #1
 800092a:	425b      	negs	r3, r3
 800092c:	2103      	movs	r1, #3
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff7c 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <SysTick_Config+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	@ (800094c <SysTick_Config+0x44>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	210f      	movs	r1, #15
 800095c:	187b      	adds	r3, r7, r1
 800095e:	1c02      	adds	r2, r0, #0
 8000960:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ffbf 	bl	8000908 <SysTick_Config>
 800098a:	0003      	movs	r3, r0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009aa:	e14f      	b.n	8000c4c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d100      	bne.n	80009c4 <HAL_GPIO_Init+0x30>
 80009c2:	e140      	b.n	8000c46 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2203      	movs	r2, #3
 80009d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2203      	movs	r2, #3
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	58d3      	ldr	r3, [r2, r3]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	2207      	movs	r2, #7
 8000a98:	4013      	ands	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	6939      	ldr	r1, [r7, #16]
 8000acc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	401a      	ands	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	23c0      	movs	r3, #192	@ 0xc0
 8000b08:	029b      	lsls	r3, r3, #10
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d100      	bne.n	8000b10 <HAL_GPIO_Init+0x17c>
 8000b0e:	e09a      	b.n	8000c46 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b54      	ldr	r3, [pc, #336]	@ (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b14:	4b53      	ldr	r3, [pc, #332]	@ (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b1c:	4a52      	ldr	r2, [pc, #328]	@ (8000c68 <HAL_GPIO_Init+0x2d4>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	589b      	ldr	r3, [r3, r2]
 8000b28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	23a0      	movs	r3, #160	@ 0xa0
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d019      	beq.n	8000b7e <HAL_GPIO_Init+0x1ea>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a47      	ldr	r2, [pc, #284]	@ (8000c6c <HAL_GPIO_Init+0x2d8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0x1e6>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a46      	ldr	r2, [pc, #280]	@ (8000c70 <HAL_GPIO_Init+0x2dc>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d00d      	beq.n	8000b76 <HAL_GPIO_Init+0x1e2>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a45      	ldr	r2, [pc, #276]	@ (8000c74 <HAL_GPIO_Init+0x2e0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x1de>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a44      	ldr	r2, [pc, #272]	@ (8000c78 <HAL_GPIO_Init+0x2e4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_GPIO_Init+0x1da>
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	e008      	b.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b6e:	2306      	movs	r3, #6
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	2103      	movs	r1, #3
 8000b84:	400a      	ands	r2, r1
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b90:	4935      	ldr	r1, [pc, #212]	@ (8000c68 <HAL_GPIO_Init+0x2d4>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9e:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	035b      	lsls	r3, r3, #13
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	039b      	lsls	r3, r3, #14
 8000be0:	4013      	ands	r3, r2
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	2380      	movs	r3, #128	@ 0x80
 8000c08:	029b      	lsls	r3, r3, #10
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	025b      	lsls	r3, r3, #9
 8000c34:	4013      	ands	r3, r2
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	40da      	lsrs	r2, r3
 8000c54:	1e13      	subs	r3, r2, #0
 8000c56:	d000      	beq.n	8000c5a <HAL_GPIO_Init+0x2c6>
 8000c58:	e6a8      	b.n	80009ac <HAL_GPIO_Init+0x18>
  }
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b006      	add	sp, #24
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	50000400 	.word	0x50000400
 8000c70:	50000800 	.word	0x50000800
 8000c74:	50000c00 	.word	0x50000c00
 8000c78:	50001c00 	.word	0x50001c00
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	000a      	movs	r2, r1
 8000c8a:	1cbb      	adds	r3, r7, #2
 8000c8c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	1cba      	adds	r2, r7, #2
 8000c94:	8812      	ldrh	r2, [r2, #0]
 8000c96:	4013      	ands	r3, r2
 8000c98:	d004      	beq.n	8000ca4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e003      	b.n	8000cac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	0008      	movs	r0, r1
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	1cbb      	adds	r3, r7, #2
 8000cc8:	1c02      	adds	r2, r0, #0
 8000cca:	801a      	strh	r2, [r3, #0]
 8000ccc:	1c7b      	adds	r3, r7, #1
 8000cce:	1c0a      	adds	r2, r1, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cda:	1cbb      	adds	r3, r7, #2
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ce2:	e003      	b.n	8000cec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f000 fbaf 	bl	8001466 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d08:	4bcf      	ldr	r3, [pc, #828]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	220c      	movs	r2, #12
 8000d0e:	4013      	ands	r3, r2
 8000d10:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d12:	4bcd      	ldr	r3, [pc, #820]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	025b      	lsls	r3, r3, #9
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4013      	ands	r3, r2
 8000d26:	d100      	bne.n	8000d2a <HAL_RCC_OscConfig+0x36>
 8000d28:	e07e      	b.n	8000e28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d007      	beq.n	8000d40 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	2b0c      	cmp	r3, #12
 8000d34:	d112      	bne.n	8000d5c <HAL_RCC_OscConfig+0x68>
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	2380      	movs	r3, #128	@ 0x80
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d10d      	bne.n	8000d5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	4bc1      	ldr	r3, [pc, #772]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d100      	bne.n	8000d4e <HAL_RCC_OscConfig+0x5a>
 8000d4c:	e06b      	b.n	8000e26 <HAL_RCC_OscConfig+0x132>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d167      	bne.n	8000e26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f000 fb85 	bl	8001466 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	025b      	lsls	r3, r3, #9
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d107      	bne.n	8000d78 <HAL_RCC_OscConfig+0x84>
 8000d68:	4bb7      	ldr	r3, [pc, #732]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4bb6      	ldr	r3, [pc, #728]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d6e:	2180      	movs	r1, #128	@ 0x80
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e027      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	23a0      	movs	r3, #160	@ 0xa0
 8000d7e:	02db      	lsls	r3, r3, #11
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d10e      	bne.n	8000da2 <HAL_RCC_OscConfig+0xae>
 8000d84:	4bb0      	ldr	r3, [pc, #704]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4baf      	ldr	r3, [pc, #700]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d8a:	2180      	movs	r1, #128	@ 0x80
 8000d8c:	02c9      	lsls	r1, r1, #11
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	4bad      	ldr	r3, [pc, #692]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4bac      	ldr	r3, [pc, #688]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	0249      	lsls	r1, r1, #9
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e012      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000da2:	4ba9      	ldr	r3, [pc, #676]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4ba8      	ldr	r3, [pc, #672]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000da8:	49a8      	ldr	r1, [pc, #672]	@ (800104c <HAL_RCC_OscConfig+0x358>)
 8000daa:	400a      	ands	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	4ba6      	ldr	r3, [pc, #664]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4ba2      	ldr	r3, [pc, #648]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000dc2:	49a3      	ldr	r1, [pc, #652]	@ (8001050 <HAL_RCC_OscConfig+0x35c>)
 8000dc4:	400a      	ands	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcfe 	bl	80007d0 <HAL_GetTick>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dd8:	e009      	b.n	8000dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dda:	f7ff fcf9 	bl	80007d0 <HAL_GetTick>
 8000dde:	0002      	movs	r2, r0
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b64      	cmp	r3, #100	@ 0x64
 8000de6:	d902      	bls.n	8000dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	f000 fb3c 	bl	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dee:	4b96      	ldr	r3, [pc, #600]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	4013      	ands	r3, r2
 8000df8:	d0ef      	beq.n	8000dda <HAL_RCC_OscConfig+0xe6>
 8000dfa:	e015      	b.n	8000e28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fce8 	bl	80007d0 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fce3 	bl	80007d0 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	@ 0x64
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e326      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e18:	4b8b      	ldr	r3, [pc, #556]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	4013      	ands	r3, r2
 8000e22:	d1f0      	bne.n	8000e06 <HAL_RCC_OscConfig+0x112>
 8000e24:	e000      	b.n	8000e28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d100      	bne.n	8000e34 <HAL_RCC_OscConfig+0x140>
 8000e32:	e08b      	b.n	8000f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d005      	beq.n	8000e4c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	2b0c      	cmp	r3, #12
 8000e44:	d13e      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x1d0>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d13b      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2204      	movs	r2, #4
 8000e52:	4013      	ands	r3, r2
 8000e54:	d004      	beq.n	8000e60 <HAL_RCC_OscConfig+0x16c>
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e302      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b79      	ldr	r3, [pc, #484]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4a7b      	ldr	r2, [pc, #492]	@ (8001054 <HAL_RCC_OscConfig+0x360>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	021a      	lsls	r2, r3, #8
 8000e70:	4b75      	ldr	r3, [pc, #468]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e72:	430a      	orrs	r2, r1
 8000e74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e76:	4b74      	ldr	r3, [pc, #464]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2209      	movs	r2, #9
 8000e7c:	4393      	bics	r3, r2
 8000e7e:	0019      	movs	r1, r3
 8000e80:	4b71      	ldr	r3, [pc, #452]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e88:	f000 fc40 	bl	800170c <HAL_RCC_GetSysClockFreq>
 8000e8c:	0001      	movs	r1, r0
 8000e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	220f      	movs	r2, #15
 8000e96:	4013      	ands	r3, r2
 8000e98:	4a6f      	ldr	r2, [pc, #444]	@ (8001058 <HAL_RCC_OscConfig+0x364>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	000a      	movs	r2, r1
 8000e9e:	40da      	lsrs	r2, r3
 8000ea0:	4b6e      	ldr	r3, [pc, #440]	@ (800105c <HAL_RCC_OscConfig+0x368>)
 8000ea2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8001060 <HAL_RCC_OscConfig+0x36c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2513      	movs	r5, #19
 8000eaa:	197c      	adds	r4, r7, r5
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff fc49 	bl	8000744 <HAL_InitTick>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d046      	beq.n	8000f4c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000ebe:	197b      	adds	r3, r7, r5
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	e2d0      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d027      	beq.n	8000f1a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000eca:	4b5f      	ldr	r3, [pc, #380]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2209      	movs	r2, #9
 8000ed0:	4393      	bics	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc78 	bl	80007d0 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc73 	bl	80007d0 <HAL_GetTick>
 8000eea:	0002      	movs	r2, r0
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e2b6      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ef8:	4b53      	ldr	r3, [pc, #332]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2204      	movs	r2, #4
 8000efe:	4013      	ands	r3, r2
 8000f00:	d0f1      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b51      	ldr	r3, [pc, #324]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4a53      	ldr	r2, [pc, #332]	@ (8001054 <HAL_RCC_OscConfig+0x360>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	021a      	lsls	r2, r3, #8
 8000f12:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	e018      	b.n	8000f4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fc53 	bl	80007d0 <HAL_GetTick>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc4e 	bl	80007d0 <HAL_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e291      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f42:	4b41      	ldr	r3, [pc, #260]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2204      	movs	r2, #4
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d1f1      	bne.n	8000f30 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2210      	movs	r2, #16
 8000f52:	4013      	ands	r3, r2
 8000f54:	d100      	bne.n	8000f58 <HAL_RCC_OscConfig+0x264>
 8000f56:	e0a1      	b.n	800109c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d140      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	2380      	movs	r3, #128	@ 0x80
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4013      	ands	r3, r2
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_OscConfig+0x282>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e277      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f76:	4b34      	ldr	r3, [pc, #208]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001064 <HAL_RCC_OscConfig+0x370>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	0019      	movs	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f86:	430a      	orrs	r2, r1
 8000f88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	0a19      	lsrs	r1, r3, #8
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	061a      	lsls	r2, r3, #24
 8000f98:	4b2b      	ldr	r3, [pc, #172]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	0b5b      	lsrs	r3, r3, #13
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	2280      	movs	r2, #128	@ 0x80
 8000fa8:	0212      	lsls	r2, r2, #8
 8000faa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	4928      	ldr	r1, [pc, #160]	@ (8001058 <HAL_RCC_OscConfig+0x364>)
 8000fb8:	5ccb      	ldrb	r3, [r1, r3]
 8000fba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fbc:	4b27      	ldr	r3, [pc, #156]	@ (800105c <HAL_RCC_OscConfig+0x368>)
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <HAL_RCC_OscConfig+0x36c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2513      	movs	r5, #19
 8000fc6:	197c      	adds	r4, r7, r5
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fbbb 	bl	8000744 <HAL_InitTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000fd2:	197b      	adds	r3, r7, r5
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d060      	beq.n	800109c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	e242      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d03f      	beq.n	8001068 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8000fee:	2180      	movs	r1, #128	@ 0x80
 8000ff0:	0049      	lsls	r1, r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fbeb 	bl	80007d0 <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001000:	f7ff fbe6 	bl	80007d0 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e229      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4013      	ands	r3, r2
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_RCC_OscConfig+0x370>)
 8001024:	4013      	ands	r3, r2
 8001026:	0019      	movs	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 800102e:	430a      	orrs	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	0a19      	lsrs	r1, r3, #8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	061a      	lsls	r2, r3, #24
 8001040:	4b01      	ldr	r3, [pc, #4]	@ (8001048 <HAL_RCC_OscConfig+0x354>)
 8001042:	430a      	orrs	r2, r1
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	e029      	b.n	800109c <HAL_RCC_OscConfig+0x3a8>
 8001048:	40021000 	.word	0x40021000
 800104c:	fffeffff 	.word	0xfffeffff
 8001050:	fffbffff 	.word	0xfffbffff
 8001054:	ffffe0ff 	.word	0xffffe0ff
 8001058:	08001dd0 	.word	0x08001dd0
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004
 8001064:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001068:	4bbd      	ldr	r3, [pc, #756]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4bbc      	ldr	r3, [pc, #752]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800106e:	49bd      	ldr	r1, [pc, #756]	@ (8001364 <HAL_RCC_OscConfig+0x670>)
 8001070:	400a      	ands	r2, r1
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fbac 	bl	80007d0 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107e:	f7ff fba7 	bl	80007d0 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e1ea      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001090:	4bb3      	ldr	r3, [pc, #716]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2208      	movs	r2, #8
 80010a2:	4013      	ands	r3, r2
 80010a4:	d036      	beq.n	8001114 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4bac      	ldr	r3, [pc, #688]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80010b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010b2:	4bab      	ldr	r3, [pc, #684]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb89 	bl	80007d0 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fb84 	bl	80007d0 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1c7      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80010d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010da:	2202      	movs	r2, #2
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f1      	beq.n	80010c4 <HAL_RCC_OscConfig+0x3d0>
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80010e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	438a      	bics	r2, r1
 80010ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb6f 	bl	80007d0 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fb6a 	bl	80007d0 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1ad      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800110a:	4b95      	ldr	r3, [pc, #596]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800110c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d1f1      	bne.n	80010f8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2204      	movs	r2, #4
 800111a:	4013      	ands	r3, r2
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x42c>
 800111e:	e0ae      	b.n	800127e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001120:	2027      	movs	r0, #39	@ 0x27
 8001122:	183b      	adds	r3, r7, r0
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001128:	4b8d      	ldr	r3, [pc, #564]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800112a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	055b      	lsls	r3, r3, #21
 8001130:	4013      	ands	r3, r2
 8001132:	d109      	bne.n	8001148 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	4b8a      	ldr	r3, [pc, #552]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001138:	4b89      	ldr	r3, [pc, #548]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0549      	lsls	r1, r1, #21
 800113e:	430a      	orrs	r2, r1
 8001140:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001142:	183b      	adds	r3, r7, r0
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	4b87      	ldr	r3, [pc, #540]	@ (8001368 <HAL_RCC_OscConfig+0x674>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d11a      	bne.n	800118a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001154:	4b84      	ldr	r3, [pc, #528]	@ (8001368 <HAL_RCC_OscConfig+0x674>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b83      	ldr	r3, [pc, #524]	@ (8001368 <HAL_RCC_OscConfig+0x674>)
 800115a:	2180      	movs	r1, #128	@ 0x80
 800115c:	0049      	lsls	r1, r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb35 	bl	80007d0 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116c:	f7ff fb30 	bl	80007d0 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	@ 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e173      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b7a      	ldr	r3, [pc, #488]	@ (8001368 <HAL_RCC_OscConfig+0x674>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4013      	ands	r3, r2
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	429a      	cmp	r2, r3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_OscConfig+0x4b2>
 8001196:	4b72      	ldr	r3, [pc, #456]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800119a:	4b71      	ldr	r3, [pc, #452]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	0049      	lsls	r1, r1, #1
 80011a0:	430a      	orrs	r2, r1
 80011a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80011a4:	e031      	b.n	800120a <HAL_RCC_OscConfig+0x516>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4d4>
 80011ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011b4:	496b      	ldr	r1, [pc, #428]	@ (8001364 <HAL_RCC_OscConfig+0x670>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80011ba:	4b69      	ldr	r3, [pc, #420]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011be:	4b68      	ldr	r3, [pc, #416]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011c0:	496a      	ldr	r1, [pc, #424]	@ (800136c <HAL_RCC_OscConfig+0x678>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80011c6:	e020      	b.n	800120a <HAL_RCC_OscConfig+0x516>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	23a0      	movs	r3, #160	@ 0xa0
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d10e      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4fe>
 80011d4:	4b62      	ldr	r3, [pc, #392]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011d8:	4b61      	ldr	r3, [pc, #388]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011da:	2180      	movs	r1, #128	@ 0x80
 80011dc:	00c9      	lsls	r1, r1, #3
 80011de:	430a      	orrs	r2, r1
 80011e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80011e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011e8:	2180      	movs	r1, #128	@ 0x80
 80011ea:	0049      	lsls	r1, r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80011f0:	e00b      	b.n	800120a <HAL_RCC_OscConfig+0x516>
 80011f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80011f8:	495a      	ldr	r1, [pc, #360]	@ (8001364 <HAL_RCC_OscConfig+0x670>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80011fe:	4b58      	ldr	r3, [pc, #352]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001204:	4959      	ldr	r1, [pc, #356]	@ (800136c <HAL_RCC_OscConfig+0x678>)
 8001206:	400a      	ands	r2, r1
 8001208:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d015      	beq.n	800123e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fadd 	bl	80007d0 <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800121a:	e009      	b.n	8001230 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff fad8 	bl	80007d0 <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a52      	ldr	r2, [pc, #328]	@ (8001370 <HAL_RCC_OscConfig+0x67c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e11a      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001230:	4b4b      	ldr	r3, [pc, #300]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001232:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d0ef      	beq.n	800121c <HAL_RCC_OscConfig+0x528>
 800123c:	e014      	b.n	8001268 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fac7 	bl	80007d0 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001246:	e009      	b.n	800125c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff fac2 	bl	80007d0 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <HAL_RCC_OscConfig+0x67c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e104      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800125c:	4b40      	ldr	r3, [pc, #256]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800125e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d1ef      	bne.n	8001248 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001268:	2327      	movs	r3, #39	@ 0x27
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001278:	493e      	ldr	r1, [pc, #248]	@ (8001374 <HAL_RCC_OscConfig+0x680>)
 800127a:	400a      	ands	r2, r1
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2220      	movs	r2, #32
 8001284:	4013      	ands	r3, r2
 8001286:	d049      	beq.n	800131c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d026      	beq.n	80012de <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001296:	2101      	movs	r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800129e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80012a2:	2101      	movs	r1, #1
 80012a4:	430a      	orrs	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80012a8:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <HAL_RCC_OscConfig+0x684>)
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <HAL_RCC_OscConfig+0x684>)
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	0189      	lsls	r1, r1, #6
 80012b2:	430a      	orrs	r2, r1
 80012b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fa8b 	bl	80007d0 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012c0:	f7ff fa86 	bl	80007d0 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e0c9      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012d2:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f1      	beq.n	80012c0 <HAL_RCC_OscConfig+0x5cc>
 80012dc:	e01e      	b.n	800131c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	438a      	bics	r2, r1
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_RCC_OscConfig+0x684>)
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <HAL_RCC_OscConfig+0x684>)
 80012f0:	4922      	ldr	r1, [pc, #136]	@ (800137c <HAL_RCC_OscConfig+0x688>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fa6b 	bl	80007d0 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001300:	f7ff fa66 	bl	80007d0 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e0a9      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d1f1      	bne.n	8001300 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	2b00      	cmp	r3, #0
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x632>
 8001324:	e09e      	b.n	8001464 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x63a>
 800132c:	e077      	b.n	800141e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001332:	2b02      	cmp	r3, #2
 8001334:	d158      	bne.n	80013e8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_RCC_OscConfig+0x66c>)
 800133c:	4910      	ldr	r1, [pc, #64]	@ (8001380 <HAL_RCC_OscConfig+0x68c>)
 800133e:	400a      	ands	r2, r1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fa45 	bl	80007d0 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800134a:	e01b      	b.n	8001384 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff fa40 	bl	80007d0 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d914      	bls.n	8001384 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e083      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	40021000 	.word	0x40021000
 8001364:	fffffeff 	.word	0xfffffeff
 8001368:	40007000 	.word	0x40007000
 800136c:	fffffbff 	.word	0xfffffbff
 8001370:	00001388 	.word	0x00001388
 8001374:	efffffff 	.word	0xefffffff
 8001378:	40010000 	.word	0x40010000
 800137c:	ffffdfff 	.word	0xffffdfff
 8001380:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001384:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	049b      	lsls	r3, r3, #18
 800138c:	4013      	ands	r3, r2
 800138e:	d1dd      	bne.n	800134c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001390:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a37      	ldr	r2, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001396:	4013      	ands	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a8:	431a      	orrs	r2, r3
 80013aa:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	0449      	lsls	r1, r1, #17
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff fa07 	bl	80007d0 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fa02 	bl	80007d0 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e045      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	049b      	lsls	r3, r3, #18
 80013e2:	4013      	ands	r3, r2
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x6d4>
 80013e6:	e03d      	b.n	8001464 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e8:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 80013ee:	4922      	ldr	r1, [pc, #136]	@ (8001478 <HAL_RCC_OscConfig+0x784>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff f9ec 	bl	80007d0 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff f9e7 	bl	80007d0 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e02a      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	049b      	lsls	r3, r3, #18
 8001418:	4013      	ands	r3, r2
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x70a>
 800141c:	e022      	b.n	8001464 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e01d      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_RCC_OscConfig+0x77c>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	429a      	cmp	r2, r3
 800143e:	d10f      	bne.n	8001460 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	23f0      	movs	r3, #240	@ 0xf0
 8001444:	039b      	lsls	r3, r3, #14
 8001446:	401a      	ands	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	23c0      	movs	r3, #192	@ 0xc0
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	401a      	ands	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b00a      	add	sp, #40	@ 0x28
 800146c:	bdb0      	pop	{r4, r5, r7, pc}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	40021000 	.word	0x40021000
 8001474:	ff02ffff 	.word	0xff02ffff
 8001478:	feffffff 	.word	0xfeffffff

0800147c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e128      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b96      	ldr	r3, [pc, #600]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	4013      	ands	r3, r2
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d91e      	bls.n	80014dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b93      	ldr	r3, [pc, #588]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4393      	bics	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014b0:	f7ff f98e 	bl	80007d0 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b8:	e009      	b.n	80014ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff f989 	bl	80007d0 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a8a      	ldr	r2, [pc, #552]	@ (80016f0 <HAL_RCC_ClockConfig+0x274>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e109      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b87      	ldr	r3, [pc, #540]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e6:	4b83      	ldr	r3, [pc, #524]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	22f0      	movs	r2, #240	@ 0xf0
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	4b7f      	ldr	r3, [pc, #508]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80014f6:	430a      	orrs	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	d100      	bne.n	8001506 <HAL_RCC_ClockConfig+0x8a>
 8001504:	e089      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800150e:	4b79      	ldr	r3, [pc, #484]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d120      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e1      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001526:	4b73      	ldr	r3, [pc, #460]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	049b      	lsls	r3, r3, #18
 800152e:	4013      	ands	r3, r2
 8001530:	d114      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0d5      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d106      	bne.n	800154c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800153e:	4b6d      	ldr	r3, [pc, #436]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2204      	movs	r2, #4
 8001544:	4013      	ands	r3, r2
 8001546:	d109      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0ca      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800154c:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0c2      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155c:	4b65      	ldr	r3, [pc, #404]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2203      	movs	r2, #3
 8001562:	4393      	bics	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4b62      	ldr	r3, [pc, #392]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff f92e 	bl	80007d0 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d111      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	e009      	b.n	8001596 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001582:	f7ff f925 	bl	80007d0 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a58      	ldr	r2, [pc, #352]	@ (80016f0 <HAL_RCC_ClockConfig+0x274>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0a5      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001596:	4b57      	ldr	r3, [pc, #348]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	220c      	movs	r2, #12
 800159c:	4013      	ands	r3, r2
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d1ef      	bne.n	8001582 <HAL_RCC_ClockConfig+0x106>
 80015a2:	e03a      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ae:	f7ff f90f 	bl	80007d0 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a4d      	ldr	r2, [pc, #308]	@ (80016f0 <HAL_RCC_ClockConfig+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e08f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c2:	4b4c      	ldr	r3, [pc, #304]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	220c      	movs	r2, #12
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d1ef      	bne.n	80015ae <HAL_RCC_ClockConfig+0x132>
 80015ce:	e024      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d11b      	bne.n	8001610 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7ff f8f9 	bl	80007d0 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a42      	ldr	r2, [pc, #264]	@ (80016f0 <HAL_RCC_ClockConfig+0x274>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e079      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ee:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	220c      	movs	r2, #12
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d1ef      	bne.n	80015da <HAL_RCC_ClockConfig+0x15e>
 80015fa:	e00e      	b.n	800161a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff f8e8 	bl	80007d0 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4a3a      	ldr	r2, [pc, #232]	@ (80016f0 <HAL_RCC_ClockConfig+0x274>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e068      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	220c      	movs	r2, #12
 8001616:	4013      	ands	r3, r2
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2201      	movs	r2, #1
 8001620:	4013      	ands	r3, r2
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d21e      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800163a:	f7ff f8c9 	bl	80007d0 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	e009      	b.n	8001658 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff f8c4 	bl	80007d0 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <HAL_RCC_ClockConfig+0x274>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e044      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <HAL_RCC_ClockConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	4013      	ands	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d1ee      	bne.n	8001644 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a20      	ldr	r2, [pc, #128]	@ (80016f8 <HAL_RCC_ClockConfig+0x27c>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	4013      	ands	r3, r2
 800168c:	d00a      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4a1a      	ldr	r2, [pc, #104]	@ (80016fc <HAL_RCC_ClockConfig+0x280>)
 8001694:	4013      	ands	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	00da      	lsls	r2, r3, #3
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a4:	f000 f832 	bl	800170c <HAL_RCC_GetSysClockFreq>
 80016a8:	0001      	movs	r1, r0
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	220f      	movs	r2, #15
 80016b2:	4013      	ands	r3, r2
 80016b4:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <HAL_RCC_ClockConfig+0x284>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	000a      	movs	r2, r1
 80016ba:	40da      	lsrs	r2, r3
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_RCC_ClockConfig+0x288>)
 80016be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_RCC_ClockConfig+0x28c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	250b      	movs	r5, #11
 80016c6:	197c      	adds	r4, r7, r5
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff f83b 	bl	8000744 <HAL_InitTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80016d2:	197b      	adds	r3, r7, r5
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	e000      	b.n	80016e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b004      	add	sp, #16
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	40022000 	.word	0x40022000
 80016f0:	00001388 	.word	0x00001388
 80016f4:	40021000 	.word	0x40021000
 80016f8:	fffff8ff 	.word	0xfffff8ff
 80016fc:	ffffc7ff 	.word	0xffffc7ff
 8001700:	08001dd0 	.word	0x08001dd0
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001712:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	4013      	ands	r3, r2
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d013      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x3e>
 8001722:	d85c      	bhi.n	80017de <HAL_RCC_GetSysClockFreq+0xd2>
 8001724:	2b04      	cmp	r3, #4
 8001726:	d002      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x22>
 8001728:	2b08      	cmp	r3, #8
 800172a:	d00b      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x38>
 800172c:	e057      	b.n	80017de <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800172e:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2210      	movs	r2, #16
 8001734:	4013      	ands	r3, r2
 8001736:	d002      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001738:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xfc>)
 800173a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800173c:	e05d      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <HAL_RCC_GetSysClockFreq+0x100>)
 8001740:	613b      	str	r3, [r7, #16]
      break;
 8001742:	e05a      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001744:	4b32      	ldr	r3, [pc, #200]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x104>)
 8001746:	613b      	str	r3, [r7, #16]
      break;
 8001748:	e057      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	220f      	movs	r2, #15
 8001750:	4013      	ands	r3, r2
 8001752:	4a30      	ldr	r2, [pc, #192]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	0d9b      	lsrs	r3, r3, #22
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	4013      	ands	r3, r2
 800176e:	d00f      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	000a      	movs	r2, r1
 8001774:	0152      	lsls	r2, r2, #5
 8001776:	1a52      	subs	r2, r2, r1
 8001778:	0193      	lsls	r3, r2, #6
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	185b      	adds	r3, r3, r1
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f7fe fcbf 	bl	8000108 <__udivsi3>
 800178a:	0003      	movs	r3, r0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e023      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	4013      	ands	r3, r2
 8001798:	d00f      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	000a      	movs	r2, r1
 800179e:	0152      	lsls	r2, r2, #5
 80017a0:	1a52      	subs	r2, r2, r1
 80017a2:	0193      	lsls	r3, r2, #6
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	185b      	adds	r3, r3, r1
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fcaa 	bl	8000108 <__udivsi3>
 80017b4:	0003      	movs	r3, r0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00e      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	000a      	movs	r2, r1
 80017be:	0152      	lsls	r2, r2, #5
 80017c0:	1a52      	subs	r2, r2, r1
 80017c2:	0193      	lsls	r3, r2, #6
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	185b      	adds	r3, r3, r1
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7fe fc9a 	bl	8000108 <__udivsi3>
 80017d4:	0003      	movs	r3, r0
 80017d6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
      break;
 80017dc:	e00d      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	0b5b      	lsrs	r3, r3, #13
 80017e4:	2207      	movs	r2, #7
 80017e6:	4013      	ands	r3, r2
 80017e8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	0212      	lsls	r2, r2, #8
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      break;
 80017f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017fa:	693b      	ldr	r3, [r7, #16]
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b006      	add	sp, #24
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000
 8001808:	003d0900 	.word	0x003d0900
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200
 8001814:	08001de0 	.word	0x08001de0

08001818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e032      	b.n	8001890 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2239      	movs	r2, #57	@ 0x39
 800182e:	5c9b      	ldrb	r3, [r3, r2]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d107      	bne.n	8001846 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2238      	movs	r2, #56	@ 0x38
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f7fe ff01 	bl	8000648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2239      	movs	r2, #57	@ 0x39
 800184a:	2102      	movs	r1, #2
 800184c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	0019      	movs	r1, r3
 8001858:	0010      	movs	r0, r2
 800185a:	f000 f935 	bl	8001ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	223e      	movs	r2, #62	@ 0x3e
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223a      	movs	r2, #58	@ 0x3a
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	223b      	movs	r2, #59	@ 0x3b
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	223c      	movs	r2, #60	@ 0x3c
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	223d      	movs	r2, #61	@ 0x3d
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2239      	movs	r2, #57	@ 0x39
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2239      	movs	r2, #57	@ 0x39
 80018a4:	5c9b      	ldrb	r3, [r3, r2]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d001      	beq.n	80018b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e02e      	b.n	800190e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2239      	movs	r2, #57	@ 0x39
 80018b4:	2102      	movs	r1, #2
 80018b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	05db      	lsls	r3, r3, #23
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d009      	beq.n	80018d8 <HAL_TIM_Base_Start+0x40>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a13      	ldr	r2, [pc, #76]	@ (8001918 <HAL_TIM_Base_Start+0x80>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_TIM_Base_Start+0x40>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <HAL_TIM_Base_Start+0x84>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2207      	movs	r2, #7
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d010      	beq.n	800190c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fa:	e007      	b.n	800190c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2101      	movs	r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b004      	add	sp, #16
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	40010800 	.word	0x40010800
 800191c:	40011400 	.word	0x40011400

08001920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2238      	movs	r2, #56	@ 0x38
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_TIM_ConfigClockSource+0x20>
 800193c:	2302      	movs	r3, #2
 800193e:	e0bc      	b.n	8001aba <HAL_TIM_ConfigClockSource+0x19a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2238      	movs	r2, #56	@ 0x38
 8001944:	2101      	movs	r1, #1
 8001946:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2239      	movs	r2, #57	@ 0x39
 800194c:	2102      	movs	r1, #2
 800194e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2277      	movs	r2, #119	@ 0x77
 800195c:	4393      	bics	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	0192      	lsls	r2, r2, #6
 8001978:	4293      	cmp	r3, r2
 800197a:	d040      	beq.n	80019fe <HAL_TIM_ConfigClockSource+0xde>
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	0192      	lsls	r2, r2, #6
 8001980:	4293      	cmp	r3, r2
 8001982:	d900      	bls.n	8001986 <HAL_TIM_ConfigClockSource+0x66>
 8001984:	e088      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	0152      	lsls	r2, r2, #5
 800198a:	4293      	cmp	r3, r2
 800198c:	d100      	bne.n	8001990 <HAL_TIM_ConfigClockSource+0x70>
 800198e:	e088      	b.n	8001aa2 <HAL_TIM_ConfigClockSource+0x182>
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	0152      	lsls	r2, r2, #5
 8001994:	4293      	cmp	r3, r2
 8001996:	d900      	bls.n	800199a <HAL_TIM_ConfigClockSource+0x7a>
 8001998:	e07e      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 800199a:	2b70      	cmp	r3, #112	@ 0x70
 800199c:	d018      	beq.n	80019d0 <HAL_TIM_ConfigClockSource+0xb0>
 800199e:	d900      	bls.n	80019a2 <HAL_TIM_ConfigClockSource+0x82>
 80019a0:	e07a      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 80019a2:	2b60      	cmp	r3, #96	@ 0x60
 80019a4:	d04f      	beq.n	8001a46 <HAL_TIM_ConfigClockSource+0x126>
 80019a6:	d900      	bls.n	80019aa <HAL_TIM_ConfigClockSource+0x8a>
 80019a8:	e076      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 80019aa:	2b50      	cmp	r3, #80	@ 0x50
 80019ac:	d03b      	beq.n	8001a26 <HAL_TIM_ConfigClockSource+0x106>
 80019ae:	d900      	bls.n	80019b2 <HAL_TIM_ConfigClockSource+0x92>
 80019b0:	e072      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 80019b2:	2b40      	cmp	r3, #64	@ 0x40
 80019b4:	d057      	beq.n	8001a66 <HAL_TIM_ConfigClockSource+0x146>
 80019b6:	d900      	bls.n	80019ba <HAL_TIM_ConfigClockSource+0x9a>
 80019b8:	e06e      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 80019ba:	2b30      	cmp	r3, #48	@ 0x30
 80019bc:	d063      	beq.n	8001a86 <HAL_TIM_ConfigClockSource+0x166>
 80019be:	d86b      	bhi.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d060      	beq.n	8001a86 <HAL_TIM_ConfigClockSource+0x166>
 80019c4:	d868      	bhi.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d05d      	beq.n	8001a86 <HAL_TIM_ConfigClockSource+0x166>
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d05b      	beq.n	8001a86 <HAL_TIM_ConfigClockSource+0x166>
 80019ce:	e063      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019e0:	f000 f946 	bl	8001c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2277      	movs	r2, #119	@ 0x77
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	609a      	str	r2, [r3, #8]
      break;
 80019fc:	e052      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a0e:	f000 f92f 	bl	8001c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2180      	movs	r1, #128	@ 0x80
 8001a1e:	01c9      	lsls	r1, r1, #7
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]
      break;
 8001a24:	e03e      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a32:	001a      	movs	r2, r3
 8001a34:	f000 f8a2 	bl	8001b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2150      	movs	r1, #80	@ 0x50
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f8fc 	bl	8001c3c <TIM_ITRx_SetConfig>
      break;
 8001a44:	e02e      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a52:	001a      	movs	r2, r3
 8001a54:	f000 f8c0 	bl	8001bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2160      	movs	r1, #96	@ 0x60
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f8ec 	bl	8001c3c <TIM_ITRx_SetConfig>
      break;
 8001a64:	e01e      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a72:	001a      	movs	r2, r3
 8001a74:	f000 f882 	bl	8001b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2140      	movs	r1, #64	@ 0x40
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f8dc 	bl	8001c3c <TIM_ITRx_SetConfig>
      break;
 8001a84:	e00e      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0019      	movs	r1, r3
 8001a90:	0010      	movs	r0, r2
 8001a92:	f000 f8d3 	bl	8001c3c <TIM_ITRx_SetConfig>
      break;
 8001a96:	e005      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001a98:	230f      	movs	r3, #15
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001aa2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2239      	movs	r2, #57	@ 0x39
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2238      	movs	r2, #56	@ 0x38
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

  return status;
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	781b      	ldrb	r3, [r3, #0]
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	ffff00ff 	.word	0xffff00ff

08001ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d007      	beq.n	8001af2 <TIM_Base_SetConfig+0x2a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <TIM_Base_SetConfig+0xa8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d003      	beq.n	8001af2 <TIM_Base_SetConfig+0x2a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <TIM_Base_SetConfig+0xac>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d108      	bne.n	8001b04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2270      	movs	r2, #112	@ 0x70
 8001af6:	4393      	bics	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x56>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <TIM_Base_SetConfig+0xa8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x56>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a16      	ldr	r2, [pc, #88]	@ (8001b74 <TIM_Base_SetConfig+0xac>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a15      	ldr	r2, [pc, #84]	@ (8001b78 <TIM_Base_SetConfig+0xb0>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	4393      	bics	r3, r2
 8001b36:	001a      	movs	r2, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2204      	movs	r2, #4
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b004      	add	sp, #16
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40010800 	.word	0x40010800
 8001b74:	40011400 	.word	0x40011400
 8001b78:	fffffcff 	.word	0xfffffcff

08001b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4393      	bics	r3, r2
 8001b96:	001a      	movs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	22f0      	movs	r2, #240	@ 0xf0
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	4393      	bics	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	621a      	str	r2, [r3, #32]
}
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b006      	add	sp, #24
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	2210      	movs	r2, #16
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	001a      	movs	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <TIM_TI2_ConfigInputStage+0x60>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	22a0      	movs	r2, #160	@ 0xa0
 8001c14:	4393      	bics	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	621a      	str	r2, [r3, #32]
}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b006      	add	sp, #24
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	ffff0fff 	.word	0xffff0fff

08001c3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2270      	movs	r2, #112	@ 0x70
 8001c50:	4393      	bics	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	609a      	str	r2, [r3, #8]
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b004      	add	sp, #16
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <TIM_ETR_SetConfig+0x3c>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	609a      	str	r2, [r3, #8]
}
 8001ca4:	46c0      	nop			@ (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b006      	add	sp, #24
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	ffff00ff 	.word	0xffff00ff

08001cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2238      	movs	r2, #56	@ 0x38
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e042      	b.n	8001d4e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2238      	movs	r2, #56	@ 0x38
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2239      	movs	r2, #57	@ 0x39
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2270      	movs	r2, #112	@ 0x70
 8001cec:	4393      	bics	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	05db      	lsls	r3, r3, #23
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d009      	beq.n	8001d22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10c      	bne.n	8001d3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2280      	movs	r2, #128	@ 0x80
 8001d26:	4393      	bics	r3, r2
 8001d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2239      	movs	r2, #57	@ 0x39
 8001d40:	2101      	movs	r1, #1
 8001d42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2238      	movs	r2, #56	@ 0x38
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	40010800 	.word	0x40010800
 8001d5c:	40011400 	.word	0x40011400

08001d60 <memset>:
 8001d60:	0003      	movs	r3, r0
 8001d62:	1882      	adds	r2, r0, r2
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d100      	bne.n	8001d6a <memset+0xa>
 8001d68:	4770      	bx	lr
 8001d6a:	7019      	strb	r1, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	e7f9      	b.n	8001d64 <memset+0x4>

08001d70 <__libc_init_array>:
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	2600      	movs	r6, #0
 8001d74:	4c0c      	ldr	r4, [pc, #48]	@ (8001da8 <__libc_init_array+0x38>)
 8001d76:	4d0d      	ldr	r5, [pc, #52]	@ (8001dac <__libc_init_array+0x3c>)
 8001d78:	1b64      	subs	r4, r4, r5
 8001d7a:	10a4      	asrs	r4, r4, #2
 8001d7c:	42a6      	cmp	r6, r4
 8001d7e:	d109      	bne.n	8001d94 <__libc_init_array+0x24>
 8001d80:	2600      	movs	r6, #0
 8001d82:	f000 f819 	bl	8001db8 <_init>
 8001d86:	4c0a      	ldr	r4, [pc, #40]	@ (8001db0 <__libc_init_array+0x40>)
 8001d88:	4d0a      	ldr	r5, [pc, #40]	@ (8001db4 <__libc_init_array+0x44>)
 8001d8a:	1b64      	subs	r4, r4, r5
 8001d8c:	10a4      	asrs	r4, r4, #2
 8001d8e:	42a6      	cmp	r6, r4
 8001d90:	d105      	bne.n	8001d9e <__libc_init_array+0x2e>
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	00b3      	lsls	r3, r6, #2
 8001d96:	58eb      	ldr	r3, [r5, r3]
 8001d98:	4798      	blx	r3
 8001d9a:	3601      	adds	r6, #1
 8001d9c:	e7ee      	b.n	8001d7c <__libc_init_array+0xc>
 8001d9e:	00b3      	lsls	r3, r6, #2
 8001da0:	58eb      	ldr	r3, [r5, r3]
 8001da2:	4798      	blx	r3
 8001da4:	3601      	adds	r6, #1
 8001da6:	e7f2      	b.n	8001d8e <__libc_init_array+0x1e>
 8001da8:	08001dec 	.word	0x08001dec
 8001dac:	08001dec 	.word	0x08001dec
 8001db0:	08001df0 	.word	0x08001df0
 8001db4:	08001dec 	.word	0x08001dec

08001db8 <_init>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dbe:	bc08      	pop	{r3}
 8001dc0:	469e      	mov	lr, r3
 8001dc2:	4770      	bx	lr

08001dc4 <_fini>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr

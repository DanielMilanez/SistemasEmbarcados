
RTC DS1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002cd4  08002cd4  00003cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002cf0  08002cf0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002cf0  08002cf0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf0  08002cf0  00003cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002cf8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002d04  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002d04  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007473  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180d  00000000  00000000  0000b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005cd  00000000  00000000  0000d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000129f1  00000000  00000000  0000da2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a612  00000000  00000000  0002041e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071066  00000000  00000000  0002aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ba96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a34  00000000  00000000  0009badc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cbc 	.word	0x08002cbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002cbc 	.word	0x08002cbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <DS1307_STARTUP>:
#include "main.h"
#include "DS1307.h"

I2C_HandleTypeDef *DS1307_I2C;

void DS1307_STARTUP(I2C_HandleTypeDef *hi2c){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af02      	add	r7, sp, #8
 80003fa:	6078      	str	r0, [r7, #4]
    DS1307_I2C = hi2c;
 80003fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <DS1307_STARTUP+0x74>)
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]

    uint8_t byte[2];
    byte[0] = 0x00;
 8000402:	210c      	movs	r1, #12
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
    byte[1] = 0x00;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	705a      	strb	r2, [r3, #1]

    DS1307_CONFIG_ADDRS(DS1307_ADDRS, 0);
 8000410:	2100      	movs	r1, #0
 8000412:	2068      	movs	r0, #104	@ 0x68
 8000414:	f000 f82c 	bl	8000470 <DS1307_CONFIG_ADDRS>

    switch(data.ADDRS_FRAME){
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <DS1307_STARTUP+0x78>)
 800041a:	785b      	ldrb	r3, [r3, #1]
 800041c:	2bd0      	cmp	r3, #208	@ 0xd0
 800041e:	d002      	beq.n	8000426 <DS1307_STARTUP+0x32>
 8000420:	2bd1      	cmp	r3, #209	@ 0xd1
 8000422:	d00e      	beq.n	8000442 <DS1307_STARTUP+0x4e>
    	    break;
    	case 0xD1:
    		HAL_I2C_Master_Receive(DS1307_I2C, data.ADDRS_FRAME, byte, 2, DS1307_COMUNICATE_DELAY);
    		break;
    }
}
 8000424:	e01b      	b.n	800045e <DS1307_STARTUP+0x6a>
    	    HAL_I2C_Master_Transmit(DS1307_I2C, data.ADDRS_FRAME, byte, 2, DS1307_COMUNICATE_DELAY);
 8000426:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <DS1307_STARTUP+0x74>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <DS1307_STARTUP+0x78>)
 800042c:	785b      	ldrb	r3, [r3, #1]
 800042e:	0019      	movs	r1, r3
 8000430:	230c      	movs	r3, #12
 8000432:	18fa      	adds	r2, r7, r3
 8000434:	23fa      	movs	r3, #250	@ 0xfa
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2302      	movs	r3, #2
 800043c:	f000 fdbe 	bl	8000fbc <HAL_I2C_Master_Transmit>
    	    break;
 8000440:	e00d      	b.n	800045e <DS1307_STARTUP+0x6a>
    		HAL_I2C_Master_Receive(DS1307_I2C, data.ADDRS_FRAME, byte, 2, DS1307_COMUNICATE_DELAY);
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <DS1307_STARTUP+0x74>)
 8000444:	6818      	ldr	r0, [r3, #0]
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <DS1307_STARTUP+0x78>)
 8000448:	785b      	ldrb	r3, [r3, #1]
 800044a:	0019      	movs	r1, r3
 800044c:	230c      	movs	r3, #12
 800044e:	18fa      	adds	r2, r7, r3
 8000450:	23fa      	movs	r3, #250	@ 0xfa
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2302      	movs	r3, #2
 8000458:	f000 feda 	bl	8001210 <HAL_I2C_Master_Receive>
    		break;
 800045c:	46c0      	nop			@ (mov r8, r8)
}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b004      	add	sp, #16
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	20000028 	.word	0x20000028
 800046c:	20000080 	.word	0x20000080

08000470 <DS1307_CONFIG_ADDRS>:

void DS1307_CONFIG_ADDRS(uint8_t ADDRS, unsigned R_W){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	0002      	movs	r2, r0
 8000478:	6039      	str	r1, [r7, #0]
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	701a      	strb	r2, [r3, #0]
	data.ADDRS_FRAME = (ADDRS << 1) | R_W;
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	18db      	adds	r3, r3, r3
 8000484:	b2da      	uxtb	r2, r3
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b03      	ldr	r3, [pc, #12]	@ (800049c <DS1307_CONFIG_ADDRS+0x2c>)
 8000490:	705a      	strb	r2, [r3, #1]
}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	20000080 	.word	0x20000080

080004a0 <DS1307_DATA_CONV>:

int DS1307_DATA_CONV(uint8_t MODE, int VAL_TO_CONV){
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	0002      	movs	r2, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	701a      	strb	r2, [r3, #0]
	switch(MODE){
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d002      	beq.n	80004bc <DS1307_DATA_CONV+0x1c>
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d00f      	beq.n	80004da <DS1307_DATA_CONV+0x3a>
 80004ba:	e024      	b.n	8000506 <DS1307_DATA_CONV+0x66>
		case DEC_TO_BCD:
			return (int) (VAL_TO_CONV / 10 * 16) + (VAL_TO_CONV % 10);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	210a      	movs	r1, #10
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff feab 	bl	800021c <__divsi3>
 80004c6:	0003      	movs	r3, r0
 80004c8:	011c      	lsls	r4, r3, #4
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	210a      	movs	r1, #10
 80004ce:	0018      	movs	r0, r3
 80004d0:	f7ff ff8a 	bl	80003e8 <__aeabi_idivmod>
 80004d4:	000b      	movs	r3, r1
 80004d6:	18e3      	adds	r3, r4, r3
 80004d8:	e016      	b.n	8000508 <DS1307_DATA_CONV+0x68>
			break;

		case BCD_TO_DEC:
			return (int) (VAL_TO_CONV / 16 * 10) + (VAL_TO_CONV % 16);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <DS1307_DATA_CONV+0x42>
 80004e0:	330f      	adds	r3, #15
 80004e2:	111b      	asrs	r3, r3, #4
 80004e4:	001a      	movs	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	189b      	adds	r3, r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	0019      	movs	r1, r3
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	4a07      	ldr	r2, [pc, #28]	@ (8000510 <DS1307_DATA_CONV+0x70>)
 80004f4:	4013      	ands	r3, r2
 80004f6:	d504      	bpl.n	8000502 <DS1307_DATA_CONV+0x62>
 80004f8:	3b01      	subs	r3, #1
 80004fa:	2210      	movs	r2, #16
 80004fc:	4252      	negs	r2, r2
 80004fe:	4313      	orrs	r3, r2
 8000500:	3301      	adds	r3, #1
 8000502:	18cb      	adds	r3, r1, r3
 8000504:	e000      	b.n	8000508 <DS1307_DATA_CONV+0x68>
			break;
	}

	return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b003      	add	sp, #12
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	8000000f 	.word	0x8000000f

08000514 <DS1307_GET_TIME>:

    DS1307_CONFIG_ADDRS(DS1307_ADDRS, 0);
    HAL_I2C_Mem_Write(DS1307_I2C, data.ADDRS_FRAME, 0x00, I2C_MEMADD_SIZE_8BIT, set_time, 7, DS1307_COMUNICATE_DELAY);
}

void DS1307_GET_TIME(RTC_DS1307 *time){
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b089      	sub	sp, #36	@ 0x24
 8000518:	af04      	add	r7, sp, #16
 800051a:	6078      	str	r0, [r7, #4]
    uint8_t get_time[7];

    DS1307_CONFIG_ADDRS(DS1307_ADDRS, 1);
 800051c:	2101      	movs	r1, #1
 800051e:	2068      	movs	r0, #104	@ 0x68
 8000520:	f7ff ffa6 	bl	8000470 <DS1307_CONFIG_ADDRS>
    HAL_I2C_Mem_Read(DS1307_I2C, data.ADDRS_FRAME, 0x00, I2C_MEMADD_SIZE_8BIT, get_time, 7, DS1307_COMUNICATE_DELAY);
 8000524:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <DS1307_GET_TIME+0xcc>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4b2e      	ldr	r3, [pc, #184]	@ (80005e4 <DS1307_GET_TIME+0xd0>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	0019      	movs	r1, r3
 800052e:	23fa      	movs	r3, #250	@ 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	9302      	str	r3, [sp, #8]
 8000534:	2307      	movs	r3, #7
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2408      	movs	r4, #8
 800053a:	193b      	adds	r3, r7, r4
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	2200      	movs	r2, #0
 8000542:	f000 ff6d 	bl	8001420 <HAL_I2C_Mem_Read>

    time->seconds = DS1307_DATA_CONV(BCD_TO_DEC, get_time[0] & 0x7F);
 8000546:	193b      	adds	r3, r7, r4
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	001a      	movs	r2, r3
 800054c:	237f      	movs	r3, #127	@ 0x7f
 800054e:	4013      	ands	r3, r2
 8000550:	0019      	movs	r1, r3
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff ffa4 	bl	80004a0 <DS1307_DATA_CONV>
 8000558:	0003      	movs	r3, r0
 800055a:	b2da      	uxtb	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
    time->minutes = DS1307_DATA_CONV(BCD_TO_DEC, get_time[1]);
 8000560:	193b      	adds	r3, r7, r4
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	0019      	movs	r1, r3
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff ff9a 	bl	80004a0 <DS1307_DATA_CONV>
 800056c:	0003      	movs	r3, r0
 800056e:	b2da      	uxtb	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	705a      	strb	r2, [r3, #1]
    time->hours   = DS1307_DATA_CONV(BCD_TO_DEC, get_time[2]);
 8000574:	193b      	adds	r3, r7, r4
 8000576:	789b      	ldrb	r3, [r3, #2]
 8000578:	0019      	movs	r1, r3
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff ff90 	bl	80004a0 <DS1307_DATA_CONV>
 8000580:	0003      	movs	r3, r0
 8000582:	b2da      	uxtb	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	709a      	strb	r2, [r3, #2]
    time->day     = DS1307_DATA_CONV(BCD_TO_DEC, get_time[3]);
 8000588:	193b      	adds	r3, r7, r4
 800058a:	78db      	ldrb	r3, [r3, #3]
 800058c:	0019      	movs	r1, r3
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff ff86 	bl	80004a0 <DS1307_DATA_CONV>
 8000594:	0003      	movs	r3, r0
 8000596:	b2da      	uxtb	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	70da      	strb	r2, [r3, #3]
    time->date    = DS1307_DATA_CONV(BCD_TO_DEC, get_time[4]);
 800059c:	193b      	adds	r3, r7, r4
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	0019      	movs	r1, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff7c 	bl	80004a0 <DS1307_DATA_CONV>
 80005a8:	0003      	movs	r3, r0
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	711a      	strb	r2, [r3, #4]
    time->month   = DS1307_DATA_CONV(BCD_TO_DEC, get_time[5]);
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	0019      	movs	r1, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff ff72 	bl	80004a0 <DS1307_DATA_CONV>
 80005bc:	0003      	movs	r3, r0
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	715a      	strb	r2, [r3, #5]
    time->year    = DS1307_DATA_CONV(BCD_TO_DEC, get_time[6]);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	799b      	ldrb	r3, [r3, #6]
 80005c8:	0019      	movs	r1, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff ff68 	bl	80004a0 <DS1307_DATA_CONV>
 80005d0:	0003      	movs	r3, r0
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	719a      	strb	r2, [r3, #6]
}
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b005      	add	sp, #20
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	20000028 	.word	0x20000028
 80005e4:	20000080 	.word	0x20000080

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 f9a6 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f812 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f8b8 	bl	8000768 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f8:	f000 f876 	bl	80006e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  DS1307_STARTUP(&hi2c1);
 80005fc:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <main+0x28>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff fef8 	bl	80003f4 <DS1307_STARTUP>
  DS1307_GET_TIME(&clock);
 8000604:	4b03      	ldr	r3, [pc, #12]	@ (8000614 <main+0x2c>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff84 	bl	8000514 <DS1307_GET_TIME>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	e7fd      	b.n	800060c <main+0x24>
 8000610:	2000002c 	.word	0x2000002c
 8000614:	20000084 	.word	0x20000084

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b09d      	sub	sp, #116	@ 0x74
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	2438      	movs	r4, #56	@ 0x38
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f002 fb1b 	bl	8002c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062e:	2324      	movs	r3, #36	@ 0x24
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	0018      	movs	r0, r3
 8000634:	2314      	movs	r3, #20
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f002 fb13 	bl	8002c64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	2324      	movs	r3, #36	@ 0x24
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fb0c 	bl	8002c64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <SystemClock_Config+0xc8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a24      	ldr	r2, [pc, #144]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000652:	401a      	ands	r2, r3
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xc8>)
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	0109      	lsls	r1, r1, #4
 800065a:	430a      	orrs	r2, r1
 800065c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2202      	movs	r2, #2
 8000664:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2210      	movs	r2, #16
 8000670:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	187b      	adds	r3, r7, r1
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fbd2 	bl	8001e24 <HAL_RCC_OscConfig>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000684:	f000 f8b2 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	2124      	movs	r1, #36	@ 0x24
 800068a:	187b      	adds	r3, r7, r1
 800068c:	220f      	movs	r2, #15
 800068e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2100      	movs	r1, #0
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ff7d 	bl	80025ac <HAL_RCC_ClockConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006b6:	f000 f899 	bl	80007ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2208      	movs	r2, #8
 80006be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 f93d 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006d2:	f000 f88b 	bl	80007ec <Error_Handler>
  }
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b01d      	add	sp, #116	@ 0x74
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	40007000 	.word	0x40007000
 80006e4:	ffffe7ff 	.word	0xffffe7ff

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_I2C1_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <MX_I2C1_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10420F13;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_I2C1_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <MX_I2C1_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_I2C1_Init+0x74>)
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C1_Init+0x74>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fba3 	bl	8000e70 <HAL_I2C_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800072e:	f000 f85d 	bl	80007ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x74>)
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fadc 	bl	8001cf4 <HAL_I2CEx_ConfigAnalogFilter>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 f854 	bl	80007ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <MX_I2C1_Init+0x74>)
 8000746:	2100      	movs	r1, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fb1f 	bl	8001d8c <HAL_I2CEx_ConfigDigitalFilter>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f84b 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000002c 	.word	0x2000002c
 8000760:	40005400 	.word	0x40005400
 8000764:	10420f13 	.word	0x10420f13

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	240c      	movs	r4, #12
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	2314      	movs	r3, #20
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f002 fa73 	bl	8002c64 <memset>

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_GPIO_Init+0x7c>)
 8000780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_GPIO_Init+0x7c>)
 8000784:	2102      	movs	r1, #2
 8000786:	430a      	orrs	r2, r1
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_GPIO_Init+0x7c>)
 800078c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078e:	2202      	movs	r2, #2
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]

	// Configura PB6 (SCL) e PB7 (SDA) para I2C1
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	22c0      	movs	r2, #192	@ 0xc0
 800079c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;        // Alternate Function Open Drain
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2212      	movs	r2, #18
 80007a2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;            // Pull-up habilitado
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2201      	movs	r2, #1
 80007a8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;     // AF1 para I2C1
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <MX_GPIO_Init+0x80>)
 80007ba:	0019      	movs	r1, r3
 80007bc:	0010      	movs	r0, r2
 80007be:	f000 f9e1 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0x7c>)
 80007c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_GPIO_Init+0x7c>)
 80007c8:	2102      	movs	r1, #2
 80007ca:	430a      	orrs	r2, r1
 80007cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x7c>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d2:	2202      	movs	r2, #2
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b009      	add	sp, #36	@ 0x24
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000
 80007e8:	50000400 	.word	0x50000400

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <HAL_MspInit+0x24>)
 80007fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x24>)
 8000802:	2101      	movs	r1, #1
 8000804:	430a      	orrs	r2, r1
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <HAL_MspInit+0x24>)
 800080a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <HAL_MspInit+0x24>)
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	0549      	lsls	r1, r1, #21
 8000812:	430a      	orrs	r2, r1
 8000814:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	240c      	movs	r4, #12
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f002 fa16 	bl	8002c64 <memset>
  if(hi2c->Instance==I2C1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_I2C_MspInit+0x80>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d129      	bne.n	8000896 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <HAL_I2C_MspInit+0x84>)
 8000844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <HAL_I2C_MspInit+0x84>)
 8000848:	2102      	movs	r1, #2
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_I2C_MspInit+0x84>)
 8000850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000852:	2202      	movs	r2, #2
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	22c0      	movs	r2, #192	@ 0xc0
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2212      	movs	r2, #18
 8000868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2204      	movs	r2, #4
 800087a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	187b      	adds	r3, r7, r1
 800087e:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 8000880:	0019      	movs	r1, r3
 8000882:	0010      	movs	r0, r2
 8000884:	f000 f97e 	bl	8000b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_I2C_MspInit+0x84>)
 800088a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_I2C_MspInit+0x84>)
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	0389      	lsls	r1, r1, #14
 8000892:	430a      	orrs	r2, r1
 8000894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b009      	add	sp, #36	@ 0x24
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	50000400 	.word	0x50000400

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	e7fd      	b.n	80008b0 <NMI_Handler+0x4>

080008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	e7fd      	b.n	80008b8 <HardFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f886 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f7ff fff7 	bl	80008de <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	@ (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	@ (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	@ (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f002 f9ad 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091a:	f7ff fe65 	bl	80005e8 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
 ldr   r0, =_estack
 8000920:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800092c:	08002cf8 	.word	0x08002cf8
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000934:	20000090 	.word	0x20000090

08000938 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_COMP_IRQHandler>
	...

0800093c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_Init+0x3c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_Init+0x3c>)
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f811 	bl	800097c <HAL_InitTick>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d003      	beq.n	8000966 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e001      	b.n	800096a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000966:	f7ff ff47 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_InitTick+0x5c>)
 8000986:	681c      	ldr	r4, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_InitTick+0x60>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	0019      	movs	r1, r3
 800098e:	23fa      	movs	r3, #250	@ 0xfa
 8000990:	0098      	lsls	r0, r3, #2
 8000992:	f7ff fbb9 	bl	8000108 <__udivsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	0019      	movs	r1, r3
 800099a:	0020      	movs	r0, r4
 800099c:	f7ff fbb4 	bl	8000108 <__udivsi3>
 80009a0:	0003      	movs	r3, r0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f8e1 	bl	8000b6a <HAL_SYSTICK_Config>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e00f      	b.n	80009d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d80b      	bhi.n	80009ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f8be 	bl	8000b40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_InitTick+0x64>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b003      	add	sp, #12
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008
 8000a04:	2000008c 	.word	0x2000008c

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	@ (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	2000008c 	.word	0x2000008c

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a30:	d828      	bhi.n	8000a84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a32:	4a2f      	ldr	r2, [pc, #188]	@ (8000af0 <__NVIC_SetPriority+0xd4>)
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	33c0      	adds	r3, #192	@ 0xc0
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	589b      	ldr	r3, [r3, r2]
 8000a42:	1dfa      	adds	r2, r7, #7
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	0011      	movs	r1, r2
 8000a48:	2203      	movs	r2, #3
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	00d2      	lsls	r2, r2, #3
 8000a4e:	21ff      	movs	r1, #255	@ 0xff
 8000a50:	4091      	lsls	r1, r2
 8000a52:	000a      	movs	r2, r1
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	401a      	ands	r2, r3
 8000a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	019b      	lsls	r3, r3, #6
 8000a5e:	22ff      	movs	r2, #255	@ 0xff
 8000a60:	401a      	ands	r2, r3
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0018      	movs	r0, r3
 8000a68:	2303      	movs	r3, #3
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	481f      	ldr	r0, [pc, #124]	@ (8000af0 <__NVIC_SetPriority+0xd4>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	33c0      	adds	r3, #192	@ 0xc0
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a82:	e031      	b.n	8000ae8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <__NVIC_SetPriority+0xd8>)
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	400b      	ands	r3, r1
 8000a90:	3b08      	subs	r3, #8
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3306      	adds	r3, #6
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	18d3      	adds	r3, r2, r3
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1dfa      	adds	r2, r7, #7
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	21ff      	movs	r1, #255	@ 0xff
 8000aac:	4091      	lsls	r1, r2
 8000aae:	000a      	movs	r2, r1
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	22ff      	movs	r2, #255	@ 0xff
 8000abc:	401a      	ands	r2, r3
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	4003      	ands	r3, r0
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000acc:	4809      	ldr	r0, [pc, #36]	@ (8000af4 <__NVIC_SetPriority+0xd8>)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	001c      	movs	r4, r3
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	4023      	ands	r3, r4
 8000ad8:	3b08      	subs	r3, #8
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	430a      	orrs	r2, r1
 8000ade:	3306      	adds	r3, #6
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	18c3      	adds	r3, r0, r3
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b003      	add	sp, #12
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	045b      	lsls	r3, r3, #17
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d301      	bcc.n	8000b10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e010      	b.n	8000b32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <SysTick_Config+0x44>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	3a01      	subs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b18:	2301      	movs	r3, #1
 8000b1a:	425b      	negs	r3, r3
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ff7c 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x44>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x44>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	1c02      	adds	r2, r0, #0
 8000b50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b004      	add	sp, #16
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ffbf 	bl	8000af8 <SysTick_Config>
 8000b7a:	0003      	movs	r3, r0
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b9a:	e14f      	b.n	8000e3c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d100      	bne.n	8000bb4 <HAL_GPIO_Init+0x30>
 8000bb2:	e140      	b.n	8000e36 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2203      	movs	r2, #3
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d005      	beq.n	8000bcc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d130      	bne.n	8000c2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	43da      	mvns	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c02:	2201      	movs	r2, #1
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	2201      	movs	r2, #1
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d017      	beq.n	8000c6a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d123      	bne.n	8000cbe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	08da      	lsrs	r2, r3, #3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3208      	adds	r2, #8
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	58d3      	ldr	r3, [r2, r3]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2207      	movs	r2, #7
 8000c88:	4013      	ands	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	43da      	mvns	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	6939      	ldr	r1, [r7, #16]
 8000cbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	23c0      	movs	r3, #192	@ 0xc0
 8000cf8:	029b      	lsls	r3, r3, #10
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d100      	bne.n	8000d00 <HAL_GPIO_Init+0x17c>
 8000cfe:	e09a      	b.n	8000e36 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	4b54      	ldr	r3, [pc, #336]	@ (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d04:	4b53      	ldr	r3, [pc, #332]	@ (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0c:	4a52      	ldr	r2, [pc, #328]	@ (8000e58 <HAL_GPIO_Init+0x2d4>)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	589b      	ldr	r3, [r3, r2]
 8000d18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	23a0      	movs	r3, #160	@ 0xa0
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d019      	beq.n	8000d6e <HAL_GPIO_Init+0x1ea>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a47      	ldr	r2, [pc, #284]	@ (8000e5c <HAL_GPIO_Init+0x2d8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x1e6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a46      	ldr	r2, [pc, #280]	@ (8000e60 <HAL_GPIO_Init+0x2dc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00d      	beq.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a45      	ldr	r2, [pc, #276]	@ (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x1de>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a44      	ldr	r2, [pc, #272]	@ (8000e68 <HAL_GPIO_Init+0x2e4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_GPIO_Init+0x1da>
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	e008      	b.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d5e:	2306      	movs	r3, #6
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e004      	b.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e002      	b.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	2103      	movs	r1, #3
 8000d74:	400a      	ands	r2, r1
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	4093      	lsls	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d80:	4935      	ldr	r1, [pc, #212]	@ (8000e58 <HAL_GPIO_Init+0x2d4>)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	2380      	movs	r3, #128	@ 0x80
 8000da4:	035b      	lsls	r3, r3, #13
 8000da6:	4013      	ands	r3, r2
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43da      	mvns	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	039b      	lsls	r3, r3, #14
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000de2:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	029b      	lsls	r3, r3, #10
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_GPIO_Init+0x2e8>)
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	40da      	lsrs	r2, r3
 8000e44:	1e13      	subs	r3, r2, #0
 8000e46:	d000      	beq.n	8000e4a <HAL_GPIO_Init+0x2c6>
 8000e48:	e6a8      	b.n	8000b9c <HAL_GPIO_Init+0x18>
  }
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b006      	add	sp, #24
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	50000400 	.word	0x50000400
 8000e60:	50000800 	.word	0x50000800
 8000e64:	50000c00 	.word	0x50000c00
 8000e68:	50001c00 	.word	0x50001c00
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e08f      	b.n	8000fa2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2241      	movs	r2, #65	@ 0x41
 8000e86:	5c9b      	ldrb	r3, [r3, r2]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d107      	bne.n	8000e9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2240      	movs	r2, #64	@ 0x40
 8000e92:	2100      	movs	r1, #0
 8000e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff fcc1 	bl	8000820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2241      	movs	r2, #65	@ 0x41
 8000ea2:	2124      	movs	r1, #36	@ 0x24
 8000ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	493b      	ldr	r1, [pc, #236]	@ (8000fac <HAL_I2C_Init+0x13c>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4938      	ldr	r1, [pc, #224]	@ (8000fb0 <HAL_I2C_Init+0x140>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0209      	lsls	r1, r1, #8
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e007      	b.n	8000efe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2184      	movs	r1, #132	@ 0x84
 8000ef8:	0209      	lsls	r1, r1, #8
 8000efa:	430a      	orrs	r2, r1
 8000efc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d109      	bne.n	8000f1a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	0109      	lsls	r1, r1, #4
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	e007      	b.n	8000f2a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4923      	ldr	r1, [pc, #140]	@ (8000fb4 <HAL_I2C_Init+0x144>)
 8000f26:	400a      	ands	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4920      	ldr	r1, [pc, #128]	@ (8000fb8 <HAL_I2C_Init+0x148>)
 8000f36:	430a      	orrs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	491a      	ldr	r1, [pc, #104]	@ (8000fb0 <HAL_I2C_Init+0x140>)
 8000f46:	400a      	ands	r2, r1
 8000f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69d9      	ldr	r1, [r3, #28]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2241      	movs	r2, #65	@ 0x41
 8000f8e:	2120      	movs	r1, #32
 8000f90:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2242      	movs	r2, #66	@ 0x42
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	f0ffffff 	.word	0xf0ffffff
 8000fb0:	ffff7fff 	.word	0xffff7fff
 8000fb4:	fffff7ff 	.word	0xfffff7ff
 8000fb8:	02008000 	.word	0x02008000

08000fbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	0019      	movs	r1, r3
 8000fca:	230a      	movs	r3, #10
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	1c02      	adds	r2, r0, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	1c0a      	adds	r2, r1, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2241      	movs	r2, #65	@ 0x41
 8000fde:	5c9b      	ldrb	r3, [r3, r2]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	d000      	beq.n	8000fe8 <HAL_I2C_Master_Transmit+0x2c>
 8000fe6:	e10a      	b.n	80011fe <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2240      	movs	r2, #64	@ 0x40
 8000fec:	5c9b      	ldrb	r3, [r3, r2]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_I2C_Master_Transmit+0x3a>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e104      	b.n	8001200 <HAL_I2C_Master_Transmit+0x244>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2240      	movs	r2, #64	@ 0x40
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ffe:	f7ff fd03 	bl	8000a08 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	0219      	lsls	r1, r3, #8
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2319      	movs	r3, #25
 8001012:	2201      	movs	r2, #1
 8001014:	f000 fbbc 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d001      	beq.n	8001020 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0ef      	b.n	8001200 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2241      	movs	r2, #65	@ 0x41
 8001024:	2121      	movs	r1, #33	@ 0x21
 8001026:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2242      	movs	r2, #66	@ 0x42
 800102c:	2110      	movs	r1, #16
 800102e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2208      	movs	r2, #8
 8001040:	18ba      	adds	r2, r7, r2
 8001042:	8812      	ldrh	r2, [r2, #0]
 8001044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001050:	b29b      	uxth	r3, r3
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d906      	bls.n	8001064 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	22ff      	movs	r2, #255	@ 0xff
 800105a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	045b      	lsls	r3, r3, #17
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e007      	b.n	8001074 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	049b      	lsls	r3, r3, #18
 8001072:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001078:	2b00      	cmp	r3, #0
 800107a:	d027      	beq.n	80010cc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001096:	b29b      	uxth	r3, r3
 8001098:	3b01      	subs	r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	697c      	ldr	r4, [r7, #20]
 80010b8:	230a      	movs	r3, #10
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	8819      	ldrh	r1, [r3, #0]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	4b51      	ldr	r3, [pc, #324]	@ (8001208 <HAL_I2C_Master_Transmit+0x24c>)
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	0023      	movs	r3, r4
 80010c6:	f000 fddb 	bl	8001c80 <I2C_TransferConfig>
 80010ca:	e06f      	b.n	80011ac <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	697c      	ldr	r4, [r7, #20]
 80010d4:	230a      	movs	r3, #10
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	8819      	ldrh	r1, [r3, #0]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001208 <HAL_I2C_Master_Transmit+0x24c>)
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	0023      	movs	r3, r4
 80010e2:	f000 fdcd 	bl	8001c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010e6:	e061      	b.n	80011ac <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 fba6 	bl	8001840 <I2C_WaitOnTXISFlagUntilTimeout>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d001      	beq.n	80010fc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e081      	b.n	8001200 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001116:	b29b      	uxth	r3, r3
 8001118:	3b01      	subs	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001124:	3b01      	subs	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03a      	beq.n	80011ac <HAL_I2C_Master_Transmit+0x1f0>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800113a:	2b00      	cmp	r3, #0
 800113c:	d136      	bne.n	80011ac <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800113e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	0013      	movs	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	f000 fb20 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 8001150:	1e03      	subs	r3, r0, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e053      	b.n	8001200 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800115c:	b29b      	uxth	r3, r3
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d911      	bls.n	8001186 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	22ff      	movs	r2, #255	@ 0xff
 8001166:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800116c:	b2da      	uxtb	r2, r3
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	045c      	lsls	r4, r3, #17
 8001172:	230a      	movs	r3, #10
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	8819      	ldrh	r1, [r3, #0]
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	2300      	movs	r3, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	0023      	movs	r3, r4
 8001180:	f000 fd7e 	bl	8001c80 <I2C_TransferConfig>
 8001184:	e012      	b.n	80011ac <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800118a:	b29a      	uxth	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001194:	b2da      	uxtb	r2, r3
 8001196:	2380      	movs	r3, #128	@ 0x80
 8001198:	049c      	lsls	r4, r3, #18
 800119a:	230a      	movs	r3, #10
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	8819      	ldrh	r1, [r3, #0]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	0023      	movs	r3, r4
 80011a8:	f000 fd6a 	bl	8001c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d198      	bne.n	80010e8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0018      	movs	r0, r3
 80011be:	f000 fb85 	bl	80018cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e01a      	b.n	8001200 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2220      	movs	r2, #32
 80011d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	490b      	ldr	r1, [pc, #44]	@ (800120c <HAL_I2C_Master_Transmit+0x250>)
 80011de:	400a      	ands	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2241      	movs	r2, #65	@ 0x41
 80011e6:	2120      	movs	r1, #32
 80011e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2242      	movs	r2, #66	@ 0x42
 80011ee:	2100      	movs	r1, #0
 80011f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2240      	movs	r2, #64	@ 0x40
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80011fe:	2302      	movs	r3, #2
  }
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b007      	add	sp, #28
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	80002000 	.word	0x80002000
 800120c:	fe00e800 	.word	0xfe00e800

08001210 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b089      	sub	sp, #36	@ 0x24
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	0008      	movs	r0, r1
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	0019      	movs	r1, r3
 800121e:	230a      	movs	r3, #10
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	2308      	movs	r3, #8
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	1c0a      	adds	r2, r1, #0
 800122c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2241      	movs	r2, #65	@ 0x41
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b20      	cmp	r3, #32
 8001238:	d000      	beq.n	800123c <HAL_I2C_Master_Receive+0x2c>
 800123a:	e0e8      	b.n	800140e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2240      	movs	r2, #64	@ 0x40
 8001240:	5c9b      	ldrb	r3, [r3, r2]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_I2C_Master_Receive+0x3a>
 8001246:	2302      	movs	r3, #2
 8001248:	e0e2      	b.n	8001410 <HAL_I2C_Master_Receive+0x200>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2240      	movs	r2, #64	@ 0x40
 800124e:	2101      	movs	r1, #1
 8001250:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001252:	f7ff fbd9 	bl	8000a08 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	0219      	lsls	r1, r3, #8
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2319      	movs	r3, #25
 8001266:	2201      	movs	r2, #1
 8001268:	f000 fa92 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0cd      	b.n	8001410 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2241      	movs	r2, #65	@ 0x41
 8001278:	2122      	movs	r1, #34	@ 0x22
 800127a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2242      	movs	r2, #66	@ 0x42
 8001280:	2110      	movs	r1, #16
 8001282:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2208      	movs	r2, #8
 8001294:	18ba      	adds	r2, r7, r2
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	2bff      	cmp	r3, #255	@ 0xff
 80012a8:	d911      	bls.n	80012ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2201      	movs	r2, #1
 80012ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	045c      	lsls	r4, r3, #17
 80012ba:	230a      	movs	r3, #10
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	8819      	ldrh	r1, [r3, #0]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	4b55      	ldr	r3, [pc, #340]	@ (8001418 <HAL_I2C_Master_Receive+0x208>)
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	0023      	movs	r3, r4
 80012c8:	f000 fcda 	bl	8001c80 <I2C_TransferConfig>
 80012cc:	e076      	b.n	80013bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	049c      	lsls	r4, r3, #18
 80012e2:	230a      	movs	r3, #10
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	8819      	ldrh	r1, [r3, #0]
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_I2C_Master_Receive+0x208>)
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	0023      	movs	r3, r4
 80012f0:	f000 fcc6 	bl	8001c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80012f4:	e062      	b.n	80013bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f000 fb29 	bl	8001954 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e082      	b.n	8001410 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001326:	3b01      	subs	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001340:	b29b      	uxth	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03a      	beq.n	80013bc <HAL_I2C_Master_Receive+0x1ac>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134a:	2b00      	cmp	r3, #0
 800134c:	d136      	bne.n	80013bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800134e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	0013      	movs	r3, r2
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	f000 fa18 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e053      	b.n	8001410 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800136c:	b29b      	uxth	r3, r3
 800136e:	2bff      	cmp	r3, #255	@ 0xff
 8001370:	d911      	bls.n	8001396 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	22ff      	movs	r2, #255	@ 0xff
 8001376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800137c:	b2da      	uxtb	r2, r3
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	045c      	lsls	r4, r3, #17
 8001382:	230a      	movs	r3, #10
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	8819      	ldrh	r1, [r3, #0]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	0023      	movs	r3, r4
 8001390:	f000 fc76 	bl	8001c80 <I2C_TransferConfig>
 8001394:	e012      	b.n	80013bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	049c      	lsls	r4, r3, #18
 80013aa:	230a      	movs	r3, #10
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	8819      	ldrh	r1, [r3, #0]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	0023      	movs	r3, r4
 80013b8:	f000 fc62 	bl	8001c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d197      	bne.n	80012f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 fa7d 	bl	80018cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e01a      	b.n	8001410 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2220      	movs	r2, #32
 80013e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	490b      	ldr	r1, [pc, #44]	@ (800141c <HAL_I2C_Master_Receive+0x20c>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2241      	movs	r2, #65	@ 0x41
 80013f6:	2120      	movs	r1, #32
 80013f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2242      	movs	r2, #66	@ 0x42
 80013fe:	2100      	movs	r1, #0
 8001400:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800140e:	2302      	movs	r3, #2
  }
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b007      	add	sp, #28
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	80002400 	.word	0x80002400
 800141c:	fe00e800 	.word	0xfe00e800

08001420 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	000c      	movs	r4, r1
 800142a:	0010      	movs	r0, r2
 800142c:	0019      	movs	r1, r3
 800142e:	230a      	movs	r3, #10
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	1c22      	adds	r2, r4, #0
 8001434:	801a      	strh	r2, [r3, #0]
 8001436:	2308      	movs	r3, #8
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	1c0a      	adds	r2, r1, #0
 8001442:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2241      	movs	r2, #65	@ 0x41
 8001448:	5c9b      	ldrb	r3, [r3, r2]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b20      	cmp	r3, #32
 800144e:	d000      	beq.n	8001452 <HAL_I2C_Mem_Read+0x32>
 8001450:	e110      	b.n	8001674 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_I2C_Mem_Read+0x42>
 8001458:	232c      	movs	r3, #44	@ 0x2c
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e103      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2240      	movs	r2, #64	@ 0x40
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_I2C_Mem_Read+0x5c>
 8001478:	2302      	movs	r3, #2
 800147a:	e0fc      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2240      	movs	r2, #64	@ 0x40
 8001480:	2101      	movs	r1, #1
 8001482:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001484:	f7ff fac0 	bl	8000a08 <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	0219      	lsls	r1, r3, #8
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2319      	movs	r3, #25
 8001498:	2201      	movs	r2, #1
 800149a:	f000 f979 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 800149e:	1e03      	subs	r3, r0, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0e7      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2241      	movs	r2, #65	@ 0x41
 80014aa:	2122      	movs	r1, #34	@ 0x22
 80014ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2242      	movs	r2, #66	@ 0x42
 80014b2:	2140      	movs	r1, #64	@ 0x40
 80014b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	222c      	movs	r2, #44	@ 0x2c
 80014c6:	18ba      	adds	r2, r7, r2
 80014c8:	8812      	ldrh	r2, [r2, #0]
 80014ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014d2:	1dbb      	adds	r3, r7, #6
 80014d4:	881c      	ldrh	r4, [r3, #0]
 80014d6:	2308      	movs	r3, #8
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	881a      	ldrh	r2, [r3, #0]
 80014dc:	230a      	movs	r3, #10
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	8819      	ldrh	r1, [r3, #0]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	0023      	movs	r3, r4
 80014ee:	f000 f8cb 	bl	8001688 <I2C_RequestMemoryRead>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d005      	beq.n	8001502 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2240      	movs	r2, #64	@ 0x40
 80014fa:	2100      	movs	r1, #0
 80014fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0b9      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001506:	b29b      	uxth	r3, r3
 8001508:	2bff      	cmp	r3, #255	@ 0xff
 800150a:	d911      	bls.n	8001530 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001516:	b2da      	uxtb	r2, r3
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	045c      	lsls	r4, r3, #17
 800151c:	230a      	movs	r3, #10
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	8819      	ldrh	r1, [r3, #0]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	4b56      	ldr	r3, [pc, #344]	@ (8001680 <HAL_I2C_Mem_Read+0x260>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	0023      	movs	r3, r4
 800152a:	f000 fba9 	bl	8001c80 <I2C_TransferConfig>
 800152e:	e012      	b.n	8001556 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153e:	b2da      	uxtb	r2, r3
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	049c      	lsls	r4, r3, #18
 8001544:	230a      	movs	r3, #10
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	8819      	ldrh	r1, [r3, #0]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <HAL_I2C_Mem_Read+0x260>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	0023      	movs	r3, r4
 8001552:	f000 fb95 	bl	8001c80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0013      	movs	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	2104      	movs	r1, #4
 8001564:	f000 f914 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e082      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d03a      	beq.n	8001622 <HAL_I2C_Mem_Read+0x202>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d136      	bne.n	8001622 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	0013      	movs	r3, r2
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	f000 f8e5 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e053      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2bff      	cmp	r3, #255	@ 0xff
 80015d6:	d911      	bls.n	80015fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	045c      	lsls	r4, r3, #17
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	8819      	ldrh	r1, [r3, #0]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	0023      	movs	r3, r4
 80015f6:	f000 fb43 	bl	8001c80 <I2C_TransferConfig>
 80015fa:	e012      	b.n	8001622 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160a:	b2da      	uxtb	r2, r3
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	049c      	lsls	r4, r3, #18
 8001610:	230a      	movs	r3, #10
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	8819      	ldrh	r1, [r3, #0]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	0023      	movs	r3, r4
 800161e:	f000 fb2f 	bl	8001c80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d194      	bne.n	8001556 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f94a 	bl	80018cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e01a      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2220      	movs	r2, #32
 8001646:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	490c      	ldr	r1, [pc, #48]	@ (8001684 <HAL_I2C_Mem_Read+0x264>)
 8001654:	400a      	ands	r2, r1
 8001656:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2241      	movs	r2, #65	@ 0x41
 800165c:	2120      	movs	r1, #32
 800165e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2242      	movs	r2, #66	@ 0x42
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	2100      	movs	r1, #0
 800166e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
  }
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b007      	add	sp, #28
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	80002400 	.word	0x80002400
 8001684:	fe00e800 	.word	0xfe00e800

08001688 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	000c      	movs	r4, r1
 8001692:	0010      	movs	r0, r2
 8001694:	0019      	movs	r1, r3
 8001696:	250a      	movs	r5, #10
 8001698:	197b      	adds	r3, r7, r5
 800169a:	1c22      	adds	r2, r4, #0
 800169c:	801a      	strh	r2, [r3, #0]
 800169e:	2308      	movs	r3, #8
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	1c02      	adds	r2, r0, #0
 80016a4:	801a      	strh	r2, [r3, #0]
 80016a6:	1dbb      	adds	r3, r7, #6
 80016a8:	1c0a      	adds	r2, r1, #0
 80016aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	8819      	ldrh	r1, [r3, #0]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <I2C_RequestMemoryRead+0xc0>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2300      	movs	r3, #0
 80016be:	f000 fadf 	bl	8001c80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c4:	6a39      	ldr	r1, [r7, #32]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 f8b9 	bl	8001840 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e033      	b.n	800173e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016de:	2308      	movs	r3, #8
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80016ec:	e019      	b.n	8001722 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016ee:	2308      	movs	r3, #8
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001702:	6a39      	ldr	r1, [r7, #32]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	0018      	movs	r0, r3
 8001708:	f000 f89a 	bl	8001840 <I2C_WaitOnTXISFlagUntilTimeout>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e014      	b.n	800173e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001714:	2308      	movs	r3, #8
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001722:	6a3a      	ldr	r2, [r7, #32]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	0013      	movs	r3, r2
 800172c:	2200      	movs	r2, #0
 800172e:	2140      	movs	r1, #64	@ 0x40
 8001730:	f000 f82e 	bl	8001790 <I2C_WaitOnFlagUntilTimeout>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d001      	beq.n	800173c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bdb0      	pop	{r4, r5, r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	80002000 	.word	0x80002000

0800174c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d103      	bne.n	800176a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	2b01      	cmp	r3, #1
 8001776:	d007      	beq.n	8001788 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2101      	movs	r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	619a      	str	r2, [r3, #24]
  }
}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}

08001790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017a0:	e03a      	b.n	8001818 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f971 	bl	8001a90 <I2C_IsErrorOccurred>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e040      	b.n	8001838 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	d02d      	beq.n	8001818 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017bc:	f7ff f924 	bl	8000a08 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d302      	bcc.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d122      	bne.n	8001818 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	4013      	ands	r3, r2
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	425a      	negs	r2, r3
 80017e2:	4153      	adcs	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	001a      	movs	r2, r3
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d113      	bne.n	8001818 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	2220      	movs	r2, #32
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2241      	movs	r2, #65	@ 0x41
 8001800:	2120      	movs	r1, #32
 8001802:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2242      	movs	r2, #66	@ 0x42
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2240      	movs	r2, #64	@ 0x40
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e00f      	b.n	8001838 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4013      	ands	r3, r2
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	425a      	negs	r2, r3
 8001828:	4153      	adcs	r3, r2
 800182a:	b2db      	uxtb	r3, r3
 800182c:	001a      	movs	r2, r3
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d0b5      	beq.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}

08001840 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800184c:	e032      	b.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	0018      	movs	r0, r3
 8001856:	f000 f91b 	bl	8001a90 <I2C_IsErrorOccurred>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d001      	beq.n	8001862 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e030      	b.n	80018c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3301      	adds	r3, #1
 8001866:	d025      	beq.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff f8ce 	bl	8000a08 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11a      	bne.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	2b02      	cmp	r3, #2
 800188a:	d013      	beq.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	2220      	movs	r2, #32
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2241      	movs	r2, #65	@ 0x41
 800189c:	2120      	movs	r1, #32
 800189e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2242      	movs	r2, #66	@ 0x42
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e007      	b.n	80018c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d1c5      	bne.n	800184e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b004      	add	sp, #16
 80018ca:	bd80      	pop	{r7, pc}

080018cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018d8:	e02f      	b.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f8d5 	bl	8001a90 <I2C_IsErrorOccurred>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d001      	beq.n	80018ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e02d      	b.n	800194a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff f88b 	bl	8000a08 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d11a      	bne.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2220      	movs	r2, #32
 800190c:	4013      	ands	r3, r2
 800190e:	2b20      	cmp	r3, #32
 8001910:	d013      	beq.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	2220      	movs	r2, #32
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2241      	movs	r2, #65	@ 0x41
 8001922:	2120      	movs	r1, #32
 8001924:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2242      	movs	r2, #66	@ 0x42
 800192a:	2100      	movs	r1, #0
 800192c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2240      	movs	r2, #64	@ 0x40
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e007      	b.n	800194a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2220      	movs	r2, #32
 8001942:	4013      	ands	r3, r2
 8001944:	2b20      	cmp	r3, #32
 8001946:	d1c8      	bne.n	80018da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2317      	movs	r3, #23
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001968:	e07b      	b.n	8001a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f88d 	bl	8001a90 <I2C_IsErrorOccurred>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d003      	beq.n	8001982 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800197a:	2317      	movs	r3, #23
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2220      	movs	r2, #32
 800198a:	4013      	ands	r3, r2
 800198c:	2b20      	cmp	r3, #32
 800198e:	d140      	bne.n	8001a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8001990:	2117      	movs	r1, #23
 8001992:	187b      	adds	r3, r7, r1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d13b      	bne.n	8001a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d106      	bne.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2210      	movs	r2, #16
 80019be:	4013      	ands	r3, r2
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d123      	bne.n	8001a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2210      	movs	r2, #16
 80019ca:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2204      	movs	r2, #4
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2220      	movs	r2, #32
 80019d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4929      	ldr	r1, [pc, #164]	@ (8001a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80019e6:	400a      	ands	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2241      	movs	r2, #65	@ 0x41
 80019ee:	2120      	movs	r1, #32
 80019f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2242      	movs	r2, #66	@ 0x42
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2240      	movs	r2, #64	@ 0x40
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001a02:	2317      	movs	r3, #23
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e002      	b.n	8001a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001a12:	f7fe fff9 	bl	8000a08 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11c      	bne.n	8001a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8001a28:	2017      	movs	r0, #23
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d117      	bne.n	8001a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d010      	beq.n	8001a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	2220      	movs	r2, #32
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2241      	movs	r2, #65	@ 0x41
 8001a50:	2120      	movs	r1, #32
 8001a52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2240      	movs	r2, #64	@ 0x40
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001a5c:	183b      	adds	r3, r7, r0
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d005      	beq.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001a70:	2317      	movs	r3, #23
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001a7a:	e776      	b.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8001a7c:	2317      	movs	r3, #23
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b006      	add	sp, #24
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	fe00e800 	.word	0xfe00e800

08001a90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	@ 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9c:	2327      	movs	r3, #39	@ 0x27
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d100      	bne.n	8001abe <I2C_IsErrorOccurred+0x2e>
 8001abc:	e079      	b.n	8001bb2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ac6:	e057      	b.n	8001b78 <I2C_IsErrorOccurred+0xe8>
 8001ac8:	2227      	movs	r2, #39	@ 0x27
 8001aca:	18bb      	adds	r3, r7, r2
 8001acc:	18ba      	adds	r2, r7, r2
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	d04f      	beq.n	8001b78 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ad8:	f7fe ff96 	bl	8000a08 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d302      	bcc.n	8001aee <I2C_IsErrorOccurred+0x5e>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d144      	bne.n	8001b78 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	01db      	lsls	r3, r3, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001afc:	2013      	movs	r0, #19
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	2142      	movs	r1, #66	@ 0x42
 8001b04:	5c52      	ldrb	r2, [r2, r1]
 8001b06:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	401a      	ands	r2, r3
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d126      	bne.n	8001b6a <I2C_IsErrorOccurred+0xda>
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	01db      	lsls	r3, r3, #7
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d021      	beq.n	8001b6a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d01d      	beq.n	8001b6a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2180      	movs	r1, #128	@ 0x80
 8001b3a:	01c9      	lsls	r1, r1, #7
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b40:	f7fe ff62 	bl	8000a08 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b48:	e00f      	b.n	8001b6a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b4a:	f7fe ff5d 	bl	8000a08 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b19      	cmp	r3, #25
 8001b56:	d908      	bls.n	8001b6a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b60:	2327      	movs	r3, #39	@ 0x27
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]

              break;
 8001b68:	e006      	b.n	8001b78 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2220      	movs	r2, #32
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d1e8      	bne.n	8001b4a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d004      	beq.n	8001b90 <I2C_IsErrorOccurred+0x100>
 8001b86:	2327      	movs	r3, #39	@ 0x27
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d09b      	beq.n	8001ac8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b90:	2327      	movs	r3, #39	@ 0x27
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001baa:	2327      	movs	r3, #39	@ 0x27
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d00c      	beq.n	8001bde <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bd6:	2327      	movs	r3, #39	@ 0x27
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4013      	ands	r3, r2
 8001be6:	d00c      	beq.n	8001c02 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2208      	movs	r2, #8
 8001bec:	4313      	orrs	r3, r2
 8001bee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2280      	movs	r2, #128	@ 0x80
 8001bf6:	00d2      	lsls	r2, r2, #3
 8001bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bfa:	2327      	movs	r3, #39	@ 0x27
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d00c      	beq.n	8001c26 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4313      	orrs	r3, r2
 8001c12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c1e:	2327      	movs	r3, #39	@ 0x27
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001c26:	2327      	movs	r3, #39	@ 0x27
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01d      	beq.n	8001c6c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff fd8a 	bl	800174c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	490e      	ldr	r1, [pc, #56]	@ (8001c7c <I2C_IsErrorOccurred+0x1ec>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2241      	movs	r2, #65	@ 0x41
 8001c58:	2120      	movs	r1, #32
 8001c5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2242      	movs	r2, #66	@ 0x42
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	@ 0x40
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001c6c:	2327      	movs	r3, #39	@ 0x27
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b00a      	add	sp, #40	@ 0x28
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	fe00e800 	.word	0xfe00e800

08001c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	0008      	movs	r0, r1
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	240a      	movs	r4, #10
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	2009      	movs	r0, #9
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	1c0a      	adds	r2, r1, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	059b      	lsls	r3, r3, #22
 8001ca4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	0419      	lsls	r1, r3, #16
 8001cac:	23ff      	movs	r3, #255	@ 0xff
 8001cae:	041b      	lsls	r3, r3, #16
 8001cb0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cb2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cca:	0d51      	lsrs	r1, r2, #21
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	00d2      	lsls	r2, r2, #3
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	4907      	ldr	r1, [pc, #28]	@ (8001cf0 <I2C_TransferConfig+0x70>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	43d2      	mvns	r2, r2
 8001cd8:	401a      	ands	r2, r3
 8001cda:	0011      	movs	r1, r2
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b007      	add	sp, #28
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	03ff63ff 	.word	0x03ff63ff

08001cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2241      	movs	r2, #65	@ 0x41
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d138      	bne.n	8001d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2240      	movs	r2, #64	@ 0x40
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e032      	b.n	8001d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2241      	movs	r2, #65	@ 0x41
 8001d24:	2124      	movs	r1, #36	@ 0x24
 8001d26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	438a      	bics	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4911      	ldr	r1, [pc, #68]	@ (8001d88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2241      	movs	r2, #65	@ 0x41
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2240      	movs	r2, #64	@ 0x40
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	ffffefff 	.word	0xffffefff

08001d8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2241      	movs	r2, #65	@ 0x41
 8001d9a:	5c9b      	ldrb	r3, [r3, r2]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d139      	bne.n	8001e16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2240      	movs	r2, #64	@ 0x40
 8001da6:	5c9b      	ldrb	r3, [r3, r2]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e033      	b.n	8001e18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	2101      	movs	r1, #1
 8001db6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2241      	movs	r2, #65	@ 0x41
 8001dbc:	2124      	movs	r1, #36	@ 0x24
 8001dbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2241      	movs	r2, #65	@ 0x41
 8001e06:	2120      	movs	r1, #32
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2240      	movs	r2, #64	@ 0x40
 8001e0e:	2100      	movs	r1, #0
 8001e10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
  }
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	fffff0ff 	.word	0xfffff0ff

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b5b0      	push	{r4, r5, r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f000 fbaf 	bl	8002596 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e38:	4bcf      	ldr	r3, [pc, #828]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	4013      	ands	r3, r2
 8001e40:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e42:	4bcd      	ldr	r3, [pc, #820]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d100      	bne.n	8001e5a <HAL_RCC_OscConfig+0x36>
 8001e58:	e07e      	b.n	8001f58 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d007      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d112      	bne.n	8001e8c <HAL_RCC_OscConfig+0x68>
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	025b      	lsls	r3, r3, #9
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10d      	bne.n	8001e8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4bc1      	ldr	r3, [pc, #772]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5a>
 8001e7c:	e06b      	b.n	8001f56 <HAL_RCC_OscConfig+0x132>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d167      	bne.n	8001f56 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f000 fb85 	bl	8002596 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	025b      	lsls	r3, r3, #9
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x84>
 8001e98:	4bb7      	ldr	r3, [pc, #732]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4bb6      	ldr	r3, [pc, #728]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	0249      	lsls	r1, r1, #9
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e027      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	23a0      	movs	r3, #160	@ 0xa0
 8001eae:	02db      	lsls	r3, r3, #11
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0xae>
 8001eb4:	4bb0      	ldr	r3, [pc, #704]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4baf      	ldr	r3, [pc, #700]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	02c9      	lsls	r1, r1, #11
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4bad      	ldr	r3, [pc, #692]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4bac      	ldr	r3, [pc, #688]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	0249      	lsls	r1, r1, #9
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e012      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001ed2:	4ba9      	ldr	r3, [pc, #676]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ed8:	49a8      	ldr	r1, [pc, #672]	@ (800217c <HAL_RCC_OscConfig+0x358>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	4ba6      	ldr	r3, [pc, #664]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4ba2      	ldr	r3, [pc, #648]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4ba1      	ldr	r3, [pc, #644]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ef2:	49a3      	ldr	r1, [pc, #652]	@ (8002180 <HAL_RCC_OscConfig+0x35c>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d015      	beq.n	8001f2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7fe fd82 	bl	8000a08 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f08:	e009      	b.n	8001f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0a:	f7fe fd7d 	bl	8000a08 <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	@ 0x64
 8001f16:	d902      	bls.n	8001f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	f000 fb3c 	bl	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f1e:	4b96      	ldr	r3, [pc, #600]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	4013      	ands	r3, r2
 8001f28:	d0ef      	beq.n	8001f0a <HAL_RCC_OscConfig+0xe6>
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fd6c 	bl	8000a08 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f36:	f7fe fd67 	bl	8000a08 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b64      	cmp	r3, #100	@ 0x64
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e326      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f48:	4b8b      	ldr	r3, [pc, #556]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x112>
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d100      	bne.n	8001f64 <HAL_RCC_OscConfig+0x140>
 8001f62:	e08b      	b.n	800207c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d13e      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1d0>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d13b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2204      	movs	r2, #4
 8001f82:	4013      	ands	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_RCC_OscConfig+0x16c>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e302      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b79      	ldr	r3, [pc, #484]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a7b      	ldr	r2, [pc, #492]	@ (8002184 <HAL_RCC_OscConfig+0x360>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	021a      	lsls	r2, r3, #8
 8001fa0:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fa6:	4b74      	ldr	r3, [pc, #464]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2209      	movs	r2, #9
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	4b71      	ldr	r3, [pc, #452]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb8:	f000 fc40 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8001fbc:	0001      	movs	r1, r0
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a6f      	ldr	r2, [pc, #444]	@ (8002188 <HAL_RCC_OscConfig+0x364>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	000a      	movs	r2, r1
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	4b6e      	ldr	r3, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x368>)
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8002190 <HAL_RCC_OscConfig+0x36c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2513      	movs	r5, #19
 8001fda:	197c      	adds	r4, r7, r5
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe fccd 	bl	800097c <HAL_InitTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fe6:	197b      	adds	r3, r7, r5
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d046      	beq.n	800207c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001fee:	197b      	adds	r3, r7, r5
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	e2d0      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d027      	beq.n	800204a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2209      	movs	r2, #9
 8002000:	4393      	bics	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	4b5c      	ldr	r3, [pc, #368]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fcfc 	bl	8000a08 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe fcf7 	bl	8000a08 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e2b6      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002028:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2204      	movs	r2, #4
 800202e:	4013      	ands	r3, r2
 8002030:	d0f1      	beq.n	8002016 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b51      	ldr	r3, [pc, #324]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a53      	ldr	r2, [pc, #332]	@ (8002184 <HAL_RCC_OscConfig+0x360>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	4b4d      	ldr	r3, [pc, #308]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e018      	b.n	800207c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b4a      	ldr	r3, [pc, #296]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002050:	2101      	movs	r1, #1
 8002052:	438a      	bics	r2, r1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe fcd7 	bl	8000a08 <HAL_GetTick>
 800205a:	0003      	movs	r3, r0
 800205c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe fcd2 	bl	8000a08 <HAL_GetTick>
 8002064:	0002      	movs	r2, r0
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e291      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002072:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d1f1      	bne.n	8002060 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	4013      	ands	r3, r2
 8002084:	d100      	bne.n	8002088 <HAL_RCC_OscConfig+0x264>
 8002086:	e0a1      	b.n	80021cc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d140      	bne.n	8002110 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208e:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x282>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e277      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a6:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002194 <HAL_RCC_OscConfig+0x370>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	0a19      	lsrs	r1, r3, #8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	061a      	lsls	r2, r3, #24
 80020c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	0b5b      	lsrs	r3, r3, #13
 80020d4:	3301      	adds	r3, #1
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	0212      	lsls	r2, r2, #8
 80020da:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020dc:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	210f      	movs	r1, #15
 80020e4:	400b      	ands	r3, r1
 80020e6:	4928      	ldr	r1, [pc, #160]	@ (8002188 <HAL_RCC_OscConfig+0x364>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <HAL_RCC_OscConfig+0x368>)
 80020ee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_OscConfig+0x36c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2513      	movs	r5, #19
 80020f6:	197c      	adds	r4, r7, r5
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe fc3f 	bl	800097c <HAL_InitTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002102:	197b      	adds	r3, r7, r5
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d060      	beq.n	80021cc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800210a:	197b      	adds	r3, r7, r5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	e242      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03f      	beq.n	8002198 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fc6f 	bl	8000a08 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002130:	f7fe fc6a 	bl	8000a08 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e229      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a10      	ldr	r2, [pc, #64]	@ (8002194 <HAL_RCC_OscConfig+0x370>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	0a19      	lsrs	r1, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	061a      	lsls	r2, r3, #24
 8002170:	4b01      	ldr	r3, [pc, #4]	@ (8002178 <HAL_RCC_OscConfig+0x354>)
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	e029      	b.n	80021cc <HAL_RCC_OscConfig+0x3a8>
 8002178:	40021000 	.word	0x40021000
 800217c:	fffeffff 	.word	0xfffeffff
 8002180:	fffbffff 	.word	0xfffbffff
 8002184:	ffffe0ff 	.word	0xffffe0ff
 8002188:	08002cd4 	.word	0x08002cd4
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004
 8002194:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002198:	4bbd      	ldr	r3, [pc, #756]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4bbc      	ldr	r3, [pc, #752]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800219e:	49bd      	ldr	r1, [pc, #756]	@ (8002494 <HAL_RCC_OscConfig+0x670>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fc30 	bl	8000a08 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ae:	f7fe fc2b 	bl	8000a08 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1ea      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021c0:	4bb3      	ldr	r3, [pc, #716]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2208      	movs	r2, #8
 80021d2:	4013      	ands	r3, r2
 80021d4:	d036      	beq.n	8002244 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d019      	beq.n	8002212 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4bac      	ldr	r3, [pc, #688]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80021e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021e2:	4bab      	ldr	r3, [pc, #684]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fc0d 	bl	8000a08 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f4:	f7fe fc08 	bl	8000a08 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1c7      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002206:	4ba2      	ldr	r3, [pc, #648]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d0f1      	beq.n	80021f4 <HAL_RCC_OscConfig+0x3d0>
 8002210:	e018      	b.n	8002244 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b9f      	ldr	r3, [pc, #636]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002216:	4b9e      	ldr	r3, [pc, #632]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002218:	2101      	movs	r1, #1
 800221a:	438a      	bics	r2, r1
 800221c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7fe fbf3 	bl	8000a08 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe fbee 	bl	8000a08 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1ad      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800223a:	4b95      	ldr	r3, [pc, #596]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800223c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d1f1      	bne.n	8002228 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d100      	bne.n	8002250 <HAL_RCC_OscConfig+0x42c>
 800224e:	e0ae      	b.n	80023ae <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002250:	2027      	movs	r0, #39	@ 0x27
 8002252:	183b      	adds	r3, r7, r0
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	4b8d      	ldr	r3, [pc, #564]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800225a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	055b      	lsls	r3, r3, #21
 8002260:	4013      	ands	r3, r2
 8002262:	d109      	bne.n	8002278 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b8a      	ldr	r3, [pc, #552]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002268:	4b89      	ldr	r3, [pc, #548]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800226a:	2180      	movs	r1, #128	@ 0x80
 800226c:	0549      	lsls	r1, r1, #21
 800226e:	430a      	orrs	r2, r1
 8002270:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002272:	183b      	adds	r3, r7, r0
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b87      	ldr	r3, [pc, #540]	@ (8002498 <HAL_RCC_OscConfig+0x674>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d11a      	bne.n	80022ba <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002284:	4b84      	ldr	r3, [pc, #528]	@ (8002498 <HAL_RCC_OscConfig+0x674>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b83      	ldr	r3, [pc, #524]	@ (8002498 <HAL_RCC_OscConfig+0x674>)
 800228a:	2180      	movs	r1, #128	@ 0x80
 800228c:	0049      	lsls	r1, r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe fbb9 	bl	8000a08 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7fe fbb4 	bl	8000a08 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e173      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <HAL_RCC_OscConfig+0x674>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4b2>
 80022c6:	4b72      	ldr	r3, [pc, #456]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80022c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ca:	4b71      	ldr	r3, [pc, #452]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80022cc:	2180      	movs	r1, #128	@ 0x80
 80022ce:	0049      	lsls	r1, r1, #1
 80022d0:	430a      	orrs	r2, r1
 80022d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80022d4:	e031      	b.n	800233a <HAL_RCC_OscConfig+0x516>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4d4>
 80022de:	4b6c      	ldr	r3, [pc, #432]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80022e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80022e4:	496b      	ldr	r1, [pc, #428]	@ (8002494 <HAL_RCC_OscConfig+0x670>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80022ea:	4b69      	ldr	r3, [pc, #420]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80022ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ee:	4b68      	ldr	r3, [pc, #416]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80022f0:	496a      	ldr	r1, [pc, #424]	@ (800249c <HAL_RCC_OscConfig+0x678>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80022f6:	e020      	b.n	800233a <HAL_RCC_OscConfig+0x516>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	23a0      	movs	r3, #160	@ 0xa0
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	429a      	cmp	r2, r3
 8002302:	d10e      	bne.n	8002322 <HAL_RCC_OscConfig+0x4fe>
 8002304:	4b62      	ldr	r3, [pc, #392]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002306:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002308:	4b61      	ldr	r3, [pc, #388]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	00c9      	lsls	r1, r1, #3
 800230e:	430a      	orrs	r2, r1
 8002310:	651a      	str	r2, [r3, #80]	@ 0x50
 8002312:	4b5f      	ldr	r3, [pc, #380]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002316:	4b5e      	ldr	r3, [pc, #376]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002318:	2180      	movs	r1, #128	@ 0x80
 800231a:	0049      	lsls	r1, r1, #1
 800231c:	430a      	orrs	r2, r1
 800231e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x516>
 8002322:	4b5b      	ldr	r3, [pc, #364]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002324:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002326:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002328:	495a      	ldr	r1, [pc, #360]	@ (8002494 <HAL_RCC_OscConfig+0x670>)
 800232a:	400a      	ands	r2, r1
 800232c:	651a      	str	r2, [r3, #80]	@ 0x50
 800232e:	4b58      	ldr	r3, [pc, #352]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002332:	4b57      	ldr	r3, [pc, #348]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002334:	4959      	ldr	r1, [pc, #356]	@ (800249c <HAL_RCC_OscConfig+0x678>)
 8002336:	400a      	ands	r2, r1
 8002338:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe fb61 	bl	8000a08 <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800234a:	e009      	b.n	8002360 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe fb5c 	bl	8000a08 <HAL_GetTick>
 8002350:	0002      	movs	r2, r0
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	4a52      	ldr	r2, [pc, #328]	@ (80024a0 <HAL_RCC_OscConfig+0x67c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e11a      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002360:	4b4b      	ldr	r3, [pc, #300]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d0ef      	beq.n	800234c <HAL_RCC_OscConfig+0x528>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fb4b 	bl	8000a08 <HAL_GetTick>
 8002372:	0003      	movs	r3, r0
 8002374:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002376:	e009      	b.n	800238c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fb46 	bl	8000a08 <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	4a47      	ldr	r2, [pc, #284]	@ (80024a0 <HAL_RCC_OscConfig+0x67c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e104      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800238c:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800238e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d1ef      	bne.n	8002378 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002398:	2327      	movs	r3, #39	@ 0x27
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80023a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80023a8:	493e      	ldr	r1, [pc, #248]	@ (80024a4 <HAL_RCC_OscConfig+0x680>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2220      	movs	r2, #32
 80023b4:	4013      	ands	r3, r2
 80023b6:	d049      	beq.n	800244c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d026      	beq.n	800240e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023c0:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b32      	ldr	r3, [pc, #200]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80023ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	430a      	orrs	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023d8:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <HAL_RCC_OscConfig+0x684>)
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <HAL_RCC_OscConfig+0x684>)
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	0189      	lsls	r1, r1, #6
 80023e2:	430a      	orrs	r2, r1
 80023e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe fb0f 	bl	8000a08 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f0:	f7fe fb0a 	bl	8000a08 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0c9      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d0f1      	beq.n	80023f0 <HAL_RCC_OscConfig+0x5cc>
 800240c:	e01e      	b.n	800244c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002414:	2101      	movs	r1, #1
 8002416:	438a      	bics	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <HAL_RCC_OscConfig+0x684>)
 800241c:	6a1a      	ldr	r2, [r3, #32]
 800241e:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <HAL_RCC_OscConfig+0x684>)
 8002420:	4922      	ldr	r1, [pc, #136]	@ (80024ac <HAL_RCC_OscConfig+0x688>)
 8002422:	400a      	ands	r2, r1
 8002424:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe faef 	bl	8000a08 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002430:	f7fe faea 	bl	8000a08 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0a9      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d1f1      	bne.n	8002430 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d100      	bne.n	8002456 <HAL_RCC_OscConfig+0x632>
 8002454:	e09e      	b.n	8002594 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d100      	bne.n	800245e <HAL_RCC_OscConfig+0x63a>
 800245c:	e077      	b.n	800254e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	2b02      	cmp	r3, #2
 8002464:	d158      	bne.n	8002518 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <HAL_RCC_OscConfig+0x66c>)
 800246c:	4910      	ldr	r1, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0x68c>)
 800246e:	400a      	ands	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fac9 	bl	8000a08 <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800247a:	e01b      	b.n	80024b4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fac4 	bl	8000a08 <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d914      	bls.n	80024b4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e083      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	40021000 	.word	0x40021000
 8002494:	fffffeff 	.word	0xfffffeff
 8002498:	40007000 	.word	0x40007000
 800249c:	fffffbff 	.word	0xfffffbff
 80024a0:	00001388 	.word	0x00001388
 80024a4:	efffffff 	.word	0xefffffff
 80024a8:	40010000 	.word	0x40010000
 80024ac:	ffffdfff 	.word	0xffffdfff
 80024b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024b4:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	049b      	lsls	r3, r3, #18
 80024bc:	4013      	ands	r3, r2
 80024be:	d1dd      	bne.n	800247c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a37      	ldr	r2, [pc, #220]	@ (80025a4 <HAL_RCC_OscConfig+0x780>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d8:	431a      	orrs	r2, r3
 80024da:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e0:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	0449      	lsls	r1, r1, #17
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fa8b 	bl	8000a08 <HAL_GetTick>
 80024f2:	0003      	movs	r3, r0
 80024f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fa86 	bl	8000a08 <HAL_GetTick>
 80024fc:	0002      	movs	r2, r0
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e045      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800250a:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	@ 0x80
 8002510:	049b      	lsls	r3, r3, #18
 8002512:	4013      	ands	r3, r2
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x6d4>
 8002516:	e03d      	b.n	8002594 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 800251e:	4922      	ldr	r1, [pc, #136]	@ (80025a8 <HAL_RCC_OscConfig+0x784>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fa70 	bl	8000a08 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7fe fa6b 	bl	8000a08 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e02a      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	049b      	lsls	r3, r3, #18
 8002548:	4013      	ands	r3, r2
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x70a>
 800254c:	e022      	b.n	8002594 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e01d      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_RCC_OscConfig+0x77c>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	2380      	movs	r3, #128	@ 0x80
 8002564:	025b      	lsls	r3, r3, #9
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d10f      	bne.n	8002590 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	23f0      	movs	r3, #240	@ 0xf0
 8002574:	039b      	lsls	r3, r3, #14
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	23c0      	movs	r3, #192	@ 0xc0
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b00a      	add	sp, #40	@ 0x28
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	ff02ffff 	.word	0xff02ffff
 80025a8:	feffffff 	.word	0xfeffffff

080025ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e128      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b96      	ldr	r3, [pc, #600]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d91e      	bls.n	800260c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b93      	ldr	r3, [pc, #588]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	4b90      	ldr	r3, [pc, #576]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fa12 	bl	8000a08 <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	e009      	b.n	80025fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7fe fa0d 	bl	8000a08 <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	4a8a      	ldr	r2, [pc, #552]	@ (8002820 <HAL_RCC_ClockConfig+0x274>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e109      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b87      	ldr	r3, [pc, #540]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d1ee      	bne.n	80025ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002616:	4b83      	ldr	r3, [pc, #524]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	22f0      	movs	r2, #240	@ 0xf0
 800261c:	4393      	bics	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002626:	430a      	orrs	r2, r1
 8002628:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d100      	bne.n	8002636 <HAL_RCC_ClockConfig+0x8a>
 8002634:	e089      	b.n	800274a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800263e:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d120      	bne.n	800268c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e1      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002656:	4b73      	ldr	r3, [pc, #460]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	049b      	lsls	r3, r3, #18
 800265e:	4013      	ands	r3, r2
 8002660:	d114      	bne.n	800268c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0d5      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800266e:	4b6d      	ldr	r3, [pc, #436]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d109      	bne.n	800268c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0ca      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800267c:	4b69      	ldr	r3, [pc, #420]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4013      	ands	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0c2      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268c:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2203      	movs	r2, #3
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4b62      	ldr	r3, [pc, #392]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7fe f9b2 	bl	8000a08 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d111      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b2:	f7fe f9a9 	bl	8000a08 <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	4a58      	ldr	r2, [pc, #352]	@ (8002820 <HAL_RCC_ClockConfig+0x274>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0a5      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c6:	4b57      	ldr	r3, [pc, #348]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	220c      	movs	r2, #12
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d1ef      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x106>
 80026d2:	e03a      	b.n	800274a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d111      	bne.n	8002700 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fe f993 	bl	8000a08 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002820 <HAL_RCC_ClockConfig+0x274>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e08f      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	220c      	movs	r2, #12
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d1ef      	bne.n	80026de <HAL_RCC_ClockConfig+0x132>
 80026fe:	e024      	b.n	800274a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d11b      	bne.n	8002740 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002708:	e009      	b.n	800271e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270a:	f7fe f97d 	bl	8000a08 <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <HAL_RCC_ClockConfig+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e079      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800271e:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	220c      	movs	r2, #12
 8002724:	4013      	ands	r3, r2
 8002726:	2b04      	cmp	r3, #4
 8002728:	d1ef      	bne.n	800270a <HAL_RCC_ClockConfig+0x15e>
 800272a:	e00e      	b.n	800274a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe f96c 	bl	8000a08 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	4a3a      	ldr	r2, [pc, #232]	@ (8002820 <HAL_RCC_ClockConfig+0x274>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e068      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002740:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	220c      	movs	r2, #12
 8002746:	4013      	ands	r3, r2
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274a:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d21e      	bcs.n	8002796 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002758:	4b30      	ldr	r3, [pc, #192]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	4393      	bics	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800276a:	f7fe f94d 	bl	8000a08 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	e009      	b.n	8002788 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe f948 	bl	8000a08 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	4a28      	ldr	r2, [pc, #160]	@ (8002820 <HAL_RCC_ClockConfig+0x274>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e044      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002788:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_RCC_ClockConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d1ee      	bne.n	8002774 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2204      	movs	r2, #4
 800279c:	4013      	ands	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a20      	ldr	r2, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x27c>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	4013      	ands	r3, r2
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_RCC_ClockConfig+0x280>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00da      	lsls	r2, r3, #3
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d4:	f000 f832 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027d8:	0001      	movs	r1, r0
 80027da:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <HAL_RCC_ClockConfig+0x278>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	220f      	movs	r2, #15
 80027e2:	4013      	ands	r3, r2
 80027e4:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <HAL_RCC_ClockConfig+0x284>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	000a      	movs	r2, r1
 80027ea:	40da      	lsrs	r2, r3
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_RCC_ClockConfig+0x288>)
 80027ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_RCC_ClockConfig+0x28c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	250b      	movs	r5, #11
 80027f6:	197c      	adds	r4, r7, r5
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe f8bf 	bl	800097c <HAL_InitTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002802:	197b      	adds	r3, r7, r5
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800280a:	197b      	adds	r3, r7, r5
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	e000      	b.n	8002812 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bdb0      	pop	{r4, r5, r7, pc}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	40022000 	.word	0x40022000
 8002820:	00001388 	.word	0x00001388
 8002824:	40021000 	.word	0x40021000
 8002828:	fffff8ff 	.word	0xfffff8ff
 800282c:	ffffc7ff 	.word	0xffffc7ff
 8002830:	08002cd4 	.word	0x08002cd4
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002842:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	220c      	movs	r2, #12
 800284c:	4013      	ands	r3, r2
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d013      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3e>
 8002852:	d85c      	bhi.n	800290e <HAL_RCC_GetSysClockFreq+0xd2>
 8002854:	2b04      	cmp	r3, #4
 8002856:	d002      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x22>
 8002858:	2b08      	cmp	r3, #8
 800285a:	d00b      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x38>
 800285c:	e057      	b.n	800290e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800285e:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2210      	movs	r2, #16
 8002864:	4013      	ands	r3, r2
 8002866:	d002      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002868:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xfc>)
 800286a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800286c:	e05d      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800286e:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_GetSysClockFreq+0x100>)
 8002870:	613b      	str	r3, [r7, #16]
      break;
 8002872:	e05a      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b32      	ldr	r3, [pc, #200]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x104>)
 8002876:	613b      	str	r3, [r7, #16]
      break;
 8002878:	e057      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	220f      	movs	r2, #15
 8002880:	4013      	ands	r3, r2
 8002882:	4a30      	ldr	r2, [pc, #192]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x108>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0d9b      	lsrs	r3, r3, #22
 800288c:	2203      	movs	r2, #3
 800288e:	4013      	ands	r3, r2
 8002890:	3301      	adds	r3, #1
 8002892:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002894:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	025b      	lsls	r3, r3, #9
 800289c:	4013      	ands	r3, r2
 800289e:	d00f      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	000a      	movs	r2, r1
 80028a4:	0152      	lsls	r2, r2, #5
 80028a6:	1a52      	subs	r2, r2, r1
 80028a8:	0193      	lsls	r3, r2, #6
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	185b      	adds	r3, r3, r1
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7fd fc27 	bl	8000108 <__udivsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e023      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00f      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	000a      	movs	r2, r1
 80028ce:	0152      	lsls	r2, r2, #5
 80028d0:	1a52      	subs	r2, r2, r1
 80028d2:	0193      	lsls	r3, r2, #6
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	185b      	adds	r3, r3, r1
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc12 	bl	8000108 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e00e      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	000a      	movs	r2, r1
 80028ee:	0152      	lsls	r2, r2, #5
 80028f0:	1a52      	subs	r2, r2, r1
 80028f2:	0193      	lsls	r3, r2, #6
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	185b      	adds	r3, r3, r1
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fd fc02 	bl	8000108 <__udivsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
      break;
 800290c:	e00d      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0b5b      	lsrs	r3, r3, #13
 8002914:	2207      	movs	r2, #7
 8002916:	4013      	ands	r3, r2
 8002918:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	0212      	lsls	r2, r2, #8
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      break;
 8002928:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800292a:	693b      	ldr	r3, [r7, #16]
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b006      	add	sp, #24
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	003d0900 	.word	0x003d0900
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200
 8002944:	08002ce4 	.word	0x08002ce4

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002950:	2317      	movs	r3, #23
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2220      	movs	r2, #32
 800295e:	4013      	ands	r3, r2
 8002960:	d106      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	4013      	ands	r3, r2
 800296c:	d100      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800296e:	e104      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002970:	4bb1      	ldr	r3, [pc, #708]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	055b      	lsls	r3, r3, #21
 8002978:	4013      	ands	r3, r2
 800297a:	d10a      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	4bae      	ldr	r3, [pc, #696]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800297e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002980:	4bad      	ldr	r3, [pc, #692]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	0549      	lsls	r1, r1, #21
 8002986:	430a      	orrs	r2, r1
 8002988:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800298a:	2317      	movs	r3, #23
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4baa      	ldr	r3, [pc, #680]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d11a      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4ba7      	ldr	r3, [pc, #668]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4ba6      	ldr	r3, [pc, #664]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a4:	2180      	movs	r1, #128	@ 0x80
 80029a6:	0049      	lsls	r1, r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ac:	f7fe f82c 	bl	8000a08 <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe f827 	bl	8000a08 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	@ 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e133      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029d4:	4b98      	ldr	r3, [pc, #608]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	23c0      	movs	r3, #192	@ 0xc0
 80029da:	039b      	lsls	r3, r3, #14
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	23c0      	movs	r3, #192	@ 0xc0
 80029e6:	039b      	lsls	r3, r3, #14
 80029e8:	4013      	ands	r3, r2
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	23c0      	movs	r3, #192	@ 0xc0
 80029f6:	039b      	lsls	r3, r3, #14
 80029f8:	4013      	ands	r3, r2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d013      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	23c0      	movs	r3, #192	@ 0xc0
 8002a06:	029b      	lsls	r3, r3, #10
 8002a08:	401a      	ands	r2, r3
 8002a0a:	23c0      	movs	r3, #192	@ 0xc0
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d10a      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a12:	4b89      	ldr	r3, [pc, #548]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d101      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e103      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a28:	4b83      	ldr	r3, [pc, #524]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a2c:	23c0      	movs	r3, #192	@ 0xc0
 8002a2e:	029b      	lsls	r3, r3, #10
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d049      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	23c0      	movs	r3, #192	@ 0xc0
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	4013      	ands	r3, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d004      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	4013      	ands	r3, r2
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	23c0      	movs	r3, #192	@ 0xc0
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d034      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d02e      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a70:	4b71      	ldr	r3, [pc, #452]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a74:	4a72      	ldr	r2, [pc, #456]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	0309      	lsls	r1, r1, #12
 8002a84:	430a      	orrs	r2, r1
 8002a86:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b6b      	ldr	r3, [pc, #428]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a8e:	496d      	ldr	r1, [pc, #436]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002a94:	4b68      	ldr	r3, [pc, #416]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d014      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fd ffb0 	bl	8000a08 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aac:	e009      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fd ffab 	bl	8000a08 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	4a63      	ldr	r2, [pc, #396]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0b6      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	d0ef      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	23c0      	movs	r3, #192	@ 0xc0
 8002ae0:	029b      	lsls	r3, r3, #10
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	23c0      	movs	r3, #192	@ 0xc0
 8002ae6:	029b      	lsls	r3, r3, #10
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002aec:	4b52      	ldr	r3, [pc, #328]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a56      	ldr	r2, [pc, #344]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	23c0      	movs	r3, #192	@ 0xc0
 8002afc:	039b      	lsls	r3, r3, #14
 8002afe:	401a      	ands	r2, r3
 8002b00:	4b4d      	ldr	r3, [pc, #308]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	4b4c      	ldr	r3, [pc, #304]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	23c0      	movs	r3, #192	@ 0xc0
 8002b10:	029b      	lsls	r3, r3, #10
 8002b12:	401a      	ands	r2, r3
 8002b14:	4b48      	ldr	r3, [pc, #288]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	d01f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	23c0      	movs	r3, #192	@ 0xc0
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	23c0      	movs	r3, #192	@ 0xc0
 8002b30:	029b      	lsls	r3, r3, #10
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002b36:	4b40      	ldr	r3, [pc, #256]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a44      	ldr	r2, [pc, #272]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	23c0      	movs	r3, #192	@ 0xc0
 8002b46:	039b      	lsls	r3, r3, #14
 8002b48:	401a      	ands	r2, r3
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	4b39      	ldr	r3, [pc, #228]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b52:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	23c0      	movs	r3, #192	@ 0xc0
 8002b5a:	029b      	lsls	r3, r3, #10
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b64:	2317      	movs	r3, #23
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b72:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b74:	4936      	ldr	r1, [pc, #216]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b84:	4b2c      	ldr	r3, [pc, #176]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4393      	bics	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba2:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc4:	4a23      	ldr	r2, [pc, #140]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2240      	movs	r2, #64	@ 0x40
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	4013      	ands	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	4b03      	ldr	r3, [pc, #12]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b006      	add	sp, #24
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	fffcffff 	.word	0xfffcffff
 8002c44:	fff7ffff 	.word	0xfff7ffff
 8002c48:	00001388 	.word	0x00001388
 8002c4c:	ffcfffff 	.word	0xffcfffff
 8002c50:	efffffff 	.word	0xefffffff
 8002c54:	fffff3ff 	.word	0xfffff3ff
 8002c58:	ffffcfff 	.word	0xffffcfff
 8002c5c:	fbffffff 	.word	0xfbffffff
 8002c60:	fff3ffff 	.word	0xfff3ffff

08002c64 <memset>:
 8002c64:	0003      	movs	r3, r0
 8002c66:	1882      	adds	r2, r0, r2
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	7019      	strb	r1, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2600      	movs	r6, #0
 8002c78:	4c0c      	ldr	r4, [pc, #48]	@ (8002cac <__libc_init_array+0x38>)
 8002c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8002cb0 <__libc_init_array+0x3c>)
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	2600      	movs	r6, #0
 8002c86:	f000 f819 	bl	8002cbc <_init>
 8002c8a:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb4 <__libc_init_array+0x40>)
 8002c8c:	4d0a      	ldr	r5, [pc, #40]	@ (8002cb8 <__libc_init_array+0x44>)
 8002c8e:	1b64      	subs	r4, r4, r5
 8002c90:	10a4      	asrs	r4, r4, #2
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	00b3      	lsls	r3, r6, #2
 8002c9a:	58eb      	ldr	r3, [r5, r3]
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	00b3      	lsls	r3, r6, #2
 8002ca4:	58eb      	ldr	r3, [r5, r3]
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08002cf0 	.word	0x08002cf0
 8002cb0:	08002cf0 	.word	0x08002cf0
 8002cb4:	08002cf4 	.word	0x08002cf4
 8002cb8:	08002cf0 	.word	0x08002cf0

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr


Projeto Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b60  08002b60  00003b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b68  08002b68  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b68  08002b68  00003b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b6c  08002b6c  00003b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002b7c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002b7c  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071b0  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001527  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fc  00000000  00000000  0000cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c6c  00000000  00000000  0000d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089a3  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000760ce  00000000  00000000  00028afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ebc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c04  00000000  00000000  0009ec0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000a0810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b2c 	.word	0x08002b2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b2c 	.word	0x08002b2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fad2 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f844 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f978 	bl	80007a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004b8:	f000 f890 	bl	80005dc <MX_TIM2_Init>
  MX_TIM21_Init();
 80004bc:	f000 f8f2 	bl	80006a4 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004c0:	4b19      	ldr	r3, [pc, #100]	@ (8000528 <main+0x80>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fba0 	bl	8001c08 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim21);
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <main+0x84>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fb9c 	bl	8001c08 <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <main+0x80>)
 80004d2:	213c      	movs	r1, #60	@ 0x3c
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fd4f 	bl	8001f78 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 80004da:	4b14      	ldr	r3, [pc, #80]	@ (800052c <main+0x84>)
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fc1e 	bl	8001d20 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  encoderCount   = __HAL_TIM_GET_COUNTER(&htim2);
 80004e4:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <main+0x80>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <main+0x88>)
 80004ec:	601a      	str	r2, [r3, #0]
	  dir            = __HAL_TIM_DIRECTION_STATUS(&htim2);
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <main+0x80>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2210      	movs	r2, #16
 80004f6:	4013      	ands	r3, r2
 80004f8:	3b10      	subs	r3, #16
 80004fa:	425a      	negs	r2, r3
 80004fc:	4153      	adcs	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	001a      	movs	r2, r3
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <main+0x8c>)
 8000504:	601a      	str	r2, [r3, #0]
//	  pos            = __HAL_TIM_GetAutoreload(&htim2);

	  counterFiltred = (encoderCount / 2) % 181;
 8000506:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <main+0x88>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	085b      	lsrs	r3, r3, #1
 800050c:	21b5      	movs	r1, #181	@ 0xb5
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff fe80 	bl	8000214 <__aeabi_uidivmod>
 8000514:	000b      	movs	r3, r1
 8000516:	001a      	movs	r2, r3
 8000518:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <main+0x90>)
 800051a:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 800051c:	2064      	movs	r0, #100	@ 0x64
 800051e:	f000 fb09 	bl	8000b34 <HAL_Delay>
	  encoderCount   = __HAL_TIM_GET_COUNTER(&htim2);
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	e7de      	b.n	80004e4 <main+0x3c>
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	20000028 	.word	0x20000028
 800052c:	20000068 	.word	0x20000068
 8000530:	200000ac 	.word	0x200000ac
 8000534:	200000b0 	.word	0x200000b0
 8000538:	200000a8 	.word	0x200000a8

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b095      	sub	sp, #84	@ 0x54
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	2418      	movs	r4, #24
 8000544:	193b      	adds	r3, r7, r4
 8000546:	0018      	movs	r0, r3
 8000548:	2338      	movs	r3, #56	@ 0x38
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f002 fac1 	bl	8002ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	0018      	movs	r0, r3
 8000556:	2314      	movs	r3, #20
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f002 faba 	bl	8002ad4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <SystemClock_Config+0x98>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1c      	ldr	r2, [pc, #112]	@ (80005d8 <SystemClock_Config+0x9c>)
 8000566:	401a      	ands	r2, r3
 8000568:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <SystemClock_Config+0x98>)
 800056a:	2180      	movs	r1, #128	@ 0x80
 800056c:	0109      	lsls	r1, r1, #4
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2210      	movs	r2, #16
 8000584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	187b      	adds	r3, r7, r1
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fd48 	bl	8001024 <HAL_RCC_OscConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000598:	f000 f94c 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	220f      	movs	r2, #15
 80005a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2201      	movs	r2, #1
 80005a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2100      	movs	r1, #0
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 f8f4 	bl	80017ac <HAL_RCC_ClockConfig>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005c8:	f000 f934 	bl	8000834 <Error_Handler>
  }
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b015      	add	sp, #84	@ 0x54
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b08d      	sub	sp, #52	@ 0x34
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005e2:	240c      	movs	r4, #12
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2324      	movs	r3, #36	@ 0x24
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f002 fa71 	bl	8002ad4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	0018      	movs	r0, r3
 80005f6:	2308      	movs	r3, #8
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 fa6a 	bl	8002ad4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <MX_TIM2_Init+0xc0>)
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	05d2      	lsls	r2, r2, #23
 8000606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000608:	4b24      	ldr	r3, [pc, #144]	@ (800069c <MX_TIM2_Init+0xc0>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_TIM2_Init+0xc0>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000614:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_TIM2_Init+0xc0>)
 8000616:	4a22      	ldr	r2, [pc, #136]	@ (80006a0 <MX_TIM2_Init+0xc4>)
 8000618:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <MX_TIM2_Init+0xc0>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_TIM2_Init+0xc0>)
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2203      	movs	r2, #3
 800062c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2202      	movs	r2, #2
 8000632:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	220a      	movs	r2, #10
 8000644:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2201      	movs	r2, #1
 8000650:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800065e:	187a      	adds	r2, r7, r1
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_TIM2_Init+0xc0>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fbe7 	bl	8001e38 <HAL_TIM_Encoder_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800066e:	f000 f8e1 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_TIM2_Init+0xc0>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f002 f9cd 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800068e:	f000 f8d1 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b00d      	add	sp, #52	@ 0x34
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	20000028 	.word	0x20000028
 80006a0:	0000ffff 	.word	0x0000ffff

080006a4 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	2318      	movs	r3, #24
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	0018      	movs	r0, r3
 80006b0:	2310      	movs	r3, #16
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f002 fa0d 	bl	8002ad4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	2310      	movs	r3, #16
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	0018      	movs	r0, r3
 80006c0:	2308      	movs	r3, #8
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f002 fa05 	bl	8002ad4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ca:	003b      	movs	r3, r7
 80006cc:	0018      	movs	r0, r3
 80006ce:	2310      	movs	r3, #16
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f002 f9fe 	bl	8002ad4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80006d8:	4b30      	ldr	r3, [pc, #192]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006da:	4a31      	ldr	r2, [pc, #196]	@ (80007a0 <MX_TIM21_Init+0xfc>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 8-1;
 80006de:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 20000-1;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006ec:	4a2d      	ldr	r2, [pc, #180]	@ (80007a4 <MX_TIM21_Init+0x100>)
 80006ee:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_TIM21_Init+0xf8>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fa42 	bl	8001b88 <HAL_TIM_Base_Init>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8000708:	f000 f894 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	2118      	movs	r1, #24
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	0152      	lsls	r2, r2, #5
 8000714:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000716:	187a      	adds	r2, r7, r1
 8000718:	4b20      	ldr	r3, [pc, #128]	@ (800079c <MX_TIM21_Init+0xf8>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fe6f 	bl	8002400 <HAL_TIM_ConfigClockSource>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 8000726:	f000 f885 	bl	8000834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_TIM21_Init+0xf8>)
 800072c:	0018      	movs	r0, r3
 800072e:	f001 faaf 	bl	8001c90 <HAL_TIM_PWM_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000736:	f000 f87d 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2110      	movs	r1, #16
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000748:	187a      	adds	r2, r7, r1
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_TIM21_Init+0xf8>)
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f002 f968 	bl	8002a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8000758:	f000 f86c 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	003b      	movs	r3, r7
 800075e:	2260      	movs	r2, #96	@ 0x60
 8000760:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 8000762:	003b      	movs	r3, r7
 8000764:	22f4      	movs	r2, #244	@ 0xf4
 8000766:	32ff      	adds	r2, #255	@ 0xff
 8000768:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076a:	003b      	movs	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000776:	0039      	movs	r1, r7
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_TIM21_Init+0xf8>)
 800077a:	2200      	movs	r2, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fd79 	bl	8002274 <HAL_TIM_PWM_ConfigChannel>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_TIM21_Init+0xe6>
  {
    Error_Handler();
 8000786:	f000 f855 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <MX_TIM21_Init+0xf8>)
 800078c:	0018      	movs	r0, r3
 800078e:	f000 f8cd 	bl	800092c <HAL_TIM_MspPostInit>

}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00a      	add	sp, #40	@ 0x28
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	20000068 	.word	0x20000068
 80007a0:	40010800 	.word	0x40010800
 80007a4:	00004e1f 	.word	0x00004e1f

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b089      	sub	sp, #36	@ 0x24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	240c      	movs	r4, #12
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2314      	movs	r3, #20
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 f98b 	bl	8002ad4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_GPIO_Init+0x84>)
 80007c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_GPIO_Init+0x84>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0x84>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0x84>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_GPIO_Init+0x84>)
 80007dc:	2102      	movs	r1, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_GPIO_Init+0x84>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e6:	2202      	movs	r2, #2
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_GPIO_Init+0x84>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_GPIO_Init+0x84>)
 80007f4:	2104      	movs	r1, #4
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_GPIO_Init+0x84>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	2204      	movs	r2, #4
 8000800:	4013      	ands	r3, r2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SW_BTN_ENCODE_Pin */
  GPIO_InitStruct.Pin = SW_BTN_ENCODE_Pin;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2201      	movs	r2, #1
 8000816:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_BTN_ENCODE_GPIO_Port, &GPIO_InitStruct);
 8000818:	193b      	adds	r3, r7, r4
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <MX_GPIO_Init+0x88>)
 800081c:	0019      	movs	r1, r3
 800081e:	0010      	movs	r0, r2
 8000820:	f000 fa8a 	bl	8000d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b009      	add	sp, #36	@ 0x24
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	50000800 	.word	0x50000800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <HAL_MspInit+0x24>)
 8000846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_MspInit+0x24>)
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <HAL_MspInit+0x24>)
 8000852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <HAL_MspInit+0x24>)
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	0549      	lsls	r1, r1, #21
 800085a:	430a      	orrs	r2, r1
 800085c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b089      	sub	sp, #36	@ 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	240c      	movs	r4, #12
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 f92a 	bl	8002ad4 <memset>
  if(htim_encoder->Instance==TIM2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	429a      	cmp	r2, r3
 800088a:	d130      	bne.n	80008ee <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <HAL_TIM_Encoder_MspInit+0x90>)
 800088e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000892:	2101      	movs	r1, #1
 8000894:	430a      	orrs	r2, r1
 8000896:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_TIM_Encoder_MspInit+0x90>)
 800089a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <HAL_TIM_Encoder_MspInit+0x90>)
 800089e:	2101      	movs	r1, #1
 80008a0:	430a      	orrs	r2, r1
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_TIM_Encoder_MspInit+0x90>)
 80008a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a8:	2201      	movs	r2, #1
 80008aa:	4013      	ands	r3, r2
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008b0:	0021      	movs	r1, r4
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2203      	movs	r2, #3
 80008b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2202      	movs	r2, #2
 80008bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	187a      	adds	r2, r7, r1
 80008d2:	23a0      	movs	r3, #160	@ 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fa2d 	bl	8000d38 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f9f6 	bl	8000cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e8:	200f      	movs	r0, #15
 80008ea:	f000 fa08 	bl	8000cfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b009      	add	sp, #36	@ 0x24
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <HAL_TIM_Base_MspInit+0x28>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d105      	bne.n	800091a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_TIM_Base_MspInit+0x2c>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_TIM_Base_MspInit+0x2c>)
 8000914:	2104      	movs	r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END TIM21_MspInit 1 */

  }

}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	40010800 	.word	0x40010800
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	240c      	movs	r4, #12
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	2314      	movs	r3, #20
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f002 f8c8 	bl	8002ad4 <memset>
  if(htim->Instance==TIM21)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a14      	ldr	r2, [pc, #80]	@ (800099c <HAL_TIM_MspPostInit+0x70>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d122      	bne.n	8000994 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM21_MspPostInit 0 */

  /* USER CODE END TIM21_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_TIM_MspPostInit+0x74>)
 8000950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_TIM_MspPostInit+0x74>)
 8000954:	2102      	movs	r1, #2
 8000956:	430a      	orrs	r2, r1
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_TIM_MspPostInit+0x74>)
 800095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095e:	2202      	movs	r2, #2
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PB13     ------> TIM21_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	0192      	lsls	r2, r2, #6
 800096c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	0021      	movs	r1, r4
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2202      	movs	r2, #2
 8000974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2206      	movs	r2, #6
 8000986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	187b      	adds	r3, r7, r1
 800098a:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <HAL_TIM_MspPostInit+0x78>)
 800098c:	0019      	movs	r1, r3
 800098e:	0010      	movs	r0, r2
 8000990:	f000 f9d2 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b009      	add	sp, #36	@ 0x24
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40010800 	.word	0x40010800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	50000400 	.word	0x50000400

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f894 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <TIM2_IRQHandler+0x14>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fb5d 	bl	80020a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	20000028 	.word	0x20000028

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f7ff fff6 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	@ (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	@ (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 f859 	bl	8002ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd39 	bl	80004a8 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   r0, =_estack
 8000a38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a44:	08002b70 	.word	0x08002b70
  ldr r2, =_sbss
 8000a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a4c:	200000b8 	.word	0x200000b8

08000a50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_COMP_IRQHandler>
	...

08000a54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_Init+0x3c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_Init+0x3c>)
 8000a66:	2140      	movs	r1, #64	@ 0x40
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 f811 	bl	8000a94 <HAL_InitTick>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7e:	f7ff fedf 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_InitTick+0x5c>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_InitTick+0x60>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	23fa      	movs	r3, #250	@ 0xfa
 8000aa8:	0098      	lsls	r0, r3, #2
 8000aaa:	f7ff fb2d 	bl	8000108 <__udivsi3>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0020      	movs	r0, r4
 8000ab4:	f7ff fb28 	bl	8000108 <__udivsi3>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f92f 	bl	8000d1e <HAL_SYSTICK_Config>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e00f      	b.n	8000ae8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d80b      	bhi.n	8000ae6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f8fc 	bl	8000cd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_InitTick+0x64>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b003      	add	sp, #12
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	18d2      	adds	r2, r2, r3
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200000b4 	.word	0x200000b4

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	200000b4 	.word	0x200000b4

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff fff0 	bl	8000b20 <HAL_GetTick>
 8000b40:	0003      	movs	r3, r0
 8000b42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	001a      	movs	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	189b      	adds	r3, r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	f7ff ffe0 	bl	8000b20 <HAL_GetTick>
 8000b60:	0002      	movs	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b004      	add	sp, #16
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	0002      	movs	r2, r0
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b8e:	d809      	bhi.n	8000ba4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	231f      	movs	r3, #31
 8000b98:	401a      	ands	r2, r3
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <__NVIC_EnableIRQ+0x30>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
  }
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bc4:	d828      	bhi.n	8000c18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c84 <__NVIC_SetPriority+0xd4>)
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	33c0      	adds	r3, #192	@ 0xc0
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	589b      	ldr	r3, [r3, r2]
 8000bd6:	1dfa      	adds	r2, r7, #7
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	0011      	movs	r1, r2
 8000bdc:	2203      	movs	r2, #3
 8000bde:	400a      	ands	r2, r1
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	21ff      	movs	r1, #255	@ 0xff
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	019b      	lsls	r3, r3, #6
 8000bf2:	22ff      	movs	r2, #255	@ 0xff
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	4003      	ands	r3, r0
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	481f      	ldr	r0, [pc, #124]	@ (8000c84 <__NVIC_SetPriority+0xd4>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	33c0      	adds	r3, #192	@ 0xc0
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c16:	e031      	b.n	8000c7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <__NVIC_SetPriority+0xd8>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	0019      	movs	r1, r3
 8000c20:	230f      	movs	r3, #15
 8000c22:	400b      	ands	r3, r1
 8000c24:	3b08      	subs	r3, #8
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3306      	adds	r3, #6
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	18d3      	adds	r3, r2, r3
 8000c2e:	3304      	adds	r3, #4
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	1dfa      	adds	r2, r7, #7
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	0011      	movs	r1, r2
 8000c38:	2203      	movs	r2, #3
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	21ff      	movs	r1, #255	@ 0xff
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	43d2      	mvns	r2, r2
 8000c46:	401a      	ands	r2, r3
 8000c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	22ff      	movs	r2, #255	@ 0xff
 8000c50:	401a      	ands	r2, r3
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0018      	movs	r0, r3
 8000c58:	2303      	movs	r3, #3
 8000c5a:	4003      	ands	r3, r0
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <__NVIC_SetPriority+0xd8>)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	001c      	movs	r4, r3
 8000c68:	230f      	movs	r3, #15
 8000c6a:	4023      	ands	r3, r4
 8000c6c:	3b08      	subs	r3, #8
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	430a      	orrs	r2, r1
 8000c72:	3306      	adds	r3, #6
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	18c3      	adds	r3, r0, r3
 8000c78:	3304      	adds	r3, #4
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b003      	add	sp, #12
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	045b      	lsls	r3, r3, #17
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d301      	bcc.n	8000ca4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e010      	b.n	8000cc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <SysTick_Config+0x44>)
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cac:	2301      	movs	r3, #1
 8000cae:	425b      	negs	r3, r3
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff ff7c 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <SysTick_Config+0x44>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SysTick_Config+0x44>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	210f      	movs	r1, #15
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	1c02      	adds	r2, r0, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	0002      	movs	r2, r0
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff33 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ffaf 	bl	8000c8c <SysTick_Config>
 8000d2e:	0003      	movs	r3, r0
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d4e:	e14f      	b.n	8000ff0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d100      	bne.n	8000d68 <HAL_GPIO_Init+0x30>
 8000d66:	e140      	b.n	8000fea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	2201      	movs	r2, #1
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	58d3      	ldr	r3, [r2, r3]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2107      	movs	r1, #7
 8000e56:	400b      	ands	r3, r1
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	6939      	ldr	r1, [r7, #16]
 8000e70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	401a      	ands	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	23c0      	movs	r3, #192	@ 0xc0
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d100      	bne.n	8000eb4 <HAL_GPIO_Init+0x17c>
 8000eb2:	e09a      	b.n	8000fea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b54      	ldr	r3, [pc, #336]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eb8:	4b53      	ldr	r3, [pc, #332]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec0:	4a52      	ldr	r2, [pc, #328]	@ (800100c <HAL_GPIO_Init+0x2d4>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	589b      	ldr	r3, [r3, r2]
 8000ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	0013      	movs	r3, r2
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	23a0      	movs	r3, #160	@ 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x1ea>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a47      	ldr	r2, [pc, #284]	@ (8001010 <HAL_GPIO_Init+0x2d8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x1e6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a46      	ldr	r2, [pc, #280]	@ (8001014 <HAL_GPIO_Init+0x2dc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x1e2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a45      	ldr	r2, [pc, #276]	@ (8001018 <HAL_GPIO_Init+0x2e0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x1de>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a44      	ldr	r2, [pc, #272]	@ (800101c <HAL_GPIO_Init+0x2e4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x1da>
 8000f0e:	2305      	movs	r3, #5
 8000f10:	e008      	b.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000f22:	2300      	movs	r3, #0
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	2103      	movs	r1, #3
 8000f28:	400a      	ands	r2, r1
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	4935      	ldr	r1, [pc, #212]	@ (800100c <HAL_GPIO_Init+0x2d4>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f42:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	035b      	lsls	r3, r3, #13
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f66:	4b2e      	ldr	r3, [pc, #184]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43da      	mvns	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	039b      	lsls	r3, r3, #14
 8000f84:	4013      	ands	r3, r2
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	029b      	lsls	r3, r3, #10
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_GPIO_Init+0x2e8>)
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	40da      	lsrs	r2, r3
 8000ff8:	1e13      	subs	r3, r2, #0
 8000ffa:	d000      	beq.n	8000ffe <HAL_GPIO_Init+0x2c6>
 8000ffc:	e6a8      	b.n	8000d50 <HAL_GPIO_Init+0x18>
  }
}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b006      	add	sp, #24
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	50000400 	.word	0x50000400
 8001014:	50000800 	.word	0x50000800
 8001018:	50000c00 	.word	0x50000c00
 800101c:	50001c00 	.word	0x50001c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	f000 fbaf 	bl	8001796 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001038:	4bcf      	ldr	r3, [pc, #828]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	220c      	movs	r2, #12
 800103e:	4013      	ands	r3, r2
 8001040:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001042:	4bcd      	ldr	r3, [pc, #820]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4013      	ands	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	d100      	bne.n	800105a <HAL_RCC_OscConfig+0x36>
 8001058:	e07e      	b.n	8001158 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	2b08      	cmp	r3, #8
 800105e:	d007      	beq.n	8001070 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d112      	bne.n	800108c <HAL_RCC_OscConfig+0x68>
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	429a      	cmp	r2, r3
 800106e:	d10d      	bne.n	800108c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	4bc1      	ldr	r3, [pc, #772]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d100      	bne.n	800107e <HAL_RCC_OscConfig+0x5a>
 800107c:	e06b      	b.n	8001156 <HAL_RCC_OscConfig+0x132>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d167      	bne.n	8001156 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 fb85 	bl	8001796 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	429a      	cmp	r2, r3
 8001096:	d107      	bne.n	80010a8 <HAL_RCC_OscConfig+0x84>
 8001098:	4bb7      	ldr	r3, [pc, #732]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4bb6      	ldr	r3, [pc, #728]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	0249      	lsls	r1, r1, #9
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e027      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	23a0      	movs	r3, #160	@ 0xa0
 80010ae:	02db      	lsls	r3, r3, #11
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d10e      	bne.n	80010d2 <HAL_RCC_OscConfig+0xae>
 80010b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4baf      	ldr	r3, [pc, #700]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	02c9      	lsls	r1, r1, #11
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	4bad      	ldr	r3, [pc, #692]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4bac      	ldr	r3, [pc, #688]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	0249      	lsls	r1, r1, #9
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e012      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 80010d2:	4ba9      	ldr	r3, [pc, #676]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4ba8      	ldr	r3, [pc, #672]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010d8:	49a8      	ldr	r1, [pc, #672]	@ (800137c <HAL_RCC_OscConfig+0x358>)
 80010da:	400a      	ands	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4ba6      	ldr	r3, [pc, #664]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	4013      	ands	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4ba2      	ldr	r3, [pc, #648]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80010f2:	49a3      	ldr	r1, [pc, #652]	@ (8001380 <HAL_RCC_OscConfig+0x35c>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d015      	beq.n	800112c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fd0e 	bl	8000b20 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001108:	e009      	b.n	800111e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fd09 	bl	8000b20 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	@ 0x64
 8001116:	d902      	bls.n	800111e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	f000 fb3c 	bl	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800111e:	4b96      	ldr	r3, [pc, #600]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d0ef      	beq.n	800110a <HAL_RCC_OscConfig+0xe6>
 800112a:	e015      	b.n	8001158 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fcf8 	bl	8000b20 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fcf3 	bl	8000b20 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	@ 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e326      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001148:	4b8b      	ldr	r3, [pc, #556]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x112>
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001156:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2202      	movs	r2, #2
 800115e:	4013      	ands	r3, r2
 8001160:	d100      	bne.n	8001164 <HAL_RCC_OscConfig+0x140>
 8001162:	e08b      	b.n	800127c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d13e      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1d0>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d13b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800117c:	4b7e      	ldr	r3, [pc, #504]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2204      	movs	r2, #4
 8001182:	4013      	ands	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_RCC_OscConfig+0x16c>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e302      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b79      	ldr	r3, [pc, #484]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a7b      	ldr	r2, [pc, #492]	@ (8001384 <HAL_RCC_OscConfig+0x360>)
 8001196:	4013      	ands	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	021a      	lsls	r2, r3, #8
 80011a0:	4b75      	ldr	r3, [pc, #468]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011a6:	4b74      	ldr	r3, [pc, #464]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2209      	movs	r2, #9
 80011ac:	4393      	bics	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	4b71      	ldr	r3, [pc, #452]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011b8:	f000 fc40 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80011bc:	0001      	movs	r1, r0
 80011be:	4b6e      	ldr	r3, [pc, #440]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	220f      	movs	r2, #15
 80011c6:	4013      	ands	r3, r2
 80011c8:	4a6f      	ldr	r2, [pc, #444]	@ (8001388 <HAL_RCC_OscConfig+0x364>)
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	000a      	movs	r2, r1
 80011ce:	40da      	lsrs	r2, r3
 80011d0:	4b6e      	ldr	r3, [pc, #440]	@ (800138c <HAL_RCC_OscConfig+0x368>)
 80011d2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001390 <HAL_RCC_OscConfig+0x36c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2513      	movs	r5, #19
 80011da:	197c      	adds	r4, r7, r5
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fc59 	bl	8000a94 <HAL_InitTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011e6:	197b      	adds	r3, r7, r5
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d046      	beq.n	800127c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e2d0      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d027      	beq.n	800124a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2209      	movs	r2, #9
 8001200:	4393      	bics	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	4b5c      	ldr	r3, [pc, #368]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fc88 	bl	8000b20 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fc83 	bl	8000b20 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e2b6      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001228:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d0f1      	beq.n	8001216 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b51      	ldr	r3, [pc, #324]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a53      	ldr	r2, [pc, #332]	@ (8001384 <HAL_RCC_OscConfig+0x360>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	021a      	lsls	r2, r3, #8
 8001242:	4b4d      	ldr	r3, [pc, #308]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	e018      	b.n	800127c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001250:	2101      	movs	r1, #1
 8001252:	438a      	bics	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fc63 	bl	8000b20 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc5e 	bl	8000b20 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e291      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001272:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2204      	movs	r2, #4
 8001278:	4013      	ands	r3, r2
 800127a:	d1f1      	bne.n	8001260 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2210      	movs	r2, #16
 8001282:	4013      	ands	r3, r2
 8001284:	d100      	bne.n	8001288 <HAL_RCC_OscConfig+0x264>
 8001286:	e0a1      	b.n	80013cc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d140      	bne.n	8001310 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128e:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	@ 0x80
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x282>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e277      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001394 <HAL_RCC_OscConfig+0x370>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	0a19      	lsrs	r1, r3, #8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	061a      	lsls	r2, r3, #24
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	0b5b      	lsrs	r3, r3, #13
 80012d4:	3301      	adds	r3, #1
 80012d6:	2280      	movs	r2, #128	@ 0x80
 80012d8:	0212      	lsls	r2, r2, #8
 80012da:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012dc:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	210f      	movs	r1, #15
 80012e4:	400b      	ands	r3, r1
 80012e6:	4928      	ldr	r1, [pc, #160]	@ (8001388 <HAL_RCC_OscConfig+0x364>)
 80012e8:	5ccb      	ldrb	r3, [r1, r3]
 80012ea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <HAL_RCC_OscConfig+0x368>)
 80012ee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <HAL_RCC_OscConfig+0x36c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2513      	movs	r5, #19
 80012f6:	197c      	adds	r4, r7, r5
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fbcb 	bl	8000a94 <HAL_InitTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001302:	197b      	adds	r3, r7, r5
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d060      	beq.n	80013cc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800130a:	197b      	adds	r3, r7, r5
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	e242      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03f      	beq.n	8001398 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	0049      	lsls	r1, r1, #1
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fbfb 	bl	8000b20 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001330:	f7ff fbf6 	bl	8000b20 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e229      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	@ 0x80
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4013      	ands	r3, r2
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <HAL_RCC_OscConfig+0x370>)
 8001354:	4013      	ands	r3, r2
 8001356:	0019      	movs	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	0a19      	lsrs	r1, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	061a      	lsls	r2, r3, #24
 8001370:	4b01      	ldr	r3, [pc, #4]	@ (8001378 <HAL_RCC_OscConfig+0x354>)
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	e029      	b.n	80013cc <HAL_RCC_OscConfig+0x3a8>
 8001378:	40021000 	.word	0x40021000
 800137c:	fffeffff 	.word	0xfffeffff
 8001380:	fffbffff 	.word	0xfffbffff
 8001384:	ffffe0ff 	.word	0xffffe0ff
 8001388:	08002b44 	.word	0x08002b44
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004
 8001394:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001398:	4bbd      	ldr	r3, [pc, #756]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4bbc      	ldr	r3, [pc, #752]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800139e:	49bd      	ldr	r1, [pc, #756]	@ (8001694 <HAL_RCC_OscConfig+0x670>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fbbc 	bl	8000b20 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ae:	f7ff fbb7 	bl	8000b20 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1ea      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013c0:	4bb3      	ldr	r3, [pc, #716]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2208      	movs	r2, #8
 80013d2:	4013      	ands	r3, r2
 80013d4:	d036      	beq.n	8001444 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d019      	beq.n	8001412 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013de:	4bac      	ldr	r3, [pc, #688]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013e2:	4bab      	ldr	r3, [pc, #684]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fb99 	bl	8000b20 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb94 	bl	8000b20 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001406:	4ba2      	ldr	r3, [pc, #648]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d0f1      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3d0>
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001412:	4b9f      	ldr	r3, [pc, #636]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001414:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001416:	4b9e      	ldr	r3, [pc, #632]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001418:	2101      	movs	r1, #1
 800141a:	438a      	bics	r2, r1
 800141c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fb7f 	bl	8000b20 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fb7a 	bl	8000b20 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1ad      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800143a:	4b95      	ldr	r3, [pc, #596]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800143c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	d1f1      	bne.n	8001428 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x42c>
 800144e:	e0ae      	b.n	80015ae <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001450:	2027      	movs	r0, #39	@ 0x27
 8001452:	183b      	adds	r3, r7, r0
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b8d      	ldr	r3, [pc, #564]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800145a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	4013      	ands	r3, r2
 8001462:	d109      	bne.n	8001478 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b8a      	ldr	r3, [pc, #552]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001468:	4b89      	ldr	r3, [pc, #548]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800146a:	2180      	movs	r1, #128	@ 0x80
 800146c:	0549      	lsls	r1, r1, #21
 800146e:	430a      	orrs	r2, r1
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001472:	183b      	adds	r3, r7, r0
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b87      	ldr	r3, [pc, #540]	@ (8001698 <HAL_RCC_OscConfig+0x674>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4013      	ands	r3, r2
 8001482:	d11a      	bne.n	80014ba <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001484:	4b84      	ldr	r3, [pc, #528]	@ (8001698 <HAL_RCC_OscConfig+0x674>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b83      	ldr	r3, [pc, #524]	@ (8001698 <HAL_RCC_OscConfig+0x674>)
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	0049      	lsls	r1, r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb45 	bl	8000b20 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149c:	f7ff fb40 	bl	8000b20 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e173      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001698 <HAL_RCC_OscConfig+0x674>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4b2>
 80014c6:	4b72      	ldr	r3, [pc, #456]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ca:	4b71      	ldr	r3, [pc, #452]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	0049      	lsls	r1, r1, #1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80014d4:	e031      	b.n	800153a <HAL_RCC_OscConfig+0x516>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4d4>
 80014de:	4b6c      	ldr	r3, [pc, #432]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014e4:	496b      	ldr	r1, [pc, #428]	@ (8001694 <HAL_RCC_OscConfig+0x670>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80014ea:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ee:	4b68      	ldr	r3, [pc, #416]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014f0:	496a      	ldr	r1, [pc, #424]	@ (800169c <HAL_RCC_OscConfig+0x678>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80014f6:	e020      	b.n	800153a <HAL_RCC_OscConfig+0x516>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	23a0      	movs	r3, #160	@ 0xa0
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	429a      	cmp	r2, r3
 8001502:	d10e      	bne.n	8001522 <HAL_RCC_OscConfig+0x4fe>
 8001504:	4b62      	ldr	r3, [pc, #392]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001508:	4b61      	ldr	r3, [pc, #388]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800150a:	2180      	movs	r1, #128	@ 0x80
 800150c:	00c9      	lsls	r1, r1, #3
 800150e:	430a      	orrs	r2, r1
 8001510:	651a      	str	r2, [r3, #80]	@ 0x50
 8001512:	4b5f      	ldr	r3, [pc, #380]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001516:	4b5e      	ldr	r3, [pc, #376]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0049      	lsls	r1, r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x516>
 8001522:	4b5b      	ldr	r3, [pc, #364]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001524:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001526:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001528:	495a      	ldr	r1, [pc, #360]	@ (8001694 <HAL_RCC_OscConfig+0x670>)
 800152a:	400a      	ands	r2, r1
 800152c:	651a      	str	r2, [r3, #80]	@ 0x50
 800152e:	4b58      	ldr	r3, [pc, #352]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001530:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001532:	4b57      	ldr	r3, [pc, #348]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001534:	4959      	ldr	r1, [pc, #356]	@ (800169c <HAL_RCC_OscConfig+0x678>)
 8001536:	400a      	ands	r2, r1
 8001538:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff faed 	bl	8000b20 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154a:	e009      	b.n	8001560 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff fae8 	bl	8000b20 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e11a      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001560:	4b4b      	ldr	r3, [pc, #300]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001562:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d0ef      	beq.n	800154c <HAL_RCC_OscConfig+0x528>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fad7 	bl	8000b20 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001576:	e009      	b.n	800158c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fad2 	bl	8000b20 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a47      	ldr	r2, [pc, #284]	@ (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e104      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800158c:	4b40      	ldr	r3, [pc, #256]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800158e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d1ef      	bne.n	8001578 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001598:	2327      	movs	r3, #39	@ 0x27
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015a8:	493e      	ldr	r1, [pc, #248]	@ (80016a4 <HAL_RCC_OscConfig+0x680>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	4013      	ands	r3, r2
 80015b6:	d049      	beq.n	800164c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d026      	beq.n	800160e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015c0:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80015d8:	4b33      	ldr	r3, [pc, #204]	@ (80016a8 <HAL_RCC_OscConfig+0x684>)
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_RCC_OscConfig+0x684>)
 80015de:	2180      	movs	r1, #128	@ 0x80
 80015e0:	0189      	lsls	r1, r1, #6
 80015e2:	430a      	orrs	r2, r1
 80015e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fa9b 	bl	8000b20 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f0:	f7ff fa96 	bl	8000b20 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0c9      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001602:	4b23      	ldr	r3, [pc, #140]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d0f1      	beq.n	80015f0 <HAL_RCC_OscConfig+0x5cc>
 800160c:	e01e      	b.n	800164c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001614:	2101      	movs	r1, #1
 8001616:	438a      	bics	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <HAL_RCC_OscConfig+0x684>)
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <HAL_RCC_OscConfig+0x684>)
 8001620:	4922      	ldr	r1, [pc, #136]	@ (80016ac <HAL_RCC_OscConfig+0x688>)
 8001622:	400a      	ands	r2, r1
 8001624:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa7b 	bl	8000b20 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001630:	f7ff fa76 	bl	8000b20 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0a9      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d1f1      	bne.n	8001630 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x632>
 8001654:	e09e      	b.n	8001794 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d100      	bne.n	800165e <HAL_RCC_OscConfig+0x63a>
 800165c:	e077      	b.n	800174e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	2b02      	cmp	r3, #2
 8001664:	d158      	bne.n	8001718 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_RCC_OscConfig+0x66c>)
 800166c:	4910      	ldr	r1, [pc, #64]	@ (80016b0 <HAL_RCC_OscConfig+0x68c>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa55 	bl	8000b20 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167a:	e01b      	b.n	80016b4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa50 	bl	8000b20 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d914      	bls.n	80016b4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e083      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	40021000 	.word	0x40021000
 8001694:	fffffeff 	.word	0xfffffeff
 8001698:	40007000 	.word	0x40007000
 800169c:	fffffbff 	.word	0xfffffbff
 80016a0:	00001388 	.word	0x00001388
 80016a4:	efffffff 	.word	0xefffffff
 80016a8:	40010000 	.word	0x40010000
 80016ac:	ffffdfff 	.word	0xffffdfff
 80016b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016b4:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	049b      	lsls	r3, r3, #18
 80016bc:	4013      	ands	r3, r2
 80016be:	d1dd      	bne.n	800167c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c0:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a37      	ldr	r2, [pc, #220]	@ (80017a4 <HAL_RCC_OscConfig+0x780>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	431a      	orrs	r2, r3
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016e6:	2180      	movs	r1, #128	@ 0x80
 80016e8:	0449      	lsls	r1, r1, #17
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa17 	bl	8000b20 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fa12 	bl	8000b20 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800170a:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	049b      	lsls	r3, r3, #18
 8001712:	4013      	ands	r3, r2
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x6d4>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800171e:	4922      	ldr	r1, [pc, #136]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff f9fc 	bl	8000b20 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f9f7 	bl	8000b20 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e02a      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	049b      	lsls	r3, r3, #18
 8001748:	4013      	ands	r3, r2
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x70a>
 800174c:	e022      	b.n	8001794 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e01d      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176c:	429a      	cmp	r2, r3
 800176e:	d10f      	bne.n	8001790 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	23f0      	movs	r3, #240	@ 0xf0
 8001774:	039b      	lsls	r3, r3, #14
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	23c0      	movs	r3, #192	@ 0xc0
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b00a      	add	sp, #40	@ 0x28
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	40021000 	.word	0x40021000
 80017a4:	ff02ffff 	.word	0xff02ffff
 80017a8:	feffffff 	.word	0xfeffffff

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e128      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b96      	ldr	r3, [pc, #600]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d91e      	bls.n	800180c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b93      	ldr	r3, [pc, #588]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	4b90      	ldr	r3, [pc, #576]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e0:	f7ff f99e 	bl	8000b20 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f999 	bl	8000b20 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a8a      	ldr	r2, [pc, #552]	@ (8001a20 <HAL_RCC_ClockConfig+0x274>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e109      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b87      	ldr	r3, [pc, #540]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d1ee      	bne.n	80017ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001816:	4b83      	ldr	r3, [pc, #524]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	22f0      	movs	r2, #240	@ 0xf0
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	4b7f      	ldr	r3, [pc, #508]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <HAL_RCC_ClockConfig+0x8a>
 8001834:	e089      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800183e:	4b79      	ldr	r3, [pc, #484]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4013      	ands	r3, r2
 8001848:	d120      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0e1      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001856:	4b73      	ldr	r3, [pc, #460]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	049b      	lsls	r3, r3, #18
 800185e:	4013      	ands	r3, r2
 8001860:	d114      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0d5      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800186e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2204      	movs	r2, #4
 8001874:	4013      	ands	r3, r2
 8001876:	d109      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0ca      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800187c:	4b69      	ldr	r3, [pc, #420]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0c2      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188c:	4b65      	ldr	r3, [pc, #404]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2203      	movs	r2, #3
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4b62      	ldr	r3, [pc, #392]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff f93e 	bl	8000b20 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f935 	bl	8000b20 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <HAL_RCC_ClockConfig+0x274>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0a5      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c6:	4b57      	ldr	r3, [pc, #348]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	220c      	movs	r2, #12
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x106>
 80018d2:	e03a      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d111      	bne.n	8001900 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018dc:	e009      	b.n	80018f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018de:	f7ff f91f 	bl	8000b20 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a20 <HAL_RCC_ClockConfig+0x274>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e08f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	220c      	movs	r2, #12
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d1ef      	bne.n	80018de <HAL_RCC_ClockConfig+0x132>
 80018fe:	e024      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11b      	bne.n	8001940 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001908:	e009      	b.n	800191e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190a:	f7ff f909 	bl	8000b20 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4a42      	ldr	r2, [pc, #264]	@ (8001a20 <HAL_RCC_ClockConfig+0x274>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e079      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800191e:	4b41      	ldr	r3, [pc, #260]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	220c      	movs	r2, #12
 8001924:	4013      	ands	r3, r2
 8001926:	2b04      	cmp	r3, #4
 8001928:	d1ef      	bne.n	800190a <HAL_RCC_ClockConfig+0x15e>
 800192a:	e00e      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7ff f8f8 	bl	8000b20 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a3a      	ldr	r2, [pc, #232]	@ (8001a20 <HAL_RCC_ClockConfig+0x274>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e068      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001940:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	220c      	movs	r2, #12
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d21e      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4393      	bics	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800196a:	f7ff f8d9 	bl	8000b20 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	e009      	b.n	8001988 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f8d4 	bl	8000b20 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a28      	ldr	r2, [pc, #160]	@ (8001a20 <HAL_RCC_ClockConfig+0x274>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e044      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_ClockConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a20      	ldr	r2, [pc, #128]	@ (8001a28 <HAL_RCC_ClockConfig+0x27c>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2208      	movs	r2, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	d00a      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019be:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_RCC_ClockConfig+0x280>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	00da      	lsls	r2, r3, #3
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d4:	f000 f832 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019d8:	0001      	movs	r1, r0
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	220f      	movs	r2, #15
 80019e2:	4013      	ands	r3, r2
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <HAL_RCC_ClockConfig+0x284>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	000a      	movs	r2, r1
 80019ea:	40da      	lsrs	r2, r3
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_RCC_ClockConfig+0x288>)
 80019ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_RCC_ClockConfig+0x28c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	250b      	movs	r5, #11
 80019f6:	197c      	adds	r4, r7, r5
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff f84b 	bl	8000a94 <HAL_InitTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a02:	197b      	adds	r3, r7, r5
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	00001388 	.word	0x00001388
 8001a24:	40021000 	.word	0x40021000
 8001a28:	fffff8ff 	.word	0xfffff8ff
 8001a2c:	ffffc7ff 	.word	0xffffc7ff
 8001a30:	08002b44 	.word	0x08002b44
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b08e      	sub	sp, #56	@ 0x38
 8001a40:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a42:	4b4c      	ldr	r3, [pc, #304]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d014      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a52:	d900      	bls.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a54:	e07b      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x112>
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x24>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5e:	e076      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a60:	4b44      	ldr	r3, [pc, #272]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	4013      	ands	r3, r2
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a6c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a6e:	e07c      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a70:	4b42      	ldr	r3, [pc, #264]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x140>)
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a74:	e079      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a7a:	e076      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7e:	0c9a      	lsrs	r2, r3, #18
 8001a80:	230f      	movs	r3, #15
 8001a82:	401a      	ands	r2, r3
 8001a84:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8c:	0d9a      	lsrs	r2, r3, #22
 8001a8e:	2303      	movs	r3, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	3301      	adds	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a96:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d01a      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	4a35      	ldr	r2, [pc, #212]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aac:	2300      	movs	r3, #0
 8001aae:	69b8      	ldr	r0, [r7, #24]
 8001ab0:	69f9      	ldr	r1, [r7, #28]
 8001ab2:	f7fe fbd5 	bl	8000260 <__aeabi_lmul>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	000b      	movs	r3, r1
 8001aba:	0010      	movs	r0, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f7fe fba9 	bl	8000220 <__aeabi_uldivmod>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ad6:	e037      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ad8:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d01a      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4a23      	ldr	r2, [pc, #140]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001aec:	2300      	movs	r3, #0
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	f7fe fbb5 	bl	8000260 <__aeabi_lmul>
 8001af6:	0002      	movs	r2, r0
 8001af8:	000b      	movs	r3, r1
 8001afa:	0010      	movs	r0, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f7fe fb89 	bl	8000220 <__aeabi_uldivmod>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	000b      	movs	r3, r1
 8001b12:	0013      	movs	r3, r2
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b16:	e017      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f7fe fb9c 	bl	8000260 <__aeabi_lmul>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	000b      	movs	r3, r1
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	001c      	movs	r4, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	001d      	movs	r5, r3
 8001b38:	0022      	movs	r2, r4
 8001b3a:	002b      	movs	r3, r5
 8001b3c:	f7fe fb70 	bl	8000220 <__aeabi_uldivmod>
 8001b40:	0002      	movs	r2, r0
 8001b42:	000b      	movs	r3, r1
 8001b44:	0013      	movs	r3, r2
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b4c:	e00d      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	0212      	lsls	r2, r2, #8
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b68:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b00e      	add	sp, #56	@ 0x38
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	003d0900 	.word	0x003d0900
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	08002b54 	.word	0x08002b54

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e032      	b.n	8001c00 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2239      	movs	r2, #57	@ 0x39
 8001b9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2238      	movs	r2, #56	@ 0x38
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7fe fea3 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2239      	movs	r2, #57	@ 0x39
 8001bba:	2102      	movs	r1, #2
 8001bbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	0010      	movs	r0, r2
 8001bca:	f000 fd15 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	223e      	movs	r2, #62	@ 0x3e
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	223a      	movs	r2, #58	@ 0x3a
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223b      	movs	r2, #59	@ 0x3b
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223c      	movs	r2, #60	@ 0x3c
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	223d      	movs	r2, #61	@ 0x3d
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2239      	movs	r2, #57	@ 0x39
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2239      	movs	r2, #57	@ 0x39
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d001      	beq.n	8001c20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e02e      	b.n	8001c7e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2239      	movs	r2, #57	@ 0x39
 8001c24:	2102      	movs	r1, #2
 8001c26:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d009      	beq.n	8001c48 <HAL_TIM_Base_Start+0x40>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <HAL_TIM_Base_Start+0x80>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_TIM_Base_Start+0x40>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <HAL_TIM_Base_Start+0x84>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d111      	bne.n	8001c6c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d010      	beq.n	8001c7c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6a:	e007      	b.n	8001c7c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b004      	add	sp, #16
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	40011400 	.word	0x40011400

08001c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e032      	b.n	8001d08 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2239      	movs	r2, #57	@ 0x39
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2238      	movs	r2, #56	@ 0x38
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 f829 	bl	8001d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2239      	movs	r2, #57	@ 0x39
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f000 fc91 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223e      	movs	r2, #62	@ 0x3e
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223a      	movs	r2, #58	@ 0x3a
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223b      	movs	r2, #59	@ 0x3b
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223c      	movs	r2, #60	@ 0x3c
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	223d      	movs	r2, #61	@ 0x3d
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2239      	movs	r2, #57	@ 0x39
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d18:	46c0      	nop			@ (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d108      	bne.n	8001d42 <HAL_TIM_PWM_Start+0x22>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	223a      	movs	r2, #58	@ 0x3a
 8001d34:	5c9b      	ldrb	r3, [r3, r2]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	4193      	sbcs	r3, r2
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	e01f      	b.n	8001d82 <HAL_TIM_PWM_Start+0x62>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d108      	bne.n	8001d5a <HAL_TIM_PWM_Start+0x3a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	223b      	movs	r2, #59	@ 0x3b
 8001d4c:	5c9b      	ldrb	r3, [r3, r2]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	4193      	sbcs	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e013      	b.n	8001d82 <HAL_TIM_PWM_Start+0x62>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d108      	bne.n	8001d72 <HAL_TIM_PWM_Start+0x52>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	223c      	movs	r2, #60	@ 0x3c
 8001d64:	5c9b      	ldrb	r3, [r3, r2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	4193      	sbcs	r3, r2
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	e007      	b.n	8001d82 <HAL_TIM_PWM_Start+0x62>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	223d      	movs	r2, #61	@ 0x3d
 8001d76:	5c9b      	ldrb	r3, [r3, r2]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	4193      	sbcs	r3, r2
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e04d      	b.n	8001e26 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d104      	bne.n	8001d9a <HAL_TIM_PWM_Start+0x7a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223a      	movs	r2, #58	@ 0x3a
 8001d94:	2102      	movs	r1, #2
 8001d96:	5499      	strb	r1, [r3, r2]
 8001d98:	e013      	b.n	8001dc2 <HAL_TIM_PWM_Start+0xa2>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d104      	bne.n	8001daa <HAL_TIM_PWM_Start+0x8a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	223b      	movs	r2, #59	@ 0x3b
 8001da4:	2102      	movs	r1, #2
 8001da6:	5499      	strb	r1, [r3, r2]
 8001da8:	e00b      	b.n	8001dc2 <HAL_TIM_PWM_Start+0xa2>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d104      	bne.n	8001dba <HAL_TIM_PWM_Start+0x9a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	223c      	movs	r2, #60	@ 0x3c
 8001db4:	2102      	movs	r1, #2
 8001db6:	5499      	strb	r1, [r3, r2]
 8001db8:	e003      	b.n	8001dc2 <HAL_TIM_PWM_Start+0xa2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	223d      	movs	r2, #61	@ 0x3d
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fe06 	bl	80029dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	05db      	lsls	r3, r3, #23
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d009      	beq.n	8001df0 <HAL_TIM_PWM_Start+0xd0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a13      	ldr	r2, [pc, #76]	@ (8001e30 <HAL_TIM_PWM_Start+0x110>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_TIM_PWM_Start+0xd0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <HAL_TIM_PWM_Start+0x114>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d111      	bne.n	8001e14 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2207      	movs	r2, #7
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d010      	beq.n	8001e24 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e12:	e007      	b.n	8001e24 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40011400 	.word	0x40011400

08001e38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e088      	b.n	8001f5e <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2239      	movs	r2, #57	@ 0x39
 8001e50:	5c9b      	ldrb	r3, [r3, r2]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2238      	movs	r2, #56	@ 0x38
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7fe fd00 	bl	8000868 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2239      	movs	r2, #57	@ 0x39
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	493b      	ldr	r1, [pc, #236]	@ (8001f68 <HAL_TIM_Encoder_Init+0x130>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	0019      	movs	r1, r3
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f000 fbb4 	bl	80025f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f6c <HAL_TIM_Encoder_Init+0x134>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <HAL_TIM_Encoder_Init+0x138>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	@ (8001f74 <HAL_TIM_Encoder_Init+0x13c>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	011a      	lsls	r2, r3, #4
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	031b      	lsls	r3, r3, #12
 8001efa:	4313      	orrs	r3, r2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2222      	movs	r2, #34	@ 0x22
 8001f06:	4393      	bics	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2288      	movs	r2, #136	@ 0x88
 8001f0e:	4393      	bics	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	223e      	movs	r2, #62	@ 0x3e
 8001f40:	2101      	movs	r1, #1
 8001f42:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	223a      	movs	r2, #58	@ 0x3a
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	223b      	movs	r2, #59	@ 0x3b
 8001f50:	2101      	movs	r1, #1
 8001f52:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2239      	movs	r2, #57	@ 0x39
 8001f58:	2101      	movs	r1, #1
 8001f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b006      	add	sp, #24
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	ffffbff8 	.word	0xffffbff8
 8001f6c:	fffffcfc 	.word	0xfffffcfc
 8001f70:	fffff3f3 	.word	0xfffff3f3
 8001f74:	ffff0f0f 	.word	0xffff0f0f

08001f78 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f82:	200f      	movs	r0, #15
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	213a      	movs	r1, #58	@ 0x3a
 8001f8a:	5c52      	ldrb	r2, [r2, r1]
 8001f8c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f8e:	230e      	movs	r3, #14
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	213b      	movs	r1, #59	@ 0x3b
 8001f96:	5c52      	ldrb	r2, [r2, r1]
 8001f98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_TIM_Encoder_Start_IT+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d001      	beq.n	8001fac <HAL_TIM_Encoder_Start_IT+0x34>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e076      	b.n	800209a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	223a      	movs	r2, #58	@ 0x3a
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	5499      	strb	r1, [r3, r2]
 8001fb4:	e022      	b.n	8001ffc <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d10b      	bne.n	8001fd4 <HAL_TIM_Encoder_Start_IT+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fbc:	230e      	movs	r3, #14
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_TIM_Encoder_Start_IT+0x52>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e067      	b.n	800209a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223b      	movs	r2, #59	@ 0x3b
 8001fce:	2102      	movs	r1, #2
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	e013      	b.n	8001ffc <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d104      	bne.n	8001fe8 <HAL_TIM_Encoder_Start_IT+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fde:	230e      	movs	r3, #14
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Encoder_Start_IT+0x74>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e056      	b.n	800209a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	223a      	movs	r2, #58	@ 0x3a
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	223b      	movs	r2, #59	@ 0x3b
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_Encoder_Start_IT+0x92>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d010      	beq.n	800202a <HAL_TIM_Encoder_Start_IT+0xb2>
 8002008:	e01f      	b.n	800204a <HAL_TIM_Encoder_Start_IT+0xd2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	2100      	movs	r1, #0
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fce2 	bl	80029dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2102      	movs	r1, #2
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]
      break;
 8002028:	e02e      	b.n	8002088 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	2104      	movs	r1, #4
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fcd2 	bl	80029dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2104      	movs	r1, #4
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
      break;
 8002048:	e01e      	b.n	8002088 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	2100      	movs	r1, #0
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fcc2 	bl	80029dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	2104      	movs	r1, #4
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fcbb 	bl	80029dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2102      	movs	r1, #2
 8002072:	430a      	orrs	r2, r1
 8002074:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2104      	movs	r1, #4
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
      break;
 8002086:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b004      	add	sp, #16
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2202      	movs	r2, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d124      	bne.n	8002102 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d11d      	bne.n	8002102 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2203      	movs	r2, #3
 80020cc:	4252      	negs	r2, r2
 80020ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2203      	movs	r2, #3
 80020de:	4013      	ands	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fa6f 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80020ea:	e007      	b.n	80020fc <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 fa62 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 fa6e 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	2b04      	cmp	r3, #4
 800210e:	d125      	bne.n	800215c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	2b04      	cmp	r3, #4
 800211c:	d11e      	bne.n	800215c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2205      	movs	r2, #5
 8002124:	4252      	negs	r2, r2
 8002126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	23c0      	movs	r3, #192	@ 0xc0
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fa42 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002144:	e007      	b.n	8002156 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fa35 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 fa41 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2208      	movs	r2, #8
 8002164:	4013      	ands	r3, r2
 8002166:	2b08      	cmp	r3, #8
 8002168:	d124      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2208      	movs	r2, #8
 8002172:	4013      	ands	r3, r2
 8002174:	2b08      	cmp	r3, #8
 8002176:	d11d      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2209      	movs	r2, #9
 800217e:	4252      	negs	r2, r2
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 fa16 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 800219c:	e007      	b.n	80021ae <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 fa09 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 fa15 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2210      	movs	r2, #16
 80021bc:	4013      	ands	r3, r2
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d125      	bne.n	800220e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2210      	movs	r2, #16
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d11e      	bne.n	800220e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2211      	movs	r2, #17
 80021d6:	4252      	negs	r2, r2
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2208      	movs	r2, #8
 80021de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	23c0      	movs	r3, #192	@ 0xc0
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f9e9 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80021f6:	e007      	b.n	8002208 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 f9dc 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	f000 f9e8 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10f      	bne.n	800223c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	4013      	ands	r3, r2
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2202      	movs	r2, #2
 8002230:	4252      	negs	r2, r2
 8002232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 f9b6 	bl	80025a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	4013      	ands	r3, r2
 8002246:	2b40      	cmp	r3, #64	@ 0x40
 8002248:	d10f      	bne.n	800226a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2240      	movs	r2, #64	@ 0x40
 8002252:	4013      	ands	r3, r2
 8002254:	2b40      	cmp	r3, #64	@ 0x40
 8002256:	d108      	bne.n	800226a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2241      	movs	r2, #65	@ 0x41
 800225e:	4252      	negs	r2, r2
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f9bf 	bl	80025e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2317      	movs	r3, #23
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2238      	movs	r2, #56	@ 0x38
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002292:	2302      	movs	r3, #2
 8002294:	e0ad      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2238      	movs	r2, #56	@ 0x38
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	d100      	bne.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80022a4:	e076      	b.n	8002394 <HAL_TIM_PWM_ConfigChannel+0x120>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d900      	bls.n	80022ae <HAL_TIM_PWM_ConfigChannel+0x3a>
 80022ac:	e095      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x166>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d04e      	beq.n	8002352 <HAL_TIM_PWM_ConfigChannel+0xde>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d900      	bls.n	80022bc <HAL_TIM_PWM_ConfigChannel+0x48>
 80022ba:	e08e      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x166>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_PWM_ConfigChannel+0x56>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d021      	beq.n	800230c <HAL_TIM_PWM_ConfigChannel+0x98>
 80022c8:	e087      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	0011      	movs	r1, r2
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f9e4 	bl	80026a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2108      	movs	r1, #8
 80022e4:	430a      	orrs	r2, r1
 80022e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2104      	movs	r1, #4
 80022f4:	438a      	bics	r2, r1
 80022f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6999      	ldr	r1, [r3, #24]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	619a      	str	r2, [r3, #24]
      break;
 800230a:	e06b      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f000 f9ff 	bl	8002718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2180      	movs	r1, #128	@ 0x80
 8002326:	0109      	lsls	r1, r1, #4
 8002328:	430a      	orrs	r2, r1
 800232a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4931      	ldr	r1, [pc, #196]	@ (80023fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002338:	400a      	ands	r2, r1
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	021a      	lsls	r2, r3, #8
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	619a      	str	r2, [r3, #24]
      break;
 8002350:	e048      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	0011      	movs	r1, r2
 800235a:	0018      	movs	r0, r3
 800235c:	f000 fa1e 	bl	800279c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2108      	movs	r1, #8
 800236c:	430a      	orrs	r2, r1
 800236e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2104      	movs	r1, #4
 800237c:	438a      	bics	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69d9      	ldr	r1, [r3, #28]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	61da      	str	r2, [r3, #28]
      break;
 8002392:	e027      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fa3d 	bl	800281c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2180      	movs	r1, #128	@ 0x80
 80023ae:	0109      	lsls	r1, r1, #4
 80023b0:	430a      	orrs	r2, r1
 80023b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	490f      	ldr	r1, [pc, #60]	@ (80023fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69d9      	ldr	r1, [r3, #28]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	021a      	lsls	r2, r3, #8
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	61da      	str	r2, [r3, #28]
      break;
 80023d8:	e004      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80023da:	2317      	movs	r3, #23
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
      break;
 80023e2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2238      	movs	r2, #56	@ 0x38
 80023e8:	2100      	movs	r1, #0
 80023ea:	5499      	strb	r1, [r3, r2]

  return status;
 80023ec:	2317      	movs	r3, #23
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b006      	add	sp, #24
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	fffffbff 	.word	0xfffffbff

08002400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	230f      	movs	r3, #15
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2238      	movs	r2, #56	@ 0x38
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_TIM_ConfigClockSource+0x20>
 800241c:	2302      	movs	r3, #2
 800241e:	e0bc      	b.n	800259a <HAL_TIM_ConfigClockSource+0x19a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2238      	movs	r2, #56	@ 0x38
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2239      	movs	r2, #57	@ 0x39
 800242c:	2102      	movs	r1, #2
 800242e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2277      	movs	r2, #119	@ 0x77
 800243c:	4393      	bics	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4a58      	ldr	r2, [pc, #352]	@ (80025a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	0192      	lsls	r2, r2, #6
 8002458:	4293      	cmp	r3, r2
 800245a:	d040      	beq.n	80024de <HAL_TIM_ConfigClockSource+0xde>
 800245c:	2280      	movs	r2, #128	@ 0x80
 800245e:	0192      	lsls	r2, r2, #6
 8002460:	4293      	cmp	r3, r2
 8002462:	d900      	bls.n	8002466 <HAL_TIM_ConfigClockSource+0x66>
 8002464:	e088      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	0152      	lsls	r2, r2, #5
 800246a:	4293      	cmp	r3, r2
 800246c:	d100      	bne.n	8002470 <HAL_TIM_ConfigClockSource+0x70>
 800246e:	e088      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x182>
 8002470:	2280      	movs	r2, #128	@ 0x80
 8002472:	0152      	lsls	r2, r2, #5
 8002474:	4293      	cmp	r3, r2
 8002476:	d900      	bls.n	800247a <HAL_TIM_ConfigClockSource+0x7a>
 8002478:	e07e      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 800247a:	2b70      	cmp	r3, #112	@ 0x70
 800247c:	d018      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0xb0>
 800247e:	d900      	bls.n	8002482 <HAL_TIM_ConfigClockSource+0x82>
 8002480:	e07a      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 8002482:	2b60      	cmp	r3, #96	@ 0x60
 8002484:	d04f      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x126>
 8002486:	d900      	bls.n	800248a <HAL_TIM_ConfigClockSource+0x8a>
 8002488:	e076      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 800248a:	2b50      	cmp	r3, #80	@ 0x50
 800248c:	d03b      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x106>
 800248e:	d900      	bls.n	8002492 <HAL_TIM_ConfigClockSource+0x92>
 8002490:	e072      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 8002492:	2b40      	cmp	r3, #64	@ 0x40
 8002494:	d057      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x146>
 8002496:	d900      	bls.n	800249a <HAL_TIM_ConfigClockSource+0x9a>
 8002498:	e06e      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 800249a:	2b30      	cmp	r3, #48	@ 0x30
 800249c:	d063      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x166>
 800249e:	d86b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d060      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x166>
 80024a4:	d868      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05d      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x166>
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d05b      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x166>
 80024ae:	e063      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	f000 fa6c 	bl	800299c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2277      	movs	r2, #119	@ 0x77
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	609a      	str	r2, [r3, #8]
      break;
 80024dc:	e052      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ee:	f000 fa55 	bl	800299c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2180      	movs	r1, #128	@ 0x80
 80024fe:	01c9      	lsls	r1, r1, #7
 8002500:	430a      	orrs	r2, r1
 8002502:	609a      	str	r2, [r3, #8]
      break;
 8002504:	e03e      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002512:	001a      	movs	r2, r3
 8002514:	f000 f9c8 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2150      	movs	r1, #80	@ 0x50
 800251e:	0018      	movs	r0, r3
 8002520:	f000 fa22 	bl	8002968 <TIM_ITRx_SetConfig>
      break;
 8002524:	e02e      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002532:	001a      	movs	r2, r3
 8002534:	f000 f9e6 	bl	8002904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2160      	movs	r1, #96	@ 0x60
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fa12 	bl	8002968 <TIM_ITRx_SetConfig>
      break;
 8002544:	e01e      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002552:	001a      	movs	r2, r3
 8002554:	f000 f9a8 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2140      	movs	r1, #64	@ 0x40
 800255e:	0018      	movs	r0, r3
 8002560:	f000 fa02 	bl	8002968 <TIM_ITRx_SetConfig>
      break;
 8002564:	e00e      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0019      	movs	r1, r3
 8002570:	0010      	movs	r0, r2
 8002572:	f000 f9f9 	bl	8002968 <TIM_ITRx_SetConfig>
      break;
 8002576:	e005      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
      break;
 8002580:	e000      	b.n	8002584 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002582:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2239      	movs	r2, #57	@ 0x39
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2238      	movs	r2, #56	@ 0x38
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

  return status;
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	ffff00ff 	.word	0xffff00ff

080025a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c0:	46c0      	nop			@ (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f0:	46c0      	nop			@ (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	429a      	cmp	r2, r3
 8002610:	d007      	beq.n	8002622 <TIM_Base_SetConfig+0x2a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <TIM_Base_SetConfig+0x9c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_Base_SetConfig+0x2a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <TIM_Base_SetConfig+0xa0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2270      	movs	r2, #112	@ 0x70
 8002626:	4393      	bics	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	05db      	lsls	r3, r3, #23
 800263a:	429a      	cmp	r2, r3
 800263c:	d007      	beq.n	800264e <TIM_Base_SetConfig+0x56>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <TIM_Base_SetConfig+0x9c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0x56>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a13      	ldr	r2, [pc, #76]	@ (8002698 <TIM_Base_SetConfig+0xa0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d108      	bne.n	8002660 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a12      	ldr	r2, [pc, #72]	@ (800269c <TIM_Base_SetConfig+0xa4>)
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	4393      	bics	r3, r2
 8002666:	001a      	movs	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	615a      	str	r2, [r3, #20]
}
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010800 	.word	0x40010800
 8002698:	40011400 	.word	0x40011400
 800269c:	fffffcff 	.word	0xfffffcff

080026a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4393      	bics	r3, r2
 80026b2:	001a      	movs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2270      	movs	r2, #112	@ 0x70
 80026ce:	4393      	bics	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2203      	movs	r2, #3
 80026d6:	4393      	bics	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2202      	movs	r2, #2
 80026e8:	4393      	bics	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b006      	add	sp, #24
 8002716:	bd80      	pop	{r7, pc}

08002718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	2210      	movs	r2, #16
 8002728:	4393      	bics	r3, r2
 800272a:	001a      	movs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <TIM_OC2_SetConfig+0x7c>)
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <TIM_OC2_SetConfig+0x80>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2220      	movs	r2, #32
 8002762:	4393      	bics	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b006      	add	sp, #24
 8002792:	bd80      	pop	{r7, pc}
 8002794:	ffff8fff 	.word	0xffff8fff
 8002798:	fffffcff 	.word	0xfffffcff

0800279c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <TIM_OC3_SetConfig+0x78>)
 80027ac:	401a      	ands	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2270      	movs	r2, #112	@ 0x70
 80027c8:	4393      	bics	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2203      	movs	r2, #3
 80027d0:	4393      	bics	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <TIM_OC3_SetConfig+0x7c>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	621a      	str	r2, [r3, #32]
}
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b006      	add	sp, #24
 8002812:	bd80      	pop	{r7, pc}
 8002814:	fffffeff 	.word	0xfffffeff
 8002818:	fffffdff 	.word	0xfffffdff

0800281c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <TIM_OC4_SetConfig+0x7c>)
 800282c:	401a      	ands	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a15      	ldr	r2, [pc, #84]	@ (800289c <TIM_OC4_SetConfig+0x80>)
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <TIM_OC4_SetConfig+0x84>)
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4a10      	ldr	r2, [pc, #64]	@ (80028a4 <TIM_OC4_SetConfig+0x88>)
 8002864:	4013      	ands	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	ffffefff 	.word	0xffffefff
 800289c:	ffff8fff 	.word	0xffff8fff
 80028a0:	fffffcff 	.word	0xfffffcff
 80028a4:	ffffdfff 	.word	0xffffdfff

080028a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	2201      	movs	r2, #1
 80028c0:	4393      	bics	r3, r2
 80028c2:	001a      	movs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	22f0      	movs	r2, #240	@ 0xf0
 80028d2:	4393      	bics	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	220a      	movs	r2, #10
 80028e4:	4393      	bics	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b006      	add	sp, #24
 8002902:	bd80      	pop	{r7, pc}

08002904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	2210      	movs	r2, #16
 8002916:	4393      	bics	r3, r2
 8002918:	001a      	movs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <TIM_TI2_ConfigInputStage+0x60>)
 800292e:	4013      	ands	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	031b      	lsls	r3, r3, #12
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	22a0      	movs	r2, #160	@ 0xa0
 8002940:	4393      	bics	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b006      	add	sp, #24
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	ffff0fff 	.word	0xffff0fff

08002968 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2270      	movs	r2, #112	@ 0x70
 800297c:	4393      	bics	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	2207      	movs	r2, #7
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	609a      	str	r2, [r3, #8]
}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <TIM_ETR_SetConfig+0x3c>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	431a      	orrs	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	ffff00ff 	.word	0xffff00ff

080029dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	221f      	movs	r2, #31
 80029ec:	4013      	ands	r3, r2
 80029ee:	2201      	movs	r2, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	0013      	movs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	43d2      	mvns	r2, r2
 80029fe:	401a      	ands	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	211f      	movs	r1, #31
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4099      	lsls	r1, r3
 8002a12:	000b      	movs	r3, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b006      	add	sp, #24
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2238      	movs	r2, #56	@ 0x38
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e042      	b.n	8002ac2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2238      	movs	r2, #56	@ 0x38
 8002a40:	2101      	movs	r1, #1
 8002a42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2239      	movs	r2, #57	@ 0x39
 8002a48:	2102      	movs	r1, #2
 8002a4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2270      	movs	r2, #112	@ 0x70
 8002a60:	4393      	bics	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d009      	beq.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a11      	ldr	r2, [pc, #68]	@ (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10c      	bne.n	8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2280      	movs	r2, #128	@ 0x80
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2239      	movs	r2, #57	@ 0x39
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2238      	movs	r2, #56	@ 0x38
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	40010800 	.word	0x40010800
 8002ad0:	40011400 	.word	0x40011400

08002ad4 <memset>:
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	1882      	adds	r2, r0, r2
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <memset+0xa>
 8002adc:	4770      	bx	lr
 8002ade:	7019      	strb	r1, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	e7f9      	b.n	8002ad8 <memset+0x4>

08002ae4 <__libc_init_array>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	4c0c      	ldr	r4, [pc, #48]	@ (8002b1c <__libc_init_array+0x38>)
 8002aea:	4d0d      	ldr	r5, [pc, #52]	@ (8002b20 <__libc_init_array+0x3c>)
 8002aec:	1b64      	subs	r4, r4, r5
 8002aee:	10a4      	asrs	r4, r4, #2
 8002af0:	42a6      	cmp	r6, r4
 8002af2:	d109      	bne.n	8002b08 <__libc_init_array+0x24>
 8002af4:	2600      	movs	r6, #0
 8002af6:	f000 f819 	bl	8002b2c <_init>
 8002afa:	4c0a      	ldr	r4, [pc, #40]	@ (8002b24 <__libc_init_array+0x40>)
 8002afc:	4d0a      	ldr	r5, [pc, #40]	@ (8002b28 <__libc_init_array+0x44>)
 8002afe:	1b64      	subs	r4, r4, r5
 8002b00:	10a4      	asrs	r4, r4, #2
 8002b02:	42a6      	cmp	r6, r4
 8002b04:	d105      	bne.n	8002b12 <__libc_init_array+0x2e>
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	00b3      	lsls	r3, r6, #2
 8002b0a:	58eb      	ldr	r3, [r5, r3]
 8002b0c:	4798      	blx	r3
 8002b0e:	3601      	adds	r6, #1
 8002b10:	e7ee      	b.n	8002af0 <__libc_init_array+0xc>
 8002b12:	00b3      	lsls	r3, r6, #2
 8002b14:	58eb      	ldr	r3, [r5, r3]
 8002b16:	4798      	blx	r3
 8002b18:	3601      	adds	r6, #1
 8002b1a:	e7f2      	b.n	8002b02 <__libc_init_array+0x1e>
 8002b1c:	08002b68 	.word	0x08002b68
 8002b20:	08002b68 	.word	0x08002b68
 8002b24:	08002b6c 	.word	0x08002b6c
 8002b28:	08002b68 	.word	0x08002b68

08002b2c <_init>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr

08002b38 <_fini>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr

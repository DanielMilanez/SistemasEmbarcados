
Projeto controle FAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003990  08003990  00004990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e8  080039e8  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080039e8  080039e8  000049e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f0  080039f0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f0  080039f0  000049f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039f4  080039f4  000049f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080039f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000060  08003a58  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003a58  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007568  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001681  00000000  00000000  0000c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0000dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062f  00000000  00000000  0000e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a8d  00000000  00000000  0000eacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092c1  00000000  00000000  0002255c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e6b  00000000  00000000  0002b81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5688  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b8  00000000  00000000  000a56cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000a7884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003978 	.word	0x08003978

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003978 	.word	0x08003978

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fda6 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f89e 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f9cc 	bl	8000864 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004cc:	f000 f8ea 	bl	80006a4 <MX_TIM2_Init>
  MX_TIM21_Init();
 80004d0:	f000 f94a 	bl	8000768 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80004d4:	4b40      	ldr	r3, [pc, #256]	@ (80005d8 <main+0x11c>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 f821 	bl	8002520 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 80004de:	4b3e      	ldr	r3, [pc, #248]	@ (80005d8 <main+0x11c>)
 80004e0:	2104      	movs	r1, #4
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 f81c 	bl	8002520 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 80004e8:	4b3c      	ldr	r3, [pc, #240]	@ (80005dc <main+0x120>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 feeb 	bl	80022c8 <HAL_TIM_PWM_Start>
  Start();
 80004f2:	f000 fb81 	bl	8000bf8 <Start>

  TIM21 -> CCR1 = OFF;
 80004f6:	4b3a      	ldr	r3, [pc, #232]	@ (80005e0 <main+0x124>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34
  duty = OFF;
 80004fc:	4b39      	ldr	r3, [pc, #228]	@ (80005e4 <main+0x128>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if (state){
 8000502:	4b39      	ldr	r3, [pc, #228]	@ (80005e8 <main+0x12c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d006      	beq.n	8000518 <main+0x5c>
		Encoder_manager();
 800050a:	f000 fbf9 	bl	8000d00 <Encoder_manager>
		duty = passCounter;
 800050e:	4b37      	ldr	r3, [pc, #220]	@ (80005ec <main+0x130>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b34      	ldr	r3, [pc, #208]	@ (80005e4 <main+0x128>)
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e02a      	b.n	800056e <main+0xb2>
	  }

	  else {
		  HAL_Delay(150);
 8000518:	2096      	movs	r0, #150	@ 0x96
 800051a:	f000 fde9 	bl	80010f0 <HAL_Delay>

		  if (duty != ON && !flag) duty++;
 800051e:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <main+0x128>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b14      	cmp	r3, #20
 8000524:	d008      	beq.n	8000538 <main+0x7c>
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <main+0x134>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d104      	bne.n	8000538 <main+0x7c>
 800052e:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <main+0x128>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <main+0x128>)
 8000536:	601a      	str	r2, [r3, #0]
		  if (duty == ON) flag = 1;
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <main+0x128>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b14      	cmp	r3, #20
 800053e:	d102      	bne.n	8000546 <main+0x8a>
 8000540:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <main+0x134>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]

		  if (duty != OFF && flag) duty--;
 8000546:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <main+0x128>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d008      	beq.n	8000560 <main+0xa4>
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <main+0x134>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d004      	beq.n	8000560 <main+0xa4>
 8000556:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <main+0x128>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1e5a      	subs	r2, r3, #1
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <main+0x128>)
 800055e:	601a      	str	r2, [r3, #0]
		  if (duty == OFF) flag = 0;
 8000560:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <main+0x128>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <main+0xb2>
 8000568:	4b21      	ldr	r3, [pc, #132]	@ (80005f0 <main+0x134>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
	  }

	  if (!HAL_GPIO_ReadPin(SW_ENCODER_GPIO_Port, SW_ENCODER_Pin)){
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	009a      	lsls	r2, r3, #2
 8000572:	23a0      	movs	r3, #160	@ 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f831 	bl	80015e0 <HAL_GPIO_ReadPin>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d127      	bne.n	80005d2 <main+0x116>
		  passBouce = HAL_GetTick();
 8000582:	f000 fdab 	bl	80010dc <HAL_GetTick>
 8000586:	0003      	movs	r3, r0
 8000588:	001a      	movs	r2, r3
 800058a:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <main+0x138>)
 800058c:	601a      	str	r2, [r3, #0]

		  if ((passBouce - brefBouce) > 20){
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <main+0x138>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <main+0x13c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	2b14      	cmp	r3, #20
 800059a:	dd16      	ble.n	80005ca <main+0x10e>
			  aux = old_state;
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <main+0x140>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <main+0x144>)
 80005a2:	601a      	str	r2, [r3, #0]
			  old_state = state;
 80005a4:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <main+0x12c>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <main+0x140>)
 80005aa:	601a      	str	r2, [r3, #0]
			  state = aux;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <main+0x144>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <main+0x12c>)
 80005b2:	601a      	str	r2, [r3, #0]
			  while(!HAL_GPIO_ReadPin(SW_ENCODER_GPIO_Port, SW_ENCODER_Pin));
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	2380      	movs	r3, #128	@ 0x80
 80005b8:	009a      	lsls	r2, r3, #2
 80005ba:	23a0      	movs	r3, #160	@ 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f80d 	bl	80015e0 <HAL_GPIO_ReadPin>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d0f5      	beq.n	80005b6 <main+0xfa>
		  }

		  brefBouce = passBouce;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <main+0x138>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <main+0x13c>)
 80005d0:	601a      	str	r2, [r3, #0]
	  }

	  Altern_value();
 80005d2:	f000 fb59 	bl	8000c88 <Altern_value>
	  if (state){
 80005d6:	e794      	b.n	8000502 <main+0x46>
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	200000bc 	.word	0x200000bc
 80005e0:	40010800 	.word	0x40010800
 80005e4:	20000124 	.word	0x20000124
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000134 	.word	0x20000134
 80005f0:	20000110 	.word	0x20000110
 80005f4:	20000128 	.word	0x20000128
 80005f8:	2000012c 	.word	0x2000012c
 80005fc:	20000114 	.word	0x20000114
 8000600:	2000011c 	.word	0x2000011c

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b095      	sub	sp, #84	@ 0x54
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	2418      	movs	r4, #24
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2338      	movs	r3, #56	@ 0x38
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f002 fd31 	bl	800307c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	0018      	movs	r0, r3
 800061e:	2314      	movs	r3, #20
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f002 fd2a 	bl	800307c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <SystemClock_Config+0x98>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <SystemClock_Config+0x9c>)
 800062e:	401a      	ands	r2, r3
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <SystemClock_Config+0x98>)
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	0109      	lsls	r1, r1, #4
 8000636:	430a      	orrs	r2, r1
 8000638:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	0021      	movs	r1, r4
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2210      	movs	r2, #16
 800064c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	187b      	adds	r3, r7, r1
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fffc 	bl	8001654 <HAL_RCC_OscConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000660:	f000 fb90 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	220f      	movs	r2, #15
 8000668:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2201      	movs	r2, #1
 800066e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fba8 	bl	8001ddc <HAL_RCC_ClockConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000690:	f000 fb78 	bl	8000d84 <Error_Handler>
  }
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b015      	add	sp, #84	@ 0x54
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	40007000 	.word	0x40007000
 80006a0:	ffffe7ff 	.word	0xffffe7ff

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b08d      	sub	sp, #52	@ 0x34
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006aa:	240c      	movs	r4, #12
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2324      	movs	r3, #36	@ 0x24
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f002 fce1 	bl	800307c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2308      	movs	r3, #8
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fcda 	bl	800307c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <MX_TIM2_Init+0xc0>)
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	05d2      	lsls	r2, r2, #23
 80006ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <MX_TIM2_Init+0xc0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <MX_TIM2_Init+0xc0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21-1;
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_TIM2_Init+0xc0>)
 80006de:	2214      	movs	r2, #20
 80006e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_TIM2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_TIM2_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006ee:	0021      	movs	r1, r4
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2202      	movs	r2, #2
 80006fa:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2201      	movs	r2, #1
 8000700:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2202      	movs	r2, #2
 8000712:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000726:	187a      	adds	r2, r7, r1
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_TIM2_Init+0xc0>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fe57 	bl	80023e0 <HAL_TIM_Encoder_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000736:	f000 fb25 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_TIM2_Init+0xc0>)
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f002 fc1d 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000756:	f000 fb15 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00d      	add	sp, #52	@ 0x34
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	2000007c 	.word	0x2000007c

08000768 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	2318      	movs	r3, #24
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	0018      	movs	r0, r3
 8000774:	2310      	movs	r3, #16
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f002 fc7f 	bl	800307c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	2310      	movs	r3, #16
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	0018      	movs	r0, r3
 8000784:	2308      	movs	r3, #8
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fc77 	bl	800307c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	003b      	movs	r3, r7
 8000790:	0018      	movs	r0, r3
 8000792:	2310      	movs	r3, #16
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fc70 	bl	800307c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800079c:	4b2f      	ldr	r3, [pc, #188]	@ (800085c <MX_TIM21_Init+0xf4>)
 800079e:	4a30      	ldr	r2, [pc, #192]	@ (8000860 <MX_TIM21_Init+0xf8>)
 80007a0:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 8-1;
 80007a2:	4b2e      	ldr	r3, [pc, #184]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 20-1;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007b0:	2213      	movs	r2, #19
 80007b2:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b29      	ldr	r3, [pc, #164]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b28      	ldr	r3, [pc, #160]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80007c0:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fcf8 	bl	80021b8 <HAL_TIM_Base_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80007cc:	f000 fada 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d0:	2118      	movs	r1, #24
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	0152      	lsls	r2, r2, #5
 80007d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80007da:	187a      	adds	r2, r7, r1
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 f8c1 	bl	8002968 <HAL_TIM_ConfigClockSource>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80007ea:	f000 facb 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 80007ee:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM21_Init+0xf4>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fd21 	bl	8002238 <HAL_TIM_PWM_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 fac3 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2110      	movs	r1, #16
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800080c:	187a      	adds	r2, r7, r1
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_TIM21_Init+0xf4>)
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f002 fbba 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 800081c:	f000 fab2 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	003b      	movs	r3, r7
 8000822:	2260      	movs	r2, #96	@ 0x60
 8000824:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000838:	0039      	movs	r1, r7
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_TIM21_Init+0xf4>)
 800083c:	2200      	movs	r2, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 ffcc 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8000848:	f000 fa9c 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 800084c:	4b03      	ldr	r3, [pc, #12]	@ (800085c <MX_TIM21_Init+0xf4>)
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fb14 	bl	8000e7c <HAL_TIM_MspPostInit>

}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b00a      	add	sp, #40	@ 0x28
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000bc 	.word	0x200000bc
 8000860:	40010800 	.word	0x40010800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	@ 0x24
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	240c      	movs	r4, #12
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f002 fc01 	bl	800307c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <MX_GPIO_Init+0x124>)
 800087c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800087e:	4b42      	ldr	r3, [pc, #264]	@ (8000988 <MX_GPIO_Init+0x124>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000886:	4b40      	ldr	r3, [pc, #256]	@ (8000988 <MX_GPIO_Init+0x124>)
 8000888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b3d      	ldr	r3, [pc, #244]	@ (8000988 <MX_GPIO_Init+0x124>)
 8000894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000896:	4b3c      	ldr	r3, [pc, #240]	@ (8000988 <MX_GPIO_Init+0x124>)
 8000898:	2102      	movs	r1, #2
 800089a:	430a      	orrs	r2, r1
 800089c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800089e:	4b3a      	ldr	r3, [pc, #232]	@ (8000988 <MX_GPIO_Init+0x124>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	2202      	movs	r2, #2
 80008a4:	4013      	ands	r3, r2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b37      	ldr	r3, [pc, #220]	@ (8000988 <MX_GPIO_Init+0x124>)
 80008ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008ae:	4b36      	ldr	r3, [pc, #216]	@ (8000988 <MX_GPIO_Init+0x124>)
 80008b0:	2104      	movs	r1, #4
 80008b2:	430a      	orrs	r2, r1
 80008b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <MX_GPIO_Init+0x124>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ba:	2204      	movs	r2, #4
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin, GPIO_PIN_RESET);
 80008c2:	23a0      	movs	r3, #160	@ 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	21e0      	movs	r1, #224	@ 0xe0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fea5 	bl	800161a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80008d0:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <MX_GPIO_Init+0x128>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fe9f 	bl	800161a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);
 80008dc:	23d0      	movs	r3, #208	@ 0xd0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	482b      	ldr	r0, [pc, #172]	@ (8000990 <MX_GPIO_Init+0x12c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	0019      	movs	r1, r3
 80008e6:	f000 fe98 	bl	800161a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	22e0      	movs	r2, #224	@ 0xe0
 80008ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2201      	movs	r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	193a      	adds	r2, r7, r4
 8000904:	23a0      	movs	r3, #160	@ 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fcf2 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2201      	movs	r2, #1
 800091a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000928:	193b      	adds	r3, r7, r4
 800092a:	4a18      	ldr	r2, [pc, #96]	@ (800098c <MX_GPIO_Init+0x128>)
 800092c:	0019      	movs	r1, r3
 800092e:	0010      	movs	r0, r2
 8000930:	f000 fce0 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_ENCODER_Pin */
  GPIO_InitStruct.Pin = SW_ENCODER_Pin;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2201      	movs	r2, #1
 8000946:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000948:	193a      	adds	r2, r7, r4
 800094a:	23a0      	movs	r3, #160	@ 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fccf 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = D6_Pin|RS_Pin|RW_Pin;
 8000956:	0021      	movs	r1, r4
 8000958:	187b      	adds	r3, r7, r1
 800095a:	22d0      	movs	r2, #208	@ 0xd0
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2201      	movs	r2, #1
 8000964:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	187b      	adds	r3, r7, r1
 8000974:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <MX_GPIO_Init+0x12c>)
 8000976:	0019      	movs	r1, r3
 8000978:	0010      	movs	r0, r2
 800097a:	f000 fcbb 	bl	80012f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b009      	add	sp, #36	@ 0x24
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40021000 	.word	0x40021000
 800098c:	50000800 	.word	0x50000800
 8000990:	50000400 	.word	0x50000400

08000994 <Info_manager>:

/* USER CODE BEGIN 4 */
void Info_manager(unsigned data, unsigned rs){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
	// Filtro de informação
	PORT.P0 = (data >> 0) & 1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1c1a      	adds	r2, r3, #0
 80009a2:	2301      	movs	r3, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b90      	ldr	r3, [pc, #576]	@ (8000bec <Info_manager+0x258>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	400a      	ands	r2, r1
 80009ae:	0010      	movs	r0, r2
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	2101      	movs	r1, #1
 80009b4:	438a      	bics	r2, r1
 80009b6:	1c11      	adds	r1, r2, #0
 80009b8:	1c02      	adds	r2, r0, #0
 80009ba:	430a      	orrs	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	1c1a      	adds	r2, r3, #0
 80009c4:	2301      	movs	r3, #1
 80009c6:	4013      	ands	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b88      	ldr	r3, [pc, #544]	@ (8000bec <Info_manager+0x258>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	400a      	ands	r2, r1
 80009d0:	1890      	adds	r0, r2, r2
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	2102      	movs	r1, #2
 80009d6:	438a      	bics	r2, r1
 80009d8:	1c11      	adds	r1, r2, #0
 80009da:	1c02      	adds	r2, r0, #0
 80009dc:	430a      	orrs	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	1c1a      	adds	r2, r3, #0
 80009e6:	2301      	movs	r3, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b7f      	ldr	r3, [pc, #508]	@ (8000bec <Info_manager+0x258>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	400a      	ands	r2, r1
 80009f2:	0090      	lsls	r0, r2, #2
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	2104      	movs	r1, #4
 80009f8:	438a      	bics	r2, r1
 80009fa:	1c11      	adds	r1, r2, #0
 80009fc:	1c02      	adds	r2, r0, #0
 80009fe:	430a      	orrs	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	1c1a      	adds	r2, r3, #0
 8000a08:	2301      	movs	r3, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b77      	ldr	r3, [pc, #476]	@ (8000bec <Info_manager+0x258>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	400a      	ands	r2, r1
 8000a14:	00d0      	lsls	r0, r2, #3
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	2108      	movs	r1, #8
 8000a1a:	438a      	bics	r2, r1
 8000a1c:	1c11      	adds	r1, r2, #0
 8000a1e:	1c02      	adds	r2, r0, #0
 8000a20:	430a      	orrs	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	1c1a      	adds	r2, r3, #0
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b6e      	ldr	r3, [pc, #440]	@ (8000bec <Info_manager+0x258>)
 8000a32:	2101      	movs	r1, #1
 8000a34:	400a      	ands	r2, r1
 8000a36:	0110      	lsls	r0, r2, #4
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	1c11      	adds	r1, r2, #0
 8000a40:	1c02      	adds	r2, r0, #0
 8000a42:	430a      	orrs	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	1c1a      	adds	r2, r3, #0
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4013      	ands	r3, r2
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b66      	ldr	r3, [pc, #408]	@ (8000bec <Info_manager+0x258>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	400a      	ands	r2, r1
 8000a58:	0150      	lsls	r0, r2, #5
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	438a      	bics	r2, r1
 8000a60:	1c11      	adds	r1, r2, #0
 8000a62:	1c02      	adds	r2, r0, #0
 8000a64:	430a      	orrs	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	099b      	lsrs	r3, r3, #6
 8000a6c:	1c1a      	adds	r2, r3, #0
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b5d      	ldr	r3, [pc, #372]	@ (8000bec <Info_manager+0x258>)
 8000a76:	2101      	movs	r1, #1
 8000a78:	400a      	ands	r2, r1
 8000a7a:	0190      	lsls	r0, r2, #6
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	2140      	movs	r1, #64	@ 0x40
 8000a80:	438a      	bics	r2, r1
 8000a82:	1c11      	adds	r1, r2, #0
 8000a84:	1c02      	adds	r2, r0, #0
 8000a86:	430a      	orrs	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	09db      	lsrs	r3, r3, #7
 8000a8e:	1c1a      	adds	r2, r3, #0
 8000a90:	2301      	movs	r3, #1
 8000a92:	4013      	ands	r3, r2
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b55      	ldr	r3, [pc, #340]	@ (8000bec <Info_manager+0x258>)
 8000a98:	01d0      	lsls	r0, r2, #7
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	217f      	movs	r1, #127	@ 0x7f
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	1c11      	adds	r1, r2, #0
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	701a      	strb	r2, [r3, #0]

	if (rs) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <Info_manager+0x12a>
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	484f      	ldr	r0, [pc, #316]	@ (8000bf0 <Info_manager+0x25c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	f000 fdaf 	bl	800161a <HAL_GPIO_WritePin>
 8000abc:	e006      	b.n	8000acc <Info_manager+0x138>
	else HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000abe:	2380      	movs	r3, #128	@ 0x80
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	484b      	ldr	r0, [pc, #300]	@ (8000bf0 <Info_manager+0x25c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	f000 fda7 	bl	800161a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4847      	ldr	r0, [pc, #284]	@ (8000bf0 <Info_manager+0x25c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	f000 fda0 	bl	800161a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 8000ada:	4b44      	ldr	r3, [pc, #272]	@ (8000bec <Info_manager+0x258>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	06db      	lsls	r3, r3, #27
 8000ae0:	0fdb      	lsrs	r3, r3, #31
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	23a0      	movs	r3, #160	@ 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	2140      	movs	r1, #64	@ 0x40
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fd94 	bl	800161a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 8000af2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bec <Info_manager+0x258>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	069b      	lsls	r3, r3, #26
 8000af8:	0fdb      	lsrs	r3, r3, #31
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	001a      	movs	r2, r3
 8000afe:	23a0      	movs	r3, #160	@ 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2180      	movs	r1, #128	@ 0x80
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fd88 	bl	800161a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 8000b0a:	4b38      	ldr	r3, [pc, #224]	@ (8000bec <Info_manager+0x258>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	065b      	lsls	r3, r3, #25
 8000b10:	0fdb      	lsrs	r3, r3, #31
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	001a      	movs	r2, r3
 8000b16:	4b36      	ldr	r3, [pc, #216]	@ (8000bf0 <Info_manager+0x25c>)
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fd7d 	bl	800161a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 8000b20:	4b32      	ldr	r3, [pc, #200]	@ (8000bec <Info_manager+0x258>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	061b      	lsls	r3, r3, #24
 8000b26:	0fdb      	lsrs	r3, r3, #31
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	4b31      	ldr	r3, [pc, #196]	@ (8000bf4 <Info_manager+0x260>)
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fd72 	bl	800161a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 fada 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000b3c:	23a0      	movs	r3, #160	@ 0xa0
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	2201      	movs	r2, #1
 8000b42:	2120      	movs	r1, #32
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 fd68 	bl	800161a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fad0 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000b50:	23a0      	movs	r3, #160	@ 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	2200      	movs	r2, #0
 8000b56:	2120      	movs	r1, #32
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fd5e 	bl	800161a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <Info_manager+0x258>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	07db      	lsls	r3, r3, #31
 8000b64:	0fdb      	lsrs	r3, r3, #31
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	001a      	movs	r2, r3
 8000b6a:	23a0      	movs	r3, #160	@ 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2140      	movs	r1, #64	@ 0x40
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fd52 	bl	800161a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <Info_manager+0x258>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	079b      	lsls	r3, r3, #30
 8000b7c:	0fdb      	lsrs	r3, r3, #31
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	001a      	movs	r2, r3
 8000b82:	23a0      	movs	r3, #160	@ 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2180      	movs	r1, #128	@ 0x80
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fd46 	bl	800161a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <Info_manager+0x258>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	075b      	lsls	r3, r3, #29
 8000b94:	0fdb      	lsrs	r3, r3, #31
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <Info_manager+0x25c>)
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fd3b 	bl	800161a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <Info_manager+0x258>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	071b      	lsls	r3, r3, #28
 8000baa:	0fdb      	lsrs	r3, r3, #31
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	001a      	movs	r2, r3
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <Info_manager+0x260>)
 8000bb2:	2180      	movs	r1, #128	@ 0x80
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 fd30 	bl	800161a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 fa98 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000bc0:	23a0      	movs	r3, #160	@ 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fd26 	bl	800161a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fa8e 	bl	80010f0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000bd4:	23a0      	movs	r3, #160	@ 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 fd1c 	bl	800161a <HAL_GPIO_WritePin>
}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	200000fc 	.word	0x200000fc
 8000bf0:	50000400 	.word	0x50000400
 8000bf4:	50000800 	.word	0x50000800

08000bf8 <Start>:

void Start(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	Info_manager(0x28, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2028      	movs	r0, #40	@ 0x28
 8000c00:	f7ff fec8 	bl	8000994 <Info_manager>
	HAL_Delay(20);
 8000c04:	2014      	movs	r0, #20
 8000c06:	f000 fa73 	bl	80010f0 <HAL_Delay>
	Info_manager(0x28, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2028      	movs	r0, #40	@ 0x28
 8000c0e:	f7ff fec1 	bl	8000994 <Info_manager>
	Info_manager(0x28, 0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2028      	movs	r0, #40	@ 0x28
 8000c16:	f7ff febd 	bl	8000994 <Info_manager>
	Info_manager(0x28, 0);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2028      	movs	r0, #40	@ 0x28
 8000c1e:	f7ff feb9 	bl	8000994 <Info_manager>

	HAL_Delay(4);
 8000c22:	2004      	movs	r0, #4
 8000c24:	f000 fa64 	bl	80010f0 <HAL_Delay>
	Info_manager(0x24, 0);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2024      	movs	r0, #36	@ 0x24
 8000c2c:	f7ff feb2 	bl	8000994 <Info_manager>

	Info_manager(0x0C, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	200c      	movs	r0, #12
 8000c34:	f7ff feae 	bl	8000994 <Info_manager>
	Info_manager(0x06, 0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2006      	movs	r0, #6
 8000c3c:	f7ff feaa 	bl	8000994 <Info_manager>
	Info_manager(0x01, 0);
 8000c40:	2100      	movs	r1, #0
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fea6 	bl	8000994 <Info_manager>
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <Mensage>:

void Mensage(char *mensage){
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	for (int i = 0; mensage[i] != '\0'; ++i){
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e00a      	b.n	8000c72 <Mensage+0x24>
		Info_manager(mensage[i], 1);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	18d3      	adds	r3, r2, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fe94 	bl	8000994 <Info_manager>
	for (int i = 0; mensage[i] != '\0'; ++i){
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1ee      	bne.n	8000c5c <Mensage+0xe>
	}
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b004      	add	sp, #16
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Altern_value>:

void Altern_value(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	sprintf(word, "Duty: %lu%%", duty);
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <Altern_value+0x64>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4917      	ldr	r1, [pc, #92]	@ (8000cf0 <Altern_value+0x68>)
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <Altern_value+0x6c>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 f9d1 	bl	800303c <siprintf>
	Mensage(word);
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <Altern_value+0x6c>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ffd6 	bl	8000c4e <Mensage>
	Info_manager(0x80, 0);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2080      	movs	r0, #128	@ 0x80
 8000ca6:	f7ff fe75 	bl	8000994 <Info_manager>

	if (duty == 9 && !clear) {
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <Altern_value+0x64>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	d10e      	bne.n	8000cd0 <Altern_value+0x48>
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <Altern_value+0x70>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10a      	bne.n	8000cd0 <Altern_value+0x48>
	  Info_manager(0x01, 0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff fe69 	bl	8000994 <Info_manager>
	  Info_manager(0x80, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2080      	movs	r0, #128	@ 0x80
 8000cc6:	f7ff fe65 	bl	8000994 <Info_manager>
	  clear = 1;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <Altern_value+0x70>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
	}

	if (duty != 9) clear = 0;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <Altern_value+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b09      	cmp	r3, #9
 8000cd6:	d002      	beq.n	8000cde <Altern_value+0x56>
 8000cd8:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <Altern_value+0x70>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
	TIM21 -> CCR1 = duty;
 8000cde:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <Altern_value+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <Altern_value+0x74>)
 8000ce4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000124 	.word	0x20000124
 8000cf0:	08003990 	.word	0x08003990
 8000cf4:	20000100 	.word	0x20000100
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	40010800 	.word	0x40010800

08000d00 <Encoder_manager>:

void Encoder_manager(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	atualCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <Encoder_manager+0x74>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <Encoder_manager+0x78>)
 8000d0e:	601a      	str	r2, [r3, #0]

	if (atualCounter > passCounter){
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <Encoder_manager+0x78>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dd07      	ble.n	8000d2c <Encoder_manager+0x2c>
		flagRotate = 1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <Encoder_manager+0x80>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
		passCounter = atualCounter;
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <Encoder_manager+0x78>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e011      	b.n	8000d50 <Encoder_manager+0x50>

	} else if (atualCounter < passCounter){
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <Encoder_manager+0x78>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	da08      	bge.n	8000d4a <Encoder_manager+0x4a>
		flagRotate = -1;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <Encoder_manager+0x80>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	601a      	str	r2, [r3, #0]
		passCounter = atualCounter;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <Encoder_manager+0x78>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e002      	b.n	8000d50 <Encoder_manager+0x50>
	}

	else flagRotate = 0;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <Encoder_manager+0x80>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

	if (passCounter >= ON) passCounter = 20;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b13      	cmp	r3, #19
 8000d56:	dd03      	ble.n	8000d60 <Encoder_manager+0x60>
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	601a      	str	r2, [r3, #0]
	else if (passCounter <= OFF)passCounter = 1;
}
 8000d5e:	e006      	b.n	8000d6e <Encoder_manager+0x6e>
	else if (passCounter <= OFF)passCounter = 1;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dc02      	bgt.n	8000d6e <Encoder_manager+0x6e>
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <Encoder_manager+0x7c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000007c 	.word	0x2000007c
 8000d78:	20000130 	.word	0x20000130
 8000d7c:	20000134 	.word	0x20000134
 8000d80:	20000118 	.word	0x20000118

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <HAL_MspInit+0x24>)
 8000d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_MspInit+0x24>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <HAL_MspInit+0x24>)
 8000da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_MspInit+0x24>)
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	0549      	lsls	r1, r1, #21
 8000daa:	430a      	orrs	r2, r1
 8000dac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	240c      	movs	r4, #12
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	2314      	movs	r3, #20
 8000dc8:	001a      	movs	r2, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f002 f956 	bl	800307c <memset>
  if(htim_encoder->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d130      	bne.n	8000e3e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	430a      	orrs	r2, r1
 8000de6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	430a      	orrs	r2, r1
 8000df2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <HAL_TIM_Encoder_MspInit+0x90>)
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e00:	0021      	movs	r1, r4
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2203      	movs	r2, #3
 8000e06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	187a      	adds	r2, r7, r1
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fa63 	bl	80012f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 fa2c 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f000 fa3e 	bl	80012ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b009      	add	sp, #36	@ 0x24
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_TIM_Base_MspInit+0x28>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d105      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_TIM_Base_MspInit+0x2c>)
 8000e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_TIM_Base_MspInit+0x2c>)
 8000e64:	2104      	movs	r1, #4
 8000e66:	430a      	orrs	r2, r1
 8000e68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END TIM21_MspInit 1 */

  }

}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	240c      	movs	r4, #12
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f002 f8f4 	bl	800307c <memset>
  if(htim->Instance==TIM21)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <HAL_TIM_MspPostInit+0x70>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d122      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM21_MspPostInit 0 */

  /* USER CODE END TIM21_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_TIM_MspPostInit+0x74>)
 8000ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_TIM_MspPostInit+0x74>)
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_TIM_MspPostInit+0x74>)
 8000eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PB13     ------> TIM21_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	0192      	lsls	r2, r2, #6
 8000ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	0021      	movs	r1, r4
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2206      	movs	r2, #6
 8000ed6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <HAL_TIM_MspPostInit+0x78>)
 8000edc:	0019      	movs	r1, r3
 8000ede:	0010      	movs	r0, r2
 8000ee0:	f000 fa08 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b009      	add	sp, #36	@ 0x24
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	50000400 	.word	0x50000400

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8ca 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <TIM2_IRQHandler+0x14>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 fb69 	bl	800260a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	2000007c 	.word	0x2000007c

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	18d3      	adds	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f002 f88a 	bl	800308c <__errno>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	18d2      	adds	r2, r2, r3
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b006      	add	sp, #24
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20002000 	.word	0x20002000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000138 	.word	0x20000138
 8000fac:	20000288 	.word	0x20000288

08000fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000fbc:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff fff6 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 f855 	bl	8003098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fa65 	bl	80004bc <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   r0, =_estack
 8000ff4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001000:	080039f8 	.word	0x080039f8
  ldr r2, =_sbss
 8001004:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001008:	20000288 	.word	0x20000288

0800100c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_COMP_IRQHandler>
	...

08001010 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_Init+0x3c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Init+0x3c>)
 8001022:	2140      	movs	r1, #64	@ 0x40
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f811 	bl	8001050 <HAL_InitTick>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d003      	beq.n	800103a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e001      	b.n	800103e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103a:	f7ff fea9 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_InitTick+0x5c>)
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0019      	movs	r1, r3
 8001062:	23fa      	movs	r3, #250	@ 0xfa
 8001064:	0098      	lsls	r0, r3, #2
 8001066:	f7ff f859 	bl	800011c <__udivsi3>
 800106a:	0003      	movs	r3, r0
 800106c:	0019      	movs	r1, r3
 800106e:	0020      	movs	r0, r4
 8001070:	f7ff f854 	bl	800011c <__udivsi3>
 8001074:	0003      	movs	r3, r0
 8001076:	0018      	movs	r0, r3
 8001078:	f000 f92f 	bl	80012da <HAL_SYSTICK_Config>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00f      	b.n	80010a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d80b      	bhi.n	80010a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	2301      	movs	r3, #1
 800108e:	425b      	negs	r3, r3
 8001090:	2200      	movs	r2, #0
 8001092:	0018      	movs	r0, r3
 8001094:	f000 f8fc 	bl	8001290 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_InitTick+0x64>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	20000004 	.word	0x20000004
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HAL_IncTick+0x1c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	001a      	movs	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_IncTick+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	18d2      	adds	r2, r2, r3
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_IncTick+0x20>)
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	2000013c 	.word	0x2000013c

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b02      	ldr	r3, [pc, #8]	@ (80010ec <HAL_GetTick+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	2000013c 	.word	0x2000013c

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fff0 	bl	80010dc <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	001a      	movs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	189b      	adds	r3, r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	f7ff ffe0 	bl	80010dc <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	2000000c 	.word	0x2000000c

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	0002      	movs	r2, r0
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b7f      	cmp	r3, #127	@ 0x7f
 800114a:	d809      	bhi.n	8001160 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	001a      	movs	r2, r3
 8001152:	231f      	movs	r3, #31
 8001154:	401a      	ands	r2, r3
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_EnableIRQ+0x30>)
 8001158:	2101      	movs	r1, #1
 800115a:	4091      	lsls	r1, r2
 800115c:	000a      	movs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]
  }
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	0002      	movs	r2, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001180:	d828      	bhi.n	80011d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001182:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <__NVIC_SetPriority+0xd4>)
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b25b      	sxtb	r3, r3
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	33c0      	adds	r3, #192	@ 0xc0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	589b      	ldr	r3, [r3, r2]
 8001192:	1dfa      	adds	r2, r7, #7
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	0011      	movs	r1, r2
 8001198:	2203      	movs	r2, #3
 800119a:	400a      	ands	r2, r1
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	21ff      	movs	r1, #255	@ 0xff
 80011a0:	4091      	lsls	r1, r2
 80011a2:	000a      	movs	r2, r1
 80011a4:	43d2      	mvns	r2, r2
 80011a6:	401a      	ands	r2, r3
 80011a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	019b      	lsls	r3, r3, #6
 80011ae:	22ff      	movs	r2, #255	@ 0xff
 80011b0:	401a      	ands	r2, r3
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	0018      	movs	r0, r3
 80011b8:	2303      	movs	r3, #3
 80011ba:	4003      	ands	r3, r0
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	481f      	ldr	r0, [pc, #124]	@ (8001240 <__NVIC_SetPriority+0xd4>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	430a      	orrs	r2, r1
 80011cc:	33c0      	adds	r3, #192	@ 0xc0
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011d2:	e031      	b.n	8001238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <__NVIC_SetPriority+0xd8>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0019      	movs	r1, r3
 80011dc:	230f      	movs	r3, #15
 80011de:	400b      	ands	r3, r1
 80011e0:	3b08      	subs	r3, #8
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3306      	adds	r3, #6
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	3304      	adds	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	1dfa      	adds	r2, r7, #7
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	0011      	movs	r1, r2
 80011f4:	2203      	movs	r2, #3
 80011f6:	400a      	ands	r2, r1
 80011f8:	00d2      	lsls	r2, r2, #3
 80011fa:	21ff      	movs	r1, #255	@ 0xff
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	43d2      	mvns	r2, r2
 8001202:	401a      	ands	r2, r3
 8001204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	22ff      	movs	r2, #255	@ 0xff
 800120c:	401a      	ands	r2, r3
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	2303      	movs	r3, #3
 8001216:	4003      	ands	r3, r0
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <__NVIC_SetPriority+0xd8>)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	001c      	movs	r4, r3
 8001224:	230f      	movs	r3, #15
 8001226:	4023      	ands	r3, r4
 8001228:	3b08      	subs	r3, #8
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	430a      	orrs	r2, r1
 800122e:	3306      	adds	r3, #6
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	18c3      	adds	r3, r0, r3
 8001234:	3304      	adds	r3, #4
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b003      	add	sp, #12
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	045b      	lsls	r3, r3, #17
 8001258:	429a      	cmp	r2, r3
 800125a:	d301      	bcc.n	8001260 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125c:	2301      	movs	r3, #1
 800125e:	e010      	b.n	8001282 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <SysTick_Config+0x44>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	3a01      	subs	r2, #1
 8001266:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001268:	2301      	movs	r3, #1
 800126a:	425b      	negs	r3, r3
 800126c:	2103      	movs	r1, #3
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff ff7c 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <SysTick_Config+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <SysTick_Config+0x44>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	210f      	movs	r1, #15
 800129c:	187b      	adds	r3, r7, r1
 800129e:	1c02      	adds	r2, r0, #0
 80012a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	0002      	movs	r2, r0
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff ff33 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ffaf 	bl	8001248 <SysTick_Config>
 80012ea:	0003      	movs	r3, r0
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800130a:	e14f      	b.n	80015ac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4091      	lsls	r1, r2
 8001316:	000a      	movs	r2, r1
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <HAL_GPIO_Init+0x30>
 8001322:	e140      	b.n	80015a6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	409a      	lsls	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	43da      	mvns	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	409a      	lsls	r2, r3
 800135e:	0013      	movs	r3, r2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	2201      	movs	r2, #1
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d017      	beq.n	80013da <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d123      	bne.n	800142e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	58d3      	ldr	r3, [r2, r3]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2207      	movs	r2, #7
 80013f8:	4013      	ands	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2107      	movs	r1, #7
 8001412:	400b      	ands	r3, r1
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	6939      	ldr	r1, [r7, #16]
 800142c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	401a      	ands	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	23c0      	movs	r3, #192	@ 0xc0
 8001468:	029b      	lsls	r3, r3, #10
 800146a:	4013      	ands	r3, r2
 800146c:	d100      	bne.n	8001470 <HAL_GPIO_Init+0x17c>
 800146e:	e09a      	b.n	80015a6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001470:	4b54      	ldr	r3, [pc, #336]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001474:	4b53      	ldr	r3, [pc, #332]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800147c:	4a52      	ldr	r2, [pc, #328]	@ (80015c8 <HAL_GPIO_Init+0x2d4>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	589b      	ldr	r3, [r3, r2]
 8001488:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	23a0      	movs	r3, #160	@ 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x1ea>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a47      	ldr	r2, [pc, #284]	@ (80015cc <HAL_GPIO_Init+0x2d8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x1e6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a46      	ldr	r2, [pc, #280]	@ (80015d0 <HAL_GPIO_Init+0x2dc>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x1e2>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x1de>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a44      	ldr	r2, [pc, #272]	@ (80015d8 <HAL_GPIO_Init+0x2e4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x1da>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014ce:	2306      	movs	r3, #6
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014de:	2300      	movs	r3, #0
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	2103      	movs	r1, #3
 80014e4:	400a      	ands	r2, r1
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	@ (80015c8 <HAL_GPIO_Init+0x2d4>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	035b      	lsls	r3, r3, #13
 8001516:	4013      	ands	r3, r2
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001522:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001528:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43da      	mvns	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	4013      	ands	r3, r2
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4013      	ands	r3, r2
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	40da      	lsrs	r2, r3
 80015b4:	1e13      	subs	r3, r2, #0
 80015b6:	d000      	beq.n	80015ba <HAL_GPIO_Init+0x2c6>
 80015b8:	e6a8      	b.n	800130c <HAL_GPIO_Init+0x18>
  }
}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	46c0      	nop			@ (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b006      	add	sp, #24
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	50000400 	.word	0x50000400
 80015d0:	50000800 	.word	0x50000800
 80015d4:	50000c00 	.word	0x50000c00
 80015d8:	50001c00 	.word	0x50001c00
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	000a      	movs	r2, r1
 80015ea:	1cbb      	adds	r3, r7, #2
 80015ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	1cba      	adds	r2, r7, #2
 80015f4:	8812      	ldrh	r2, [r2, #0]
 80015f6:	4013      	ands	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015fa:	230f      	movs	r3, #15
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	e003      	b.n	800160c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001604:	230f      	movs	r3, #15
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800160c:	230f      	movs	r3, #15
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	781b      	ldrb	r3, [r3, #0]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	0008      	movs	r0, r1
 8001624:	0011      	movs	r1, r2
 8001626:	1cbb      	adds	r3, r7, #2
 8001628:	1c02      	adds	r2, r0, #0
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	1c7b      	adds	r3, r7, #1
 800162e:	1c0a      	adds	r2, r1, #0
 8001630:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001632:	1c7b      	adds	r3, r7, #1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	1cbb      	adds	r3, r7, #2
 800163c:	881a      	ldrh	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001642:	e003      	b.n	800164c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001644:	1cbb      	adds	r3, r7, #2
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	f000 fbaf 	bl	8001dc6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001668:	4bcf      	ldr	r3, [pc, #828]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	220c      	movs	r2, #12
 800166e:	4013      	ands	r3, r2
 8001670:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001672:	4bcd      	ldr	r3, [pc, #820]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	025b      	lsls	r3, r3, #9
 800167a:	4013      	ands	r3, r2
 800167c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x36>
 8001688:	e07e      	b.n	8001788 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d007      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x68>
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	429a      	cmp	r2, r3
 800169e:	d10d      	bne.n	80016bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4bc1      	ldr	r3, [pc, #772]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	d100      	bne.n	80016ae <HAL_RCC_OscConfig+0x5a>
 80016ac:	e06b      	b.n	8001786 <HAL_RCC_OscConfig+0x132>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d167      	bne.n	8001786 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f000 fb85 	bl	8001dc6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x84>
 80016c8:	4bb7      	ldr	r3, [pc, #732]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4bb6      	ldr	r3, [pc, #728]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e027      	b.n	8001728 <HAL_RCC_OscConfig+0xd4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	23a0      	movs	r3, #160	@ 0xa0
 80016de:	02db      	lsls	r3, r3, #11
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10e      	bne.n	8001702 <HAL_RCC_OscConfig+0xae>
 80016e4:	4bb0      	ldr	r3, [pc, #704]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4baf      	ldr	r3, [pc, #700]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	02c9      	lsls	r1, r1, #11
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	4bad      	ldr	r3, [pc, #692]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4bac      	ldr	r3, [pc, #688]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	0249      	lsls	r1, r1, #9
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e012      	b.n	8001728 <HAL_RCC_OscConfig+0xd4>
 8001702:	4ba9      	ldr	r3, [pc, #676]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4ba8      	ldr	r3, [pc, #672]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001708:	49a8      	ldr	r1, [pc, #672]	@ (80019ac <HAL_RCC_OscConfig+0x358>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	4ba6      	ldr	r3, [pc, #664]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4ba2      	ldr	r3, [pc, #648]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4ba1      	ldr	r3, [pc, #644]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001722:	49a3      	ldr	r1, [pc, #652]	@ (80019b0 <HAL_RCC_OscConfig+0x35c>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d015      	beq.n	800175c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fcd4 	bl	80010dc <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001738:	e009      	b.n	800174e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173a:	f7ff fccf 	bl	80010dc <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b64      	cmp	r3, #100	@ 0x64
 8001746:	d902      	bls.n	800174e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	f000 fb3c 	bl	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800174e:	4b96      	ldr	r3, [pc, #600]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d0ef      	beq.n	800173a <HAL_RCC_OscConfig+0xe6>
 800175a:	e015      	b.n	8001788 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fcbe 	bl	80010dc <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001766:	f7ff fcb9 	bl	80010dc <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b64      	cmp	r3, #100	@ 0x64
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e326      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001778:	4b8b      	ldr	r3, [pc, #556]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	029b      	lsls	r3, r3, #10
 8001780:	4013      	ands	r3, r2
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x112>
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001786:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_RCC_OscConfig+0x140>
 8001792:	e08b      	b.n	80018ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d005      	beq.n	80017ac <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d13e      	bne.n	8001824 <HAL_RCC_OscConfig+0x1d0>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d13b      	bne.n	8001824 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017ac:	4b7e      	ldr	r3, [pc, #504]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	4013      	ands	r3, r2
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x16c>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e302      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b79      	ldr	r3, [pc, #484]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a7b      	ldr	r2, [pc, #492]	@ (80019b4 <HAL_RCC_OscConfig+0x360>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	021a      	lsls	r2, r3, #8
 80017d0:	4b75      	ldr	r3, [pc, #468]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d6:	4b74      	ldr	r3, [pc, #464]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2209      	movs	r2, #9
 80017dc:	4393      	bics	r3, r2
 80017de:	0019      	movs	r1, r3
 80017e0:	4b71      	ldr	r3, [pc, #452]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e8:	f000 fc40 	bl	800206c <HAL_RCC_GetSysClockFreq>
 80017ec:	0001      	movs	r1, r0
 80017ee:	4b6e      	ldr	r3, [pc, #440]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	220f      	movs	r2, #15
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a6f      	ldr	r2, [pc, #444]	@ (80019b8 <HAL_RCC_OscConfig+0x364>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	000a      	movs	r2, r1
 80017fe:	40da      	lsrs	r2, r3
 8001800:	4b6e      	ldr	r3, [pc, #440]	@ (80019bc <HAL_RCC_OscConfig+0x368>)
 8001802:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001804:	4b6e      	ldr	r3, [pc, #440]	@ (80019c0 <HAL_RCC_OscConfig+0x36c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2513      	movs	r5, #19
 800180a:	197c      	adds	r4, r7, r5
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff fc1f 	bl	8001050 <HAL_InitTick>
 8001812:	0003      	movs	r3, r0
 8001814:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001816:	197b      	adds	r3, r7, r5
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d046      	beq.n	80018ac <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800181e:	197b      	adds	r3, r7, r5
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	e2d0      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d027      	beq.n	800187a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800182a:	4b5f      	ldr	r3, [pc, #380]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2209      	movs	r2, #9
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	4b5c      	ldr	r3, [pc, #368]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc4e 	bl	80010dc <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fc49 	bl	80010dc <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e2b6      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001858:	4b53      	ldr	r3, [pc, #332]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2204      	movs	r2, #4
 800185e:	4013      	ands	r3, r2
 8001860:	d0f1      	beq.n	8001846 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b51      	ldr	r3, [pc, #324]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a53      	ldr	r2, [pc, #332]	@ (80019b4 <HAL_RCC_OscConfig+0x360>)
 8001868:	4013      	ands	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	021a      	lsls	r2, r3, #8
 8001872:	4b4d      	ldr	r3, [pc, #308]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	e018      	b.n	80018ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187a:	4b4b      	ldr	r3, [pc, #300]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b4a      	ldr	r3, [pc, #296]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001880:	2101      	movs	r1, #1
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fc29 	bl	80010dc <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fc24 	bl	80010dc <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e291      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4013      	ands	r3, r2
 80018aa:	d1f1      	bne.n	8001890 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2210      	movs	r2, #16
 80018b2:	4013      	ands	r3, r2
 80018b4:	d100      	bne.n	80018b8 <HAL_RCC_OscConfig+0x264>
 80018b6:	e0a1      	b.n	80019fc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d140      	bne.n	8001940 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018be:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x282>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e277      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b34      	ldr	r3, [pc, #208]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a3a      	ldr	r2, [pc, #232]	@ (80019c4 <HAL_RCC_OscConfig+0x370>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e4:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ea:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	0a19      	lsrs	r1, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	061a      	lsls	r2, r3, #24
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	3301      	adds	r3, #1
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	0212      	lsls	r2, r2, #8
 800190a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800190c:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	210f      	movs	r1, #15
 8001914:	400b      	ands	r3, r1
 8001916:	4928      	ldr	r1, [pc, #160]	@ (80019b8 <HAL_RCC_OscConfig+0x364>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_RCC_OscConfig+0x368>)
 800191e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001920:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <HAL_RCC_OscConfig+0x36c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2513      	movs	r5, #19
 8001926:	197c      	adds	r4, r7, r5
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fb91 	bl	8001050 <HAL_InitTick>
 800192e:	0003      	movs	r3, r0
 8001930:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001932:	197b      	adds	r3, r7, r5
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d060      	beq.n	80019fc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800193a:	197b      	adds	r3, r7, r5
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	e242      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03f      	beq.n	80019c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0049      	lsls	r1, r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fbc1 	bl	80010dc <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001960:	f7ff fbbc 	bl	80010dc <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e229      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <HAL_RCC_OscConfig+0x370>)
 8001984:	4013      	ands	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001992:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	0a19      	lsrs	r1, r3, #8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	061a      	lsls	r2, r3, #24
 80019a0:	4b01      	ldr	r3, [pc, #4]	@ (80019a8 <HAL_RCC_OscConfig+0x354>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	e029      	b.n	80019fc <HAL_RCC_OscConfig+0x3a8>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	fffeffff 	.word	0xfffeffff
 80019b0:	fffbffff 	.word	0xfffbffff
 80019b4:	ffffe0ff 	.word	0xffffe0ff
 80019b8:	0800399c 	.word	0x0800399c
 80019bc:	20000004 	.word	0x20000004
 80019c0:	20000008 	.word	0x20000008
 80019c4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c8:	4bbd      	ldr	r3, [pc, #756]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4bbc      	ldr	r3, [pc, #752]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 80019ce:	49bd      	ldr	r1, [pc, #756]	@ (8001cc4 <HAL_RCC_OscConfig+0x670>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fb82 	bl	80010dc <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019de:	f7ff fb7d 	bl	80010dc <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1ea      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019f0:	4bb3      	ldr	r3, [pc, #716]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2208      	movs	r2, #8
 8001a02:	4013      	ands	r3, r2
 8001a04:	d036      	beq.n	8001a74 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4bac      	ldr	r3, [pc, #688]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a12:	4bab      	ldr	r3, [pc, #684]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a14:	2101      	movs	r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fb5f 	bl	80010dc <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb5a 	bl	80010dc <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a36:	4ba2      	ldr	r3, [pc, #648]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d0f1      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3d0>
 8001a40:	e018      	b.n	8001a74 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b9f      	ldr	r3, [pc, #636]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a46:	4b9e      	ldr	r3, [pc, #632]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fb45 	bl	80010dc <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fb40 	bl	80010dc <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1ad      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a6a:	4b95      	ldr	r3, [pc, #596]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d1f1      	bne.n	8001a58 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d100      	bne.n	8001a80 <HAL_RCC_OscConfig+0x42c>
 8001a7e:	e0ae      	b.n	8001bde <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a80:	2027      	movs	r0, #39	@ 0x27
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a88:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	d109      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4b8a      	ldr	r3, [pc, #552]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a98:	4b89      	ldr	r3, [pc, #548]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001a9a:	2180      	movs	r1, #128	@ 0x80
 8001a9c:	0549      	lsls	r1, r1, #21
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b87      	ldr	r3, [pc, #540]	@ (8001cc8 <HAL_RCC_OscConfig+0x674>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d11a      	bne.n	8001aea <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab4:	4b84      	ldr	r3, [pc, #528]	@ (8001cc8 <HAL_RCC_OscConfig+0x674>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b83      	ldr	r3, [pc, #524]	@ (8001cc8 <HAL_RCC_OscConfig+0x674>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0049      	lsls	r1, r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb0b 	bl	80010dc <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7ff fb06 	bl	80010dc <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e173      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc8 <HAL_RCC_OscConfig+0x674>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
 8001af6:	4b72      	ldr	r3, [pc, #456]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001af8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001afa:	4b71      	ldr	r3, [pc, #452]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	0049      	lsls	r1, r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b04:	e031      	b.n	8001b6a <HAL_RCC_OscConfig+0x516>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4d4>
 8001b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b12:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b14:	496b      	ldr	r1, [pc, #428]	@ (8001cc4 <HAL_RCC_OscConfig+0x670>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b1a:	4b69      	ldr	r3, [pc, #420]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b1e:	4b68      	ldr	r3, [pc, #416]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b20:	496a      	ldr	r1, [pc, #424]	@ (8001ccc <HAL_RCC_OscConfig+0x678>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b26:	e020      	b.n	8001b6a <HAL_RCC_OscConfig+0x516>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	23a0      	movs	r3, #160	@ 0xa0
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d10e      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4fe>
 8001b34:	4b62      	ldr	r3, [pc, #392]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b38:	4b61      	ldr	r3, [pc, #388]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	00c9      	lsls	r1, r1, #3
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b42:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b46:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0049      	lsls	r1, r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0x516>
 8001b52:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b56:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b58:	495a      	ldr	r1, [pc, #360]	@ (8001cc4 <HAL_RCC_OscConfig+0x670>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b5e:	4b58      	ldr	r3, [pc, #352]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b62:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b64:	4959      	ldr	r1, [pc, #356]	@ (8001ccc <HAL_RCC_OscConfig+0x678>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fab3 	bl	80010dc <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7a:	e009      	b.n	8001b90 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff faae 	bl	80010dc <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	4a52      	ldr	r2, [pc, #328]	@ (8001cd0 <HAL_RCC_OscConfig+0x67c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e11a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b90:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001b92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x528>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fa9d 	bl	80010dc <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fa98 	bl	80010dc <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a47      	ldr	r2, [pc, #284]	@ (8001cd0 <HAL_RCC_OscConfig+0x67c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e104      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bbc:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001bbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d1ef      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc8:	2327      	movs	r3, #39	@ 0x27
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001bd8:	493e      	ldr	r1, [pc, #248]	@ (8001cd4 <HAL_RCC_OscConfig+0x680>)
 8001bda:	400a      	ands	r2, r1
 8001bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2220      	movs	r2, #32
 8001be4:	4013      	ands	r3, r2
 8001be6:	d049      	beq.n	8001c7c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d026      	beq.n	8001c3e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001bf0:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c08:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <HAL_RCC_OscConfig+0x684>)
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <HAL_RCC_OscConfig+0x684>)
 8001c0e:	2180      	movs	r1, #128	@ 0x80
 8001c10:	0189      	lsls	r1, r1, #6
 8001c12:	430a      	orrs	r2, r1
 8001c14:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff fa61 	bl	80010dc <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c20:	f7ff fa5c 	bl	80010dc <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0c9      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f1      	beq.n	8001c20 <HAL_RCC_OscConfig+0x5cc>
 8001c3c:	e01e      	b.n	8001c7c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	438a      	bics	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_RCC_OscConfig+0x684>)
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <HAL_RCC_OscConfig+0x684>)
 8001c50:	4922      	ldr	r1, [pc, #136]	@ (8001cdc <HAL_RCC_OscConfig+0x688>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fa41 	bl	80010dc <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c60:	f7ff fa3c 	bl	80010dc <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0a9      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f1      	bne.n	8001c60 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d100      	bne.n	8001c86 <HAL_RCC_OscConfig+0x632>
 8001c84:	e09e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d100      	bne.n	8001c8e <HAL_RCC_OscConfig+0x63a>
 8001c8c:	e077      	b.n	8001d7e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d158      	bne.n	8001d48 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_RCC_OscConfig+0x66c>)
 8001c9c:	4910      	ldr	r1, [pc, #64]	@ (8001ce0 <HAL_RCC_OscConfig+0x68c>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fa1b 	bl	80010dc <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001caa:	e01b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fa16 	bl	80010dc <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d914      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e083      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	fffffeff 	.word	0xfffffeff
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	fffffbff 	.word	0xfffffbff
 8001cd0:	00001388 	.word	0x00001388
 8001cd4:	efffffff 	.word	0xefffffff
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	ffffdfff 	.word	0xffffdfff
 8001ce0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	049b      	lsls	r3, r3, #18
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1dd      	bne.n	8001cac <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	4b37      	ldr	r3, [pc, #220]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a37      	ldr	r2, [pc, #220]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	0449      	lsls	r1, r1, #17
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f9dd 	bl	80010dc <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff f9d8 	bl	80010dc <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e045      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x6d4>
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d4e:	4922      	ldr	r1, [pc, #136]	@ (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f9c2 	bl	80010dc <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f9bd 	bl	80010dc <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e02a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	049b      	lsls	r3, r3, #18
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x70a>
 8001d7c:	e022      	b.n	8001dc4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e01d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_RCC_OscConfig+0x77c>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10f      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	23f0      	movs	r3, #240	@ 0xf0
 8001da4:	039b      	lsls	r3, r3, #14
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	23c0      	movs	r3, #192	@ 0xc0
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b00a      	add	sp, #40	@ 0x28
 8001dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	ff02ffff 	.word	0xff02ffff
 8001dd8:	feffffff 	.word	0xfeffffff

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e128      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b96      	ldr	r3, [pc, #600]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d91e      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b93      	ldr	r3, [pc, #588]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	4b90      	ldr	r3, [pc, #576]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e10:	f7ff f964 	bl	80010dc <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7ff f95f 	bl	80010dc <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a8a      	ldr	r2, [pc, #552]	@ (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e109      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b87      	ldr	r3, [pc, #540]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e46:	4b83      	ldr	r3, [pc, #524]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	22f0      	movs	r2, #240	@ 0xf0
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b7f      	ldr	r3, [pc, #508]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x8a>
 8001e64:	e089      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e6e:	4b79      	ldr	r3, [pc, #484]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	4013      	ands	r3, r2
 8001e78:	d120      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0e1      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e86:	4b73      	ldr	r3, [pc, #460]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d114      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0d5      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d109      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0ca      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eac:	4b69      	ldr	r3, [pc, #420]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0c2      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebc:	4b65      	ldr	r3, [pc, #404]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b62      	ldr	r3, [pc, #392]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff f904 	bl	80010dc <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d111      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f7ff f8fb 	bl	80010dc <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0a5      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef6:	4b57      	ldr	r3, [pc, #348]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	220c      	movs	r2, #12
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x106>
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d111      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7ff f8e5 	bl	80010dc <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4a4d      	ldr	r2, [pc, #308]	@ (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e08f      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f22:	4b4c      	ldr	r3, [pc, #304]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x132>
 8001f2e:	e024      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11b      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7ff f8cf 	bl	80010dc <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a42      	ldr	r2, [pc, #264]	@ (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e079      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	220c      	movs	r2, #12
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d1ef      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x15e>
 8001f5a:	e00e      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7ff f8be 	bl	80010dc <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	4a3a      	ldr	r2, [pc, #232]	@ (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e068      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f70:	4b38      	ldr	r3, [pc, #224]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	220c      	movs	r2, #12
 8001f76:	4013      	ands	r3, r2
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7a:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d21e      	bcs.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4393      	bics	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f9a:	f7ff f89f 	bl	80010dc <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff f89a 	bl	80010dc <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4a28      	ldr	r2, [pc, #160]	@ (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e044      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCC_ClockConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d1ee      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	@ (8002058 <HAL_RCC_ClockConfig+0x27c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4013      	ands	r3, r2
 8001fec:	d00a      	beq.n	8002004 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_RCC_ClockConfig+0x280>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00da      	lsls	r2, r3, #3
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002004:	f000 f832 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002008:	0001      	movs	r1, r0
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_RCC_ClockConfig+0x278>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	220f      	movs	r2, #15
 8002012:	4013      	ands	r3, r2
 8002014:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <HAL_RCC_ClockConfig+0x284>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	000a      	movs	r2, r1
 800201a:	40da      	lsrs	r2, r3
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_RCC_ClockConfig+0x288>)
 800201e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_RCC_ClockConfig+0x28c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	250b      	movs	r5, #11
 8002026:	197c      	adds	r4, r7, r5
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff f811 	bl	8001050 <HAL_InitTick>
 800202e:	0003      	movs	r3, r0
 8002030:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002032:	197b      	adds	r3, r7, r5
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800203a:	197b      	adds	r3, r7, r5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	e000      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	40022000 	.word	0x40022000
 8002050:	00001388 	.word	0x00001388
 8002054:	40021000 	.word	0x40021000
 8002058:	fffff8ff 	.word	0xfffff8ff
 800205c:	ffffc7ff 	.word	0xffffc7ff
 8002060:	0800399c 	.word	0x0800399c
 8002064:	20000004 	.word	0x20000004
 8002068:	20000008 	.word	0x20000008

0800206c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b08e      	sub	sp, #56	@ 0x38
 8002070:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002072:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800207a:	230c      	movs	r3, #12
 800207c:	4013      	ands	r3, r2
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d014      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 8002082:	d900      	bls.n	8002086 <HAL_RCC_GetSysClockFreq+0x1a>
 8002084:	e07b      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x112>
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x24>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800208e:	e076      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002090:	4b44      	ldr	r3, [pc, #272]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	4013      	ands	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800209a:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800209e:	e07c      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80020a0:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x140>)
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80020a4:	e079      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b42      	ldr	r3, [pc, #264]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80020aa:	e076      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ae:	0c9a      	lsrs	r2, r3, #18
 80020b0:	230f      	movs	r3, #15
 80020b2:	401a      	ands	r2, r3
 80020b4:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x148>)
 80020b6:	5c9b      	ldrb	r3, [r3, r2]
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020bc:	0d9a      	lsrs	r2, r3, #22
 80020be:	2303      	movs	r3, #3
 80020c0:	4013      	ands	r3, r2
 80020c2:	3301      	adds	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	4013      	ands	r3, r2
 80020d0:	d01a      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	4a35      	ldr	r2, [pc, #212]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80020dc:	2300      	movs	r3, #0
 80020de:	69b8      	ldr	r0, [r7, #24]
 80020e0:	69f9      	ldr	r1, [r7, #28]
 80020e2:	f7fe f8c7 	bl	8000274 <__aeabi_lmul>
 80020e6:	0002      	movs	r2, r0
 80020e8:	000b      	movs	r3, r1
 80020ea:	0010      	movs	r0, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f7fe f89b 	bl	8000234 <__aeabi_uldivmod>
 80020fe:	0002      	movs	r2, r0
 8002100:	000b      	movs	r3, r1
 8002102:	0013      	movs	r3, r2
 8002104:	637b      	str	r3, [r7, #52]	@ 0x34
 8002106:	e037      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002108:	4b26      	ldr	r3, [pc, #152]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2210      	movs	r2, #16
 800210e:	4013      	ands	r3, r2
 8002110:	d01a      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800211c:	2300      	movs	r3, #0
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	f7fe f8a7 	bl	8000274 <__aeabi_lmul>
 8002126:	0002      	movs	r2, r0
 8002128:	000b      	movs	r3, r1
 800212a:	0010      	movs	r0, r2
 800212c:	0019      	movs	r1, r3
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f7fe f87b 	bl	8000234 <__aeabi_uldivmod>
 800213e:	0002      	movs	r2, r0
 8002140:	000b      	movs	r3, r1
 8002142:	0013      	movs	r3, r2
 8002144:	637b      	str	r3, [r7, #52]	@ 0x34
 8002146:	e017      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214a:	0018      	movs	r0, r3
 800214c:	2300      	movs	r3, #0
 800214e:	0019      	movs	r1, r3
 8002150:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x140>)
 8002152:	2300      	movs	r3, #0
 8002154:	f7fe f88e 	bl	8000274 <__aeabi_lmul>
 8002158:	0002      	movs	r2, r0
 800215a:	000b      	movs	r3, r1
 800215c:	0010      	movs	r0, r2
 800215e:	0019      	movs	r1, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	001c      	movs	r4, r3
 8002164:	2300      	movs	r3, #0
 8002166:	001d      	movs	r5, r3
 8002168:	0022      	movs	r2, r4
 800216a:	002b      	movs	r3, r5
 800216c:	f7fe f862 	bl	8000234 <__aeabi_uldivmod>
 8002170:	0002      	movs	r2, r0
 8002172:	000b      	movs	r3, r1
 8002174:	0013      	movs	r3, r2
 8002176:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800217c:	e00d      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0b5b      	lsrs	r3, r3, #13
 8002184:	2207      	movs	r2, #7
 8002186:	4013      	ands	r3, r2
 8002188:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	3301      	adds	r3, #1
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	0212      	lsls	r2, r2, #8
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002198:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b00e      	add	sp, #56	@ 0x38
 80021a2:	bdb0      	pop	{r4, r5, r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	003d0900 	.word	0x003d0900
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	080039ac 	.word	0x080039ac

080021b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e032      	b.n	8002230 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2239      	movs	r2, #57	@ 0x39
 80021ce:	5c9b      	ldrb	r3, [r3, r2]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d107      	bne.n	80021e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2238      	movs	r2, #56	@ 0x38
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7fe fe33 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2239      	movs	r2, #57	@ 0x39
 80021ea:	2102      	movs	r1, #2
 80021ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	0019      	movs	r1, r3
 80021f8:	0010      	movs	r0, r2
 80021fa:	f000 fcb1 	bl	8002b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	223e      	movs	r2, #62	@ 0x3e
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	223a      	movs	r2, #58	@ 0x3a
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223b      	movs	r2, #59	@ 0x3b
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	223c      	movs	r2, #60	@ 0x3c
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	223d      	movs	r2, #61	@ 0x3d
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2239      	movs	r2, #57	@ 0x39
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e032      	b.n	80022b0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2239      	movs	r2, #57	@ 0x39
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2238      	movs	r2, #56	@ 0x38
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 f829 	bl	80022b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2239      	movs	r2, #57	@ 0x39
 800226a:	2102      	movs	r1, #2
 800226c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	0019      	movs	r1, r3
 8002278:	0010      	movs	r0, r2
 800227a:	f000 fc71 	bl	8002b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	223e      	movs	r2, #62	@ 0x3e
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223a      	movs	r2, #58	@ 0x3a
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223b      	movs	r2, #59	@ 0x3b
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	@ 0x3c
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	223d      	movs	r2, #61	@ 0x3d
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2239      	movs	r2, #57	@ 0x39
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d108      	bne.n	80022ea <HAL_TIM_PWM_Start+0x22>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	223a      	movs	r2, #58	@ 0x3a
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	4193      	sbcs	r3, r2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	e01f      	b.n	800232a <HAL_TIM_PWM_Start+0x62>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d108      	bne.n	8002302 <HAL_TIM_PWM_Start+0x3a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	223b      	movs	r2, #59	@ 0x3b
 80022f4:	5c9b      	ldrb	r3, [r3, r2]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	4193      	sbcs	r3, r2
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	e013      	b.n	800232a <HAL_TIM_PWM_Start+0x62>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d108      	bne.n	800231a <HAL_TIM_PWM_Start+0x52>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223c      	movs	r2, #60	@ 0x3c
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	4193      	sbcs	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e007      	b.n	800232a <HAL_TIM_PWM_Start+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223d      	movs	r2, #61	@ 0x3d
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	1e5a      	subs	r2, r3, #1
 8002326:	4193      	sbcs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e04d      	b.n	80023ce <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <HAL_TIM_PWM_Start+0x7a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	223a      	movs	r2, #58	@ 0x3a
 800233c:	2102      	movs	r1, #2
 800233e:	5499      	strb	r1, [r3, r2]
 8002340:	e013      	b.n	800236a <HAL_TIM_PWM_Start+0xa2>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d104      	bne.n	8002352 <HAL_TIM_PWM_Start+0x8a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	223b      	movs	r2, #59	@ 0x3b
 800234c:	2102      	movs	r1, #2
 800234e:	5499      	strb	r1, [r3, r2]
 8002350:	e00b      	b.n	800236a <HAL_TIM_PWM_Start+0xa2>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d104      	bne.n	8002362 <HAL_TIM_PWM_Start+0x9a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	223c      	movs	r2, #60	@ 0x3c
 800235c:	2102      	movs	r1, #2
 800235e:	5499      	strb	r1, [r3, r2]
 8002360:	e003      	b.n	800236a <HAL_TIM_PWM_Start+0xa2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	@ 0x3d
 8002366:	2102      	movs	r1, #2
 8002368:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	0018      	movs	r0, r3
 8002374:	f000 fde6 	bl	8002f44 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	05db      	lsls	r3, r3, #23
 8002380:	429a      	cmp	r2, r3
 8002382:	d009      	beq.n	8002398 <HAL_TIM_PWM_Start+0xd0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <HAL_TIM_PWM_Start+0x110>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_TIM_PWM_Start+0xd0>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <HAL_TIM_PWM_Start+0x114>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d111      	bne.n	80023bc <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2207      	movs	r2, #7
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d010      	beq.n	80023cc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	e007      	b.n	80023cc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	40010800 	.word	0x40010800
 80023dc:	40011400 	.word	0x40011400

080023e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e088      	b.n	8002506 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2239      	movs	r2, #57	@ 0x39
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2238      	movs	r2, #56	@ 0x38
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0018      	movs	r0, r3
 800240c:	f7fe fcd4 	bl	8000db8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2239      	movs	r2, #57	@ 0x39
 8002414:	2102      	movs	r1, #2
 8002416:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	493b      	ldr	r1, [pc, #236]	@ (8002510 <HAL_TIM_Encoder_Init+0x130>)
 8002424:	400a      	ands	r2, r1
 8002426:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	0019      	movs	r1, r3
 8002432:	0010      	movs	r0, r2
 8002434:	f000 fb94 	bl	8002b60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4a2d      	ldr	r2, [pc, #180]	@ (8002514 <HAL_TIM_Encoder_Init+0x134>)
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4313      	orrs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4a28      	ldr	r2, [pc, #160]	@ (8002518 <HAL_TIM_Encoder_Init+0x138>)
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4a27      	ldr	r2, [pc, #156]	@ (800251c <HAL_TIM_Encoder_Init+0x13c>)
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	4313      	orrs	r3, r2
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	011a      	lsls	r2, r3, #4
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	031b      	lsls	r3, r3, #12
 80024a2:	4313      	orrs	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2222      	movs	r2, #34	@ 0x22
 80024ae:	4393      	bics	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2288      	movs	r2, #136	@ 0x88
 80024b6:	4393      	bics	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4313      	orrs	r3, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	223e      	movs	r2, #62	@ 0x3e
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223a      	movs	r2, #58	@ 0x3a
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223b      	movs	r2, #59	@ 0x3b
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2239      	movs	r2, #57	@ 0x39
 8002500:	2101      	movs	r1, #1
 8002502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b006      	add	sp, #24
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	ffffbff8 	.word	0xffffbff8
 8002514:	fffffcfc 	.word	0xfffffcfc
 8002518:	fffff3f3 	.word	0xfffff3f3
 800251c:	ffff0f0f 	.word	0xffff0f0f

08002520 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800252a:	200f      	movs	r0, #15
 800252c:	183b      	adds	r3, r7, r0
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	213a      	movs	r1, #58	@ 0x3a
 8002532:	5c52      	ldrb	r2, [r2, r1]
 8002534:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002536:	230e      	movs	r3, #14
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	213b      	movs	r1, #59	@ 0x3b
 800253e:	5c52      	ldrb	r2, [r2, r1]
 8002540:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_TIM_Encoder_Start+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002548:	183b      	adds	r3, r7, r0
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_TIM_Encoder_Start+0x34>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e056      	b.n	8002602 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	223a      	movs	r2, #58	@ 0x3a
 8002558:	2102      	movs	r1, #2
 800255a:	5499      	strb	r1, [r3, r2]
 800255c:	e022      	b.n	80025a4 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d10b      	bne.n	800257c <HAL_TIM_Encoder_Start+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002564:	230e      	movs	r3, #14
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_TIM_Encoder_Start+0x52>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e047      	b.n	8002602 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223b      	movs	r2, #59	@ 0x3b
 8002576:	2102      	movs	r1, #2
 8002578:	5499      	strb	r1, [r3, r2]
 800257a:	e013      	b.n	80025a4 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800257c:	230f      	movs	r3, #15
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d104      	bne.n	8002590 <HAL_TIM_Encoder_Start+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002586:	230e      	movs	r3, #14
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_TIM_Encoder_Start+0x74>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e036      	b.n	8002602 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	223a      	movs	r2, #58	@ 0x3a
 8002598:	2102      	movs	r1, #2
 800259a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	223b      	movs	r2, #59	@ 0x3b
 80025a0:	2102      	movs	r1, #2
 80025a2:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_Encoder_Start+0x92>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d008      	beq.n	80025c2 <HAL_TIM_Encoder_Start+0xa2>
 80025b0:	e00f      	b.n	80025d2 <HAL_TIM_Encoder_Start+0xb2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	2100      	movs	r1, #0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 fcc2 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 80025c0:	e016      	b.n	80025f0 <HAL_TIM_Encoder_Start+0xd0>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2201      	movs	r2, #1
 80025c8:	2104      	movs	r1, #4
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 fcba 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 80025d0:	e00e      	b.n	80025f0 <HAL_TIM_Encoder_Start+0xd0>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	2100      	movs	r1, #0
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fcb2 	bl	8002f44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	2104      	movs	r1, #4
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fcab 	bl	8002f44 <TIM_CCxChannelCmd>
      break;
 80025ee:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2101      	movs	r1, #1
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d124      	bne.n	800266a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d11d      	bne.n	800266a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2203      	movs	r2, #3
 8002634:	4252      	negs	r2, r2
 8002636:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fa6f 	bl	8002b30 <HAL_TIM_IC_CaptureCallback>
 8002652:	e007      	b.n	8002664 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fa62 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fa6e 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2204      	movs	r2, #4
 8002672:	4013      	ands	r3, r2
 8002674:	2b04      	cmp	r3, #4
 8002676:	d125      	bne.n	80026c4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	2b04      	cmp	r3, #4
 8002684:	d11e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2205      	movs	r2, #5
 800268c:	4252      	negs	r2, r2
 800268e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	23c0      	movs	r3, #192	@ 0xc0
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 fa42 	bl	8002b30 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e007      	b.n	80026be <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fa35 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fa41 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2208      	movs	r2, #8
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d124      	bne.n	800271c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2208      	movs	r2, #8
 80026da:	4013      	ands	r3, r2
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d11d      	bne.n	800271c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2209      	movs	r2, #9
 80026e6:	4252      	negs	r2, r2
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2204      	movs	r2, #4
 80026ee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2203      	movs	r2, #3
 80026f8:	4013      	ands	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fa16 	bl	8002b30 <HAL_TIM_IC_CaptureCallback>
 8002704:	e007      	b.n	8002716 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 fa09 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 fa15 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2210      	movs	r2, #16
 8002724:	4013      	ands	r3, r2
 8002726:	2b10      	cmp	r3, #16
 8002728:	d125      	bne.n	8002776 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2210      	movs	r2, #16
 8002732:	4013      	ands	r3, r2
 8002734:	2b10      	cmp	r3, #16
 8002736:	d11e      	bne.n	8002776 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2211      	movs	r2, #17
 800273e:	4252      	negs	r2, r2
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2208      	movs	r2, #8
 8002746:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	23c0      	movs	r3, #192	@ 0xc0
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f9e9 	bl	8002b30 <HAL_TIM_IC_CaptureCallback>
 800275e:	e007      	b.n	8002770 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f9dc 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f9e8 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2201      	movs	r2, #1
 800277e:	4013      	ands	r3, r2
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10f      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2202      	movs	r2, #2
 8002798:	4252      	negs	r2, r2
 800279a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f9b6 	bl	8002b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d10f      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2240      	movs	r2, #64	@ 0x40
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d108      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2241      	movs	r2, #65	@ 0x41
 80027c6:	4252      	negs	r2, r2
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f9bf 	bl	8002b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b002      	add	sp, #8
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2317      	movs	r3, #23
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2238      	movs	r2, #56	@ 0x38
 80027f4:	5c9b      	ldrb	r3, [r3, r2]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e0ad      	b.n	800295a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2238      	movs	r2, #56	@ 0x38
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d100      	bne.n	800280e <HAL_TIM_PWM_ConfigChannel+0x32>
 800280c:	e076      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x120>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d900      	bls.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002814:	e095      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d04e      	beq.n	80028ba <HAL_TIM_PWM_ConfigChannel+0xde>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d900      	bls.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002822:	e08e      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_PWM_ConfigChannel+0x56>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d021      	beq.n	8002874 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002830:	e087      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f000 f9e4 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2108      	movs	r1, #8
 800284c:	430a      	orrs	r2, r1
 800284e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6999      	ldr	r1, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	619a      	str	r2, [r3, #24]
      break;
 8002872:	e06b      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f000 f9ff 	bl	8002c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2180      	movs	r1, #128	@ 0x80
 800288e:	0109      	lsls	r1, r1, #4
 8002890:	430a      	orrs	r2, r1
 8002892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4931      	ldr	r1, [pc, #196]	@ (8002964 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6999      	ldr	r1, [r3, #24]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	021a      	lsls	r2, r3, #8
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	619a      	str	r2, [r3, #24]
      break;
 80028b8:	e048      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	0011      	movs	r1, r2
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 fa1e 	bl	8002d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2108      	movs	r1, #8
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2104      	movs	r1, #4
 80028e4:	438a      	bics	r2, r1
 80028e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69d9      	ldr	r1, [r3, #28]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	61da      	str	r2, [r3, #28]
      break;
 80028fa:	e027      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f000 fa3d 	bl	8002d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	0109      	lsls	r1, r1, #4
 8002918:	430a      	orrs	r2, r1
 800291a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	490f      	ldr	r1, [pc, #60]	@ (8002964 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002928:	400a      	ands	r2, r1
 800292a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69d9      	ldr	r1, [r3, #28]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	021a      	lsls	r2, r3, #8
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	61da      	str	r2, [r3, #28]
      break;
 8002940:	e004      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002942:	2317      	movs	r3, #23
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
      break;
 800294a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2238      	movs	r2, #56	@ 0x38
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]

  return status;
 8002954:	2317      	movs	r3, #23
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b006      	add	sp, #24
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	fffffbff 	.word	0xfffffbff

08002968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	230f      	movs	r3, #15
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2238      	movs	r2, #56	@ 0x38
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x20>
 8002984:	2302      	movs	r3, #2
 8002986:	e0bc      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x19a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2238      	movs	r2, #56	@ 0x38
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2239      	movs	r2, #57	@ 0x39
 8002994:	2102      	movs	r1, #2
 8002996:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2277      	movs	r2, #119	@ 0x77
 80029a4:	4393      	bics	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4a58      	ldr	r2, [pc, #352]	@ (8002b0c <HAL_TIM_ConfigClockSource+0x1a4>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	0192      	lsls	r2, r2, #6
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0xde>
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	0192      	lsls	r2, r2, #6
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d900      	bls.n	80029ce <HAL_TIM_ConfigClockSource+0x66>
 80029cc:	e088      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029ce:	2280      	movs	r2, #128	@ 0x80
 80029d0:	0152      	lsls	r2, r2, #5
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d100      	bne.n	80029d8 <HAL_TIM_ConfigClockSource+0x70>
 80029d6:	e088      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x182>
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	0152      	lsls	r2, r2, #5
 80029dc:	4293      	cmp	r3, r2
 80029de:	d900      	bls.n	80029e2 <HAL_TIM_ConfigClockSource+0x7a>
 80029e0:	e07e      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029e2:	2b70      	cmp	r3, #112	@ 0x70
 80029e4:	d018      	beq.n	8002a18 <HAL_TIM_ConfigClockSource+0xb0>
 80029e6:	d900      	bls.n	80029ea <HAL_TIM_ConfigClockSource+0x82>
 80029e8:	e07a      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029ea:	2b60      	cmp	r3, #96	@ 0x60
 80029ec:	d04f      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x126>
 80029ee:	d900      	bls.n	80029f2 <HAL_TIM_ConfigClockSource+0x8a>
 80029f0:	e076      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029f2:	2b50      	cmp	r3, #80	@ 0x50
 80029f4:	d03b      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x106>
 80029f6:	d900      	bls.n	80029fa <HAL_TIM_ConfigClockSource+0x92>
 80029f8:	e072      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029fa:	2b40      	cmp	r3, #64	@ 0x40
 80029fc:	d057      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x146>
 80029fe:	d900      	bls.n	8002a02 <HAL_TIM_ConfigClockSource+0x9a>
 8002a00:	e06e      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 8002a02:	2b30      	cmp	r3, #48	@ 0x30
 8002a04:	d063      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a06:	d86b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d060      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a0c:	d868      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d05d      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d05b      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a16:	e063      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a28:	f000 fa6c 	bl	8002f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2277      	movs	r2, #119	@ 0x77
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
      break;
 8002a44:	e052      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a56:	f000 fa55 	bl	8002f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	01c9      	lsls	r1, r1, #7
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
      break;
 8002a6c:	e03e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	f000 f9c8 	bl	8002e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2150      	movs	r1, #80	@ 0x50
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fa22 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e02e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	f000 f9e6 	bl	8002e6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2160      	movs	r1, #96	@ 0x60
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fa12 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e01e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	001a      	movs	r2, r3
 8002abc:	f000 f9a8 	bl	8002e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2140      	movs	r1, #64	@ 0x40
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 fa02 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002acc:	e00e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f000 f9f9 	bl	8002ed0 <TIM_ITRx_SetConfig>
      break;
 8002ade:	e005      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
      break;
 8002ae8:	e000      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002aea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2239      	movs	r2, #57	@ 0x39
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2238      	movs	r2, #56	@ 0x38
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

  return status;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	ffff00ff 	.word	0xffff00ff

08002b10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d007      	beq.n	8002b8a <TIM_Base_SetConfig+0x2a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bfc <TIM_Base_SetConfig+0x9c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_Base_SetConfig+0x2a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1e      	ldr	r2, [pc, #120]	@ (8002c00 <TIM_Base_SetConfig+0xa0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2270      	movs	r2, #112	@ 0x70
 8002b8e:	4393      	bics	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	05db      	lsls	r3, r3, #23
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d007      	beq.n	8002bb6 <TIM_Base_SetConfig+0x56>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	@ (8002bfc <TIM_Base_SetConfig+0x9c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0x56>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <TIM_Base_SetConfig+0xa0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a12      	ldr	r2, [pc, #72]	@ (8002c04 <TIM_Base_SetConfig+0xa4>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2280      	movs	r2, #128	@ 0x80
 8002bcc:	4393      	bics	r3, r2
 8002bce:	001a      	movs	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	615a      	str	r2, [r3, #20]
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b004      	add	sp, #16
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	40011400 	.word	0x40011400
 8002c04:	fffffcff 	.word	0xfffffcff

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4393      	bics	r3, r2
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2270      	movs	r2, #112	@ 0x70
 8002c36:	4393      	bics	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	4393      	bics	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4393      	bics	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b006      	add	sp, #24
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	4393      	bics	r3, r2
 8002c92:	001a      	movs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <TIM_OC2_SetConfig+0x7c>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <TIM_OC2_SetConfig+0x80>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4393      	bics	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	621a      	str	r2, [r3, #32]
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	ffff8fff 	.word	0xffff8fff
 8002d00:	fffffcff 	.word	0xfffffcff

08002d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a1a      	ldr	r2, [pc, #104]	@ (8002d7c <TIM_OC3_SetConfig+0x78>)
 8002d14:	401a      	ands	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2270      	movs	r2, #112	@ 0x70
 8002d30:	4393      	bics	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2203      	movs	r2, #3
 8002d38:	4393      	bics	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <TIM_OC3_SetConfig+0x7c>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	46c0      	nop			@ (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	fffffeff 	.word	0xfffffeff
 8002d80:	fffffdff 	.word	0xfffffdff

08002d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <TIM_OC4_SetConfig+0x7c>)
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <TIM_OC4_SetConfig+0x80>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <TIM_OC4_SetConfig+0x84>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <TIM_OC4_SetConfig+0x88>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b006      	add	sp, #24
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	ffffefff 	.word	0xffffefff
 8002e04:	ffff8fff 	.word	0xffff8fff
 8002e08:	fffffcff 	.word	0xfffffcff
 8002e0c:	ffffdfff 	.word	0xffffdfff

08002e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	2201      	movs	r2, #1
 8002e28:	4393      	bics	r3, r2
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	22f0      	movs	r2, #240	@ 0xf0
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	220a      	movs	r2, #10
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b006      	add	sp, #24
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	4393      	bics	r3, r2
 8002e80:	001a      	movs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <TIM_TI2_ConfigInputStage+0x60>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	031b      	lsls	r3, r3, #12
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	22a0      	movs	r2, #160	@ 0xa0
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b006      	add	sp, #24
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	ffff0fff 	.word	0xffff0fff

08002ed0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2270      	movs	r2, #112	@ 0x70
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	2207      	movs	r2, #7
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]
}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b004      	add	sp, #16
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <TIM_ETR_SetConfig+0x3c>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b006      	add	sp, #24
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	ffff00ff 	.word	0xffff00ff

08002f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	221f      	movs	r2, #31
 8002f54:	4013      	ands	r3, r2
 8002f56:	2201      	movs	r2, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	43d2      	mvns	r2, r2
 8002f66:	401a      	ands	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	211f      	movs	r1, #31
 8002f74:	400b      	ands	r3, r1
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4099      	lsls	r1, r3
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b006      	add	sp, #24
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2238      	movs	r2, #56	@ 0x38
 8002f9a:	5c9b      	ldrb	r3, [r3, r2]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e042      	b.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2238      	movs	r2, #56	@ 0x38
 8002fa8:	2101      	movs	r1, #1
 8002faa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2239      	movs	r2, #57	@ 0x39
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2270      	movs	r2, #112	@ 0x70
 8002fc8:	4393      	bics	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d009      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a11      	ldr	r2, [pc, #68]	@ (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10c      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	4393      	bics	r3, r2
 8003004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2239      	movs	r2, #57	@ 0x39
 800301c:	2101      	movs	r1, #1
 800301e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2238      	movs	r2, #56	@ 0x38
 8003024:	2100      	movs	r1, #0
 8003026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	40010800 	.word	0x40010800
 8003038:	40011400 	.word	0x40011400

0800303c <siprintf>:
 800303c:	b40e      	push	{r1, r2, r3}
 800303e:	b500      	push	{lr}
 8003040:	490b      	ldr	r1, [pc, #44]	@ (8003070 <siprintf+0x34>)
 8003042:	b09c      	sub	sp, #112	@ 0x70
 8003044:	ab1d      	add	r3, sp, #116	@ 0x74
 8003046:	9002      	str	r0, [sp, #8]
 8003048:	9006      	str	r0, [sp, #24]
 800304a:	9107      	str	r1, [sp, #28]
 800304c:	9104      	str	r1, [sp, #16]
 800304e:	4809      	ldr	r0, [pc, #36]	@ (8003074 <siprintf+0x38>)
 8003050:	4909      	ldr	r1, [pc, #36]	@ (8003078 <siprintf+0x3c>)
 8003052:	cb04      	ldmia	r3!, {r2}
 8003054:	9105      	str	r1, [sp, #20]
 8003056:	6800      	ldr	r0, [r0, #0]
 8003058:	a902      	add	r1, sp, #8
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	f000 f99e 	bl	800339c <_svfiprintf_r>
 8003060:	2200      	movs	r2, #0
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	b01c      	add	sp, #112	@ 0x70
 8003068:	bc08      	pop	{r3}
 800306a:	b003      	add	sp, #12
 800306c:	4718      	bx	r3
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	7fffffff 	.word	0x7fffffff
 8003074:	20000010 	.word	0x20000010
 8003078:	ffff0208 	.word	0xffff0208

0800307c <memset>:
 800307c:	0003      	movs	r3, r0
 800307e:	1882      	adds	r2, r0, r2
 8003080:	4293      	cmp	r3, r2
 8003082:	d100      	bne.n	8003086 <memset+0xa>
 8003084:	4770      	bx	lr
 8003086:	7019      	strb	r1, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	e7f9      	b.n	8003080 <memset+0x4>

0800308c <__errno>:
 800308c:	4b01      	ldr	r3, [pc, #4]	@ (8003094 <__errno+0x8>)
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	4770      	bx	lr
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	20000010 	.word	0x20000010

08003098 <__libc_init_array>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	2600      	movs	r6, #0
 800309c:	4c0c      	ldr	r4, [pc, #48]	@ (80030d0 <__libc_init_array+0x38>)
 800309e:	4d0d      	ldr	r5, [pc, #52]	@ (80030d4 <__libc_init_array+0x3c>)
 80030a0:	1b64      	subs	r4, r4, r5
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	d109      	bne.n	80030bc <__libc_init_array+0x24>
 80030a8:	2600      	movs	r6, #0
 80030aa:	f000 fc65 	bl	8003978 <_init>
 80030ae:	4c0a      	ldr	r4, [pc, #40]	@ (80030d8 <__libc_init_array+0x40>)
 80030b0:	4d0a      	ldr	r5, [pc, #40]	@ (80030dc <__libc_init_array+0x44>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	42a6      	cmp	r6, r4
 80030b8:	d105      	bne.n	80030c6 <__libc_init_array+0x2e>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	00b3      	lsls	r3, r6, #2
 80030be:	58eb      	ldr	r3, [r5, r3]
 80030c0:	4798      	blx	r3
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7ee      	b.n	80030a4 <__libc_init_array+0xc>
 80030c6:	00b3      	lsls	r3, r6, #2
 80030c8:	58eb      	ldr	r3, [r5, r3]
 80030ca:	4798      	blx	r3
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7f2      	b.n	80030b6 <__libc_init_array+0x1e>
 80030d0:	080039f0 	.word	0x080039f0
 80030d4:	080039f0 	.word	0x080039f0
 80030d8:	080039f4 	.word	0x080039f4
 80030dc:	080039f0 	.word	0x080039f0

080030e0 <__retarget_lock_acquire_recursive>:
 80030e0:	4770      	bx	lr

080030e2 <__retarget_lock_release_recursive>:
 80030e2:	4770      	bx	lr

080030e4 <_free_r>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	0005      	movs	r5, r0
 80030e8:	1e0c      	subs	r4, r1, #0
 80030ea:	d010      	beq.n	800310e <_free_r+0x2a>
 80030ec:	3c04      	subs	r4, #4
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da00      	bge.n	80030f6 <_free_r+0x12>
 80030f4:	18e4      	adds	r4, r4, r3
 80030f6:	0028      	movs	r0, r5
 80030f8:	f000 f8e0 	bl	80032bc <__malloc_lock>
 80030fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003174 <_free_r+0x90>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <_free_r+0x2c>
 8003104:	6063      	str	r3, [r4, #4]
 8003106:	6014      	str	r4, [r2, #0]
 8003108:	0028      	movs	r0, r5
 800310a:	f000 f8df 	bl	80032cc <__malloc_unlock>
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	42a3      	cmp	r3, r4
 8003112:	d908      	bls.n	8003126 <_free_r+0x42>
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	1821      	adds	r1, r4, r0
 8003118:	428b      	cmp	r3, r1
 800311a:	d1f3      	bne.n	8003104 <_free_r+0x20>
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	1809      	adds	r1, r1, r0
 8003122:	6021      	str	r1, [r4, #0]
 8003124:	e7ee      	b.n	8003104 <_free_r+0x20>
 8003126:	001a      	movs	r2, r3
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <_free_r+0x4e>
 800312e:	42a3      	cmp	r3, r4
 8003130:	d9f9      	bls.n	8003126 <_free_r+0x42>
 8003132:	6811      	ldr	r1, [r2, #0]
 8003134:	1850      	adds	r0, r2, r1
 8003136:	42a0      	cmp	r0, r4
 8003138:	d10b      	bne.n	8003152 <_free_r+0x6e>
 800313a:	6820      	ldr	r0, [r4, #0]
 800313c:	1809      	adds	r1, r1, r0
 800313e:	1850      	adds	r0, r2, r1
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	4283      	cmp	r3, r0
 8003144:	d1e0      	bne.n	8003108 <_free_r+0x24>
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	1841      	adds	r1, r0, r1
 800314c:	6011      	str	r1, [r2, #0]
 800314e:	6053      	str	r3, [r2, #4]
 8003150:	e7da      	b.n	8003108 <_free_r+0x24>
 8003152:	42a0      	cmp	r0, r4
 8003154:	d902      	bls.n	800315c <_free_r+0x78>
 8003156:	230c      	movs	r3, #12
 8003158:	602b      	str	r3, [r5, #0]
 800315a:	e7d5      	b.n	8003108 <_free_r+0x24>
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	1821      	adds	r1, r4, r0
 8003160:	428b      	cmp	r3, r1
 8003162:	d103      	bne.n	800316c <_free_r+0x88>
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	1809      	adds	r1, r1, r0
 800316a:	6021      	str	r1, [r4, #0]
 800316c:	6063      	str	r3, [r4, #4]
 800316e:	6054      	str	r4, [r2, #4]
 8003170:	e7ca      	b.n	8003108 <_free_r+0x24>
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	20000284 	.word	0x20000284

08003178 <sbrk_aligned>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4e0f      	ldr	r6, [pc, #60]	@ (80031b8 <sbrk_aligned+0x40>)
 800317c:	000d      	movs	r5, r1
 800317e:	6831      	ldr	r1, [r6, #0]
 8003180:	0004      	movs	r4, r0
 8003182:	2900      	cmp	r1, #0
 8003184:	d102      	bne.n	800318c <sbrk_aligned+0x14>
 8003186:	f000 fb99 	bl	80038bc <_sbrk_r>
 800318a:	6030      	str	r0, [r6, #0]
 800318c:	0029      	movs	r1, r5
 800318e:	0020      	movs	r0, r4
 8003190:	f000 fb94 	bl	80038bc <_sbrk_r>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d103      	bne.n	80031a0 <sbrk_aligned+0x28>
 8003198:	2501      	movs	r5, #1
 800319a:	426d      	negs	r5, r5
 800319c:	0028      	movs	r0, r5
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	2303      	movs	r3, #3
 80031a2:	1cc5      	adds	r5, r0, #3
 80031a4:	439d      	bics	r5, r3
 80031a6:	42a8      	cmp	r0, r5
 80031a8:	d0f8      	beq.n	800319c <sbrk_aligned+0x24>
 80031aa:	1a29      	subs	r1, r5, r0
 80031ac:	0020      	movs	r0, r4
 80031ae:	f000 fb85 	bl	80038bc <_sbrk_r>
 80031b2:	3001      	adds	r0, #1
 80031b4:	d1f2      	bne.n	800319c <sbrk_aligned+0x24>
 80031b6:	e7ef      	b.n	8003198 <sbrk_aligned+0x20>
 80031b8:	20000280 	.word	0x20000280

080031bc <_malloc_r>:
 80031bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031be:	2203      	movs	r2, #3
 80031c0:	1ccb      	adds	r3, r1, #3
 80031c2:	4393      	bics	r3, r2
 80031c4:	3308      	adds	r3, #8
 80031c6:	0005      	movs	r5, r0
 80031c8:	001f      	movs	r7, r3
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d234      	bcs.n	8003238 <_malloc_r+0x7c>
 80031ce:	270c      	movs	r7, #12
 80031d0:	42b9      	cmp	r1, r7
 80031d2:	d833      	bhi.n	800323c <_malloc_r+0x80>
 80031d4:	0028      	movs	r0, r5
 80031d6:	f000 f871 	bl	80032bc <__malloc_lock>
 80031da:	4e37      	ldr	r6, [pc, #220]	@ (80032b8 <_malloc_r+0xfc>)
 80031dc:	6833      	ldr	r3, [r6, #0]
 80031de:	001c      	movs	r4, r3
 80031e0:	2c00      	cmp	r4, #0
 80031e2:	d12f      	bne.n	8003244 <_malloc_r+0x88>
 80031e4:	0039      	movs	r1, r7
 80031e6:	0028      	movs	r0, r5
 80031e8:	f7ff ffc6 	bl	8003178 <sbrk_aligned>
 80031ec:	0004      	movs	r4, r0
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	d15f      	bne.n	80032b2 <_malloc_r+0xf6>
 80031f2:	6834      	ldr	r4, [r6, #0]
 80031f4:	9400      	str	r4, [sp, #0]
 80031f6:	9b00      	ldr	r3, [sp, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d14a      	bne.n	8003292 <_malloc_r+0xd6>
 80031fc:	2c00      	cmp	r4, #0
 80031fe:	d052      	beq.n	80032a6 <_malloc_r+0xea>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	0028      	movs	r0, r5
 8003204:	18e3      	adds	r3, r4, r3
 8003206:	9900      	ldr	r1, [sp, #0]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	f000 fb57 	bl	80038bc <_sbrk_r>
 800320e:	9b01      	ldr	r3, [sp, #4]
 8003210:	4283      	cmp	r3, r0
 8003212:	d148      	bne.n	80032a6 <_malloc_r+0xea>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	0028      	movs	r0, r5
 8003218:	1aff      	subs	r7, r7, r3
 800321a:	0039      	movs	r1, r7
 800321c:	f7ff ffac 	bl	8003178 <sbrk_aligned>
 8003220:	3001      	adds	r0, #1
 8003222:	d040      	beq.n	80032a6 <_malloc_r+0xea>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	19db      	adds	r3, r3, r7
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	6833      	ldr	r3, [r6, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	2a00      	cmp	r2, #0
 8003230:	d133      	bne.n	800329a <_malloc_r+0xde>
 8003232:	9b00      	ldr	r3, [sp, #0]
 8003234:	6033      	str	r3, [r6, #0]
 8003236:	e019      	b.n	800326c <_malloc_r+0xb0>
 8003238:	2b00      	cmp	r3, #0
 800323a:	dac9      	bge.n	80031d0 <_malloc_r+0x14>
 800323c:	230c      	movs	r3, #12
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	2000      	movs	r0, #0
 8003242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003244:	6821      	ldr	r1, [r4, #0]
 8003246:	1bc9      	subs	r1, r1, r7
 8003248:	d420      	bmi.n	800328c <_malloc_r+0xd0>
 800324a:	290b      	cmp	r1, #11
 800324c:	d90a      	bls.n	8003264 <_malloc_r+0xa8>
 800324e:	19e2      	adds	r2, r4, r7
 8003250:	6027      	str	r7, [r4, #0]
 8003252:	42a3      	cmp	r3, r4
 8003254:	d104      	bne.n	8003260 <_malloc_r+0xa4>
 8003256:	6032      	str	r2, [r6, #0]
 8003258:	6863      	ldr	r3, [r4, #4]
 800325a:	6011      	str	r1, [r2, #0]
 800325c:	6053      	str	r3, [r2, #4]
 800325e:	e005      	b.n	800326c <_malloc_r+0xb0>
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	e7f9      	b.n	8003258 <_malloc_r+0x9c>
 8003264:	6862      	ldr	r2, [r4, #4]
 8003266:	42a3      	cmp	r3, r4
 8003268:	d10e      	bne.n	8003288 <_malloc_r+0xcc>
 800326a:	6032      	str	r2, [r6, #0]
 800326c:	0028      	movs	r0, r5
 800326e:	f000 f82d 	bl	80032cc <__malloc_unlock>
 8003272:	0020      	movs	r0, r4
 8003274:	2207      	movs	r2, #7
 8003276:	300b      	adds	r0, #11
 8003278:	1d23      	adds	r3, r4, #4
 800327a:	4390      	bics	r0, r2
 800327c:	1ac2      	subs	r2, r0, r3
 800327e:	4298      	cmp	r0, r3
 8003280:	d0df      	beq.n	8003242 <_malloc_r+0x86>
 8003282:	1a1b      	subs	r3, r3, r0
 8003284:	50a3      	str	r3, [r4, r2]
 8003286:	e7dc      	b.n	8003242 <_malloc_r+0x86>
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e7ef      	b.n	800326c <_malloc_r+0xb0>
 800328c:	0023      	movs	r3, r4
 800328e:	6864      	ldr	r4, [r4, #4]
 8003290:	e7a6      	b.n	80031e0 <_malloc_r+0x24>
 8003292:	9c00      	ldr	r4, [sp, #0]
 8003294:	6863      	ldr	r3, [r4, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	e7ad      	b.n	80031f6 <_malloc_r+0x3a>
 800329a:	001a      	movs	r2, r3
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	42a3      	cmp	r3, r4
 80032a0:	d1fb      	bne.n	800329a <_malloc_r+0xde>
 80032a2:	2300      	movs	r3, #0
 80032a4:	e7da      	b.n	800325c <_malloc_r+0xa0>
 80032a6:	230c      	movs	r3, #12
 80032a8:	0028      	movs	r0, r5
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	f000 f80e 	bl	80032cc <__malloc_unlock>
 80032b0:	e7c6      	b.n	8003240 <_malloc_r+0x84>
 80032b2:	6007      	str	r7, [r0, #0]
 80032b4:	e7da      	b.n	800326c <_malloc_r+0xb0>
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	20000284 	.word	0x20000284

080032bc <__malloc_lock>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	4802      	ldr	r0, [pc, #8]	@ (80032c8 <__malloc_lock+0xc>)
 80032c0:	f7ff ff0e 	bl	80030e0 <__retarget_lock_acquire_recursive>
 80032c4:	bd10      	pop	{r4, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	2000027c 	.word	0x2000027c

080032cc <__malloc_unlock>:
 80032cc:	b510      	push	{r4, lr}
 80032ce:	4802      	ldr	r0, [pc, #8]	@ (80032d8 <__malloc_unlock+0xc>)
 80032d0:	f7ff ff07 	bl	80030e2 <__retarget_lock_release_recursive>
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	2000027c 	.word	0x2000027c

080032dc <__ssputs_r>:
 80032dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032de:	688e      	ldr	r6, [r1, #8]
 80032e0:	b085      	sub	sp, #20
 80032e2:	001f      	movs	r7, r3
 80032e4:	000c      	movs	r4, r1
 80032e6:	680b      	ldr	r3, [r1, #0]
 80032e8:	9002      	str	r0, [sp, #8]
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	42be      	cmp	r6, r7
 80032ee:	d830      	bhi.n	8003352 <__ssputs_r+0x76>
 80032f0:	210c      	movs	r1, #12
 80032f2:	5e62      	ldrsh	r2, [r4, r1]
 80032f4:	2190      	movs	r1, #144	@ 0x90
 80032f6:	00c9      	lsls	r1, r1, #3
 80032f8:	420a      	tst	r2, r1
 80032fa:	d028      	beq.n	800334e <__ssputs_r+0x72>
 80032fc:	2003      	movs	r0, #3
 80032fe:	6921      	ldr	r1, [r4, #16]
 8003300:	1a5b      	subs	r3, r3, r1
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	6963      	ldr	r3, [r4, #20]
 8003306:	4343      	muls	r3, r0
 8003308:	9801      	ldr	r0, [sp, #4]
 800330a:	0fdd      	lsrs	r5, r3, #31
 800330c:	18ed      	adds	r5, r5, r3
 800330e:	1c7b      	adds	r3, r7, #1
 8003310:	181b      	adds	r3, r3, r0
 8003312:	106d      	asrs	r5, r5, #1
 8003314:	42ab      	cmp	r3, r5
 8003316:	d900      	bls.n	800331a <__ssputs_r+0x3e>
 8003318:	001d      	movs	r5, r3
 800331a:	0552      	lsls	r2, r2, #21
 800331c:	d528      	bpl.n	8003370 <__ssputs_r+0x94>
 800331e:	0029      	movs	r1, r5
 8003320:	9802      	ldr	r0, [sp, #8]
 8003322:	f7ff ff4b 	bl	80031bc <_malloc_r>
 8003326:	1e06      	subs	r6, r0, #0
 8003328:	d02c      	beq.n	8003384 <__ssputs_r+0xa8>
 800332a:	9a01      	ldr	r2, [sp, #4]
 800332c:	6921      	ldr	r1, [r4, #16]
 800332e:	f000 fae2 	bl	80038f6 <memcpy>
 8003332:	89a2      	ldrh	r2, [r4, #12]
 8003334:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <__ssputs_r+0xbc>)
 8003336:	401a      	ands	r2, r3
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	4313      	orrs	r3, r2
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	6126      	str	r6, [r4, #16]
 8003342:	18f6      	adds	r6, r6, r3
 8003344:	6026      	str	r6, [r4, #0]
 8003346:	003e      	movs	r6, r7
 8003348:	6165      	str	r5, [r4, #20]
 800334a:	1aed      	subs	r5, r5, r3
 800334c:	60a5      	str	r5, [r4, #8]
 800334e:	42be      	cmp	r6, r7
 8003350:	d900      	bls.n	8003354 <__ssputs_r+0x78>
 8003352:	003e      	movs	r6, r7
 8003354:	0032      	movs	r2, r6
 8003356:	9903      	ldr	r1, [sp, #12]
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	f000 fa9b 	bl	8003894 <memmove>
 800335e:	2000      	movs	r0, #0
 8003360:	68a3      	ldr	r3, [r4, #8]
 8003362:	1b9b      	subs	r3, r3, r6
 8003364:	60a3      	str	r3, [r4, #8]
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	199b      	adds	r3, r3, r6
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	b005      	add	sp, #20
 800336e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003370:	002a      	movs	r2, r5
 8003372:	9802      	ldr	r0, [sp, #8]
 8003374:	f000 fac8 	bl	8003908 <_realloc_r>
 8003378:	1e06      	subs	r6, r0, #0
 800337a:	d1e0      	bne.n	800333e <__ssputs_r+0x62>
 800337c:	6921      	ldr	r1, [r4, #16]
 800337e:	9802      	ldr	r0, [sp, #8]
 8003380:	f7ff feb0 	bl	80030e4 <_free_r>
 8003384:	230c      	movs	r3, #12
 8003386:	2001      	movs	r0, #1
 8003388:	9a02      	ldr	r2, [sp, #8]
 800338a:	4240      	negs	r0, r0
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	89a2      	ldrh	r2, [r4, #12]
 8003390:	3334      	adds	r3, #52	@ 0x34
 8003392:	4313      	orrs	r3, r2
 8003394:	81a3      	strh	r3, [r4, #12]
 8003396:	e7e9      	b.n	800336c <__ssputs_r+0x90>
 8003398:	fffffb7f 	.word	0xfffffb7f

0800339c <_svfiprintf_r>:
 800339c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339e:	b0a1      	sub	sp, #132	@ 0x84
 80033a0:	9003      	str	r0, [sp, #12]
 80033a2:	001d      	movs	r5, r3
 80033a4:	898b      	ldrh	r3, [r1, #12]
 80033a6:	000f      	movs	r7, r1
 80033a8:	0016      	movs	r6, r2
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	d511      	bpl.n	80033d2 <_svfiprintf_r+0x36>
 80033ae:	690b      	ldr	r3, [r1, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10e      	bne.n	80033d2 <_svfiprintf_r+0x36>
 80033b4:	2140      	movs	r1, #64	@ 0x40
 80033b6:	f7ff ff01 	bl	80031bc <_malloc_r>
 80033ba:	6038      	str	r0, [r7, #0]
 80033bc:	6138      	str	r0, [r7, #16]
 80033be:	2800      	cmp	r0, #0
 80033c0:	d105      	bne.n	80033ce <_svfiprintf_r+0x32>
 80033c2:	230c      	movs	r3, #12
 80033c4:	9a03      	ldr	r2, [sp, #12]
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	2001      	movs	r0, #1
 80033ca:	4240      	negs	r0, r0
 80033cc:	e0cf      	b.n	800356e <_svfiprintf_r+0x1d2>
 80033ce:	2340      	movs	r3, #64	@ 0x40
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	ac08      	add	r4, sp, #32
 80033d6:	6163      	str	r3, [r4, #20]
 80033d8:	3320      	adds	r3, #32
 80033da:	7663      	strb	r3, [r4, #25]
 80033dc:	3310      	adds	r3, #16
 80033de:	76a3      	strb	r3, [r4, #26]
 80033e0:	9507      	str	r5, [sp, #28]
 80033e2:	0035      	movs	r5, r6
 80033e4:	782b      	ldrb	r3, [r5, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <_svfiprintf_r+0x52>
 80033ea:	2b25      	cmp	r3, #37	@ 0x25
 80033ec:	d148      	bne.n	8003480 <_svfiprintf_r+0xe4>
 80033ee:	1bab      	subs	r3, r5, r6
 80033f0:	9305      	str	r3, [sp, #20]
 80033f2:	42b5      	cmp	r5, r6
 80033f4:	d00b      	beq.n	800340e <_svfiprintf_r+0x72>
 80033f6:	0032      	movs	r2, r6
 80033f8:	0039      	movs	r1, r7
 80033fa:	9803      	ldr	r0, [sp, #12]
 80033fc:	f7ff ff6e 	bl	80032dc <__ssputs_r>
 8003400:	3001      	adds	r0, #1
 8003402:	d100      	bne.n	8003406 <_svfiprintf_r+0x6a>
 8003404:	e0ae      	b.n	8003564 <_svfiprintf_r+0x1c8>
 8003406:	6963      	ldr	r3, [r4, #20]
 8003408:	9a05      	ldr	r2, [sp, #20]
 800340a:	189b      	adds	r3, r3, r2
 800340c:	6163      	str	r3, [r4, #20]
 800340e:	782b      	ldrb	r3, [r5, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d100      	bne.n	8003416 <_svfiprintf_r+0x7a>
 8003414:	e0a6      	b.n	8003564 <_svfiprintf_r+0x1c8>
 8003416:	2201      	movs	r2, #1
 8003418:	2300      	movs	r3, #0
 800341a:	4252      	negs	r2, r2
 800341c:	6062      	str	r2, [r4, #4]
 800341e:	a904      	add	r1, sp, #16
 8003420:	3254      	adds	r2, #84	@ 0x54
 8003422:	1852      	adds	r2, r2, r1
 8003424:	1c6e      	adds	r6, r5, #1
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	60e3      	str	r3, [r4, #12]
 800342a:	60a3      	str	r3, [r4, #8]
 800342c:	7013      	strb	r3, [r2, #0]
 800342e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003430:	4b54      	ldr	r3, [pc, #336]	@ (8003584 <_svfiprintf_r+0x1e8>)
 8003432:	2205      	movs	r2, #5
 8003434:	0018      	movs	r0, r3
 8003436:	7831      	ldrb	r1, [r6, #0]
 8003438:	9305      	str	r3, [sp, #20]
 800343a:	f000 fa51 	bl	80038e0 <memchr>
 800343e:	1c75      	adds	r5, r6, #1
 8003440:	2800      	cmp	r0, #0
 8003442:	d11f      	bne.n	8003484 <_svfiprintf_r+0xe8>
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	06d3      	lsls	r3, r2, #27
 8003448:	d504      	bpl.n	8003454 <_svfiprintf_r+0xb8>
 800344a:	2353      	movs	r3, #83	@ 0x53
 800344c:	a904      	add	r1, sp, #16
 800344e:	185b      	adds	r3, r3, r1
 8003450:	2120      	movs	r1, #32
 8003452:	7019      	strb	r1, [r3, #0]
 8003454:	0713      	lsls	r3, r2, #28
 8003456:	d504      	bpl.n	8003462 <_svfiprintf_r+0xc6>
 8003458:	2353      	movs	r3, #83	@ 0x53
 800345a:	a904      	add	r1, sp, #16
 800345c:	185b      	adds	r3, r3, r1
 800345e:	212b      	movs	r1, #43	@ 0x2b
 8003460:	7019      	strb	r1, [r3, #0]
 8003462:	7833      	ldrb	r3, [r6, #0]
 8003464:	2b2a      	cmp	r3, #42	@ 0x2a
 8003466:	d016      	beq.n	8003496 <_svfiprintf_r+0xfa>
 8003468:	0035      	movs	r5, r6
 800346a:	2100      	movs	r1, #0
 800346c:	200a      	movs	r0, #10
 800346e:	68e3      	ldr	r3, [r4, #12]
 8003470:	782a      	ldrb	r2, [r5, #0]
 8003472:	1c6e      	adds	r6, r5, #1
 8003474:	3a30      	subs	r2, #48	@ 0x30
 8003476:	2a09      	cmp	r2, #9
 8003478:	d950      	bls.n	800351c <_svfiprintf_r+0x180>
 800347a:	2900      	cmp	r1, #0
 800347c:	d111      	bne.n	80034a2 <_svfiprintf_r+0x106>
 800347e:	e017      	b.n	80034b0 <_svfiprintf_r+0x114>
 8003480:	3501      	adds	r5, #1
 8003482:	e7af      	b.n	80033e4 <_svfiprintf_r+0x48>
 8003484:	9b05      	ldr	r3, [sp, #20]
 8003486:	6822      	ldr	r2, [r4, #0]
 8003488:	1ac0      	subs	r0, r0, r3
 800348a:	2301      	movs	r3, #1
 800348c:	4083      	lsls	r3, r0
 800348e:	4313      	orrs	r3, r2
 8003490:	002e      	movs	r6, r5
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	e7cc      	b.n	8003430 <_svfiprintf_r+0x94>
 8003496:	9b07      	ldr	r3, [sp, #28]
 8003498:	1d19      	adds	r1, r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	9107      	str	r1, [sp, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db01      	blt.n	80034a6 <_svfiprintf_r+0x10a>
 80034a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034a4:	e004      	b.n	80034b0 <_svfiprintf_r+0x114>
 80034a6:	425b      	negs	r3, r3
 80034a8:	60e3      	str	r3, [r4, #12]
 80034aa:	2302      	movs	r3, #2
 80034ac:	4313      	orrs	r3, r2
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	782b      	ldrb	r3, [r5, #0]
 80034b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80034b4:	d10c      	bne.n	80034d0 <_svfiprintf_r+0x134>
 80034b6:	786b      	ldrb	r3, [r5, #1]
 80034b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ba:	d134      	bne.n	8003526 <_svfiprintf_r+0x18a>
 80034bc:	9b07      	ldr	r3, [sp, #28]
 80034be:	3502      	adds	r5, #2
 80034c0:	1d1a      	adds	r2, r3, #4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	9207      	str	r2, [sp, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da01      	bge.n	80034ce <_svfiprintf_r+0x132>
 80034ca:	2301      	movs	r3, #1
 80034cc:	425b      	negs	r3, r3
 80034ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80034d0:	4e2d      	ldr	r6, [pc, #180]	@ (8003588 <_svfiprintf_r+0x1ec>)
 80034d2:	2203      	movs	r2, #3
 80034d4:	0030      	movs	r0, r6
 80034d6:	7829      	ldrb	r1, [r5, #0]
 80034d8:	f000 fa02 	bl	80038e0 <memchr>
 80034dc:	2800      	cmp	r0, #0
 80034de:	d006      	beq.n	80034ee <_svfiprintf_r+0x152>
 80034e0:	2340      	movs	r3, #64	@ 0x40
 80034e2:	1b80      	subs	r0, r0, r6
 80034e4:	4083      	lsls	r3, r0
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	3501      	adds	r5, #1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	7829      	ldrb	r1, [r5, #0]
 80034f0:	2206      	movs	r2, #6
 80034f2:	4826      	ldr	r0, [pc, #152]	@ (800358c <_svfiprintf_r+0x1f0>)
 80034f4:	1c6e      	adds	r6, r5, #1
 80034f6:	7621      	strb	r1, [r4, #24]
 80034f8:	f000 f9f2 	bl	80038e0 <memchr>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d038      	beq.n	8003572 <_svfiprintf_r+0x1d6>
 8003500:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <_svfiprintf_r+0x1f4>)
 8003502:	2b00      	cmp	r3, #0
 8003504:	d122      	bne.n	800354c <_svfiprintf_r+0x1b0>
 8003506:	2207      	movs	r2, #7
 8003508:	9b07      	ldr	r3, [sp, #28]
 800350a:	3307      	adds	r3, #7
 800350c:	4393      	bics	r3, r2
 800350e:	3308      	adds	r3, #8
 8003510:	9307      	str	r3, [sp, #28]
 8003512:	6963      	ldr	r3, [r4, #20]
 8003514:	9a04      	ldr	r2, [sp, #16]
 8003516:	189b      	adds	r3, r3, r2
 8003518:	6163      	str	r3, [r4, #20]
 800351a:	e762      	b.n	80033e2 <_svfiprintf_r+0x46>
 800351c:	4343      	muls	r3, r0
 800351e:	0035      	movs	r5, r6
 8003520:	2101      	movs	r1, #1
 8003522:	189b      	adds	r3, r3, r2
 8003524:	e7a4      	b.n	8003470 <_svfiprintf_r+0xd4>
 8003526:	2300      	movs	r3, #0
 8003528:	200a      	movs	r0, #10
 800352a:	0019      	movs	r1, r3
 800352c:	3501      	adds	r5, #1
 800352e:	6063      	str	r3, [r4, #4]
 8003530:	782a      	ldrb	r2, [r5, #0]
 8003532:	1c6e      	adds	r6, r5, #1
 8003534:	3a30      	subs	r2, #48	@ 0x30
 8003536:	2a09      	cmp	r2, #9
 8003538:	d903      	bls.n	8003542 <_svfiprintf_r+0x1a6>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0c8      	beq.n	80034d0 <_svfiprintf_r+0x134>
 800353e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003540:	e7c6      	b.n	80034d0 <_svfiprintf_r+0x134>
 8003542:	4341      	muls	r1, r0
 8003544:	0035      	movs	r5, r6
 8003546:	2301      	movs	r3, #1
 8003548:	1889      	adds	r1, r1, r2
 800354a:	e7f1      	b.n	8003530 <_svfiprintf_r+0x194>
 800354c:	aa07      	add	r2, sp, #28
 800354e:	9200      	str	r2, [sp, #0]
 8003550:	0021      	movs	r1, r4
 8003552:	003a      	movs	r2, r7
 8003554:	4b0f      	ldr	r3, [pc, #60]	@ (8003594 <_svfiprintf_r+0x1f8>)
 8003556:	9803      	ldr	r0, [sp, #12]
 8003558:	e000      	b.n	800355c <_svfiprintf_r+0x1c0>
 800355a:	bf00      	nop
 800355c:	9004      	str	r0, [sp, #16]
 800355e:	9b04      	ldr	r3, [sp, #16]
 8003560:	3301      	adds	r3, #1
 8003562:	d1d6      	bne.n	8003512 <_svfiprintf_r+0x176>
 8003564:	89bb      	ldrh	r3, [r7, #12]
 8003566:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003568:	065b      	lsls	r3, r3, #25
 800356a:	d500      	bpl.n	800356e <_svfiprintf_r+0x1d2>
 800356c:	e72c      	b.n	80033c8 <_svfiprintf_r+0x2c>
 800356e:	b021      	add	sp, #132	@ 0x84
 8003570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003572:	aa07      	add	r2, sp, #28
 8003574:	9200      	str	r2, [sp, #0]
 8003576:	0021      	movs	r1, r4
 8003578:	003a      	movs	r2, r7
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <_svfiprintf_r+0x1f8>)
 800357c:	9803      	ldr	r0, [sp, #12]
 800357e:	f000 f87b 	bl	8003678 <_printf_i>
 8003582:	e7eb      	b.n	800355c <_svfiprintf_r+0x1c0>
 8003584:	080039b5 	.word	0x080039b5
 8003588:	080039bb 	.word	0x080039bb
 800358c:	080039bf 	.word	0x080039bf
 8003590:	00000000 	.word	0x00000000
 8003594:	080032dd 	.word	0x080032dd

08003598 <_printf_common>:
 8003598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800359a:	0016      	movs	r6, r2
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	688a      	ldr	r2, [r1, #8]
 80035a0:	690b      	ldr	r3, [r1, #16]
 80035a2:	000c      	movs	r4, r1
 80035a4:	9000      	str	r0, [sp, #0]
 80035a6:	4293      	cmp	r3, r2
 80035a8:	da00      	bge.n	80035ac <_printf_common+0x14>
 80035aa:	0013      	movs	r3, r2
 80035ac:	0022      	movs	r2, r4
 80035ae:	6033      	str	r3, [r6, #0]
 80035b0:	3243      	adds	r2, #67	@ 0x43
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	d001      	beq.n	80035bc <_printf_common+0x24>
 80035b8:	3301      	adds	r3, #1
 80035ba:	6033      	str	r3, [r6, #0]
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	069b      	lsls	r3, r3, #26
 80035c0:	d502      	bpl.n	80035c8 <_printf_common+0x30>
 80035c2:	6833      	ldr	r3, [r6, #0]
 80035c4:	3302      	adds	r3, #2
 80035c6:	6033      	str	r3, [r6, #0]
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	2306      	movs	r3, #6
 80035cc:	0015      	movs	r5, r2
 80035ce:	401d      	ands	r5, r3
 80035d0:	421a      	tst	r2, r3
 80035d2:	d027      	beq.n	8003624 <_printf_common+0x8c>
 80035d4:	0023      	movs	r3, r4
 80035d6:	3343      	adds	r3, #67	@ 0x43
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	4193      	sbcs	r3, r2
 80035de:	6822      	ldr	r2, [r4, #0]
 80035e0:	0692      	lsls	r2, r2, #26
 80035e2:	d430      	bmi.n	8003646 <_printf_common+0xae>
 80035e4:	0022      	movs	r2, r4
 80035e6:	9901      	ldr	r1, [sp, #4]
 80035e8:	9800      	ldr	r0, [sp, #0]
 80035ea:	9d08      	ldr	r5, [sp, #32]
 80035ec:	3243      	adds	r2, #67	@ 0x43
 80035ee:	47a8      	blx	r5
 80035f0:	3001      	adds	r0, #1
 80035f2:	d025      	beq.n	8003640 <_printf_common+0xa8>
 80035f4:	2206      	movs	r2, #6
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	2500      	movs	r5, #0
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d105      	bne.n	800360c <_printf_common+0x74>
 8003600:	6833      	ldr	r3, [r6, #0]
 8003602:	68e5      	ldr	r5, [r4, #12]
 8003604:	1aed      	subs	r5, r5, r3
 8003606:	43eb      	mvns	r3, r5
 8003608:	17db      	asrs	r3, r3, #31
 800360a:	401d      	ands	r5, r3
 800360c:	68a3      	ldr	r3, [r4, #8]
 800360e:	6922      	ldr	r2, [r4, #16]
 8003610:	4293      	cmp	r3, r2
 8003612:	dd01      	ble.n	8003618 <_printf_common+0x80>
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	18ed      	adds	r5, r5, r3
 8003618:	2600      	movs	r6, #0
 800361a:	42b5      	cmp	r5, r6
 800361c:	d120      	bne.n	8003660 <_printf_common+0xc8>
 800361e:	2000      	movs	r0, #0
 8003620:	e010      	b.n	8003644 <_printf_common+0xac>
 8003622:	3501      	adds	r5, #1
 8003624:	68e3      	ldr	r3, [r4, #12]
 8003626:	6832      	ldr	r2, [r6, #0]
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	42ab      	cmp	r3, r5
 800362c:	ddd2      	ble.n	80035d4 <_printf_common+0x3c>
 800362e:	0022      	movs	r2, r4
 8003630:	2301      	movs	r3, #1
 8003632:	9901      	ldr	r1, [sp, #4]
 8003634:	9800      	ldr	r0, [sp, #0]
 8003636:	9f08      	ldr	r7, [sp, #32]
 8003638:	3219      	adds	r2, #25
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	d1f0      	bne.n	8003622 <_printf_common+0x8a>
 8003640:	2001      	movs	r0, #1
 8003642:	4240      	negs	r0, r0
 8003644:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003646:	2030      	movs	r0, #48	@ 0x30
 8003648:	18e1      	adds	r1, r4, r3
 800364a:	3143      	adds	r1, #67	@ 0x43
 800364c:	7008      	strb	r0, [r1, #0]
 800364e:	0021      	movs	r1, r4
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	3145      	adds	r1, #69	@ 0x45
 8003654:	7809      	ldrb	r1, [r1, #0]
 8003656:	18a2      	adds	r2, r4, r2
 8003658:	3243      	adds	r2, #67	@ 0x43
 800365a:	3302      	adds	r3, #2
 800365c:	7011      	strb	r1, [r2, #0]
 800365e:	e7c1      	b.n	80035e4 <_printf_common+0x4c>
 8003660:	0022      	movs	r2, r4
 8003662:	2301      	movs	r3, #1
 8003664:	9901      	ldr	r1, [sp, #4]
 8003666:	9800      	ldr	r0, [sp, #0]
 8003668:	9f08      	ldr	r7, [sp, #32]
 800366a:	321a      	adds	r2, #26
 800366c:	47b8      	blx	r7
 800366e:	3001      	adds	r0, #1
 8003670:	d0e6      	beq.n	8003640 <_printf_common+0xa8>
 8003672:	3601      	adds	r6, #1
 8003674:	e7d1      	b.n	800361a <_printf_common+0x82>
	...

08003678 <_printf_i>:
 8003678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367a:	b08b      	sub	sp, #44	@ 0x2c
 800367c:	9206      	str	r2, [sp, #24]
 800367e:	000a      	movs	r2, r1
 8003680:	3243      	adds	r2, #67	@ 0x43
 8003682:	9307      	str	r3, [sp, #28]
 8003684:	9005      	str	r0, [sp, #20]
 8003686:	9203      	str	r2, [sp, #12]
 8003688:	7e0a      	ldrb	r2, [r1, #24]
 800368a:	000c      	movs	r4, r1
 800368c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800368e:	2a78      	cmp	r2, #120	@ 0x78
 8003690:	d809      	bhi.n	80036a6 <_printf_i+0x2e>
 8003692:	2a62      	cmp	r2, #98	@ 0x62
 8003694:	d80b      	bhi.n	80036ae <_printf_i+0x36>
 8003696:	2a00      	cmp	r2, #0
 8003698:	d100      	bne.n	800369c <_printf_i+0x24>
 800369a:	e0bc      	b.n	8003816 <_printf_i+0x19e>
 800369c:	497b      	ldr	r1, [pc, #492]	@ (800388c <_printf_i+0x214>)
 800369e:	9104      	str	r1, [sp, #16]
 80036a0:	2a58      	cmp	r2, #88	@ 0x58
 80036a2:	d100      	bne.n	80036a6 <_printf_i+0x2e>
 80036a4:	e090      	b.n	80037c8 <_printf_i+0x150>
 80036a6:	0025      	movs	r5, r4
 80036a8:	3542      	adds	r5, #66	@ 0x42
 80036aa:	702a      	strb	r2, [r5, #0]
 80036ac:	e022      	b.n	80036f4 <_printf_i+0x7c>
 80036ae:	0010      	movs	r0, r2
 80036b0:	3863      	subs	r0, #99	@ 0x63
 80036b2:	2815      	cmp	r0, #21
 80036b4:	d8f7      	bhi.n	80036a6 <_printf_i+0x2e>
 80036b6:	f7fc fd27 	bl	8000108 <__gnu_thumb1_case_shi>
 80036ba:	0016      	.short	0x0016
 80036bc:	fff6001f 	.word	0xfff6001f
 80036c0:	fff6fff6 	.word	0xfff6fff6
 80036c4:	001ffff6 	.word	0x001ffff6
 80036c8:	fff6fff6 	.word	0xfff6fff6
 80036cc:	fff6fff6 	.word	0xfff6fff6
 80036d0:	003600a1 	.word	0x003600a1
 80036d4:	fff60080 	.word	0xfff60080
 80036d8:	00b2fff6 	.word	0x00b2fff6
 80036dc:	0036fff6 	.word	0x0036fff6
 80036e0:	fff6fff6 	.word	0xfff6fff6
 80036e4:	0084      	.short	0x0084
 80036e6:	0025      	movs	r5, r4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	3542      	adds	r5, #66	@ 0x42
 80036ec:	1d11      	adds	r1, r2, #4
 80036ee:	6019      	str	r1, [r3, #0]
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	702b      	strb	r3, [r5, #0]
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0a0      	b.n	800383a <_printf_i+0x1c2>
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	6809      	ldr	r1, [r1, #0]
 80036fc:	1d02      	adds	r2, r0, #4
 80036fe:	060d      	lsls	r5, r1, #24
 8003700:	d50b      	bpl.n	800371a <_printf_i+0xa2>
 8003702:	6806      	ldr	r6, [r0, #0]
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	2e00      	cmp	r6, #0
 8003708:	da03      	bge.n	8003712 <_printf_i+0x9a>
 800370a:	232d      	movs	r3, #45	@ 0x2d
 800370c:	9a03      	ldr	r2, [sp, #12]
 800370e:	4276      	negs	r6, r6
 8003710:	7013      	strb	r3, [r2, #0]
 8003712:	4b5e      	ldr	r3, [pc, #376]	@ (800388c <_printf_i+0x214>)
 8003714:	270a      	movs	r7, #10
 8003716:	9304      	str	r3, [sp, #16]
 8003718:	e018      	b.n	800374c <_printf_i+0xd4>
 800371a:	6806      	ldr	r6, [r0, #0]
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	0649      	lsls	r1, r1, #25
 8003720:	d5f1      	bpl.n	8003706 <_printf_i+0x8e>
 8003722:	b236      	sxth	r6, r6
 8003724:	e7ef      	b.n	8003706 <_printf_i+0x8e>
 8003726:	6808      	ldr	r0, [r1, #0]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	c940      	ldmia	r1!, {r6}
 800372c:	0605      	lsls	r5, r0, #24
 800372e:	d402      	bmi.n	8003736 <_printf_i+0xbe>
 8003730:	0640      	lsls	r0, r0, #25
 8003732:	d500      	bpl.n	8003736 <_printf_i+0xbe>
 8003734:	b2b6      	uxth	r6, r6
 8003736:	6019      	str	r1, [r3, #0]
 8003738:	4b54      	ldr	r3, [pc, #336]	@ (800388c <_printf_i+0x214>)
 800373a:	270a      	movs	r7, #10
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003740:	d100      	bne.n	8003744 <_printf_i+0xcc>
 8003742:	3f02      	subs	r7, #2
 8003744:	0023      	movs	r3, r4
 8003746:	2200      	movs	r2, #0
 8003748:	3343      	adds	r3, #67	@ 0x43
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	60a3      	str	r3, [r4, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db03      	blt.n	800375c <_printf_i+0xe4>
 8003754:	2104      	movs	r1, #4
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	438a      	bics	r2, r1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	2e00      	cmp	r6, #0
 800375e:	d102      	bne.n	8003766 <_printf_i+0xee>
 8003760:	9d03      	ldr	r5, [sp, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <_printf_i+0x108>
 8003766:	9d03      	ldr	r5, [sp, #12]
 8003768:	0030      	movs	r0, r6
 800376a:	0039      	movs	r1, r7
 800376c:	f7fc fd5c 	bl	8000228 <__aeabi_uidivmod>
 8003770:	9b04      	ldr	r3, [sp, #16]
 8003772:	3d01      	subs	r5, #1
 8003774:	5c5b      	ldrb	r3, [r3, r1]
 8003776:	702b      	strb	r3, [r5, #0]
 8003778:	0033      	movs	r3, r6
 800377a:	0006      	movs	r6, r0
 800377c:	429f      	cmp	r7, r3
 800377e:	d9f3      	bls.n	8003768 <_printf_i+0xf0>
 8003780:	2f08      	cmp	r7, #8
 8003782:	d109      	bne.n	8003798 <_printf_i+0x120>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	07db      	lsls	r3, r3, #31
 8003788:	d506      	bpl.n	8003798 <_printf_i+0x120>
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	dc02      	bgt.n	8003798 <_printf_i+0x120>
 8003792:	2330      	movs	r3, #48	@ 0x30
 8003794:	3d01      	subs	r5, #1
 8003796:	702b      	strb	r3, [r5, #0]
 8003798:	9b03      	ldr	r3, [sp, #12]
 800379a:	1b5b      	subs	r3, r3, r5
 800379c:	6123      	str	r3, [r4, #16]
 800379e:	9b07      	ldr	r3, [sp, #28]
 80037a0:	0021      	movs	r1, r4
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	9805      	ldr	r0, [sp, #20]
 80037a6:	9b06      	ldr	r3, [sp, #24]
 80037a8:	aa09      	add	r2, sp, #36	@ 0x24
 80037aa:	f7ff fef5 	bl	8003598 <_printf_common>
 80037ae:	3001      	adds	r0, #1
 80037b0:	d148      	bne.n	8003844 <_printf_i+0x1cc>
 80037b2:	2001      	movs	r0, #1
 80037b4:	4240      	negs	r0, r0
 80037b6:	b00b      	add	sp, #44	@ 0x2c
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ba:	2220      	movs	r2, #32
 80037bc:	6809      	ldr	r1, [r1, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	2278      	movs	r2, #120	@ 0x78
 80037c4:	4932      	ldr	r1, [pc, #200]	@ (8003890 <_printf_i+0x218>)
 80037c6:	9104      	str	r1, [sp, #16]
 80037c8:	0021      	movs	r1, r4
 80037ca:	3145      	adds	r1, #69	@ 0x45
 80037cc:	700a      	strb	r2, [r1, #0]
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	c940      	ldmia	r1!, {r6}
 80037d4:	0610      	lsls	r0, r2, #24
 80037d6:	d402      	bmi.n	80037de <_printf_i+0x166>
 80037d8:	0650      	lsls	r0, r2, #25
 80037da:	d500      	bpl.n	80037de <_printf_i+0x166>
 80037dc:	b2b6      	uxth	r6, r6
 80037de:	6019      	str	r1, [r3, #0]
 80037e0:	07d3      	lsls	r3, r2, #31
 80037e2:	d502      	bpl.n	80037ea <_printf_i+0x172>
 80037e4:	2320      	movs	r3, #32
 80037e6:	4313      	orrs	r3, r2
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	2e00      	cmp	r6, #0
 80037ec:	d001      	beq.n	80037f2 <_printf_i+0x17a>
 80037ee:	2710      	movs	r7, #16
 80037f0:	e7a8      	b.n	8003744 <_printf_i+0xcc>
 80037f2:	2220      	movs	r2, #32
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	4393      	bics	r3, r2
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	e7f8      	b.n	80037ee <_printf_i+0x176>
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	680d      	ldr	r5, [r1, #0]
 8003800:	1d10      	adds	r0, r2, #4
 8003802:	6949      	ldr	r1, [r1, #20]
 8003804:	6018      	str	r0, [r3, #0]
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	062e      	lsls	r6, r5, #24
 800380a:	d501      	bpl.n	8003810 <_printf_i+0x198>
 800380c:	6019      	str	r1, [r3, #0]
 800380e:	e002      	b.n	8003816 <_printf_i+0x19e>
 8003810:	066d      	lsls	r5, r5, #25
 8003812:	d5fb      	bpl.n	800380c <_printf_i+0x194>
 8003814:	8019      	strh	r1, [r3, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	9d03      	ldr	r5, [sp, #12]
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	e7bf      	b.n	800379e <_printf_i+0x126>
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	1d11      	adds	r1, r2, #4
 8003822:	6019      	str	r1, [r3, #0]
 8003824:	6815      	ldr	r5, [r2, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	0028      	movs	r0, r5
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	f000 f858 	bl	80038e0 <memchr>
 8003830:	2800      	cmp	r0, #0
 8003832:	d001      	beq.n	8003838 <_printf_i+0x1c0>
 8003834:	1b40      	subs	r0, r0, r5
 8003836:	6060      	str	r0, [r4, #4]
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2300      	movs	r3, #0
 800383e:	9a03      	ldr	r2, [sp, #12]
 8003840:	7013      	strb	r3, [r2, #0]
 8003842:	e7ac      	b.n	800379e <_printf_i+0x126>
 8003844:	002a      	movs	r2, r5
 8003846:	6923      	ldr	r3, [r4, #16]
 8003848:	9906      	ldr	r1, [sp, #24]
 800384a:	9805      	ldr	r0, [sp, #20]
 800384c:	9d07      	ldr	r5, [sp, #28]
 800384e:	47a8      	blx	r5
 8003850:	3001      	adds	r0, #1
 8003852:	d0ae      	beq.n	80037b2 <_printf_i+0x13a>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	079b      	lsls	r3, r3, #30
 8003858:	d415      	bmi.n	8003886 <_printf_i+0x20e>
 800385a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800385c:	68e0      	ldr	r0, [r4, #12]
 800385e:	4298      	cmp	r0, r3
 8003860:	daa9      	bge.n	80037b6 <_printf_i+0x13e>
 8003862:	0018      	movs	r0, r3
 8003864:	e7a7      	b.n	80037b6 <_printf_i+0x13e>
 8003866:	0022      	movs	r2, r4
 8003868:	2301      	movs	r3, #1
 800386a:	9906      	ldr	r1, [sp, #24]
 800386c:	9805      	ldr	r0, [sp, #20]
 800386e:	9e07      	ldr	r6, [sp, #28]
 8003870:	3219      	adds	r2, #25
 8003872:	47b0      	blx	r6
 8003874:	3001      	adds	r0, #1
 8003876:	d09c      	beq.n	80037b2 <_printf_i+0x13a>
 8003878:	3501      	adds	r5, #1
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	42ab      	cmp	r3, r5
 8003882:	dcf0      	bgt.n	8003866 <_printf_i+0x1ee>
 8003884:	e7e9      	b.n	800385a <_printf_i+0x1e2>
 8003886:	2500      	movs	r5, #0
 8003888:	e7f7      	b.n	800387a <_printf_i+0x202>
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	080039c6 	.word	0x080039c6
 8003890:	080039d7 	.word	0x080039d7

08003894 <memmove>:
 8003894:	b510      	push	{r4, lr}
 8003896:	4288      	cmp	r0, r1
 8003898:	d806      	bhi.n	80038a8 <memmove+0x14>
 800389a:	2300      	movs	r3, #0
 800389c:	429a      	cmp	r2, r3
 800389e:	d008      	beq.n	80038b2 <memmove+0x1e>
 80038a0:	5ccc      	ldrb	r4, [r1, r3]
 80038a2:	54c4      	strb	r4, [r0, r3]
 80038a4:	3301      	adds	r3, #1
 80038a6:	e7f9      	b.n	800389c <memmove+0x8>
 80038a8:	188b      	adds	r3, r1, r2
 80038aa:	4298      	cmp	r0, r3
 80038ac:	d2f5      	bcs.n	800389a <memmove+0x6>
 80038ae:	3a01      	subs	r2, #1
 80038b0:	d200      	bcs.n	80038b4 <memmove+0x20>
 80038b2:	bd10      	pop	{r4, pc}
 80038b4:	5c8b      	ldrb	r3, [r1, r2]
 80038b6:	5483      	strb	r3, [r0, r2]
 80038b8:	e7f9      	b.n	80038ae <memmove+0x1a>
	...

080038bc <_sbrk_r>:
 80038bc:	2300      	movs	r3, #0
 80038be:	b570      	push	{r4, r5, r6, lr}
 80038c0:	4d06      	ldr	r5, [pc, #24]	@ (80038dc <_sbrk_r+0x20>)
 80038c2:	0004      	movs	r4, r0
 80038c4:	0008      	movs	r0, r1
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	f7fd fb3c 	bl	8000f44 <_sbrk>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d103      	bne.n	80038d8 <_sbrk_r+0x1c>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d000      	beq.n	80038d8 <_sbrk_r+0x1c>
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	bd70      	pop	{r4, r5, r6, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	20000278 	.word	0x20000278

080038e0 <memchr>:
 80038e0:	b2c9      	uxtb	r1, r1
 80038e2:	1882      	adds	r2, r0, r2
 80038e4:	4290      	cmp	r0, r2
 80038e6:	d101      	bne.n	80038ec <memchr+0xc>
 80038e8:	2000      	movs	r0, #0
 80038ea:	4770      	bx	lr
 80038ec:	7803      	ldrb	r3, [r0, #0]
 80038ee:	428b      	cmp	r3, r1
 80038f0:	d0fb      	beq.n	80038ea <memchr+0xa>
 80038f2:	3001      	adds	r0, #1
 80038f4:	e7f6      	b.n	80038e4 <memchr+0x4>

080038f6 <memcpy>:
 80038f6:	2300      	movs	r3, #0
 80038f8:	b510      	push	{r4, lr}
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d100      	bne.n	8003900 <memcpy+0xa>
 80038fe:	bd10      	pop	{r4, pc}
 8003900:	5ccc      	ldrb	r4, [r1, r3]
 8003902:	54c4      	strb	r4, [r0, r3]
 8003904:	3301      	adds	r3, #1
 8003906:	e7f8      	b.n	80038fa <memcpy+0x4>

08003908 <_realloc_r>:
 8003908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800390a:	0006      	movs	r6, r0
 800390c:	000c      	movs	r4, r1
 800390e:	0015      	movs	r5, r2
 8003910:	2900      	cmp	r1, #0
 8003912:	d105      	bne.n	8003920 <_realloc_r+0x18>
 8003914:	0011      	movs	r1, r2
 8003916:	f7ff fc51 	bl	80031bc <_malloc_r>
 800391a:	0004      	movs	r4, r0
 800391c:	0020      	movs	r0, r4
 800391e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003920:	2a00      	cmp	r2, #0
 8003922:	d103      	bne.n	800392c <_realloc_r+0x24>
 8003924:	f7ff fbde 	bl	80030e4 <_free_r>
 8003928:	2400      	movs	r4, #0
 800392a:	e7f7      	b.n	800391c <_realloc_r+0x14>
 800392c:	f000 f81b 	bl	8003966 <_malloc_usable_size_r>
 8003930:	0007      	movs	r7, r0
 8003932:	4285      	cmp	r5, r0
 8003934:	d802      	bhi.n	800393c <_realloc_r+0x34>
 8003936:	0843      	lsrs	r3, r0, #1
 8003938:	42ab      	cmp	r3, r5
 800393a:	d3ef      	bcc.n	800391c <_realloc_r+0x14>
 800393c:	0029      	movs	r1, r5
 800393e:	0030      	movs	r0, r6
 8003940:	f7ff fc3c 	bl	80031bc <_malloc_r>
 8003944:	9001      	str	r0, [sp, #4]
 8003946:	2800      	cmp	r0, #0
 8003948:	d0ee      	beq.n	8003928 <_realloc_r+0x20>
 800394a:	002a      	movs	r2, r5
 800394c:	42bd      	cmp	r5, r7
 800394e:	d900      	bls.n	8003952 <_realloc_r+0x4a>
 8003950:	003a      	movs	r2, r7
 8003952:	0021      	movs	r1, r4
 8003954:	9801      	ldr	r0, [sp, #4]
 8003956:	f7ff ffce 	bl	80038f6 <memcpy>
 800395a:	0021      	movs	r1, r4
 800395c:	0030      	movs	r0, r6
 800395e:	f7ff fbc1 	bl	80030e4 <_free_r>
 8003962:	9c01      	ldr	r4, [sp, #4]
 8003964:	e7da      	b.n	800391c <_realloc_r+0x14>

08003966 <_malloc_usable_size_r>:
 8003966:	1f0b      	subs	r3, r1, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1f18      	subs	r0, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	da01      	bge.n	8003974 <_malloc_usable_size_r+0xe>
 8003970:	580b      	ldr	r3, [r1, r0]
 8003972:	18c0      	adds	r0, r0, r3
 8003974:	4770      	bx	lr
	...

08003978 <_init>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr

08003984 <_fini>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr

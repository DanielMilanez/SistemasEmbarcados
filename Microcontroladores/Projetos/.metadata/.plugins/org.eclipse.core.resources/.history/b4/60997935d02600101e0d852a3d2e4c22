/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

typedef struct{
	unsigned P0: 1;
	unsigned P1: 1;
	unsigned P2: 1;
	unsigned P3: 1;
	unsigned P4: 1;
	unsigned P5: 1;
	unsigned P6: 1;
	unsigned P7: 1;
}BIT;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DO  3793
#define RE  3405
#define MI  3007
#define FA  2863
#define SOL 2528
#define LA  2252
#define SI  2006

#define TIME_NOTE 150

#define INSTRUCTION 0
#define DATA 1

#define LIMIT 3
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
BIT PORT;
uint32_t brefTime, atualTime, aux;

uint16_t atualMenu = 0;
uint8_t  send = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
// BUZZER CONTROLER
void BUZ_Tone(uint32_t note);
void NOTE_Controler(uint32_t note);

// OCASIONAL SOUNDS
void BUZ_Start(void);
void BUZ_Altern(void);
void BUZ_Transference(void);
void BUZ_Confirm(void);

// LCD CONTROLS
void StartLCD(void);
void Message(char * message);
void DataManager(uint16_t data, uint8_t state);

// CONTROL
int KeyboardCheck(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  HAL_Delay(100);
  BUZ_Start();
  StartLCD();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  AlternMenu();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xFFFF;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN_C_Pin */
  GPIO_InitStruct.Pin = BTN_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTN_C_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTN_B_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_A_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTN_A_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = D6_Pin|RS_Pin|RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

// BUZZER MANIPULATIONS
void NOTE_Controler(uint32_t note){
	uint16_t dc = note / 2;
	TIM2-> CCR1 = dc;
	TIM2-> ARR  = note;
}

void BUZ_Tone(uint32_t note){
	NOTE_Controler(note);
	HAL_Delay(TIME_NOTE);
	NOTE_Controler(10);
}

void BUZ_Altern(void){
	BUZ_Tone(DO);
	BUZ_Tone(RE);
	BUZ_Tone(FA);
}

void BUZ_Start(void){
	BUZ_Tone(SI);
	BUZ_Tone(RE);
	BUZ_Tone(LA);
	BUZ_Tone(MI);
}

void BUZ_Confirm(void){
	BUZ_Tone(LA);
	BUZ_Tone(SI);
	BUZ_Tone(SOL);
	BUZ_Tone(LA);
	BUZ_Tone(SI);
	BUZ_Tone(SOL);
}

void BUZ_Transference(void){
	BUZ_Tone(DO);
	BUZ_Tone(MI);
	BUZ_Tone(SOL);

	BUZ_Tone(DO);
	BUZ_Tone(MI);
	BUZ_Tone(SOL);

	BUZ_Tone(DO);
	BUZ_Tone(DO);
	BUZ_Tone(DO);

}

// LCD CONTROLER

void StartLCD(void){
	HAL_Delay(20);
	DataManager(0x33, INSTRUCTION);
	DataManager(0x32, INSTRUCTION);

	DataManager(0x28, INSTRUCTION);

	DataManager(0x0C, INSTRUCTION);
	DataManager(0x06, INSTRUCTION);
	DataManager(0x01, INSTRUCTION);
	HAL_Delay(10);
}

void DataManager(uint16_t data, uint8_t state){
	PORT.P0 = (data >> 0) & 1;
	PORT.P1 = (data >> 1) & 1;
	PORT.P2 = (data >> 2) & 1;
	PORT.P3 = (data >> 3) & 1;
	PORT.P4 = (data >> 4) & 1;
	PORT.P5 = (data >> 5) & 1;
	PORT.P6 = (data >> 6) & 1;
	PORT.P7 = (data >> 7) & 1;

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);

    HAL_Delay(1);
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
    HAL_Delay(1);
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);

    HAL_Delay(1);
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
    HAL_Delay(1);
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}

void Message(char * message){
	for(int i = 0; message[i] != '\0'; ++i){
		DataManager(message[i], DATA);
	}
}

// MENU SYSTEM

int KeyboardCheck(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
	uint16_t press = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
	uint8_t response = 0;

	if (!press){
		atualTime = HAL_GetTick();
		if ((atualTime - brefTime) > 20){
			response = 1;
			while(!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin));
		}
		brefTime = atualTime;
	}

	return response;
}

void AlternMenu(void){
	uint16_t btn_bref    = KeyboardCheck(BTN_A_GPIO_Port, BTN_A_Pin),
			 btn_after   = KeyboardCheck(BTN_B_GPIO_Port, BTN_B_Pin),
			 btn_confirm = KeyboardCheck(BTN_C_GPIO_Port, BTN_C_Pin);

	if (btn_bref) 			atualMenu--;
	else if (btn_after) 	atualMenu++;
	else if (btn_confirm) 	send = 1;

	if (atualMenu >= 2) atualMenu = 0;
	if (atualMenu < 0) atualMenu  = LIMIT;

	switch(atualMenu){
		case 0:
			Message("   SELETIVA WS  ");
			DataManager(0xC0, INSTRUCTION);
			Message("  #16 DANIEL-DF ");
			DataManager(0x80, INSTRUCTION);
			break;
		case 1:
			Message("Teste de menu!");
			DataManager(0x80, INSTRUCTION);
			break;

//		case 1:
//			Message("LEITURA: ");
//			DataManager(0xC0, INSTRUCTION);
//			Message("  #16 DANIEL-DF ");
//			DataManager(0x80, INSTRUCTION);
//			break;
//		case 2:
//			break;
	}
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

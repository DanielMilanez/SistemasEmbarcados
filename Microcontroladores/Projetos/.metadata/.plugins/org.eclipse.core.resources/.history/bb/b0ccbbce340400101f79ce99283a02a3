/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define DO  3793
#define RE  3405
#define MI  3034
#define FA  2863
#define SOL 2551
#define LA  2273
#define SI  2006

#define DO_ALTO 1896  // C5
#define RE_ALTO 1703  // D5
#define MI_ALTO 1517  // E5
#define FA_ALTO 1431  // F5
#define SOL_ALTO 1275 // G5
#define LA_ALTO 1136  // A5
#define SI_ALTO 1003  // B5


#define DELAY 250

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
char Tmap[4][3] = {{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
char response = 0;

uint8_t atual_column = 0;
uint16_t count_period = 1894;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void Note_define(uint16_t note);
void Keyboard_check(void);
void Line_verify(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Keyboard_check();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 3788-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1894-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN_01_Pin|COLUMN_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : COLUMN_03_Pin */
  GPIO_InitStruct.Pin = COLUMN_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(COLUMN_03_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LINE_01_Pin LINE_02_Pin */
  GPIO_InitStruct.Pin = LINE_01_Pin|LINE_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LINE_04_Pin */
  GPIO_InitStruct.Pin = LINE_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(LINE_04_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LINE_03_Pin */
  GPIO_InitStruct.Pin = LINE_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(LINE_03_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : COLUMN_01_Pin COLUMN_02_Pin */
  GPIO_InitStruct.Pin = COLUMN_01_Pin|COLUMN_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Keyboard_check(void){
	switch (atual_column){
		case 0:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_SET);
			Line_verify();

			atual_column = 1;
			break;

		case 1:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_SET);
			Line_verify();

			atual_column = 2;
			break;

		case 2:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);
			Line_verify();

			atual_column = 0;
			break;
	}
}

void Line_verify(void){
	uint8_t bline1 = HAL_GPIO_ReadPin(LINE_01_GPIO_Port, LINE_01_Pin),
			bline2 = HAL_GPIO_ReadPin(LINE_02_GPIO_Port, LINE_02_Pin),
			bline3 = HAL_GPIO_ReadPin(LINE_03_GPIO_Port, LINE_03_Pin),
			bline4 = HAL_GPIO_ReadPin(LINE_04_GPIO_Port, LINE_04_Pin);

	if (!bline1) response = Tmap[0][atual_column];
	else if (!bline2) response = Tmap[1][atual_column];
	else if (!bline3) response = Tmap[2][atual_column];
	else if (!bline4) response = Tmap[3][atual_column];

	switch(response){
		case '1':
			count_period = DO; // DO
			break;

		case '2':
			count_period = RE; // RE
			break;

		case '3':
			count_period = MI; // MI
			break;

		case '4':
			count_period = FA; // FA
			break;

		case '5':
			count_period = SOL; // SOL
			break;

		case '6':
			count_period = LA; // LA
			break;

		case '7':
			count_period = SI; // SI
			break;

		case '8':
			Note_define(DO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(DO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(SOL);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(SOL);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(SOL);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(SOL);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(RE);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(RE);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(DO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(RE);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(RE);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(DO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(SOL);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(SOL);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(RE);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);
			break;

		case '9':
			// PAM PAM PAM
			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY * 1.5);

			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY * 1.5);

			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY * 2);

			// POM PARAM POM PARAM
			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 4);

			Note_define(DO_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 4);

			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			HAL_Delay(DELAY);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 4);

			Note_define(DO_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 4);

			Note_define(LA);
			HAL_Delay(DELAY * 2);
			Note_define(0);

			// MI MAN MI MAN marananã
			HAL_Delay(DELAY / 2);
			Note_define(MI_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY * 2);

			Note_define(DO_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(DO_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(MI_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY);

			Note_define(MI_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(FA_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(DO_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(LA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 1.5);

			Note_define(FA);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(DO_ALTO);
			HAL_Delay(DELAY);
			Note_define(0);
			HAL_Delay(DELAY / 2);

			Note_define(LA);
			HAL_Delay(DELAY * 2);
			Note_define(0);
			HAL_Delay(DELAY);
		    break;

		default:
			count_period = 0;
			break;
	}
	while (!bline1 || !bline2 || !bline3 || !bline4){
		Note_define(count_period);
		bline1 = HAL_GPIO_ReadPin(LINE_01_GPIO_Port, LINE_01_Pin),
		bline2 = HAL_GPIO_ReadPin(LINE_02_GPIO_Port, LINE_02_Pin),
		bline3 = HAL_GPIO_ReadPin(LINE_03_GPIO_Port, LINE_03_Pin),
		bline4 = HAL_GPIO_ReadPin(LINE_04_GPIO_Port, LINE_04_Pin);
	}
	Note_define(count_period);
	HAL_Delay(10);
	response = 0;
}

void Note_define(uint16_t note){
	uint8_t dc = note / 2;
	TIM2 -> CCR1 = dc;
	TIM2 -> ARR  = note;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

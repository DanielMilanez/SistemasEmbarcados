/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ssd1306.h"
#include "ssd1306_conf.h"
#include "ssd1306_fonts.h"
#include "ssd1306_tests.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct{
	uint8_t x_min, x_max, reverse_x_min, reverse_x_max;
	uint8_t y, reverse_y;
}Hourglass_Typedef;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_X 80
#define MIN_X 48
#define Y 16
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

/* USER CODE BEGIN PV */
RTC_TimeTypeDef AtualTime;
RTC_DateTypeDef Date;
Hourglass_Typedef PixelControl;
uint8_t maximun_x, minimal_x, reverse_min_x, reverse_max_x;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
void DrawHourglass(void){
	static uint8_t counter = 1;
	static char buf[10];

	ssd1306_Fill(Black);

	// Draw name
	ssd1306_SetCursor(0, 0);
	if(counter == 1) sprintf(buf, "TEMP.");
	else if(counter == 2) sprintf(buf, "TEMP..");
	else if(counter == 3) sprintf(buf, "TEMP...");
	else if (counter >= 4) {
		counter = 0;
		sprintf(buf, "TEMP");
	}

	ssd1306_WriteString(buf, Font_6x8, White);

	// Draw head
	ssd1306_Line(48, 16 - 10, 80, 16 - 10, White);
	ssd1306_Line(48, 16 - 10, 48, 16, White);
	ssd1306_Line(80, 16 - 10, 80, 16, White);

	// Draw First boddy
	ssd1306_Line(48, 16, 80, 16, White);
	ssd1306_Line(48, 16, 64, 2 * 16, White);
	ssd1306_Line(80, 16, 64, 2 * 16, White);

	// Draw Second boddy
	ssd1306_Line(48, 48, 80, 48, White);
	ssd1306_Line(48, 48, 64, 32, White);
	ssd1306_Line(80, 48, 64, 32, White);

	// Draw Foot
	ssd1306_Line(48, 48 + 10, 80, 48 + 10, White);
	ssd1306_Line(48, 48 + 10, 48, 48, White);
	ssd1306_Line(80, 48 + 10, 80, 48, White);

	// Draw send
	uint8_t flag = 1;
//	maximun_x--;
//	minimal_x++;
//
//	for(int j = PixelControl.y; j <= 32; ++j){
//		for(int i = PixelControl.x_min; i < PixelControl.x_max; ++i){
//			if (i != PixelControl.reverse_x_min && i != PixelControl.reverse_x_max){
//				if(i % 2 == 0 && flag == 1) ssd1306_DrawPixel(i, j, White);
//				if(i % 2 != 0 && flag == 0) ssd1306_DrawPixel(i, j, White);
//			}
//		}
//
//		flag = !flag;
//
//		if(PixelControl.x_min == PixelControl.x_max) continue;
//
//		PixelControl.x_min++;
//		PixelControl.x_max--;
//	}

	// Draw reverse send

	flag = 1;
	reverse_min_x++;
	reverse_max_x--;

	for(int j = 48; j >= PixelControl.reverse_y; --j){
		for(int i = PixelControl.reverse_x_min; i < PixelControl.reverse_x_max; ++i){
			if (i != PixelControl.reverse_x_min && i != PixelControl.reverse_x_max){
				if(i % 2 == 0 && flag == 1) ssd1306_DrawPixel(i, j, White);
				if(i % 2 != 0 && flag == 0) ssd1306_DrawPixel(i, j, White);
			}
		}

		flag = !flag;

		if(PixelControl.reverse_x_min == PixelControl.reverse_x_max) continue;

		PixelControl.reverse_x_min++;
		PixelControl.reverse_x_max--;
	}

	// Pixel control
	counter++;

//	if(PixelControl.y >= 29){
//		PixelControl.y = Y;
//		minimal_x = MIN_X;
//		maximun_x = MAX_X;
//	}

	if(PixelControl.reverse_y <= 31){
		PixelControl.reverse_y = 48;
		reverse_min_x = 48;
		reverse_max_x = 80;
	}

//	PixelControl.x_min = minimal_x;
//	PixelControl.x_max = maximun_x;

	PixelControl.reverse_x_min = reverse_min_x;
	PixelControl.reverse_x_max = reverse_max_x;

//	PixelControl.y++;
	PixelControl.reverse_y--;
	ssd1306_UpdateScreen();
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
  PixelControl.x_max = MAX_X;
  PixelControl.x_min = MIN_X;
  PixelControl.reverse_x_max = MAX_X;
  PixelControl.reverse_x_min = MIN_X;

  PixelControl.y = Y + 2;
  PixelControl.reverse_y = 48;

  minimal_x = MIN_X;
  maximun_x = MAX_X;

  reverse_min_x = MIN_X;
  reverse_max_x = MAX_X;

  // Starting window
  ssd1306_Fill(Black);
  ssd1306_SetCursor(32, 32);
  ssd1306_WriteString("SELETIVA", Font_7x10, White);
  ssd1306_SetCursor(22, 45);
  ssd1306_WriteString("NACIONAL DF", Font_7x10, White);
  ssd1306_UpdateScreen();
  HAL_Delay(2000);

  // Draw Hourglass

  AtualTime.Hours = 0;     // Exemplo de hora
  AtualTime.Minutes = 0;   // Exemplo de minuto
  AtualTime.Seconds = 0;    // Exemplo de segundo

  HAL_RTC_SetTime(&hrtc, &AtualTime, RTC_FORMAT_BIN);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_RTC_GetTime(&hrtc, &AtualTime, RTC_FORMAT_BIN);
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
	  DrawHourglass();
	  HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00201D2B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

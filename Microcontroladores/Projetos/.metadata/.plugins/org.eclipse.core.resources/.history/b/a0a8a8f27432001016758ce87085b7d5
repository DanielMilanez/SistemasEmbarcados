/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct{
	unsigned P0: 1,
			 P1: 1,
			 P2: 1,
			 P3: 1,
			 P4: 1,
			 P5: 1,
			 P6: 1,
			 P7: 1;
}BIT;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DATA 1
#define INSTRUCTION 0
#define BUFFER_SIZE 10
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
BIT LCD_PORT;
BIT Mx8x8_PORT;

int flag = 1;
const int ORIGIN_INDEX = 0;
int write_offset = 0;
char command[BUFFER_SIZE];

uint8_t ressive[BUFFER_SIZE];
uint8_t animationSelect = 0, count = 0;
uint8_t manipulateColumns = 1, manipulateLines = 1, columns = 1, lines = 1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void Start_LCD(void);
void Send_Message(char *message);
void M8x8_Animation(uint8_t frame);
void ConvertedValue(uint8_t * value, uint8_t * counter);
void M8x8_Manager(uint8_t data, char * color);
void Data_Manager_LCD(uint8_t data, uint8_t state);
void Data_Ressive_Interpreter(char * ressive);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Write_Fixed(uint8_t data){
	int write_index = (ORIGIN_INDEX + write_offset) % BUFFER_SIZE;
	command[write_index] = data;

	write_offset = (write_offset + 1) % BUFFER_SIZE;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	memset(ressive, 0, BUFFER_SIZE);

	if (huart->Instance == USART1){
		HAL_UART_Receive_IT(&huart1, ressive, BUFFER_SIZE);

		for(int i = 0; ressive[i] != '\0' && i < BUFFER_SIZE; ++i){
			Write_Fixed(ressive[i]);
		}

	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  Start_LCD();
  M8x8_Manager(0x00, "GREEN");
  HAL_UART_Receive_IT(&huart1, ressive, BUFFER_SIZE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

		for(int i = 0; command[i] != '\0'; ++i){
			if (command[i] == '\n') command[i] = '\0';
		}

		if (command[0] == '\0') {
			Send_Message("AGUARDANDO DADOS");
			Data_Manager_LCD(0x80, INSTRUCTION);
		}

		else {
			Data_Manager_LCD(0x80, INSTRUCTION);
			Send_Message("COMANDO RECEBIDO");

			Data_Ressive_Interpreter((char *) command);
			M8x8_Animation(animationSelect);
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M8x8_Green8_Pin|M8x8_Green3_Pin|M8x8_Red1_Pin|M8x8_S8_Pin
                          |M8x8_S1_Pin|M8x8_S7_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M8x8_Green4_Pin|M8x8_Green5_Pin|M8x8_Green7_Pin|D4_Pin
                          |D5_Pin|D6_Pin|M8x8_S2_Pin|M8x8_Red3_Pin
                          |M8x8_Red2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M8x8_Green6_Pin|M8x8_Red7_Pin|M8x8_Red6_Pin|M8x8_S3_Pin
                          |M8x8_Red5_Pin|M8x8_Red4_Pin|M8x8_Green2_Pin|M8x8_Green1_Pin
                          |M8x8_Red8_Pin|M8x8_S6_Pin|M8x8_S4_Pin|M8x8_S5_Pin
                          |D7_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M8x8_Green8_Pin M8x8_Green3_Pin M8x8_Red1_Pin M8x8_S8_Pin
                           M8x8_S1_Pin M8x8_S7_Pin RS_Pin */
  GPIO_InitStruct.Pin = M8x8_Green8_Pin|M8x8_Green3_Pin|M8x8_Red1_Pin|M8x8_S8_Pin
                          |M8x8_S1_Pin|M8x8_S7_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : M8x8_Green4_Pin M8x8_Green5_Pin M8x8_Green7_Pin D4_Pin
                           D5_Pin D6_Pin M8x8_S2_Pin M8x8_Red3_Pin
                           M8x8_Red2_Pin */
  GPIO_InitStruct.Pin = M8x8_Green4_Pin|M8x8_Green5_Pin|M8x8_Green7_Pin|D4_Pin
                          |D5_Pin|D6_Pin|M8x8_S2_Pin|M8x8_Red3_Pin
                          |M8x8_Red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : M8x8_Green6_Pin M8x8_Red7_Pin M8x8_Red6_Pin M8x8_S3_Pin
                           M8x8_Red5_Pin M8x8_Red4_Pin M8x8_Green2_Pin M8x8_Green1_Pin
                           M8x8_Red8_Pin M8x8_S6_Pin M8x8_S4_Pin M8x8_S5_Pin
                           D7_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = M8x8_Green6_Pin|M8x8_Red7_Pin|M8x8_Red6_Pin|M8x8_S3_Pin
                          |M8x8_Red5_Pin|M8x8_Red4_Pin|M8x8_Green2_Pin|M8x8_Green1_Pin
                          |M8x8_Red8_Pin|M8x8_S6_Pin|M8x8_S4_Pin|M8x8_S5_Pin
                          |D7_Pin|RW_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void M8x8_Manager(uint8_t data, char * color){
	if (!strcmp(color, "SELECT")){
	  HAL_GPIO_WritePin(M8x8_S1_GPIO_Port, M8x8_S1_Pin, (data >> 0) & 1);
	  HAL_GPIO_WritePin(M8x8_S2_GPIO_Port, M8x8_S2_Pin, (data >> 1) & 1);
	  HAL_GPIO_WritePin(M8x8_S3_GPIO_Port, M8x8_S3_Pin, (data >> 2) & 1);
	  HAL_GPIO_WritePin(M8x8_S4_GPIO_Port, M8x8_S4_Pin, (data >> 3) & 1);
	  HAL_GPIO_WritePin(M8x8_S5_GPIO_Port, M8x8_S5_Pin, (data >> 4) & 1);
	  HAL_GPIO_WritePin(M8x8_S6_GPIO_Port, M8x8_S6_Pin, (data >> 5) & 1);
	  HAL_GPIO_WritePin(M8x8_S7_GPIO_Port, M8x8_S7_Pin, (data >> 6) & 1);
	  HAL_GPIO_WritePin(M8x8_S8_GPIO_Port, M8x8_S8_Pin, (data >> 7) & 1);
	}

	else if (!strcmp(color, "RED")){
	  HAL_GPIO_WritePin(M8x8_Red1_GPIO_Port, M8x8_Red1_Pin, !((data >> 0) & 1));
	  HAL_GPIO_WritePin(M8x8_Red2_GPIO_Port, M8x8_Red2_Pin, !((data >> 1) & 1));
	  HAL_GPIO_WritePin(M8x8_Red3_GPIO_Port, M8x8_Red3_Pin, !((data >> 2) & 1));
	  HAL_GPIO_WritePin(M8x8_Red4_GPIO_Port, M8x8_Red4_Pin, !((data >> 3) & 1));
	  HAL_GPIO_WritePin(M8x8_Red5_GPIO_Port, M8x8_Red5_Pin, !((data >> 4) & 1));
	  HAL_GPIO_WritePin(M8x8_Red6_GPIO_Port, M8x8_Red6_Pin, !((data >> 5) & 1));
	  HAL_GPIO_WritePin(M8x8_Red7_GPIO_Port, M8x8_Red7_Pin, !((data >> 6) & 1));
	  HAL_GPIO_WritePin(M8x8_Red8_GPIO_Port, M8x8_Red8_Pin, !((data >> 7) & 1));
	}

	else if (!strcmp(color, "GREEN")){
	  HAL_GPIO_WritePin(M8x8_Green1_GPIO_Port, M8x8_Green1_Pin, !((data >> 0) & 1));
	  HAL_GPIO_WritePin(M8x8_Green2_GPIO_Port, M8x8_Green2_Pin, !((data >> 1) & 1));
	  HAL_GPIO_WritePin(M8x8_Green3_GPIO_Port, M8x8_Green3_Pin, !((data >> 2) & 1));
	  HAL_GPIO_WritePin(M8x8_Green4_GPIO_Port, M8x8_Green4_Pin, !((data >> 3) & 1));
	  HAL_GPIO_WritePin(M8x8_Green5_GPIO_Port, M8x8_Green5_Pin, !((data >> 4) & 1));
	  HAL_GPIO_WritePin(M8x8_Green6_GPIO_Port, M8x8_Green6_Pin, !((data >> 5) & 1));
	  HAL_GPIO_WritePin(M8x8_Green7_GPIO_Port, M8x8_Green7_Pin, !((data >> 6) & 1));
	  HAL_GPIO_WritePin(M8x8_Green8_GPIO_Port, M8x8_Green8_Pin, !((data >> 7) & 1));
	}

}

void M8x8_Animation(uint8_t frame){
	switch(frame){
		case 1:
			Data_Manager_LCD(0xC0, INSTRUCTION);
			Send_Message("START");

			if (manipulateColumns >= 8) manipulateLines++;
			ConvertedValue(&lines, &manipulateLines);
			M8x8_Manager(lines, "SELECT");

			if (count) manipulateColumns++;

			ConvertedValue(&columns, &manipulateColumns);
			M8x8_Manager(columns, "RED");
			HAL_Delay(1);
			break;

		case 2:
			Data_Manager_LCD(0xC0, INSTRUCTION);
			Send_Message("ANIM1");

			if (manipulateLines >= 8 || manipulateColumns >= 8) flag = -1;
			else if (manipulateLines <= 1 || manipulateColumns <= 1) flag = 1;

			if (count) manipulateLines += flag;
			if (count) manipulateColumns += flag;

			ConvertedValue(&lines, &manipulateLines);
			M8x8_Manager(lines, "SELECT");
			ConvertedValue(&columns, &manipulateColumns);
			M8x8_Manager(columns, "RED");

			HAL_Delay(1);

			break;

		case 3:
			Data_Manager_LCD(0xC0, INSTRUCTION);
			Send_Message("ANIM2");

			if (count) manipulateLines++;
			if (manipulateLines >= 9) manipulateColumns++;

			ConvertedValue(&lines, &manipulateLines);
			M8x8_Manager(lines, "SELECT");
			ConvertedValue(&columns, &manipulateColumns);
			M8x8_Manager(columns, "RED");

			HAL_Delay(1);

			break;

		default:
			Data_Manager_LCD(0xC0, INSTRUCTION);
			Send_Message("PAUSE");
			break;
	}
}

void Data_Ressive_Interpreter(char * ressive){
	if (!strcmp(ressive, "START")) animationSelect = 1;
	else if (!strcmp(ressive, "ANIM1")) animationSelect = 2;
	else if (!strcmp(ressive, "ANIM2")) animationSelect = 3;

	if (!strcmp(ressive, "STOP")) count = 0;
	else count = 1;

}

void ConvertedValue(uint8_t * value, uint8_t * counter){
	switch(*counter){
	  case 1:
		  *value = 0x01;
		  break;
	  case 2:
		  *value = 0x02;
		  break;
	  case 3:
		  *value = 0x04;
		  break;
	  case 4:
		  *value = 0x08;
		  break;
	  case 5:
		  *value = 0x10;
		  break;
	  case 6:
		  *value = 0x20;
		  break;
	  case 7:
		  *value = 0x40;
		  break;
	  case 8:
		  *value = 0x80;
		  break;
	  default:
		  *value = 0x01;
		  *counter = 0x01;
		  break;
	}
}

void Start_LCD(void){
	Data_Manager_LCD(0x33, INSTRUCTION);
	Data_Manager_LCD(0x32, INSTRUCTION);
	Data_Manager_LCD(0x28, INSTRUCTION);
	Data_Manager_LCD(0x06, INSTRUCTION);
	Data_Manager_LCD(0x0C, INSTRUCTION);
	Data_Manager_LCD(0x01, INSTRUCTION);

	Data_Manager_LCD(0x80, INSTRUCTION);
	Send_Message("INITIALIZE");
	HAL_Delay(500);
	Data_Manager_LCD(0x80, INSTRUCTION);
	Send_Message("INITIALIZE.");
	HAL_Delay(500);
	Data_Manager_LCD(0x80, INSTRUCTION);
	Send_Message("INITIALIZE..");
	HAL_Delay(500);
	Data_Manager_LCD(0x80, INSTRUCTION);
	Send_Message("INITIALIZE...");
	HAL_Delay(500);
	Data_Manager_LCD(0x80, INSTRUCTION);
	Data_Manager_LCD(0x01, INSTRUCTION);
}

void Data_Manager_LCD(uint8_t data, uint8_t state){
	LCD_PORT.P0 = (data >> 0) & 1;
	LCD_PORT.P1 = (data >> 1) & 1;
	LCD_PORT.P2 = (data >> 2) & 1;
	LCD_PORT.P3 = (data >> 3) & 1;
	LCD_PORT.P4 = (data >> 4) & 1;
	LCD_PORT.P5 = (data >> 5) & 1;
	LCD_PORT.P6 = (data >> 6) & 1;
	LCD_PORT.P7 = (data >> 7) & 1;

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, LCD_PORT.P4);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, LCD_PORT.P5);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, LCD_PORT.P6);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, LCD_PORT.P7);

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
	HAL_Delay(1);
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, LCD_PORT.P0);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, LCD_PORT.P1);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, LCD_PORT.P2);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, LCD_PORT.P3);

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
	HAL_Delay(1);
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
}

void Send_Message(char *message){
	for (int i = 0; message[i] != '\0'; ++i){
		Data_Manager_LCD(message[i], DATA);
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

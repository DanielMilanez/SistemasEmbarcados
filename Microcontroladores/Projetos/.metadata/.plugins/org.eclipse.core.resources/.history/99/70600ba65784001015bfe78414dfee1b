#include "MCU6050.h"


extern I2C_HandleTypeDef hi2c1;

MPU180_STATUS MPU6050_StartUp(void){
	HAL_StatusTypeDef status;
	uint8_t data_to_send;

	status = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 3, HAL_MAX_DELAY);
	if(status != HAL_OK) return DEVICE_NOT_EXIST;

	HAL_Delay(10);
	data_to_send = 0x08; // Send FS_SELL to config the gyro full scale range 4G
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_GYRO, 1, &data_to_send, 1, HAL_MAX_DELAY);
	if(status != HAL_OK) return CANT_ACESS_REG_GYRO;
	HAL_Delay(10);

	data_to_send = 0x08; // Send FS_SELL to config the acc full scale range 4G
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_ACC, 1, &data_to_send, 1, HAL_MAX_DELAY);
	if(status != HAL_OK) return CANT_ACESS_REG_ACC;
	HAL_Delay(10);

	data_to_send = 0x00; // Out of sleep mode and able temperature sensor
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_PWR_CTRL, 1, &data_to_send, 1, HAL_MAX_DELAY);
	if(status != HAL_OK) return CANT_ACESS_REG_PWR;
	HAL_Delay(10);

	return STATUS_OK;
}

MPU180_VALUES MPU6050_ReadValues(void){
	uint8_t readDataAcc[6];
	MPU180_VALUES data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, REG_ACC_DATA, 1, readDataAcc, 6, HAL_MAX_DELAY);

	data.AccXValue = (int16_t)((readDataAcc[0] << 8) + readDataAcc[1]);
	data.AccYValue = (int16_t)((readDataAcc[2] << 8) + readDataAcc[3]);
	data.AccZValue = (int16_t)((readDataAcc[4] << 8) + readDataAcc[5]);
}

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "display16x2.h"
#include <stdio.h>
#include <string.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
	NON_ERR			  = 0x00,  // sem erros aparentes código em pleno funcionamento
    ERR_COMMUNICATION = 0x01,  // erro ao comunicar com o dispositivo
    ERR_START         = 0x02,  // erro na inicialização
    ERR_SEND          = 0x03,  // erro ao enviar dados
    ERR_RECEIVE       = 0x04,  // erro ao receber dados
    ERR_CONVERT       = 0x05   // erro na conversão de dados
} DS3231_Error;

typedef enum{
	BCD_TO_DEC = 0x00,
	DEC_TO_BCD = 0x01,
	DECA   	   = 0x02,
	UNITY	   = 0x03
}DS3231_Converter;

typedef struct{
    uint8_t register_address;  // Endereço do registrador no DS3231
    uint8_t value;             // Valor associado (ler ou escrever)
}DS3231_DataToSend;

typedef struct{
	uint8_t seconds, minutes, hours;
	uint8_t day, date, month, year;
}time;

typedef struct{
	uint8_t milisecond_deca, milisecond, second_deca, second, minutes_deca, minutes, hours_deca, hours;
}MAX7219_time;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DS3231_ADDR (0x68 << 1)

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim6;

/* USER CODE BEGIN PV */
HAL_StatusTypeDef status;
DS3231_DataToSend data;
DS3231_Error verify;
uint8_t date[7] = {0x00};
MAX7219_time times;
time tim;
uint8_t miliseconds;

char bf_hours[5], bf_min[5], bf_sec[5], bf_day[5], bf_date[5], bf_month[5], bf_year[5];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void MAX7219_Times(void);
void ConvertDataForLcd(void);
void MAX7219_Initialize(void);
int Converter(DS3231_Converter mode, int num);
void MAX7219_WriteData(uint8_t addrs, uint8_t data);
void MAX7219_SendData(uint8_t display, uint8_t data);
void DS3231_SetDate(uint8_t date, uint8_t month, uint8_t year);
void DS3231_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
    if(htim->Instance == TIM6){
        miliseconds++;

        if(miliseconds >= 100){
            miliseconds = 0;
        }

        times.milisecond 	  = (miliseconds) % 10;
        times.milisecond_deca = (miliseconds / 10) % 10;
    }
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */
  MAX7219_Initialize();
  HAL_TIM_Base_Start_IT(&htim6);

  LcdStart();
  status = HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDR, 3, 1000);
  if(status == HAL_ERROR) verify = ERR_COMMUNICATION;
  if(status == HAL_BUSY) verify = ERR_START;
  if(status == HAL_OK) verify = NON_ERR;

  DS3231_SetTime(01, 13, 00);
  DS3231_SetDate(17, 8, 25);
  char buffer[16];


  HAL_Delay(10);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(verify == NON_ERR){
		  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, 1, date, 7, 100);

		  tim.seconds = Converter(BCD_TO_DEC, date[0]);
		  tim.minutes = Converter(BCD_TO_DEC, date[1]);
		  tim.hours   = Converter(BCD_TO_DEC, date[2]);
		  tim.date    = Converter(BCD_TO_DEC, date[4]);
		  tim.month   = Converter(BCD_TO_DEC, date[5]);
		  tim.year    = Converter(BCD_TO_DEC, date[6]);
		  HAL_Delay(5);
	  }

	  sprintf(buffer, "%s:%s:%s", bf_hours, bf_min, bf_sec);
	  SendMessage(4, 0, buffer);
	  sprintf(buffer, "%s/%s/%s", bf_date, bf_month, bf_year);
	  SendMessage(4, 1, buffer);

	  MAX7219_Times();
	  ConvertDataForLcd();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0010020A;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 8-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 100-1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|D4_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin D4_Pin EN_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D4_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : D5_Pin D6_Pin D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RW_Pin */
  GPIO_InitStruct.Pin = RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void MAX7219_Times(void){
	times.hours_deca   = Converter(DECA, tim.hours);
	times.hours 	   = Converter(UNITY, tim.hours);
	times.minutes_deca = Converter(DECA, tim.minutes);
	times.minutes      = Converter(UNITY, tim.minutes);
	times.second_deca  = Converter(DECA, tim.seconds);
	times.second 	   = Converter(UNITY, tim.seconds);

	MAX7219_SendData(1, times.hours_deca);
	MAX7219_SendData(2, times.hours);
	MAX7219_SendData(3, times.minutes_deca);
	MAX7219_SendData(4, times.minutes);
	MAX7219_SendData(5, times.second_deca);
	MAX7219_SendData(6, times.second);
	MAX7219_SendData(7, times.milisecond_deca);
	MAX7219_SendData(8, times.milisecond);


}

void MAX7219_SendData(uint8_t display, uint8_t data){
	switch(display){
		case 1: MAX7219_WriteData(0x08, data); break;
		case 2: MAX7219_WriteData(0x07, data); break;
		case 3: MAX7219_WriteData(0x06, data); break;
		case 4: MAX7219_WriteData(0x05, data); break;
		case 5: MAX7219_WriteData(0x04, data); break;
		case 6: MAX7219_WriteData(0x03, data); break;
		case 7: MAX7219_WriteData(0x02, data); break;
		case 8: MAX7219_WriteData(0x01, data); break;
	}
}

void MAX7219_Initialize(void){
	MAX7219_WriteData(0x0C, 0x01); // Liga o display (sai do shutdown)
	MAX7219_WriteData(0x0F, 0x00); // Sai do modo de teste
	MAX7219_WriteData(0x09, 0xFF); // Configura decode para todos os dígitos
	MAX7219_WriteData(0x0A, 0x05); // Ajusta a intensidade (brilho)
	MAX7219_WriteData(0x0B, 0x07); // Configura o scan limit (habilita 8 dígitos)

	// Zerando display
	MAX7219_WriteData(0x01, 0x00);
	MAX7219_WriteData(0x02, 0x00);
	MAX7219_WriteData(0x03, 0x00);
	MAX7219_WriteData(0x04, 0x00);
	MAX7219_WriteData(0x05, 0x00);
	MAX7219_WriteData(0x06, 0x00);
	MAX7219_WriteData(0x07, 0x00);
	MAX7219_WriteData(0x08, 0x00);
}

void MAX7219_WriteData(uint8_t addrs, uint8_t data){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
	uint8_t buff[2] = {addrs, data};
	HAL_SPI_Transmit(&hspi1, buff, 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
}

int Converter(DS3231_Converter mode, int num){
	int result;

	switch(mode){
		case DECA: result = (int)(num / 10); break;
		case UNITY: result = (int)(num % 10); break;
		case BCD_TO_DEC: result = (int)((num / 16 * 10) + (num % 16)); break;
		case DEC_TO_BCD: result = (int)((num / 10 * 16) + (num % 10)); break;
	}

	return result;
}

void DS3231_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds){
  uint8_t datin[2];

  datin[0] = 0x00;
  datin[1] = Converter(DEC_TO_BCD, seconds);
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);

  datin[0] = 0x01;
  datin[1] = Converter(DEC_TO_BCD, minutes);
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);

  datin[0] = 0x02;
  datin[1] = Converter(DEC_TO_BCD, hours);
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
}

void DS3231_SetDate(uint8_t date, uint8_t month, uint8_t year){
  uint8_t datin[2];

  datin[0] = 0x04;
  datin[1] = Converter(DEC_TO_BCD, date);
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);

  datin[0] = 0x05;
  datin[1] = Converter(DEC_TO_BCD, month);
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);

  datin[0] = 0x06;
  datin[1] = Converter(DEC_TO_BCD, year);
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_ADDR, datin, 2, 100);
}

void ConvertDataForLcd(void){
  if(tim.hours < 10) sprintf(bf_hours, "0%d", tim.hours);
  else sprintf(bf_hours, "%d", tim.hours);

  if(tim.minutes < 10) sprintf(bf_min, "0%d", tim.minutes);
  else sprintf(bf_min, "%d", tim.minutes);

  if(tim.seconds < 10) sprintf(bf_sec, "0%d", tim.seconds);
  else sprintf(bf_sec, "%d", tim.seconds);

  if(tim.day < 10) sprintf(bf_day, "0%d", tim.day);
  else sprintf(bf_day, "%d", tim.day);

  if(tim.date < 10) sprintf(bf_date, "0%d", tim.date);
  else sprintf(bf_date, "%d", tim.date);

  if(tim.month < 10) sprintf(bf_month, "0%d", tim.month);
  else sprintf(bf_month, "%d", tim.month);

  if(tim.year < 10) sprintf(bf_year, "0%d", tim.year);
  else sprintf(bf_year, "%d", tim.year);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

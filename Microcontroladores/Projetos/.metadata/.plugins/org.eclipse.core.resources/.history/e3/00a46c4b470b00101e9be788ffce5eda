/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct {
	unsigned P0;
	unsigned P1;
	unsigned P2;
	unsigned P3;
	unsigned P4;
	unsigned P5;
	unsigned P6;
	unsigned P7;
} bitPort;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
RTC_HandleTypeDef hrtc;

/* USER CODE BEGIN PV */
bitPort PORT;
RTC_TimeTypeDef atualTime;
RTC_DateTypeDef atualDate;

uint8_t atualColumn = 0, atualMenu = 1, flag = 0, id_char = 0, x = 0, y = 0, yearCtr = 0;

uint32_t day, month, year, seconds, minutes, hours,
	    keyResponse, hoursDeca, minutesDeca, secondsDeca,
		dayDeca, monthDeca, yearDeca, yearCentry, yearMilenium;

uint32_t timeBounce = 0, brefTime = 0, pause = 0, ctr = 0;

char KeyMap[4][3] = {{'1', '2', '3'},
					 {'4', '5', '6'},
					 {'7', '8', '9'},
					 {'*', '0', '#'}};

char firstLine[25];
char secondLine[25];
char str_temp[5];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);

/* USER CODE BEGIN PFP */
void Start_lcd(void);
void Info_limit(void);
void Menu_manager(void);
void Verify_press(void);
void Keyboard_check(void);
void Altern_selection(void);
void Message(char *message);
void Info_manager(unsigned data, unsigned rs);

int Debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */

  atualDate.Date  = 0;
  atualDate.Month = 0;
  atualDate.Year  = 0;

  atualTime.Hours   = 0;
  atualTime.Minutes = 0;
  atualTime.Seconds = 0;

  if (HAL_RTC_SetDate(&hrtc, &atualDate, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
  if (HAL_RTC_SetTime(&hrtc, &atualTime, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();

  Start_lcd();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  Menu_manager();
	  Keyboard_check();

	  if (!pause){
		  HAL_RTC_GetDate(&hrtc, &atualDate, RTC_FORMAT_BIN);
		  HAL_RTC_GetTime(&hrtc, &atualTime, RTC_FORMAT_BIN);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin|COLUMN_02_Pin
                          |COLUMN_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN_03_Pin|D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin COLUMN_02_Pin
                           COLUMN_01_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin|COLUMN_02_Pin
                          |COLUMN_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : COLUMN_03_Pin D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = COLUMN_03_Pin|D6_Pin|RS_Pin|RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LINE_04_Pin */
  GPIO_InitStruct.Pin = LINE_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(LINE_04_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LINE_03_Pin LINE_01_Pin LINE_02_Pin */
  GPIO_InitStruct.Pin = LINE_03_Pin|LINE_01_Pin|LINE_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Keyboard_check(void){
	switch(atualColumn){
		case 0:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 0);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);

			atualColumn = 1;
			Verify_press();
			break;

		case 1:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 0);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 1);

			atualColumn = 2;
			Verify_press();
			break;

		case 2:
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, 1);
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, 0);

			atualColumn = 0;
			Verify_press();
			break;
	}
}

void Verify_press(void){
	uint8_t bline1 = Debounce(LINE_01_GPIO_Port, LINE_01_Pin),
			bline2 = Debounce(LINE_02_GPIO_Port, LINE_02_Pin),
			bline3 = Debounce(LINE_03_GPIO_Port, LINE_03_Pin),
			bline4 = Debounce(LINE_04_GPIO_Port, LINE_04_Pin);

	if      (bline1) keyResponse = KeyMap[0][atualColumn];
	else if (bline2) keyResponse = KeyMap[1][atualColumn];
	else if (bline3) keyResponse = KeyMap[2][atualColumn];
	else if (bline4) keyResponse = KeyMap[3][atualColumn];
	else keyResponse = '\0';
}

int Debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
    uint8_t press = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
    uint8_t result = 0;

    if (!press){
        timeBounce = HAL_GetTick();

        if ((timeBounce - brefTime) > 20){
        	result = 1;
        }

        brefTime = timeBounce;
        while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin));
    }

    return result;
}

void Info_manager(unsigned data, unsigned rs){
	PORT.P0 = (data >> 0) & 1;
	PORT.P1 = (data >> 1) & 1;
	PORT.P2 = (data >> 2) & 1;
	PORT.P3 = (data >> 3) & 1;
	PORT.P4 = (data >> 4) & 1;
	PORT.P5 = (data >> 5) & 1;
	PORT.P6 = (data >> 6) & 1;
	PORT.P7 = (data >> 7) & 1;

	if (rs) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
	else HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);

	HAL_Delay(0.5);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
	HAL_Delay(0.5);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);

	HAL_Delay(0.5);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
	HAL_Delay(0.5);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}

void Message(char *message){
	for (int i = 0; message[i] != '\0'; ++i){
		Info_manager(message[i], 1);
	}
}

void Start_lcd(void){
    HAL_Delay(20);
    Info_manager(0x33, 0);
    Info_manager(0x32, 0);

    Info_manager(0x28, 0);

    Info_manager(0x0F, 0);
    Info_manager(0x06, 0);
    Info_manager(0x01, 0);

    HAL_Delay(2);
}

void Menu_manager(void){
	switch(atualMenu){
		case 1:
			hours   = atualTime.Hours;
			minutes = atualTime.Minutes;
			seconds = atualTime.Seconds;

			sprintf(firstLine, "TM: %02lu:%02lu:%02lu      ", hours, minutes, seconds);
			Info_manager(0x80, 0);
			Message(firstLine);

			day   = atualDate.Date;
			month = atualDate.Month;
			year  = atualDate.Year;

			sprintf(secondLine, "DT: %02lu/%02lu/%04lu     ", day, month, year);
			Info_manager(0xC0, 0);
			Message(secondLine);
			break;

		case 2:
			Altern_selection();
			if (keyResponse == '*') id_char++;

			if ((keyResponse != '\0')&& (keyResponse != '#') && (keyResponse != '*') && (flag)) {
				Info_limit();
				Info_manager(keyResponse, 1);
				str_temp[ctr] = keyResponse;

				id_char++;
				ctr++;

				if (id_char > 9) yearCtr = 1;
				else yearCtr = 0;

				flag = 0;
			}

			if ((ctr == 2) && (!yearCtr)){
				ctr = 0;
				x = atoi(str_temp);
			}

			if (id_char == 2)  atualTime.Hours   = x;
			if (id_char == 4)  atualTime.Minutes = x;
			if (id_char == 6)  atualTime.Seconds = x;

			if (HAL_RTC_SetTime(&hrtc, &atualTime, RTC_FORMAT_BIN)!= HAL_OK) Error_Handler();
			if (HAL_RTC_SetDate(&hrtc, &atualDate, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
			break;
		}

	if (keyResponse == '#') {
		Info_manager(0x01, 0);
		flag = 1;
		atualMenu++;
		id_char = 0;

		if (atualMenu == 2) {
			pause = 1;
			sprintf(firstLine, "SET TM: %02lu:%02lu:%02lu", hours, minutes, seconds);
			sprintf(secondLine, "DT: %02lu/%02lu/%04lu", day, month, year);
		}
		else if (atualMenu >= 3){
			atualMenu = 1;
			pause = 0;
		}

		Message(firstLine);
		Info_manager(0xC0, 0);
		Message(secondLine);
	}
}

void Altern_selection(void){
	switch(id_char){
		case 0:
			Info_manager(0x88, 0);
			flag = 1;
			break;

		case 1:
			Info_manager(0x89, 0);
			flag = 1;
			break;

		case 2:
			Info_manager(0x8B, 0);
			flag = 1;
			break;

		case 3:
			Info_manager(0x8C, 0);
			flag = 1;
			break;

		case 4:
			Info_manager(0x8E, 0);
			flag = 1;
			break;

		case 5:
			Info_manager(0x8F, 0);
			flag = 1;
			break;

		case 6:
			Info_manager(0xC4, 0);
			flag = 1;
			break;

		case 7:
			Info_manager(0xC5, 0);
			flag = 1;
			break;

		case 8:
			Info_manager(0xC7, 0);
			flag = 1;
			break;

		case 9:
			Info_manager(0xC8, 0);
			flag = 1;
			break;

		case 10:
			Info_manager(0xCA, 0);
			flag = 1;
			break;

		case 11:
			Info_manager(0xCB, 0);
			flag = 1;
			break;

		case 12:
			Info_manager(0xCC, 0);
			flag = 1;
			break;

		case 13:
			Info_manager(0xCD, 0);
			flag = 1;
			break;

		default:
			Info_manager(0x88, 0);
			id_char = 0;
			break;
	}
}

void Info_limit(void){
	switch(id_char){
		case 0:
			if (keyResponse >= '3') keyResponse = '2';
			break;

		case 1:
			if (keyResponse >= '4' && str_temp[0] == '2') keyResponse = '3';
			break;

		case 2:
		case 4:
			if (keyResponse >= '6') keyResponse = '5';
			break;

		case 6:
			if (keyResponse >= '4') keyResponse = '3';
			break;

		case 7:
			if (keyResponse >= '4' && str_temp[0] == '3') keyResponse = '0';
			break;

		case 8:
			if (keyResponse >= '2') keyResponse = '1';
			break;
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

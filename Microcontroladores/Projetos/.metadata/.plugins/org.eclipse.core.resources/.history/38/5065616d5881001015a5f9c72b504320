/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
static GPIO_TypeDef* STB_Port;
static uint16_t STB_Pinout;
static GPIO_TypeDef* CLK_Port;
static uint16_t CLK_Pin;
static GPIO_TypeDef* DIO_Port;
static uint16_t DIO_Pin;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

// Pinos do TM1638

// Map de segmentos
static const uint8_t charSegmentMap[] = {
    0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F, // 0-9
    0x77,0x7C,0x39,0x5E,0x79,0x71,0x3D,0x76,0x04,0x0E, // A-J
    0x75,0x38,0x15,0x54,0x5C,0x73,0x6B,0x50,0x6D,0x78, // K-T
    0x3E,0x3E,0x6A,0x76,0x6E,0x5B,0x40,0x00           // U-Z, -, espaço
};

// Delay pequeno
static void delayTiny(void) {
    for(volatile int i=0;i<10;i++) __NOP();
}

// Limpa display e LEDs
void TM1638_Clear(void) {
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0x40);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);

    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0xC0);
    for(uint8_t i=0;i<16;i++) TM1638_SendByte(0x00);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);
}

// Inicializa pinos
void TM1638_Init(GPIO_TypeDef* stbPort, uint16_t stbPin,
                 GPIO_TypeDef* clkPort, uint16_t clkPin,
                 GPIO_TypeDef* dioPort, uint16_t dioPin) {
    STB_Port = stbPort; STB_Pin = stbPin;
    CLK_Port = clkPort; CLK_Pin = clkPin;
    DIO_Port = dioPort; DIO_Pin = dioPin;

    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(DIO_Port, DIO_Pin, GPIO_PIN_SET);

    // Comando display ON, auto-increment
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0x8F);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);

    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0x40);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);

    TM1638_Clear();
}

// Envia um byte
void TM1638_SendByte(uint8_t data) {
    for(uint8_t i=0;i<8;i++){
        HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_RESET);
        delayTiny();
        HAL_GPIO_WritePin(DIO_Port, DIO_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        delayTiny();
        HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_SET);
        delayTiny();
        data >>= 1;
    }
}

// Lê um byte
uint8_t TM1638_ReadByte(void) {
    uint8_t data = 0;
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    // Configura DIO como entrada
    GPIO_InitStruct.Pin = DIO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DIO_Port, &GPIO_InitStruct);

    for(uint8_t i=0;i<8;i++){
        HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_RESET);
        delayTiny();
        data >>= 1;
        if(HAL_GPIO_ReadPin(DIO_Port, DIO_Pin)) data |= 0x80;
        HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_SET);
        delayTiny();
    }

    // Configura DIO como saída
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DIO_Port, &GPIO_InitStruct);

    return data;
}



// Liga/Desliga LED
void TM1638_SetLED(uint8_t ledIndex, uint8_t state){
    if(ledIndex<1 || ledIndex>8) return;
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0x44);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);

    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0xC0 + (ledIndex-1)*2);
    TM1638_SendByte(state ? 0x01 : 0x00);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);
}

// Converte char para segmento
static uint8_t getSegment(char c){
    if(c>='0' && c<='9') return charSegmentMap[c-'0'];
    if(c>='A' && c<='Z') return charSegmentMap[c-'A'+10];
    if(c>='a' && c<='z') return charSegmentMap[c-'a'+10];
    if(c=='-') return charSegmentMap[36];
    return charSegmentMap[37];
}

// Mostra número
void TM1638_DisplayNumber(uint32_t number){
    TM1638_Clear();
    char buf[9];
    sprintf(buf,"%8lu",number);

    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0x40);
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);

    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0xC0);
    for(int i=0;i<8;i++){
        TM1638_SendByte(getSegment(buf[i]));
        TM1638_SendByte(0x00);
    }
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);
}

// Leitura de botões
uint8_t TM1638_ReadButtons(void){
    uint8_t buttons = 0;
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
    TM1638_SendByte(0x42);
    buttons = TM1638_ReadByte();
    HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);
    return buttons;
}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  // Posições 5, 6, 7 no TM1638 (0-index)
  uint8_t digits[3] = {9, 9, 9};

  HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
  TM1638_SendByte(0x40); // modo auto-increment
  HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);

  HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_RESET);
  TM1638_SendByte(0xC0 + 4*2); // endereço do 5º dígito (0-index * 2)

  for(int i=0;i<3;i++){
      TM1638_SendByte(getSegment(digits[i])); // segmento do dígito
      TM1638_SendByte(0x00);                  // valor do LED correspondente
  }

  HAL_GPIO_WritePin(STB_Port, STB_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STB_GPIO_Port, STB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STB_Pin */
  GPIO_InitStruct.Pin = STB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ON 0
#define OFF 1
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
char response[] = "Cor selecionada:";
char buffer[25];

uint8_t ressive[7];
uint8_t size = 0;
uint8_t * dataConverted;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void messageToSend(char *message);
void Minimalize(char *message);
void ConvertedData(char *message);
void ColorControl(void);
void VerifyComand(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
	HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
	HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_UART_Receive(&huart1, ressive, sizeof(ressive), 1000);
      VeirfyComand();

      if (ressive[0] == '\0') sprintf(buffer, "%s OFF\n", response);

	  size = strlen(buffer);
	  dataConverted = (uint8_t *) calloc(size, sizeof(uint8_t));

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (dataConverted != NULL) {
		  ConvertedData(buffer);
		  HAL_UART_Transmit(&huart1, dataConverted, size, 100);
		  free(dataConverted);
		  dataConverted = NULL;
	  }

	  ColorControl();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_LD_Pin|GREEN_LD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLUE_LD_Pin GREEN_LD_Pin */
  GPIO_InitStruct.Pin = BLUE_LD_Pin|GREEN_LD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : RED_LD_Pin */
  GPIO_InitStruct.Pin = RED_LD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RED_LD_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void messageToSend(char *message){
	Minimalize(message);
	ConvertedData(message);
	HAL_UART_Transmit(&huart1, dataConverted, size, 100);
}

void Minimalize(char *message){
	size = 0;
    for (int i = 0; message[i] != '\0'; i++) size++;
}

void ColorControl(void){
	if (!(strcmp((char *)ressive, "RED\n"))){
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, ON);
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
	}
	else if (!(strcmp((char *)ressive, "GREEN\n"))){
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, ON);
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
	}
	else if (!(strcmp((char *)ressive, "BLUE\n"))){
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, ON);
	}
	else if (!(strcmp((char *)ressive, "OFF\n"))){
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
	}
}

void ConvertedData(char *message){
	for(int i = 0; message[i] != '\0'; ++i){
		dataConverted[i] = (uint8_t) message[i];
	}
}

void VeirfyComand(void){
	char comparative[7];
	uint8_t Verify = 0;

    for (int i = 0; ressive[i] != '\0'; ++i){
  	  if (ressive[i] == '\n') ressive[i + 1] = '\0';
    }

	strcpy(comparative, (char *)ressive);

	if (!strcmp(comparative, "RED\n")) Verify++;
	if (!strcmp(comparative, "GREEN\n")) Verify++;
	if (!strcmp(comparative, "BLUE\n")) Verify++;
	if (!strcmp(comparative, "OFF\n")) Verify++;

	if (Verify >= 1) sprintf(buffer, "%s%s", response, (char *) ressive);
	else sprintf(buffer, "COMANDO INVALIDO\n");
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

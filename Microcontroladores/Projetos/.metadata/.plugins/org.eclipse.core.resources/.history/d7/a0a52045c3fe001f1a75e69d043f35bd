/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

typedef struct PIN{
	unsigned P0: 1,
			 P1: 1,
			 P2: 1,
			 P3: 1,
			 P4: 1,
			 P5: 1,
			 P6: 1,
			 P7: 1;
}filter;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define FRAMES 6
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim6;

/* USER CODE BEGIN PV */
filter port;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM6_Init(void);

/* USER CODE BEGIN PFP */
void Seletor_Line(char line);
void Seletor_Column(char column);
void Draw_disp(char anim_metode, uint8_t delay_time);
void Animations(char select, uint8_t delay_time);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  Draw_disp('h', 0);
	  Draw_disp('m', 0);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 12000-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 500-1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SELETOR_03_Pin|SELETOR_04_Pin|SELETOR_05_Pin|SELETOR_08_Pin
                          |COLUMN_RED_05_Pin|COLUMN_RED_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COLUMN_RED_08_Pin|COLUMN_RED_03_Pin|COLUMN_RED_02_Pin|SELETOR_07_Pin
                          |COLUMN_RED_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN_RED_07_Pin|COLUMN_RED_06_Pin|SELETOR_06_Pin|SELETOR_01_Pin
                          |SELETOR_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SELETOR_03_Pin SELETOR_04_Pin SELETOR_05_Pin SELETOR_08_Pin
                           COLUMN_RED_05_Pin COLUMN_RED_04_Pin */
  GPIO_InitStruct.Pin = SELETOR_03_Pin|SELETOR_04_Pin|SELETOR_05_Pin|SELETOR_08_Pin
                          |COLUMN_RED_05_Pin|COLUMN_RED_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : COLUMN_RED_08_Pin COLUMN_RED_03_Pin COLUMN_RED_02_Pin SELETOR_07_Pin
                           COLUMN_RED_01_Pin */
  GPIO_InitStruct.Pin = COLUMN_RED_08_Pin|COLUMN_RED_03_Pin|COLUMN_RED_02_Pin|SELETOR_07_Pin
                          |COLUMN_RED_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : COLUMN_RED_07_Pin COLUMN_RED_06_Pin SELETOR_06_Pin SELETOR_01_Pin
                           SELETOR_02_Pin */
  GPIO_InitStruct.Pin = COLUMN_RED_07_Pin|COLUMN_RED_06_Pin|SELETOR_06_Pin|SELETOR_01_Pin
                          |SELETOR_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Seletor_Column(char column){
	port.P0 = (column >> 0) & 1;
	port.P1 = (column >> 1) & 1;
	port.P2 = (column >> 2) & 1;
	port.P3 = (column >> 3) & 1;
	port.P4 = (column >> 4) & 1;
	port.P5 = (column >> 5) & 1;
	port.P6 = (column >> 6) & 1;
	port.P7 = (column >> 7) & 1;

	HAL_GPIO_WritePin(COLUMN_RED_01_GPIO_Port, COLUMN_RED_01_Pin, port.P0);
	HAL_GPIO_WritePin(COLUMN_RED_02_GPIO_Port, COLUMN_RED_02_Pin, port.P1);
	HAL_GPIO_WritePin(COLUMN_RED_03_GPIO_Port, COLUMN_RED_03_Pin, port.P2);
	HAL_GPIO_WritePin(COLUMN_RED_04_GPIO_Port, COLUMN_RED_04_Pin, port.P3);
	HAL_GPIO_WritePin(COLUMN_RED_05_GPIO_Port, COLUMN_RED_05_Pin, port.P4);
	HAL_GPIO_WritePin(COLUMN_RED_06_GPIO_Port, COLUMN_RED_06_Pin, port.P5);
	HAL_GPIO_WritePin(COLUMN_RED_07_GPIO_Port, COLUMN_RED_07_Pin, port.P6);
	HAL_GPIO_WritePin(COLUMN_RED_08_GPIO_Port, COLUMN_RED_08_Pin, port.P7);
}

void Seletor_Line(char line){
	port.P0 = (line >> 0) & 1;
	port.P1 = (line >> 1) & 1;
	port.P2 = (line >> 2) & 1;
	port.P3 = (line >> 3) & 1;
	port.P4 = (line >> 4) & 1;
	port.P5 = (line >> 5) & 1;
	port.P6 = (line >> 6) & 1;
	port.P7 = (line >> 7) & 1;

	HAL_GPIO_WritePin(SELETOR_01_GPIO_Port, SELETOR_01_Pin, port.P0);
	HAL_GPIO_WritePin(SELETOR_02_GPIO_Port, SELETOR_02_Pin, port.P1);
	HAL_GPIO_WritePin(SELETOR_03_GPIO_Port, SELETOR_03_Pin, port.P2);
	HAL_GPIO_WritePin(SELETOR_04_GPIO_Port, SELETOR_04_Pin, port.P3);
	HAL_GPIO_WritePin(SELETOR_05_GPIO_Port, SELETOR_05_Pin, port.P4);
	HAL_GPIO_WritePin(SELETOR_06_GPIO_Port, SELETOR_06_Pin, port.P5);
	HAL_GPIO_WritePin(SELETOR_07_GPIO_Port, SELETOR_07_Pin, port.P6);
	HAL_GPIO_WritePin(SELETOR_08_GPIO_Port, SELETOR_08_Pin, port.P7);
}

void Draw_disp(char anim_metode, uint8_t delay_time){
	if (delay_time != 0){
		Animations(anim_metode, delay_time);
	}
	else {
		for (int i = FRAMES; i >= 0; i--){
			Animations(anim_metode, 0);
		}

	}
}
void Animations(char select, uint8_t delay_time){
	switch(select){
		case 's':
			Seletor_Column(0x7E);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);

			Seletor_Column(0xBD);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0xDB);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0xE7);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0xE7);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0xDB);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xBD);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0x7E);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);
			break;

		case 'r':
			Seletor_Column(0x7E);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);

			Seletor_Column(0xBD);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0xDB);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xE7);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0xE7);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0xDB);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0xBD);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0x7E);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);
			break;

		case 'h':
			Seletor_Column(0xFF);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);

			Seletor_Column(0x99);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0x00);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0x00);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0xC3);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xE7);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0xFF);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);
			break;

		case 'm':
			Seletor_Column(0XFF);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);

			Seletor_Column(0xFF);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0xDB);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0xC3);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xE7);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0xFF);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);
			break;

		case '1':
			Seletor_Column(0XFF);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);

			Seletor_Column(0xD3);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0x81);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xD3);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0xFF);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);
			break;

		case '2':
			Seletor_Column(0XFF);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);

			Seletor_Column(0xD3);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0x87);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0x8F);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0x8F);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0x8F);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xD3);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0xFF);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);
			break;

		case '3':
			Seletor_Column(0XFF);
			Seletor_Line(0x01);
			HAL_Delay(delay_time);

			Seletor_Column(0xD7);
			Seletor_Line(0x02);
			HAL_Delay(delay_time);

			Seletor_Column(0x87);
			Seletor_Line(0x04);
			HAL_Delay(delay_time);

			Seletor_Column(0x8F);
			Seletor_Line(0x08);
			HAL_Delay(delay_time);

			Seletor_Column(0x8F);
			Seletor_Line(0x10);
			HAL_Delay(delay_time);

			Seletor_Column(0x87);
			Seletor_Line(0x20);
			HAL_Delay(delay_time);

			Seletor_Column(0xD7);
			Seletor_Line(0x40);
			HAL_Delay(delay_time);

			Seletor_Column(0xFF);
			Seletor_Line(0x80);
			HAL_Delay(delay_time);
			break;
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
